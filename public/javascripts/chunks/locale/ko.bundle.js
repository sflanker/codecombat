/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:bbc04371cecf28ab2930, name:locale/ko, filebase:ko.bundle.js, query:, file:javascripts/chunks/locale/ko.bundle.js */
webpackJsonp([43],{

/***/ 242:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"한국어\",\n  englishDescription: \"Korean\",\n  translation: {\n    nav: {\n      map: \"맵\",\n      play: \"레벨\",\n      community: \"커뮤니티\",\n      courses: \"코스\",\n      blog: \"블로그\",\n      forum: \"포럼\",\n      account: \"계정\",\n      my_account: \"내 계정\",\n      profile: \"프로필\",\n      home: \"홈\",\n      contribute: \"참여하기\",\n      legal: \"법\",\n      about: \"소개\",\n      contact: \"문의\",\n      twitter_follow: \"팔로우\",\n      my_classrooms: \"나의 클래스\",\n      my_courses: \"나의 코스\",\n      careers: \"채용\",\n      facebook: \"페이스북\",\n      twitter: \"트위터\",\n      create_a_class: \"클래스 생성\",\n      open_source: \"오픈 소스 (GitHub)\",\n      faqs: \"자주묻는질문\",\n      help_pref: \"도움이 필요하신가요? 이메일을 보내주세요.\",\n      help_suff: \"저희가 도와드리겠습니다.\"\n    },\n    modal: {\n      close: \"닫기\",\n      okay: \"확인\"\n    },\n    not_found: {\n      page_not_found: \"페이지를 찾을 수 없습니다\"\n    },\n    diplomat_suggestion: {\n      title: \"코드 컴뱃 번역을 도와주세요!\",\n      sub_heading: \"우리는 당신의 언어 능력이 필요합니다.\",\n      pitch_body: \"우리는 영어로 코드 컴뱃을 개발하기 시작했지만, 이미 전세계의 유저들이 코드 컴뱃을 이용하고 있습니다. 그 중 많은 사람들이 한국어로 플레이하기를 바랍니다. 혹시 당신이 영어/한국어에 모두 능숙하다면, Diplomat으로 코드 컴뱃에 참여해서 모든 레벨 뿐만 아니라 웹사이트를 한국어로 번역할 수 있습니다.\",\n      missing_translations: \"우리가 모든 내용을 한국어로 번역할때까지 기본은 영어로 제공됩니다.\",\n      learn_more: \"외교관에 대해서 좀 더 자세히 알아보기\",\n      subscribe_as_diplomat: \"외교관을 위한 정기 구독\"\n    },\n    play: {\n      play_as: \"같이 플레이\",\n      compete: \"경쟁!\",\n      spectate: \"관중모드\",\n      players: \"플레이어\",\n      hours_played: \"플레이한 시간\",\n      items: \"아이템\",\n      unlock: \"해제\",\n      confirm: \"확인\",\n      owned: \"소지함\",\n      locked: \"잠김\",\n      available: \"가능\",\n      skills_granted: \"부여된 스킬\",\n      heroes: \"영웅들\",\n      achievements: \"성취한 목표\",\n      settings: \"설정\",\n      poll: \"투표\",\n      next: \"다음\",\n      change_hero: \"영웅 교체\",\n      buy_gems: \"젬 구매\",\n      subscribers_only: \"가입을 해야 합니다.\",\n      subscribe_unlock: \"해제하려면 가입을 해 주세요.\",\n      anonymous: \"이름없는 플레이어\",\n      level_difficulty: \"난이도: \",\n      awaiting_levels_adventurer_prefix: \"매주 마다 새로운 레벨이 생깁니다.\",\n      awaiting_levels_adventurer: \"모험자로 등록 하세요!\",\n      awaiting_levels_adventurer_suffix: \"새로운 레벨을 가장 먼저 체험하세요!\",\n      adjust_volume: \"소리 조절\",\n      campaign_multiplayer: \"멀티 플레이어 전투장\",\n      campaign_multiplayer_description: \"... 이곳에서 당신은 다른 인간 플레이어들과 직접 결투할 수 있습니다.\"\n    },\n    share_progress_modal: {\n      blurb: \"당신은 큰 진전을 보이고 있습니다! 당신이 코드컴뱃으로 얼마나 많이 배웠는지 부모님께 자랑하십시오.\",\n      email_invalid: \"이메일 주소가 올바르지 않습니다.\",\n      form_blurb: \"아래에 부모님의 이메일 주소를 입력하고 우리는 그것들을 보여줍니다!\",\n      form_label: \"이메일\",\n      placeholder: \"이메일\",\n      title: \"우수한, 초심자\"\n    },\n    login: {\n      sign_up: \"계정 생성\",\n      email_or_username: \"이메일 또는 사용자 이름\",\n      log_in: \"로그인\",\n      logging_in: \"로그인 중\",\n      log_out: \"로그아웃\",\n      forgot_password: \"비밀번호를 잊으셨나요?\",\n      finishing: \"완료중..\",\n      sign_in_with_facebook: \"페이스북으로 로그인\",\n      sign_in_with_gplus: \"G+로 로그인\",\n      signup_switch: \"새로운 계정을 만드세요.\"\n    },\n    signup: {\n      complete_subscription: \"구독 완료\",\n      create_student_header: \"학생 계정 생성\",\n      create_teacher_header: \"교사 계정 생성\",\n      create_individual_header: \"개인 계정 생성\",\n      email_announcements: \"안내 사항을 메일로 받겠습니다\",\n      sign_in_to_continue: \"계속하려면 로그인하거나 계정을 만드십시오.\",\n      creating: \"계정을 생성 중입니다...\",\n      sign_up: \"계정 생성\",\n      log_in: \"비밀번호로 로그인\",\n      required: \"진행하기 전에 로그인이 필요합니다.\",\n      login_switch: \"이미 계정이 있으신가요?\",\n      optional: \"옵션\"\n    },\n    recover: {\n      recover_account_title: \"계정 복구\",\n      send_password: \"복구 비밀번호 전송\",\n      recovery_sent: \"메일 전송 완료\"\n    },\n    items: {\n      primary: \"주 장비\",\n      secondary: \"보조 장비\",\n      armor: \"갑옷\",\n      accessories: \"액세서리\",\n      misc: \"잡동사니\",\n      books: \"책\"\n    },\n    common: {\n      back: \"뒤로가기\",\n      \"continue\": \"계속\",\n      next: \"다음\",\n      default_code: \"기본 코드\",\n      loading: \"로딩중입니다...\",\n      solution: \"해결책\",\n      saving: \"저장중입니다...\",\n      sending: \"보내는 중입니다...\",\n      send: \"전송\",\n      sent: \"전송됨\",\n      cancel: \"취소\",\n      save: \"저장\",\n      publish: \"내보내기\",\n      create: \"생성\",\n      fork: \"포크\",\n      play: \"시작\",\n      retry: \"재시도\",\n      actions: \"행동\",\n      info: \"정보\",\n      help: \"도움말\",\n      watch: \"보기\",\n      unwatch: \"보기 해제\",\n      submit_patch: \"패치 제출\",\n      submit_changes: \"변경사항 제출\",\n      save_changes: \"변경사항 저장\",\n      required_field: \"필수\"\n    },\n    general: {\n      and: \"그리고\",\n      name: \"이름\",\n      date: \"날짜\",\n      body: \"구성\",\n      version: \"버전\",\n      pending: \"적용중\",\n      accepted: \"적용됨\",\n      rejected: \"거부됨\",\n      withdrawn: \"취소됨\",\n      accept: \"승인\",\n      reject: \"보류\",\n      withdraw: \"철수\",\n      submitter: \"제출자\",\n      submitted: \"제출됨\",\n      commit_msg: \"커밋 메세지\",\n      version_history: \"버전 히스토리\",\n      version_history_for: \"버전 히스토리 : \",\n      select_changes: \"차이를 보기위해 두 가지 사항을 변경하도록 선택합니다.\",\n      undo_prefix: \"되돌리기\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"다시하기\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"현재 수준의 미리보기 재생\",\n      result: \"결과\",\n      results: \"결과들\",\n      description: \"설명\",\n      or: \"또한\",\n      subject: \"제목\",\n      email: \"이메일\",\n      password: \"비밀번호\",\n      confirm_password: \"비밀번호 확인\",\n      message: \"메시지\",\n      code: \"코드\",\n      ladder: \"레더\",\n      when: \"언제\",\n      opponent: \"상대\",\n      rank: \"랭크\",\n      score: \"점수\",\n      win: \"승\",\n      loss: \"패\",\n      tie: \"무승부\",\n      easy: \"초급\",\n      medium: \"중급\",\n      hard: \"상급\",\n      player: \"플레이어\",\n      player_level: \"플레이어 레벨\",\n      warrior: \"전사\",\n      ranger: \"레인저\",\n      wizard: \"마법사\",\n      first_name: \"이름\",\n      last_name: \"성\",\n      username: \"사용자 이름\",\n      close_window: \"창 닫기\",\n      learn_more: \"더 배우기\"\n    },\n    units: {\n      second: \"초\",\n      seconds: \"초\",\n      sec: \"초\",\n      minute: \"분\",\n      minutes: \"분\",\n      hour: \"시간\",\n      hours: \"시간\",\n      day: \"일\",\n      days: \"일\",\n      week: \"주\",\n      weeks: \"주\",\n      month: \"개월\",\n      months: \"개월\",\n      year: \"년\",\n      years: \"년\"\n    },\n    play_level: {\n      back_to_map: \"맵으로 돌아가기\",\n      level_complete: \"수행 완료\",\n      completed_level: \"완료된 레벨:\",\n      course: \"코스:\",\n      done: \"완료\",\n      next_level: \"다음 레벨\",\n      next_game: \"다음 게임\",\n      languages: \"언어\",\n      programming_language: \"프로그래밍 언어\",\n      show_menu: \"게임 매뉴 보이기\",\n      home: \"홈\",\n      level: \"레벨\",\n      skip: \"넘어가기\",\n      game_menu: \"게임 메뉴\",\n      restart: \"재시작\",\n      goals: \"목표들\",\n      goal: \"목표\",\n      running: \"실행중...\",\n      success: \"성공!\",\n      incomplete: \"목표 미완료\",\n      timed_out: \"제한 시간 초과\",\n      failing: \"다시 한번 더 도전해보세요.\",\n      reload: \"새로고침\",\n      reload_title: \"모든 코드가 다시 로딩 되었나요?\",\n      reload_really: \"모든 레벨 초기화합니다. 확실한가요?\",\n      reload_confirm: \"모두 초기화\",\n      victory: \"승리\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" 완료\",\n      victory_sign_up: \"진행사항 저장을 위해 등록하세요\",\n      victory_sign_up_poke: \"코드를 저장하고 싶으세요? 지금 등록하세요!\",\n      victory_rate_the_level: \"이번 레벨 평가: \",\n      victory_return_to_ladder: \"레더로 돌아가기\",\n      victory_saving_progress: \"저장하기\",\n      victory_go_home: \"홈으로\",\n      victory_review: \"리뷰를 남겨주세요\",\n      victory_review_placeholder: \"어떤 레벨입니까?\",\n      victory_hour_of_code_done: \"정말 종료합니까?\",\n      victory_hour_of_code_done_yes: \"네 내 Hour of Code™ 완료했습니다!\",\n      victory_experience_gained: \"획득한 경험치\",\n      victory_gems_gained: \"획득한 젬\",\n      victory_new_item: \"새로운 아이템\",\n      victory_viking_code_school: \"놀랍습니다, 당신은 그냥 이기기 힘든 수준이었습니다! 이미 소프트웨어 개발자가 아닌 경우, 당신은 비이킹 코드 학교에서 빠르게 이해할것입니다, 당신이 다음 레벨에서 자신의 능력을 14주 동안 전문 웹 개발자가 될 수있는 곳입니다.\",\n      victory_become_a_viking: \"바이킹이 되세요\",\n      tome_cast_button_run: \"실행\",\n      tome_cast_button_running: \"실행중\",\n      tome_cast_button_ran: \"실행됨\",\n      tome_submit_button: \"적용\",\n      tome_reload_method: \"이 방법에 대한 원래의 코드를 다시불러오기\",\n      tome_available_spells: \"사용 가능한 마법\",\n      tome_your_skills: \"당신의 스킬\",\n      hints: \"힌트\",\n      code_saved: \"코드가 저장됨\",\n      skip_tutorial: \"넘기기 (esc)\",\n      keyboard_shortcuts: \"단축키\",\n      loading_start: \"로딩 시작\",\n      problem_alert_title: \"코드를 수정하세요\",\n      time_current: \"현재:\",\n      time_total: \"최대:\",\n      time_goto: \"가기:\",\n      non_user_code_problem_title: \"레벨을 로드 할 수 없습니다\",\n      infinite_loop_title: \"무한 루프 감지\",\n      infinite_loop_description: \"세계를 구축하는 초기 코드는 결코 실행이 완료되지 않습니다. 아마도 하나의 정말 느리거나 또는 무한 루프가 있습니다. 혹은 버그일수있습니다. 당신은 다시 이 코드를 실행하려고하거나 기본 상태로 코드를 재설정 할 수 있습니다. 그게 해결되지 않으면, 저희에게 알려 주시기 바랍니다.\",\n      check_dev_console: \"또한 잘못 갈 수를 알기 위해 개발자 콘솔을 열 수 있습니다.\",\n      check_dev_console_link: \"(명령어)\",\n      infinite_loop_try_again: \"다시 시도해보세요.\",\n      infinite_loop_reset_level: \"레벨 리셋\",\n      infinite_loop_comment_out: \"내 코드를 일시적 주석처리하기\",\n      tip_toggle_play: \"Ctrl+P로 실행을 계속하거나 멈출수 있어요\",\n      tip_scrub_shortcut: \"Ctrl+[, Ctrl+] 를 이용해 실행 속도를 빠르게 할 수 있어요\",\n      tip_guide_exists: \"화면 상단의 가이드를 클릭해보세요. 유용한 정보를 얻을 수 있습니다.\",\n      tip_open_source: \"코드 컴뱃은 100% 오픈 소스 기반입니다!\",\n      tip_tell_friends: \"코드 컴뱃을 즐기셨나요? 친구에게 알려주십시오\",\n      tip_beta_launch: \"코드 컴뱃은 2013년 10월에 베타 서비스를 출시했습니다.\",\n      tip_think_solution: \"해결 방법을 고민해보세요, 문제를 고민하지 말구요\",\n      tip_theory_practice: \"이론적으로, 이론과 실제 사이의 차이가 없습니다. 그러나 연습은, 실전입니다 - 요기 베라\",\n      tip_error_free: \"오류이거나-자유로운 프로그램을 작성하는 두가지 길이 있습니다만; 오직 세번째의 한 작업입니다. - 엘랜 펄리스\",\n      tip_debugging_program: \"만약 디버깅이 버그를 잡는 작업이라면, 프로그래밍은 반드시 바른 진행이여야 할것입니다. - Edsger W. Dijkstra\",\n      tip_forums: \"포럼을 통해서 우리를 어떻게 생각하는지 말해요!\",\n      tip_baby_coders: \"앞으로는, 아기도 얼음마법사가 될 것 입니다.\",\n      tip_morale_improves: \"사기가 향상 될 때까지 로딩은 계속됩니다.\",\n      tip_all_species: \"우리는 모든 생물이 동등하게 프로그래밍을 배울 기회가 있어야 한다고 생각합니다.\",\n      tip_reticulating: \"그물모양의 돌기.\",\n      tip_harry: \"한 마법사, \",\n      tip_great_responsibility: \"좋은 코딩 기술은 큰 디버그 책임을 몰고옵니다.\",\n      tip_munchkin: \"만약 당신이 야채를 먹지않는다면, 난쟁이가 당신이 자고 있을때 찾아갑니다.\",\n      tip_binary: \"오직 사람들이 있는 세계는 10가지이다: 이진을 이해하는 사람들과 그렇지 않은 사람들.\",\n      tip_commitment_yoda: \"프로그래머가 깊은 헌신이 있어야한다는것은, 가장 심각한것이다. ~ 요다\",\n      tip_no_try: \"하든가 하지 말든가. 시도같은 건 없어. - 요다\",\n      tip_patience: \"반드시 인내심을 가져야한단다, 어린 파다완. - 요다\",\n      tip_documented_bug: \"문서화 된 버그는 버그가 아닙니다 ; 그것은 기능입니다.\",\n      tip_impossible: \"성공하기 전까진 불가능해 보이는 법이죠. - Nelson Mandela\",\n      tip_talk_is_cheap: \"떠드는 건 가치가 없어요. 코드를 보여줘봐요. - Linus Torvalds\",\n      tip_first_language: \"만약 당신이 배울 수있는 가장 최악의 일은 첫 번째 프로그래밍 언어을 배우는것입니다. - 엘랜 케이\",\n      tip_hardware_problem: \"Q: 많은 프로그래머는 전구를 가는데 얼마나 걸립니까?  A: 아니오, 이것은 하드웨어 문제입니다.\",\n      tip_hofstadters_law: \"호프스태터 의 법칙: 당신은 항상 예상보다 오래 걸립니다, 계정 호프스태터의 법칙을 고려하더라도 .\",\n      tip_premature_optimization: \"초기의 최적화는 모든 악의 뿌리입니다 . - 도날드 크누스\",\n      tip_brute_force: \"의심할때, 무력을 사용하게 됩니다. - 켄 톰프손\",\n      tip_extrapolation: \"사람은 두 가지 종류가 있습니다: 불완전한 데이터으로부터 유추할 수있는가...\",\n      tip_superpower: \"코딩은 우리가 강대국에 있는 가장 가까운 것입니다.\",\n      tip_control_destiny: \"진짜 오픈 소스는, 당신이 우리의 운명을 올바로 조작할 수 있습니다. - 리눅스 토발츠\",\n      tip_no_code: \"코드가 없는것보다 빠른것은 없습니다.\",\n      tip_code_never_lies: \"코드는 절대로 거짓말을 하지 않는다. 주석은 가끔 하지만.  — Ron Jeffries\",\n      tip_reusable_software: \"소프트웨어를 재사용하기전에 먼저 사용할 수 있습니다.\",\n      tip_optimization_operator: \"모든 언어는 최적화된 운영을 합니다. 대부분의 언어가 운영 ‘//’\",\n      tip_lines_of_code: \"코드 라인에 의해 프로그램의 진행 상황을 측정하는 것은 중량 항공기의 건축 진행 상황을 측정하는 것과 같다. — 빌 게이츠\",\n      tip_source_code: \"나는 세계를 바꾸고싶어도 그들은 나에게 소스코드를 주지 않습니다\",\n      tip_javascript_java: \"자바는 자바스크립트이고 차(카)는 카펫입니다. - 크리스 헤일만\",\n      tip_move_forward: \"당신이 무엇이든간에 , 계속 전진하십시오. - 마틴 러터킹 주니어.\",\n      tip_google: \"문제가 너무 어렵다구요? 구글로 검색해보세요!\",\n      tip_adding_evil: \"악마의 핀치를 추가하는중.\",\n      tip_hate_computers: \"즉, 그들은 컴퓨터를 싫어한다고 생각하는 사람들이며. 그들이 정말로 싫어 하는 것은 형편없는 프로그래머 입니다 . - 래리 리븐\",\n      tip_open_source_contribute: \"코드컴뱃을 향상하는데 도와주십시오!\",\n      tip_recurse: \"인간은 반복하고,신은 다시 돌아온다 - L. 피터 대치\",\n      tip_free_your_mind: \"모두 가자고할때 생기는 새로움으로인한. 두려움, 의심과 불신. 자유로운 생각을 가져라. - 모페어스\",\n      tip_strong_opponents: \"심지어 강한 상대의 항상 약점을 가지고있다. - 이타치 우치하\",\n      tip_paper_and_pen: \"코딩을 하기전에, 당신은 항상 종이와 펜으로 계획을 지니고 있어야합니다.\",\n      tip_solve_then_write: \"먼저, 문제를 해결하세요. 그러고, 코드를 쓰는겁니다. - 존 즌슨\"\n    },\n    game_menu: {\n      inventory_tab: \"인벤토리\",\n      save_load_tab: \"저장하기/불러오기\",\n      options_tab: \"옵션\",\n      guide_tab: \"가이드\",\n      guide_video_tutorial: \"영상 튜토리얼\",\n      guide_tips: \"팁들\",\n      multiplayer_tab: \"멀티 플레이\",\n      auth_tab: \"가입하기\",\n      inventory_caption: \"장비 장착\",\n      choose_hero_caption: \"영웅 및 언어 선택 \",\n      options_caption: \"설정들을 바꾸기\",\n      guide_caption: \"문서들과 팁들\",\n      multiplayer_caption: \"친구들과 플레이 하세요!\",\n      auth_caption: \"진행사항을 저장하세요\"\n    },\n    leaderboard: {\n      view_other_solutions: \"리더보드 보기\",\n      scores: \"점수\",\n      top_players: \"상위 플레이어\",\n      day: \"오늘\",\n      week: \"이번 주\",\n      all: \"모든-시간\",\n      latest: \"최근\",\n      time: \"시간\",\n      damage_taken: \"데미지 정도\",\n      damage_dealt: \"죽음을 맞은 데미지\",\n      difficulty: \"난이도\",\n      gold_collected: \"수집된 골드\"\n    },\n    inventory: {\n      equipped_item: \"장착됨\",\n      required_purchase_title: \"구매 필요\",\n      available_item: \"사용 가능\",\n      restricted_title: \"사용 불가\",\n      should_equip: \"(장착하려면 더블클릭)\",\n      equipped: \"(장착됨)\",\n      locked: \"(잠김)\",\n      restricted: \"(이 레벨에서는 사용불가)\",\n      equip: \"장착\",\n      unequip: \"해제\"\n    },\n    buy_gems: {\n      few_gems: \"gem 몇개\",\n      pile_gems: \"gem 묶음\",\n      chest_gems: \"gem 상자\",\n      purchasing: \"구매중...\",\n      declined: \"귀하의 카드가 거부되었습니다\",\n      retrying: \"서버에러, 다시 시도하세요.\",\n      prompt_title: \"gem 부족\",\n      prompt_body: \"gem이 더 필요하신가요?\",\n      prompt_button: \"샵 앤터\",\n      recovered: \"gem 구매후 브라우져를 새로고침 하세요.\",\n      price: \"x{{gems}} / 한달\",\n      buy_premium: \"프리미엄 구입\",\n      purchase: \"구매하기\",\n      purchased: \"구매함\"\n    },\n    earn_gems: {\n      prompt_title: \"젬이 충분하지 않습니다.\",\n      prompt_body: \"더 얻기 위해 계속 플레이 하세요.\"\n    },\n    subscribe: {\n      comparison_blurb: \"코드컴뱃을 구독하셔서 당신의 스킬을 날카롭게하십시오!\",\n      must_be_logged: \"로그인부터 먼저 하셔야합니다.메뉴에서 계정을 만들거나 로그인해주세요.\",\n      subscribe_title: \"구독\",\n      unsubscribe: \"구독 해제\",\n      confirm_unsubscribe: \"구독 해제 확인\",\n      never_mind: \"결코, 난 여전히 당신을 사랑합니다\",\n      thank_you_months_prefix: \"우리의 마지막까지 지원해주셔서 감사합니다.\",\n      thank_you_months_suffix: \"매 달.\",\n      thank_you: \"CodeCombat을 도와주셔서 감사합니다.\",\n      sorry_to_see_you_go: \"당신이 떠나서 미안합니다! 우리가 잘 할수 있는 방법을 알려 주시기 바랍니다.\",\n      unsubscribe_feedback_placeholder: \"어, 우리는 무슨 짓을 한거죠?\",\n      stripe_description: \"월간 구독\",\n      buy_now: \"지금 \",\n      subscription_required_to_play: \"당신은 아마 이 레벨을 플레이하려면 구독이 필요합니다.\",\n      unlock_help_videos: \"모든 비디오 튜토리얼의 잠금을 해제하려면 구독 .\",\n      personal_sub: \"개인 구독\",\n      loading_info: \"구독 정보를 불러오는중...\",\n      managed_by: \"에 의해 관리됩니다\",\n      will_be_cancelled: \"에 취소됩니다\",\n      currently_free: \"현재 무료 구독입니다\",\n      currently_free_until: \"현재 가입된 상태입니다\",\n      was_free_until: \"당신은 현재까지 무료로 가입 했습니다\",\n      managed_subs: \"관리 구독\",\n      subscribing: \"구독중...\",\n      current_recipients: \"현재 받는 사람\",\n      unsubscribing: \"구독해제중\",\n      subscribe_prepaid: \"선불 코드를 사용하여 구독 클릭\",\n      using_prepaid: \"매달 구독 선불 코드를 사용\"\n    },\n    choose_hero: {\n      choose_hero: \"영웅을 선택하세요\",\n      programming_language: \"프로그래밍 언어\",\n      programming_language_description: \"어떤 프로그래밍 언어를 사용하실건가요?\",\n      \"default\": \"기본\",\n      experimental: \"고급\",\n      python_blurb: \"간단하지만 강력합니다.\",\n      javascript_blurb: \"웹을 위한 언어.\",\n      coffeescript_blurb: \"향상된 자바스크립트 문법.\",\n      lua_blurb: \"게임 스크립팅 언어\",\n      status: \"상태\",\n      weapons: \"무기\",\n      weapons_warrior: \"검 - 짧은 거리, 마법 불가\",\n      weapons_ranger: \"화살, 총 - 긴 거리, 마법 불가\",\n      weapons_wizard: \"마법봉, 지팡이 - 긴 거리, 마법 가능\",\n      attack: \"공격력\",\n      health: \"체력\",\n      speed: \"속도\",\n      regeneration: \"리젠\",\n      range: \"거리\",\n      blocks: \"블럭\",\n      backstab: \"백스탭\",\n      skills: \"스킬\",\n      attack_1: \"타격\",\n      attack_2: \"정렬됨\",\n      attack_3: \"무기 피해.\",\n      health_1: \"획득\",\n      health_2: \"정렬됨\",\n      health_3: \"갑옷 체력.\",\n      speed_1: \"에 이동\",\n      speed_2: \"초당 미터.\",\n      available_for_purchase: \"구매 가능\",\n      level_to_unlock: \"레벨 해금:\",\n      restricted_to_certain_heroes: \"특정 영웅만이 이 레벨을 플레이할 수 있습니다.\"\n    },\n    skill_docs: {\n      method: \"메소드\",\n      number: \"숫자\",\n      array: \"배열\",\n      object: \"객체\",\n      string: \"문자열\",\n      writable: \"쓰기\",\n      read_only: \"리드-온리\",\n      action: \"행동\",\n      spell: \"마법\",\n      action_name: \"이름\",\n      action_cooldown: \"받는 상태\",\n      action_specific_cooldown: \"쿨다운\",\n      action_damage: \"데미지\",\n      action_range: \"사거리\",\n      action_radius: \"반지름\",\n      action_duration: \"지속\",\n      example: \"예제\",\n      ex: \"예시\",\n      current_value: \"현재 값\",\n      default_value: \"기본 값\",\n      parameters: \"매개 변수\",\n      returns: \"뒤로가기\",\n      granted_by: \"부여\"\n    },\n    save_load: {\n      granularity_saved_games: \"저장됨\",\n      granularity_change_history: \"기록\"\n    },\n    options: {\n      general_options: \"일반 옵션\",\n      volume_label: \"볼륨\",\n      music_label: \"음악\",\n      music_description: \"배경음악 ON/OFF\",\n      editor_config_title: \"에디터 설정\",\n      editor_config_livecompletion_label: \"자동완성 활성화\",\n      editor_config_livecompletion_description: \"입력하는 동안 자동완성 기능을 사용합니다.\",\n      editor_config_invisibles_label: \"투명 설정\",\n      editor_config_invisibles_description: \"스페이스, 탭 설정\",\n      editor_config_indentguides_label: \"들여쓰기 가이드 보기\",\n      editor_config_indentguides_description: \"들여쓰기 보조용 세로줄 표시하기.\",\n      editor_config_behaviors_label: \"자동 기능\",\n      editor_config_behaviors_description: \"괄호, 인용부호, 따옴표 자동 완성.\"\n    },\n    about: {\n      main_title: \"프로그래밍을 배우고 싶다면 많은 코드를 작성해 보아야 합니다.\",\n      main_description: \"CodeCombat에서 우리의 임무는 당신이 미소를 짓고 있는지 확인하는 것입니다.\",\n      mission_link: \"미션\",\n      team_link: \"팀\",\n      story_link: \"스토리\",\n      nick_title: \"프로그래머\",\n      matt_title: \"프로그래머\",\n      cat_title: \"게임 디자이너\",\n      scott_title: \"프로그래머\",\n      maka_title: \"고객 옹호자\",\n      robin_title: \"UX 디자인 & 연구원\",\n      retrostyle_title: \"일러스트레이션\",\n      retrostyle_blurb: \"레트로스타일 게임\"\n    },\n    versions: {\n      save_version_title: \"새로운 버전을 저장합니다\",\n      new_major_version: \"신규 버전\",\n      submitting_patch: \"패치 적용중...\",\n      cla_prefix: \"변경사항을 저장하기 위해서는, 먼저 계약사항에 동의 하셔야 합니다.\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"동의 합니다\",\n      owner_approve: \"변경 사항이 표시 되기 전에 소유자가 이를 승인 해야합니다.\"\n    },\n    contact: {\n      contact_us: \"코드컴뱃에 전할 말\",\n      welcome: \"언제든 의견을 보내주세요. 이 양식을 이메일에 사용해 주세요!\",\n      forum_prefix: \"공개적으로 논의할 사항이라면 우리 포럼에서 해주세요 : \",\n      forum_page: \"포럼\",\n      forum_suffix: \" 대신에.\",\n      faq_prefix: \"도 있습니다\",\n      faq: \"자주 묻는 질문\",\n      subscribe_prefix: \"도움이 필요한 경우 먼저 수준을 파악 하시기 바랍니다 \",\n      subscribe: \"코드컴뱃 구독을 구매\",\n      subscribe_suffix: \"우리는 코드와 함께 당신을 도울 수있을 것입니다.\",\n      subscriber_support: \"당신이 코드컴뱃 가입자에 있기 때문에,당신의 이메일은 우리의 우선 순위 지원을 받게됩니다.\",\n      screenshot_included: \"스크린샷 첨부됨.\",\n      where_reply: \"우리는 어디에서 대답 해야합니까?\",\n      send: \"의견 보내기\"\n    },\n    account_settings: {\n      title: \"계정 설정\",\n      not_logged_in: \"로그인하시거나 계정을 생성하세요.\",\n      me_tab: \"나\",\n      picture_tab: \"사진\",\n      delete_account_tab: \"계정 삭제\",\n      wrong_email: \"틀린 이메일\",\n      wrong_password: \"틀린 비밀번호\",\n      delete_this_account: \"영구적으로 계정 삭제\",\n      reset_progress_tab: \"모든 진행을 재설정\",\n      reset_your_progress: \"모든 진행 상황을 지우고 다시 시작\",\n      god_mode: \"하느님 모드\",\n      emails_tab: \"이메일\",\n      admin: \"관리자\",\n      manage_subscription: \"구독을 관리 하려면 여기를 클릭하십시오.\",\n      new_password: \"새 비밀번호\",\n      new_password_verify: \"확인(다시한번 입력해주세요)\",\n      type_in_email: \"계정 삭제를 확인하려면 이메일을 입력합니다.\",\n      type_in_email_progress: \"진행을 삭제하려면 확인할 이메일을 입력합니다.\",\n      type_in_password: \"또한 , 사용자의 암호를 입력합니다.\",\n      email_subscriptions: \"이메일 구독\",\n      email_subscriptions_none: \"이메일 구독 안 함\",\n      email_announcements: \"공지사항\",\n      email_announcements_description: \"코드 컴뱃의 개발 및 진행 상황을 이메일로 구독하세요\",\n      email_notifications: \"알람\",\n      email_notifications_summary: \"당신의 코드 컴뱃 활동과 관련된 자동 알림 메일을 설정할 수 있습니다.\",\n      email_any_notes: \"모든 알림 받기\",\n      email_any_notes_description: \"모든 알림 메일 받지 않기\",\n      email_news: \"뉴스\",\n      email_recruit_notes: \"구인 정보\",\n      email_recruit_notes_description: \"정말 실력이 좋으시다고 판단되면, 보다 좋은 구직 정보와 관련하여 연락드릴 수도 있습니다.\",\n      contributor_emails: \"조력자들 이메일\",\n      contribute_prefix: \"우리는 언제나 당신의 참여를 환영 합니다 : \",\n      contribute_page: \"참여하기 페이지\",\n      contribute_suffix: \"자세한 사항이 설명되어 있습니다.\",\n      email_toggle: \"모두 변경\",\n      error_saving: \"오류 저장\",\n      saved: \"변경사항 저장 완료\",\n      password_mismatch: \"비밀번호가 일치하지 않습니다.\",\n      password_repeat: \"비밀번호를 한번 더 입력해 주세요.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"단축키\",\n      space: \"스페이스\",\n      enter: \"엔터\",\n      press_enter: \"엔터를 누르세요\",\n      escape: \"Esc\",\n      shift: \"Shift\",\n      run_code: \"현재 코드 실행\",\n      run_real_time: \"실시간 코드 실행\",\n      continue_script: \"이미 끝난 현재 스크립트를 진행합니다.\",\n      skip_scripts: \"모든 스킬할 스크립트를 지납니다.\",\n      toggle_playback: \"플레이/일시중지 전환.\",\n      scrub_playback: \"다시 스크럽을 통해 시간을 전달합니다.\",\n      single_scrub_playback: \"다시 스크럽을 통해 단일 프레임으로 시간을 전달합니다.\",\n      scrub_execution: \"현재 주문하는것을 통해 스크럽합니다.\",\n      toggle_debug: \"디버그 화면 전환.\",\n      toggle_grid: \"디버그 오버레이 전환\",\n      toggle_pathfinding: \"길 찾아주는 오버레이 전환.\",\n      beautify: \"서식을 표준화하여 코드를 아름답게합니다.\",\n      maximize_editor: \"코드 에디터 최대/최소.\"\n    },\n    community: {\n      main_title: \"코드 컴뱃 커뮤니티\",\n      introduction: \"아래에서 당신이 참여할 수있는 방법을 확인하고 가장 재미있어보이는것을 결정합니다. 우리는 당신과 함께 협력하는것을 기대합니다!\",\n      level_editor_prefix: \"코드컴뱃을 사용\",\n      level_editor_suffix: \"만들거나 수정하는 레벨입니다. 사용자들은 자신의 학급, 친구, 해커 톤, 학생, 형제 자매에 대한 수준을 만들어왔습니다. 만약 새로운 레벨 소리를 새로만들겠다면 우리중 하나를 포크해서 시작해도됩니다!\",\n      thang_editor_prefix: \"우리는 게임 내의 'thangs'을 유닛이라고 부릅니다.\",\n      thang_editor_suffix: \" CodeCombat 소스 작품을 수정하여 사용합니다.유닛들이 발사체를 던지는것을 허용하며, 애니메이션의 방향을 변경하고, 유닛의 타격지점을 변경하거나, 우리의 벡터 스프라이트를 업로드 할 수도 있습니다.\",\n      article_editor_prefix: \"우리의 문서가 틀린것을 보았나요? 자신의 작품에 대한 몇가지 지침을 원하십니까? 체크아웃을 하거나\",\n      article_editor_suffix: \"코드컴뱃 플레이어를 도와 자신의 플레이 시간을 최대한 활용하게해주십시오.\",\n      find_us: \"이 사이트에서 우리를 찾기\",\n      social_github: \"GitHub에서 우리의 모든 코드를 체크아웃하기\",\n      social_blog: \"Sett의 코드컴뱃 블로그 읽기\",\n      social_discource: \"토론 포럼에서 토론에 참여하기\",\n      social_facebook: \"Facebook에서 코드컴뱃 좋아요하기\",\n      social_twitter: \"Twitter에서 코드컴뱃 팔로우하기\",\n      social_gplus: \"Google+로 코드컴뱃 참여하기\",\n      contribute_to_the_project: \"프로젝트에 기여하기\"\n    },\n    clans: {\n      clan: \"클랜\",\n      clans: \"클랜들\",\n      new_name: \"새로운 클랜 이름\",\n      new_description: \"새로운 클랜 설명\",\n      make_private: \"클랜을 비공개로 만들기\",\n      subs_only: \"오직 구독자만\",\n      create_clan: \"새로운 클랜 만들기\",\n      private_preview: \"미리보기\",\n      private_clans: \"비공개 클랜\",\n      public_clans: \"공개 클랜들\",\n      my_clans: \"내가 속한 클랜\",\n      clan_name: \"클랜 이름\",\n      name: \"이름\",\n      chieftain: \"클랜장\",\n      edit_clan_name: \"클랜 이름 수정\",\n      edit_clan_description: \"클랜 설명 수정\",\n      edit_name: \"이름 변경\",\n      edit_description: \"설명 변경\",\n      \"private\": \"(비공개)\",\n      summary: \"요약\",\n      average_level: \"평균 레벨\",\n      average_achievements: \"평균 성취\",\n      delete_clan: \"클랜 삭제\",\n      leave_clan: \"클랜 탈퇴\",\n      join_clan: \"클랜 가입\",\n      invite_1: \"초대:\",\n      invite_2: \"*링크를 보내 클랜 초대하기\",\n      members: \"멤버들\",\n      progress: \"진행\",\n      not_started_1: \"시작되지않음\",\n      started_1: \"시작됨\",\n      complete_1: \"완료\",\n      exp_levels: \"레벨 확장\",\n      rem_hero: \"영웅 삭제\",\n      status: \"상태\",\n      complete_2: \"완료\",\n      started_2: \"시작됨\",\n      not_started_2: \"시작되지않음\",\n      view_solution: \"해결책을 보려면 클릭.\",\n      view_attempt: \"시도를 보려면 클릭.\",\n      latest_achievement: \"최신 도전과제\",\n      playtime: \"플레이타임\",\n      last_played: \"마지막으로 플레이한\",\n      leagues_explanation: \"이러한 멀티 분야인 경우에는 다른 클랜들에 대한 리그에서 플레이합니다.\",\n      track_concepts1: \"트랙 컨셉\",\n      track_concepts2a: \"학생으로부터 학습됨\",\n      track_concepts2b: \"맴버로부터 학습됨\",\n      track_concepts3a: \"각자 학생들로부터 트랙 레벨이 완료됨\",\n      track_concepts3b: \"각자 맴버들로부터 트랙 레벨이 완료됨\",\n      track_concepts4a: \"당신의 학생 보기'\",\n      track_concepts4b: \"당신의 맴버 보기'\",\n      track_concepts5: \"솔루션\",\n      track_concepts6a: \"이름이나 진행상황으로 정렬된 학생들\",\n      track_concepts6b: \"이름이나 진행상황으로 정렬된 맴버들\",\n      track_concepts7: \"초대장 필요\",\n      track_concepts8: \"으로 참여\",\n      private_require_sub: \"비공개 클랜을 만들거나 참여해서 구독하는것을 권장합니다.\"\n    },\n    courses: {\n      create_new_class: \"새로운 클래스 만들기\",\n      unnamed_class: \"이름없는 클래스\",\n      edit_settings1: \"클래스 세팅 수정\",\n      add_students: \"학생 추가\",\n      stats: \"통계\",\n      total_students: \"총 학생:\",\n      average_time: \"평균 수준의 플레이 시간:\",\n      total_time: \"총 플레이 시간:\"\n    },\n    classes: {\n      archmage_title: \"대마법사\",\n      archmage_title_description: \"(코더)\",\n      archmage_summary: \"당신이 만약 코딩 교육 게임에 관심있는 개발자라면, 코드컴뱃을 돕는 대마법사가 되어주십시오!\",\n      artisan_title: \"장인\",\n      artisan_title_description: \"(레벨 제작자)\",\n      artisan_summary: \"레벨을 만들거나 공유하여 당신과 친구들이 플레이합니다. 다른 프로그램을 가르치는 예술 장인이 되어보십시오!\",\n      adventurer_title: \"모험가\",\n      adventurer_title_description: \"(레벨 테스터)\",\n      adventurer_summary: \"우리의 새로운 레벨을 (심지어 구독자의 컨텐츠도) 일주일 먼저 무료로 얻을 수 있고 공개 릴리즈 전에 버그를 제보하여 우리를 도와주십시오.\",\n      scribe_title: \"작가\",\n      scribe_title_description: \"(기사 에디터)\",\n      scribe_summary: \"좋은 코드는 좋은 문서가 필요합니다. 쓰기, 편집하고, 전 세계의 수백만 플레이어에 의해 판독된 문서를 향상시킬 수 있습니다.\",\n      diplomat_title: \"외교관\",\n      diplomat_title_description: \"(번역가)\",\n      diplomat_summary: \"코드컴뱃은 Diplomats에 의해 45+ 언어로 지역화되었습니다. 우리를 도와 번역에 기여하십시오.\",\n      ambassador_title: \"대사\",\n      ambassador_title_description: \"(지원)\",\n      ambassador_summary: \"포럼 사용자를 관리하는것과 질문들에 대한 방향을 제공합니다. 우리의 대사는 세계에 코드컴뱃을 나타냅니다.\"\n    },\n    editor: {\n      main_title: \"코드 컴뱃 에디터들\",\n      article_title: \"기사 에디터들\",\n      thang_title: \"Thang 에디터\",\n      level_title: \"레벨 에디터\",\n      achievement_title: \"업적 에디터\",\n      poll_title: \"투표 에디터\",\n      back: \"뒤로\",\n      revert: \"되돌리기\",\n      revert_models: \"모델 되돌리기\",\n      pick_a_terrain: \"지형을 선택하세요.\",\n      dungeon: \"지하 감옥\",\n      indoor: \"내부\",\n      desert: \"사막\",\n      grassy: \"풀로 덮인\",\n      mountain: \"산\",\n      glacier: \"빙하\",\n      small: \"작게\",\n      large: \"크게\",\n      fork_title: \"새 버전 가져오기\",\n      fork_creating: \"포크 생성중...\",\n      generate_terrain: \"지형 생성\",\n      more: \"더 보기\",\n      wiki: \"위키\",\n      live_chat: \"실시간 채팅\",\n      thang_main: \"메인\",\n      thang_spritesheets: \"스프라이트시트\",\n      thang_colors: \"색갈\",\n      level_some_options: \"다른 옵션들?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"스크립트들\",\n      level_tab_components: \"요소들\",\n      level_tab_systems: \"시스템\",\n      level_tab_docs: \"문서\",\n      level_tab_thangs_title: \"현재 Thangs\",\n      level_tab_thangs_all: \"모두\",\n      level_tab_thangs_conditions: \"컨디션 시작\",\n      level_tab_thangs_add: \"Thangs 추가\",\n      level_tab_thangs_search: \"thangs 검색\",\n      add_components: \"구성요소 추가\",\n      component_configs: \"환경설정 구성요소\",\n      config_thang: \"thang을 설정하려면 더블클릭\",\n      \"delete\": \"삭제\",\n      duplicate: \"복제\",\n      stop_duplicate: \"복제 중지\",\n      rotate: \"회전\",\n      level_component_tab_title: \"현재 요소들\",\n      level_component_btn_new: \"새로운 요소들 생성\",\n      level_systems_tab_title: \"현재 시스템\",\n      level_systems_btn_new: \"새로운 시스템생성\",\n      level_systems_btn_add: \"새로운 시스템 추가\",\n      level_components_title: \"모든 Thang 들로 되돌아가기\",\n      level_components_type: \"타입\",\n      level_component_edit_title: \"요소 편집\",\n      level_component_config_schema: \"환경 설정\",\n      level_system_edit_title: \"시스템 편집\",\n      create_system_title: \"새로운 시스템 생성\",\n      new_component_title: \"새로운 요소들 생성\",\n      new_component_field_system: \"시스템\",\n      new_article_title: \"새로운 기사 작성\",\n      new_thang_title: \"새로운 Thang type 시작\",\n      new_level_title: \"새로운 레벨 시작\",\n      new_article_title_login: \"새 기사를 작성하시려면 로그인하세요.\",\n      new_level_title_login: \"새로운 레벨을 만드시려면 로그인하세요.\",\n      article_search_title: \"기사들은 여기에서 찾으세요\",\n      thang_search_title: \"Thang 타입들은 여기에서 찾으세요\",\n      level_search_title: \"레벨들은 여기에서 찾으세요\",\n      achievement_search_title: \"업적 검색\",\n      read_only_warning2: \"주의: 로그인하지 않으셨기 때문에 내용을 저장할 수 없습니다.\"\n    },\n    article: {\n      edit_btn_preview: \"미리보기\",\n      edit_article_title: \"기사 편집하기\"\n    },\n    ladder: {\n      my_matches: \"나의 경기들\",\n      simulate: \"시뮬레이션\",\n      simulation_explanation: \"시뮬레이션을 통해 더 빨리 랭킹 평가를 받을 수 있습니다.\",\n      simulate_games: \"시뮬레이션 실행!\",\n      games_simulated_by: \"내가 시뮬레이션한 게임 수:\",\n      games_simulated_for: \"다른 사람에 의해 시뮬레이션된 게임 수:\",\n      games_simulated: \"시뮬레이션 실행된 게임\",\n      games_played: \"플레이한 게임\",\n      ratio: \"비율\",\n      leaderboard: \"상위권 순위 차트\",\n      summary_your: \"당신의 \",\n      summary_wins: \" 승자들, \",\n      summary_losses: \" 패자들\",\n      rank_my_game: \"내 게임 순위 매기기!\",\n      rank_submitting: \"제출중...\",\n      rank_submitted: \"순위 매기기 제출\",\n      rank_failed: \"순위 매기기 실패\",\n      rank_last_submitted: \"제출 완료\",\n      select_your_language: \"언어를 고르세요!\",\n      tutorial_play: \"튜토리얼 보기\",\n      tutorial_recommended: \"전에 플레이해본 적이 없으시다면 튜토리얼을 보시는 걸 권장합니다.\",\n      tutorial_skip: \"튜토리얼 넘기기\",\n      tutorial_not_sure: \"어떻게 진행되는지 알고 싶은세요?\",\n      tutorial_play_first: \"튜토리얼을 먼저 플레이해보세요.\",\n      simple_ai: \"기초 인공지능\",\n      warmup: \"워밍업\",\n      friends_playing: \"친구들이 게임중\",\n      log_in_for_friends: \"로그인하시고 친구들과 게임을 즐기세요!\",\n      fight: \"전투 시작!\",\n      watch_victory: \"당신의 승리를 확인하세요\",\n      rules: \"규칙\",\n      winners: \"승리자\"\n    },\n    loading_error: {\n      could_not_load: \"서버로부터 로딩하는 데 문제가 발생했습니다.\",\n      connection_failure: \"연결 실패\",\n      unauthorized: \"로그인한 상태가 아닙니다. 혹시 쿠키를 사용하지 못하게 설정해놓으셨나요?\",\n      forbidden: \"권한이 필요합니다.\",\n      not_found: \"찾을 수 없습니다.\",\n      not_allowed: \"잘못된 접근입니다.\",\n      timeout: \"서버 타임아웃\",\n      conflict: \"리소스 충돌\",\n      server_error: \"서버 에러\",\n      unknown: \"알 수 없는 에러 발생\"\n    },\n    resources: {\n      level: \"레벨\",\n      system: \"시스템\"\n    },\n    legal: {\n      opensource_intro: \"코드 컴뱃은 무료이며 전적으로 오픈 소스를 기반으로 합니다.\",\n      opensource_description_prefix: \"코드 컴뱃의\",\n      github_url: \"GitHub\",\n      opensource_description_center: \"를 확인해보세요. 그리고 원하신다면 함께 도와주세요! 코드 컴뱃은 수천 개의 오픈 소스 프로젝트를 기반으로 만들어졌고 저희는 이들에 대해 깊은 애정을 갖고 있습니다. 한번 \",\n      archmage_wiki_url: \"Archmage 위키\",\n      opensource_description_suffix: \"를 확인해보세요. 코드 컴뱃을 가능하게 만든 소프트웨어들을 찾아보실 수 있습니다.\",\n      privacy_title: \"프라이버시\",\n      email_title: \"이메일\",\n      email_settings_url: \"이메일 설정\",\n      art_music: \"뮤직\",\n      art_sound: \"사운드\",\n      art_artwork: \"원화\",\n      art_sprites: \"스프라이트\"\n    },\n    ladder_prizes: {\n      license: \"라이센스\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///242\n");

/***/ })

});