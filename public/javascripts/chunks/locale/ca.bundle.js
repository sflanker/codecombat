/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:f8eef28543ca70f5cd77, name:locale/ca, filebase:ca.bundle.js, query:, file:javascripts/chunks/locale/ca.bundle.js */
webpackJsonp([69],{

/***/ 216:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Català\",\n  englishDescription: \"Catalan\",\n  translation: {\n    nav: {\n      play: \"Nivells\",\n      community: \"Comunitat\",\n      courses: \"Cursos\",\n      blog: \"Bloc\",\n      forum: \"Fòrum\",\n      account: \"Compte\",\n      profile: \"Perfil\",\n      home: \"Inici\",\n      contribute: \"Col·laborar\",\n      legal: \"Legalitat\",\n      about: \"Sobre Nosaltres\",\n      contact: \"Contacta\",\n      twitter_follow: \"Segueix-nos\",\n      careers: \"Professions\"\n    },\n    modal: {\n      close: \"Tancar\",\n      okay: \"D'acord\"\n    },\n    not_found: {\n      page_not_found: \"Pàgina no trobada\"\n    },\n    diplomat_suggestion: {\n      title: \"Ajuda a traduir CodeCombat!\",\n      sub_heading: \"Neccesitem les teves habilitats lingüístiques.\",\n      pitch_body: \"Hem desenvolupat CodeCombat en anglès, però tenim jugadors per tot el món. Molts d'ells volen jugar en Català, però no parlen anglès, per tant si pots parlar ambdues llengües, siusplau considereu iniciar sessió per a ser Diplomàtic i ajudar a traduir la web de CodeCombat i tots els seus nivells en Català.\",\n      missing_translations: \"Fins que puguem traduir-ho tot en català, ho veuràs en anglès quant no estigui en català.\",\n      learn_more: \"Aprèn més sobre ser un diplomàtic\",\n      subscribe_as_diplomat: \"Subscriu-te com a diplomàtic\"\n    },\n    play: {\n      play_as: \"Jugar com\",\n      compete: \"Competir!\",\n      spectate: \"Espectador\",\n      players: \"Jugadors\",\n      hours_played: \"Hores jugades\",\n      items: \"Objectes\",\n      unlock: \"Desbloquejar\",\n      confirm: \"Confirmar\",\n      owned: \"Adquirit\",\n      locked: \"Bloquejat\",\n      available: \"Disponible\",\n      skills_granted: \"Habilitats Garantides\",\n      heroes: \"Herois\",\n      achievements: \"Triomfs\",\n      settings: \"Configuració\",\n      poll: \"Enquesta\",\n      next: \"Següent\",\n      change_hero: \"Canviar heroi\",\n      buy_gems: \"Comprar Gemes\",\n      anonymous: \"Jugador anònim\",\n      level_difficulty: \"Dificultat: \",\n      awaiting_levels_adventurer_prefix: \"Fem cinc nivells per setmana\",\n      awaiting_levels_adventurer: \"Inicia sessió com a aventurer\",\n      awaiting_levels_adventurer_suffix: \"Sigues el primer en jugar els nous nivells\",\n      adjust_volume: \"Ajustar volum\",\n      campaign_multiplayer: \"Arenes Multijugador\",\n      campaign_multiplayer_description: \"... on programes cara a cara contra altres jugadors.\"\n    },\n    share_progress_modal: {\n      blurb: \"Estàs progressant molt! Digues a algú quan n'has après amb CodeCombat.\",\n      email_invalid: \"Correu electrònic invàlid.\",\n      form_blurb: \"Escriu els seus emails a sota i els hi ensenyarem!\",\n      form_label: \"Correu electrònic\",\n      placeholder: \"adreça de correu electrònic\",\n      title: \"Excel·lent feina, aprenent\"\n    },\n    login: {\n      sign_up: \"Crear un compte\",\n      log_in: \"Iniciar Sessió\",\n      logging_in: \"Iniciant Sessió\",\n      log_out: \"Tancar Sessió\",\n      forgot_password: \"Contrasenya oblidada?\",\n      finishing: \"Acabant\",\n      sign_in_with_facebook: \"Inicia amb Facebook\",\n      sign_in_with_gplus: \"Inicia amb G+\",\n      signup_switch: \"Vols crear-te un compte?\"\n    },\n    signup: {\n      email_announcements: \"Rebre anuncis via email\",\n      creating: \"Creant Compte...\",\n      sign_up: \"Registrar-se\",\n      log_in: \"Iniciar sessió amb la teva contrasenya\",\n      required: \"Neccesites iniciar sessió abans .\",\n      login_switch: \"Ja tens un compte?\",\n      optional: \"opcional\"\n    },\n    recover: {\n      recover_account_title: \"Recuperar Compte\",\n      send_password: \"Enviar contrasenya oblidada\",\n      recovery_sent: \"Correu de recuperació de contrasenya enviat.\"\n    },\n    items: {\n      primary: \"Primari\",\n      secondary: \"Secundari\",\n      armor: \"Armadura\",\n      accessories: \"Accessoris\",\n      misc: \"Misc\",\n      books: \"Llibres\"\n    },\n    common: {\n      back: \"Endarrere\",\n      \"continue\": \"Continua\",\n      loading: \"Carregant...\",\n      saving: \"Guardant...\",\n      sending: \"Enviant...\",\n      send: \"Enviat\",\n      cancel: \"Cancel·lant\",\n      save: \"Guardar\",\n      publish: \"Publica\",\n      create: \"Crear\",\n      fork: \"Fork\",\n      play: \"Jugar\",\n      retry: \"Tornar a intentar\",\n      actions: \"Accions\",\n      info: \"Info\",\n      help: \"Ajuda\",\n      watch: \"Veure\",\n      unwatch: \"Amaga\",\n      submit_patch: \"Enviar pegat\",\n      submit_changes: \"Puja canvis\",\n      save_changes: \"Guarda canvis\"\n    },\n    general: {\n      and: \"i\",\n      name: \"Nom\",\n      date: \"Data\",\n      body: \"Cos\",\n      version: \"Versió\",\n      pending: \"Pendent\",\n      accepted: \"Acceptat\",\n      rejected: \"Rebutjat\",\n      withdrawn: \"Retirat\",\n      accept: \"Accepta\",\n      reject: \"Refusa\",\n      withdraw: \"Retira\",\n      submitter: \"Remitent\",\n      submitted: \"Presentat\",\n      commit_msg: \"Enviar missatge\",\n      version_history: \"Historial de versions\",\n      version_history_for: \"Historial de versions per: \",\n      select_changes: \"Selecciona dos canvis de sota per veure les diferències.\",\n      undo_prefix: \"Desfer\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Refés\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Reproduir avanç del nivell actual\",\n      result: \"Resultat\",\n      results: \"Resultats\",\n      description: \"Descripció\",\n      or: \"o\",\n      subject: \"Tema\",\n      email: \"Correu electrònic\",\n      password: \"Contrasenya\",\n      message: \"Missatge\",\n      code: \"Codi\",\n      ladder: \"Escala\",\n      when: \"Quan\",\n      opponent: \"Oponent\",\n      rank: \"Rang\",\n      score: \"Puntuació\",\n      win: \"Guanyats\",\n      loss: \"Perduts\",\n      tie: \"Empat\",\n      easy: \"Fàcil\",\n      medium: \"Intermedi\",\n      hard: \"Difícil\",\n      player: \"Jugador\",\n      player_level: \"Nivell\",\n      warrior: \"Guerrer\",\n      ranger: \"Guardabosc\",\n      wizard: \"Mag\"\n    },\n    units: {\n      second: \"segon\",\n      seconds: \"segons\",\n      minute: \"minut\",\n      minutes: \"minuts\",\n      hour: \"hora\",\n      hours: \"hores\",\n      day: \"dia\",\n      days: \"dies\",\n      week: \"setmana\",\n      weeks: \"setmanes\",\n      month: \"mes\",\n      months: \"mesos\",\n      year: \"any\",\n      years: \"anys\"\n    },\n    play_level: {\n      completed_level: \"Nivell completat:\",\n      course: \"Curs:\",\n      done: \"Fet\",\n      next_level: \"Següent nivell\",\n      next_game: \"Següent joc\",\n      show_menu: \"Mostrar menú del joc\",\n      home: \"Inici\",\n      level: \"Nivell\",\n      skip: \"Ometre\",\n      game_menu: \"Menú de joc\",\n      restart: \"Reiniciar\",\n      goals: \"Objectius\",\n      goal: \"Objectiu\",\n      running: \"Executant...\",\n      success: \"Èxit!\",\n      incomplete: \"Incomplet\",\n      timed_out: \"S'ha acabat el temps\",\n      failing: \"Fallant\",\n      reload: \"Recarregar\",\n      reload_title: \"Recarregar tot el codi?\",\n      reload_really: \"Estàs segur que vols recarregar aquest nivell des del principi?\",\n      reload_confirm: \"Recarregar tot\",\n      victory: \"Victòria\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Complet\",\n      victory_sign_up: \"Inicia sessió per a desar el progressos\",\n      victory_sign_up_poke: \"Vols guardar el teu codi? Crea un compte gratuït!\",\n      victory_rate_the_level: \"Valora el nivell: \",\n      victory_return_to_ladder: \"Retorna a les Escales\",\n      victory_saving_progress: \"Desa progrés\",\n      victory_go_home: \"Tornar a l'inici\",\n      victory_review: \"Explica'ns més!\",\n      victory_review_placeholder: \"Com ha anat el nivell?\",\n      victory_hour_of_code_done: \"Has acabat?\",\n      victory_hour_of_code_done_yes: \"Sí, he acabat amb la meva Hora del Codi™!\",\n      victory_experience_gained: \"XP Guanyada\",\n      victory_gems_gained: \"Gemmes guanyades\",\n      victory_new_item: \"Objecte nou\",\n      victory_viking_code_school: \"Ostres! Aquest nivell era un nivell difícil de superar! Si no ets un programador, ho hauries de ser. Acabes d'aconseguir una acceptació per la via ràpida a l'Escola de Programació Vikinga, on pot millorar les teves habilitats fins al següent nivell i esdevenir un programador de webs professional en 14 setmanes.\",\n      victory_become_a_viking: \"Converteix-te en un víking\",\n      tome_cast_button_run: \"Executar\",\n      tome_cast_button_running: \"Executant\",\n      tome_cast_button_ran: \"Executat\",\n      tome_submit_button: \"Envia\",\n      tome_reload_method: \"Recarrega el codi original per aquest metòde\",\n      tome_available_spells: \"Encanteris disponibles\",\n      tome_your_skills: \"Les teves habilitats\",\n      code_saved: \"Codi Guardat\",\n      skip_tutorial: \"Ometre (esc)\",\n      keyboard_shortcuts: \"Dreceres del teclat\",\n      loading_start: \"Comença el nivell\",\n      problem_alert_title: \"Arregla el Teu Codi\",\n      time_current: \"Ara:\",\n      time_total: \"Màxim:\",\n      time_goto: \"Ves a:\",\n      non_user_code_problem_title: \"Impossible carregar el nivell\",\n      infinite_loop_title: \"Detectat un bucle infinit\",\n      infinite_loop_description: \"El codi inicial mai acaba d'executar-se. Probablement sigui molt lent o tingui un bucle infinit. O pot ser un error. Pots provar de tornar a executar el codi o reiniciar-lo al seu estat original. Si no es soluciona, si us plau, fes-nos-ho saber.\",\n      check_dev_console: \"També pots obrir la consola de desenvolupament per veure què surt malament.\",\n      check_dev_console_link: \"(instruccions)\",\n      infinite_loop_try_again: \"Tornar a intentar\",\n      infinite_loop_reset_level: \"Reiniciar nivell\",\n      infinite_loop_comment_out: \"Treu els comentaris del meu codi\",\n      tip_toggle_play: \"Canvia entre reproduir/pausa amb Ctrl+P\",\n      tip_scrub_shortcut: \"Ctrl+[ i Ctrl+] per rebobinar i avançar\",\n      tip_guide_exists: \"Clica a la guia dins el menú del joc (a la part superior de la pàgina) per informació útil.\",\n      tip_open_source: \"CodeCombat és 100% codi lliure!\",\n      tip_tell_friends: \"Gaudint de CodeCombat? Explica'ls-ho als teus amics!\",\n      tip_beta_launch: \"CodeCombat va llançar la seva beta l'octubre de 2013.\",\n      tip_think_solution: \"Pensa en la solució, no en el problema.\",\n      tip_theory_practice: \"En teoria no hi ha diferència entre la teoria i la pràctica. Però a la pràctica si que n'hi ha. - Yogi Berra\",\n      tip_error_free: \"Només hi ha dues maneres d'escriure programes sense errors; la tercera és la única que funciona. - Alan Perlis\",\n      tip_debugging_program: \"Si depurar és el procés per eliminar errors, llavors programar és el procés de posar-los. - Edsger W. Dijkstra\",\n      tip_forums: \"Passa pels fòrums i digues el que penses!\",\n      tip_baby_coders: \"En el futur fins i tot els nadons podran ser mags.\",\n      tip_morale_improves: \"La càrrega continuarà fins que la moral millori.\",\n      tip_all_species: \"Creiem en la igualtat d'oportunitats per aprendre a programar per a totes les espècies.\",\n      tip_reticulating: \"Reticulant punxes.\",\n      tip_harry: \"Ets un bruixot, \",\n      tip_great_responsibility: \"Un gran coneixement del codi comporta una gran responsabilitat per a depurar-lo.\",\n      tip_munchkin: \"Si no menges les teves verdures, un munchkin vindrà mentre dormis.\",\n      tip_binary: \"Hi ha 10 tipus de persones al món, les que saben programar en binari i les que no\",\n      tip_commitment_yoda: \"Un programador ha de tenir un compromís profund, una ment seriosa. ~ Yoda\",\n      tip_no_try: \"Fes-ho. O no ho facis. Però no ho intentis. - Yoda\",\n      tip_patience: \"Pacient has de ser, jove Padawan. - Yoda\",\n      tip_documented_bug: \"Un error documentat no és un error; és un atractiu.\",\n      tip_impossible: \"Sempre sembla impossible fins que es fa. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Parlar és barat. Mostra'm el codi. - Linus Torvalds\",\n      tip_first_language: \"La cosa més desastrosa que aprendràs mai és el teu primer llenguatge de programació. - Alan Kay\",\n      tip_hardware_problem: \"P: Quants programadors són necessaris per canviar una bombeta?  R: Cap, és un problema de hardware.\",\n      tip_hofstadters_law: \"Llei de Hofstadter: Sempre et portarà més feina del que esperaves, fins i tot tenint en compte la llei de Hofstadter.\",\n      tip_premature_optimization: \"La optimització prematura és l'arrel de la maldat. - Donald Knuth\",\n      tip_brute_force: \"Quan dubtis, usa força bruta. - Ken Thompson\",\n      tip_extrapolation: \"Hi ha dos tipus de persones: aquells que poden extrapolar des de dades incompletes...\",\n      tip_superpower: \"Programar és el que més s'aproxima a un super poder.\",\n      tip_control_destiny: \"En un codi obert real tens el dret a controlar el teu propi destí. - Linus Torvalds\",\n      tip_no_code: \"Cap codi és més ràpid que l'absència de codi.\",\n      tip_code_never_lies: \"El codi mai menteix, els comentaris a vegades. — Ron Jeffries\",\n      tip_reusable_software: \"Abans que el codi sigui reutilitzable, ha de ser usable.\",\n      tip_optimization_operator: \"Cada llenguatge té un operador d'optimització. En la majoria d'ells és ‘//’\",\n      tip_lines_of_code: \"Mesurar el progrés d'un codi per les seves línies és com mesurar el progrés d'un avió pel seu pes. — Bill Gates\",\n      tip_source_code: \"Vull canviar el món, però no em vol donar el seu codi font.\",\n      tip_javascript_java: \"Java és a JavaScript el que un cotxe a una catifa. - Chris Heilmann\",\n      tip_move_forward: \"Facis el que facis, sempre segueix endavant. - Martin Luther King Jr.\",\n      tip_google: \"Tens un problema que no pots resoldre? Cerca a Google!\",\n      tip_adding_evil: \"Afegint una mica de maldat.\",\n      tip_hate_computers: \"La raó real per la qual la gent creu que odia els ordinadors és pels programadors pèssims. - Larry Niven\",\n      tip_open_source_contribute: \"Pots ajudar a millorar CodeCombat!\",\n      tip_recurse: \"La iteració és humana, la recursivitat és divina. - L. Peter Deutsch\",\n      tip_free_your_mind: \"T'has de deixar endur, Neo. Por, dubtes, i incredulitat. Allibera la teva ment. - Morpheus\",\n      tip_strong_opponents: \"Fins i tot el més fort dels oponents té alguna debilitat. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Abans de començar a programar, sempre has de començar planejant amb paper i boli.\",\n      tip_solve_then_write: \"Primer, resol el problema. Després, escriu el codi. - John Johnson\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventari\",\n      save_load_tab: \"Desa/Carrega\",\n      options_tab: \"Opcions\",\n      guide_tab: \"Gui\",\n      guide_video_tutorial: \"Vídeo Tutorial\",\n      guide_tips: \"Consells\",\n      multiplayer_tab: \"Multijugador\",\n      auth_tab: \"Dona't d'alta\",\n      inventory_caption: \"Equipa el teu heroi\",\n      choose_hero_caption: \"Tria l'heroi, llenguatge\",\n      options_caption: \"Edita la configuració\",\n      guide_caption: \"Documents i pistes\",\n      multiplayer_caption: \"Juga amb amics!\",\n      auth_caption: \"Desa el progrés.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Veure altres solucions\",\n      scores: \"Puntuació\",\n      top_players: \"Els millors jugadors de\",\n      day: \"Avui\",\n      week: \"Aquesta Setmana\",\n      all: \"Tots els temps\",\n      time: \"Temps\",\n      damage_taken: \"Mal rebut\",\n      damage_dealt: \"Mal inflingit\",\n      difficulty: \"Dificultat\",\n      gold_collected: \"Or recol·lectat\"\n    },\n    inventory: {\n      equipped_item: \"Equipat\",\n      required_purchase_title: \"Necessari\",\n      available_item: \"Disponible\",\n      restricted_title: \"Restringit\",\n      should_equip: \"(doble-clic per equipar)\",\n      equipped: \"(equipat)\",\n      locked: \"(bloquejat)\",\n      restricted: \"(restringit en aquest nivell)\",\n      equip: \"Equipa\",\n      unequip: \"Desequipa\"\n    },\n    buy_gems: {\n      few_gems: \"Algunes gemmes\",\n      pile_gems: \"Pila de gemmes\",\n      chest_gems: \"Cofre de gemmes\",\n      purchasing: \"Comprant...\",\n      declined: \"La teva targeta ha estat rebutjada\",\n      retrying: \"Error del servidor, intentant de nou.\",\n      prompt_title: \"Gemmes insuficients\",\n      prompt_body: \"En vols més?\",\n      prompt_button: \"Entrar a la botiga\",\n      recovered: \"S'han recuperat les anteriors compres de gemmes. Si us plaus, recarrega al pàgina.\",\n      price: \"x{{gems}} / més\"\n    },\n    subscribe: {\n      comparison_blurb: \"Afina les teves habilitats amb una subscripció a CodeCombat!\",\n      must_be_logged: \"Necessites identificar-te. Si us plau, crea un compte o identifica't al menú de la part superior.\",\n      subscribe_title: \"Subscriu-te\",\n      unsubscribe: \"Donar-se de baixa\",\n      confirm_unsubscribe: \"Confirmar la baixa\",\n      never_mind: \"No et preocupis, encara t'estimo\",\n      thank_you_months_prefix: \"Gràcies pel suport donat els últims\",\n      thank_you_months_suffix: \"mesos.\",\n      thank_you: \"Gràcies per donar suport a CodeCombat.\",\n      sorry_to_see_you_go: \"Llàstima que te'n vagis! Deixa'ns saber què podríem haver fet millor.\",\n      unsubscribe_feedback_placeholder: \"Oh, què hem fet?\",\n      stripe_description: \"Subscripció mensual\"\n    },\n    choose_hero: {\n      choose_hero: \"Escull el teu heroi\",\n      programming_language: \"Llenguatge de programació\",\n      programming_language_description: \"Quin llenguatge de programació vols utilitzar?\",\n      \"default\": \"Per defecte\",\n      experimental: \"Experimental\",\n      python_blurb: \"Simple però poderós, Python és un bon llenguatge d'ús general.\",\n      javascript_blurb: \"El llenguatge de les webs.\",\n      coffeescript_blurb: \"Sintaxi JavaScript millorat.\",\n      lua_blurb: \"Llenguatge script per a jocs.\",\n      status: \"Estat\",\n      weapons: \"Armes\",\n      weapons_warrior: \"Espases - Curt abast, no hi ha màgia\",\n      weapons_ranger: \"Ballestes, armes - de llarg abast, no hi ha màgia\",\n      weapons_wizard: \"Varetes, bastons - Llarg abast, Màgia\",\n      attack: \"Dany\",\n      health: \"Salut\",\n      speed: \"Velocitat\",\n      regeneration: \"Regeneració\",\n      range: \"Abast\",\n      skills: \"Habilitats\",\n      restricted_to_certain_heroes: \"Només certs herois poden jugar aquest nivell.\"\n    },\n    skill_docs: {\n      read_only: \"Només lectura\",\n      action_name: \"nom\",\n      action_range: \"Abast\",\n      action_duration: \"Duracció\",\n      example: \"Exemple\",\n      ex: \"ex\",\n      current_value: \"Valor actual\",\n      default_value: \"Valor per defecte\",\n      parameters: \"Paràmetres\",\n      returns: \"Retorna\"\n    },\n    save_load: {\n      granularity_saved_games: \"Desats\",\n      granularity_change_history: \"Historial\"\n    },\n    options: {\n      general_options: \"Opcions generals\",\n      volume_label: \"Volum\",\n      music_label: \"Musica\"\n    },\n    about: {\n      nick_title: \"Programador\",\n      matt_title: \"Programador\",\n      scott_title: \"Programador\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Guarda una nova versió\",\n      new_major_version: \"Nova versió principal\",\n      cla_prefix: \"Per guardar els canvis primer has d'acceptar\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"Estic d'acord\"\n    },\n    contact: {\n      contact_us: \"Contacta CodeCombat\",\n      welcome: \"Què bé poder escoltar-te! Fes servir aquest formulari per enviar-nos un email. \",\n      forum_prefix: \"Per a qualsevol publicació, si us plau prova \",\n      forum_page: \"el nostre fòrum\",\n      forum_suffix: \" sinó\",\n      send: \"Enviar comentari\"\n    },\n    account_settings: {\n      title: \"Configuració del compte\",\n      not_logged_in: \"Inicia sessió o crea un compte per a canviar la configuració.\",\n      me_tab: \"Jo\",\n      picture_tab: \"Foto\",\n      delete_account_tab: \"Elimina el teu compte\",\n      wrong_email: \"Correu erroni\",\n      wrong_password: \"Contrasenya invàlida\",\n      delete_this_account: \"Elimina aquest compte de forma permanent\",\n      reset_progress_tab: \"Reinicia tot el progrés\",\n      reset_your_progress: \"Reiniciar tot el progrés i començar de nou\",\n      god_mode: \"Mode Déu\",\n      emails_tab: \"Missatges\",\n      admin: \"Administrador\",\n      manage_subscription: \"Clica aquí per administrar la teva subscripció.\",\n      new_password: \"Contrasenya nova\",\n      new_password_verify: \"Verifica\",\n      type_in_email: \"Escriu el teu correu electrònic per confirmar l'eliminació del compte.\",\n      type_in_email_progress: \"Escriu el teu correu electrònic per confirmar l'eliminació del teu progrés.\",\n      type_in_password: \"Escriu també la teva contrasenya.\",\n      email_subscriptions: \"Subscripcions via correu electrònic\",\n      email_subscriptions_none: \"Sense subsrcipcions de correu electrònic.\",\n      email_announcements: \"Notícies\",\n      email_announcements_description: \"Rebre les últimes notícies i desenvolupaments de CodeCombat.\",\n      email_notifications: \"Notificacions\",\n      email_notifications_summary: \"Controls per personalitzar les teves notificacions d'email automàtiques relacionades amb la teva activitat a CodeCombat.\",\n      email_any_notes: \"Cap notificació\",\n      email_any_notes_description: \"Desactiva totes les notificacions via correu electrònic.\",\n      email_news: \"Noticies\",\n      email_recruit_notes: \"Oportunitats de feina\",\n      email_recruit_notes_description: \"Si jugues realment bé ens posarem en contacte amb tu per oferir-te feina.\",\n      contributor_emails: \"Subscripció als correus electrònics de cada classe\",\n      contribute_prefix: \"Estem buscant gent que s'uneixi! Mira \",\n      contribute_page: \"la pàgina de col·laboració\",\n      contribute_suffix: \" per llegir més informació.\",\n      email_toggle: \"Activa-ho tot\",\n      error_saving: \"Error en desar\",\n      saved: \"Canvis desats\",\n      password_mismatch: \"Les contrasenyes no coincideixen.\",\n      password_repeat: \"Siusplau, repetiu la contrasenya.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Dreceres del teclat\",\n      space: \"Espai\",\n      enter: \"Enter\",\n      escape: \"Escape\",\n      shift: \"Shift\"\n    },\n    community: {\n      main_title: \"Comunitat CodeCombat\",\n      social_twitter: \"Segueix CodeCombat al Twitter\",\n      contribute_to_the_project: \"Contribueix al projecte\"\n    },\n    classes: {\n      archmage_title: \"Arximag\",\n      archmage_title_description: \"(Programador)\",\n      archmage_summary: \"Si ets un programador interessat en els jocs educatius sigues un arximag i ajuda'ns a construir CodeCombat!\",\n      artisan_title: \"Artesà\",\n      artisan_title_description: \"(Creador de nivells)\",\n      artisan_summary: \"Construeix i comparteix nivells per als teus amics. Sigues un Artesà per aprendre l'art d'ensenyar als altres a programar.\",\n      adventurer_title: \"Aventurer\",\n      adventurer_title_description: \"(Provador de nivells)\",\n      adventurer_summary: \"Accedeix als nostres nivells (fins i tot el contingut de pagament) una setmana abans i gratuïtament i ajuda'ns a descobrir errors abans que siguin públics.\",\n      scribe_title: \"Escriba\",\n      scribe_title_description: \"(Editor d'articles)\",\n      scribe_summary: \"Un bon codi necessita una bona documentació. Escriu, edita i millora els documents que són llegits per milions de jugadors arreu del món.\",\n      diplomat_title: \"Diplomàtic\",\n      diplomat_title_description: \"(Traductor)\",\n      diplomat_summary: \"CodeCombat s'està traduint a més de 45 idiomes pels nostres Displomàtics. Ajuda'ns a traduir!\",\n      ambassador_title: \"Ambaixador\",\n      ambassador_title_description: \"(Suport)\",\n      ambassador_summary: \"Posar ordre als fòrums i respondre a les preguntes que sorgeixin. Els nostres Ambaixadors representen a CodeCombat envers el món.\"\n    },\n    editor: {\n      article_title: \"Editor d'articles \",\n      level_title: \"Editor de nivells\",\n      achievement_title: \"Editor de triomfs\",\n      back: \"Enrere\",\n      dungeon: \"Masmorra\",\n      indoor: \"Interior\",\n      desert: \"Desert\",\n      small: \"Petit\",\n      generate_terrain: \"Generar Terreny\",\n      more: \"Més\",\n      wiki: \"Wiki\",\n      live_chat: \"Xat en directe\",\n      thang_main: \"Principal\",\n      level_tab_scripts: \"Scripts\",\n      level_tab_components: \"Components\",\n      level_tab_systems: \"Sistemes\",\n      level_tab_docs: \"Documentació\",\n      level_tab_thangs_all: \"Tot\",\n      \"delete\": \"Esborrar\",\n      duplicate: \"Duplicar\",\n      rotate: \"Rotar\",\n      level_component_tab_title: \"Components actuals\",\n      level_systems_tab_title: \"Sistemes actuals\",\n      level_systems_btn_new: \"Crea un nou sistema\",\n      level_systems_btn_add: \"Afegir sistema\",\n      level_system_edit_title: \"Editar sistema\",\n      create_system_title: \"Crea un nou sistema\",\n      new_component_field_system: \"Sistema\",\n      new_article_title: \"Crea un article nou\",\n      new_level_title: \"Crea un nou nivell\",\n      new_article_title_login: \"Inicia sessió per a crear un article nou\",\n      new_level_title_login: \"Inicia sessió per a crear un nou nivell\",\n      new_achievement_title: \"Crea un nou triomf\",\n      new_achievement_title_login: \"Inicia sessió per a crear un nou triomf\"\n    },\n    article: {\n      edit_btn_preview: \"Vista prèvia\",\n      edit_article_title: \"Editar l'article\"\n    },\n    contribute: {\n      page_title: \"Contribueix\",\n      intro_blurb: \"CodeCombat és 100% codi obert! Una gran quantitat de jugadors ens han ajudat a construir el joc tal com és avui. Uneix-te a l'aventura d'ensenyar a programar!\",\n      alert_account_message_intro: \"Hola!\",\n      alert_account_message: \"Per subscriure't a alguna classe, necessites estar identificat.\",\n      archmage_introduction: \"Una de les millors parts de construir jocs és que aglutinen coses molt diverses. Gràfics, sons, treball en temps real, xarxes socials, i per suposat la programació, des del baix nivell d'ús de bases de dades i administració del servidor fins a dissenyar i crear interfícies. Hi ha molt a fer, i si ets un programador amb experiència i amb l'anhel de submergir-te dins CodeCombat aquesta classe és per tu. Ens encantarà tenir la teva ajuda en el millor joc de programació que hi ha.\",\n      class_attributes: \"Atributs de la classe\",\n      archmage_attribute_1_pref: \"Coneixement en \",\n      archmage_attribute_1_suf: \", o ganes d'aprendre'n. La major part del nostre codi és en aquest llenguatge. Si ets un fan de Ruby o Python et sentiràs com a casa. És JavaScript però més agradable.\",\n      archmage_attribute_2: \"Certa experiència programant i iniciativa personal. T'orientarem, però no podem dedicar molt de temps en ensenyar-te.\",\n      how_to_join: \"Com unir-se\",\n      join_desc_1: \"Qualsevol pot ajudar! Visita el nostre \",\n      join_desc_2: \"per començar i i marca la casella d'abaix per registra-te com a Arximag i estar al dia del correus electrònics que enviem. Vols saber què fer o que t'expliquem més a fons en què consisteix? \",\n      join_desc_3: \", o troba'ns al nostre \",\n      join_desc_4: \"i t'ho explicarem!\",\n      join_url_email: \"Escriu-nos\",\n      archmage_subscribe_desc: \"Rebre els correus sobre noves oportunitats de programació.\",\n      artisan_introduction_pref: \"Hem de construir nous nivells! La gent reclama més continguts i les nostres forces són limitades. Ara mateix el nostre lloc de treball és de nivell 1; el nostre editor de nivells és tot just útil per als seus creadors, així que ves en compte. Si tens algunes idees sobre campanyes amb bucles for per \",\n      artisan_introduction_suf: \", llavors aquesta classe és per a tu.\",\n      artisan_attribute_1: \"Experiència en construcció de continguts d'aquest estil seria genial, com per exemple l'editor de nivells de Blizzard. Però no és un requisit!\",\n      artisan_attribute_2: \"Ganes de fer moltes proves i iteracions. Per fer bons nivells necessitaràs mostrar-ho a altres i veure com juguen i estar preparat per a reparar tot el que calgui.\",\n      artisan_attribute_3: \"De moment, la resistència va de la mà de l'Aventurer. El nostre editor de nivells es troba en una fase molt preliminar i pot ser un poc frustrant. Estàs avisat!\",\n      artisan_join_desc: \"Utilitza l'editor de nivells a través d'aquests passos:\",\n      artisan_join_step1: \"Llegeix la documentació.\",\n      artisan_join_step2: \"Crea un nivell nou i explora els ja creats.\",\n      artisan_join_step3: \"Troba'ns al nostre canal públic d'Slack per a més ajuda.\",\n      artisan_join_step4: \"Anuncia els teus nivells al fòrum per a més opinions.\",\n      artisan_subscribe_desc: \"Rebre els correus electrònics per seguir les novetats.\",\n      diplomat_introduction_pref: \"Si alguna cosa vam aprendre del que vam \",\n      diplomat_launch_url: \"llançar a l'octubre\",\n      diplomat_introduction_suf: \"és que hi ha un gran interès en CodeCombat a altres països! Estem construint un cos de traductors per aconseguir que CodeCombat sigui tan accessible arreu del món com sigui possible. Si t'agrada aconseguir els nivells tan aviat com surten i poder-los oferir als teus compatriotes llavors aquesta classe és per tu.\",\n      diplomat_attribute_1: \"Fluïdesa en l'anglès i en l'idioma al que vulguis traduir. Al transmetre idees complicades és important tenir un gran coneixement dels dos idiomes!\",\n      diplomat_i18n_page_prefix: \"Pots començar traduint els nostres nivells a la\",\n      diplomat_i18n_page: \"pàgina de traduccions\",\n      diplomat_i18n_page_suffix: \", o bé la interfície web a GitHub.\",\n      diplomat_join_pref_github: \"Troba els nostres fitxers d'idiomes \",\n      diplomat_github_url: \"a GitHub\",\n      diplomat_join_suf_github: \", edita'ls i envia una petició de modificació. A més, marca la casella d'abaix per mantenir-te informat d'esdeveniments de traducció!\",\n      diplomat_subscribe_desc: \"Rebre correus sobre el desenvolupament de i18n i la traducció de nivells.\"\n    },\n    ladder: {\n      simulate: \"Simula\",\n      games_simulated: \"Partides simulades\",\n      games_played: \"Partides guanyades\",\n      ratio: \"Ràtio\",\n      summary_your: \"Les teves \",\n      summary_matches: \"Partides - \",\n      summary_wins: \" Victòries, \",\n      summary_losses: \" Derrotes\",\n      choose_opponent: \"Escull adversari\",\n      select_your_language: \"Escull el teu idioma!\",\n      tutorial_play: \"Juga el tutorial\",\n      tutorial_recommended: \"Recomenat si no has jugat abans\",\n      tutorial_skip: \"Salta el tutorial\",\n      tutorial_play_first: \"Juga el tutorial primer.\",\n      simple_ai: \"IA simple\",\n      friends_playing: \"Amics jugant\",\n      fight: \"Lluita!\",\n      watch_victory: \"Mira la teva victòria\",\n      defeat_the: \"Derrota a\",\n      tournament_ends: \"El torneig acaba\",\n      tournament_ended: \"El torneig ha acabat\",\n      tournament_rules: \"Normes del torneig\",\n      tournament_blurb_blog: \"en el nostre blog\",\n      rules: \"Normes\",\n      winners: \"Guanyadors\"\n    },\n    user: {\n      stats: \"Estadístiques\",\n      singleplayer_title: \"Nivell d'un sol jugador\",\n      multiplayer_title: \"Nivells multijugador\",\n      achievements_title: \"Triomfs\",\n      last_played: \"Ultim jugat\",\n      status: \"Estat\",\n      status_completed: \"Complet\",\n      status_unfinished: \"Inacabat\",\n      no_singleplayer: \"Encara no s'han jugat nivells individuals.\",\n      no_multiplayer: \"Encara no s'han jugat nivells multijugador.\",\n      no_achievements: \"No has aconseguit cap triomf encara.\",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      last_earned: \"Últim aconseguit\",\n      amount_achieved: \"Cantitat\",\n      achievement: \"Triomf\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" en total\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" guanyat\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" fins el nivell \",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Pagaments\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Pagat a\",\n      price: \"Preu\",\n      active: \"Actiu\",\n      cost: \"Cost\",\n      next_payment: \"Següent pagament\"\n    },\n    loading_error: {\n      could_not_load: \"Error de carrega del servidor\",\n      connection_failure: \"Connexió fallida.\",\n      forbidden: \"No disposes dels permisos.\",\n      not_found: \"No trobat.\",\n      not_allowed: \"Metode no permès.\",\n      bad_input: \"Entrada incorrecta.\",\n      server_error: \"Error del servidor.\",\n      unknown: \"Error desconegut.\"\n    },\n    resources: {\n      level: \"Nivell\",\n      patches: \"Pegats\",\n      system: \"Sistema\",\n      systems: \"Sistemes\",\n      component: \"Component\",\n      components: \"Components\"\n    },\n    concepts: {\n      \"arguments\": \"Arguments\",\n      arithmetic: \"Aritmètica\",\n      arrays: \"Cadenes (array)\",\n      basic_syntax: \"Sintaxis bàsica\",\n      break_statements: \"Declaracions Break\",\n      classes: \"Classes\",\n      continue_statements: \"Sentències Continue\",\n      for_loops: \"Bucles (For)\",\n      functions: \"Funcions\",\n      graphics: \"Gràfics\",\n      if_statements: \"Sentències If\",\n      math_operations: \"Operacions matemàtiques\",\n      object_literals: \"Objectes Literals\",\n      parameters: \"Paràmetres\",\n      recursion: \"Recursivitat\",\n      strings: \"Strings\",\n      variables: \"Variables\",\n      vectors: \"Vectors\",\n      advanced_strings: \"Cadenes de text avançades (string)\",\n      algorithms: \"Algorismes\",\n      boolean_logic: \"Lògica booleana\",\n      input_handling: \"Manipulació de dades d'entrada\",\n      while_loops: \"Bucles (While)\"\n    },\n    delta: {\n      added: \"Afegit\",\n      modified: \"Modificat\",\n      not_modified: \"No modificat\",\n      deleted: \"Eliminat\",\n      moved_index: \"Índex desplaçat\",\n      text_diff: \"Diferir text\",\n      merge_conflict_with: \"Conflicte d'unió amb\",\n      no_changes: \"Sense canvis\"\n    },\n    legal: {\n      page_title: \"Legalitat\",\n      privacy_title: \"Privacitat\",\n      security_title: \"Seguretat\",\n      cost_title: \"Cost\",\n      art_music: \"Musica\",\n      art_sound: \"So\",\n      art_artwork: \"Art\",\n      rights_title: \"Drets reservats\",\n      rights_scripts: \"Scripts\",\n      rights_unit: \"Configuració de la unitat\",\n      rights_writings: \"Escrits\"\n    },\n    ladder_prizes: {\n      title: \"Premis del torneig\",\n      blurb_1: \"Aquests premis seran guanyats d'acord amb\",\n      blurb_2: \"Les normes del torneig\",\n      blurb_3: \"els millors jugadors humans i ogres.\",\n      blurb_4: \"Dos equips signifiquen el doble de premis!\",\n      blurb_5: \"(Hi haura dos guanyadors pel primer lloc, dos pels del segon lloc, etc.)\",\n      rank: \"Rang\",\n      prizes: \"Premis\",\n      total_value: \"Valor total\",\n      in_cash: \"en diners\",\n      custom_wizard: \"Personalitza el teu bruixot de CodeCombat\",\n      custom_avatar: \"Personalitza el teu avatar de CodeCombat\",\n      heap: \"per sis mesosd'acces \\\"Startup\\\" \",\n      credits: \"credits\",\n      license: \"llicencia\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///216\n");

/***/ })

});