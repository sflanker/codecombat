/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:e2e84056755a0aa9f9fe, name:locale/de-CH, filebase:de-CH.bundle.js, query:, file:javascripts/chunks/locale/de-CH.bundle.js */
webpackJsonp([65],{

/***/ 220:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Dütsch (Schwiiz)\",\n  englishDescription: \"German (Switzerland)\",\n  translation: {\n    nav: {\n      play: \"Levels\",\n      community: \"Community\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Account\",\n      profile: \"Profil\",\n      home: \"Home\",\n      contribute: \"Mitmache\",\n      legal: \"Rechtlichs\",\n      about: \"Über\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Folge\"\n    },\n    modal: {\n      close: \"Beende\",\n      okay: \"Okay\"\n    },\n    not_found: {\n      page_not_found: \"Siite nid gfunde\"\n    },\n    diplomat_suggestion: {\n      title: \"Hilf, CodeCombat z übersetze!\",\n      sub_heading: \"Mir bruuched dini Sprochfähigkeite.\",\n      pitch_body: \"Mir entwickled CodeCombat in Englisch, aber mir hend scho Spieler uf de ganze Welt. Vieli devo würed gern uf Schwiizerdütsch spiele, aber chönd kei Englisch. Wenn du beides chasch, denk doch mol drüber noh, dich bi üs als Diplomat izträge und z helfe, d CodeCombat Websiite und alli Level uf Schwiizerdütsch z übersetze.\",\n      missing_translations: \"Bis mir alles chönd uf Schwiizerdütsch übersetze wirsch du döt generisches Dütsch oder Englisch gseh, wo Schwiizerdütsch nid verfüegbar isch.\",\n      learn_more: \"Lern meh drüber, en Diplomat zsii\",\n      subscribe_as_diplomat: \"Abonnier als en Diplomat\"\n    },\n    play: {\n      play_as: \"Spiel als\",\n      spectate: \"Zueluege\",\n      players: \"Spieler\",\n      hours_played: \"Stunde gspilt\",\n      items: \"Items\",\n      unlock: \"Freischalte\",\n      confirm: \"Bestätige\",\n      owned: \"Scho gkauft\",\n      locked: \"Nonig kauft\",\n      available: \"vorhandä\",\n      skills_granted: \"Fähigkeite\",\n      heroes: \"Helde\",\n      achievements: \"Erfolg\",\n      settings: \"Istellige\",\n      poll: \"Pool\",\n      next: \"Wiiter\",\n      change_hero: \"Held wächsle\",\n      buy_gems: \"Edelstei chaufä\",\n      anonymous: \"Anonyme Spieler\",\n      level_difficulty: \"Schwierigkeit: \",\n      awaiting_levels_adventurer_prefix: \"Mier möched 5 Levels pro Wuche\",\n      awaiting_levels_adventurer: \"Mäld dich a as en Abendtüürer\",\n      awaiting_levels_adventurer_suffix: \"um de erscht zii vo die neue Levels spiilt\",\n      adjust_volume: \"Luutsterchi apasse\",\n      campaign_multiplayer: \"Multiplayer Arenas\",\n      campaign_multiplayer_description: \"... i dene du Chopf a Chopf geg anderi Spieler spielsch.\"\n    },\n    share_progress_modal: {\n      blurb: \"Du machsch grossi Fortschritts! Verzells öperem wieviel du glernt häsch mit CodeCombat.\",\n      email_invalid: \"Email Adrässä isch falsch.\",\n      form_blurb: \"Gib bitte dEmail Adrässe vo dine Eltere aa\",\n      form_label: \"Email Adrässä\",\n      placeholder: \"Email Adrässä\",\n      title: \"Gueti Arbeit!\"\n    },\n    login: {\n      sign_up: \"Account erstelle\",\n      log_in: \"Ilogge\",\n      logging_in: \"Am Ilogge\",\n      log_out: \"Uslogge\",\n      forgot_password: \"Passwort vergässe?\",\n      finishing: \"Fertigstelle\",\n      sign_in_with_facebook: \"Mit Facebook aamelde\",\n      sign_in_with_gplus: \"Mit G+ aamelde\",\n      signup_switch: \"Willsch es Account erstelle?\"\n    },\n    signup: {\n      email_announcements: \"Akündigunge per Mail erhalte\",\n      creating: \"Account wird erstellt...\",\n      sign_up: \"Registriere\",\n      log_in: \"Mit Passwort ilogge\",\n      required: \"Du muesch dich zersch ilogge befor du det dure chasch\",\n      login_switch: \"Häsch scho es Account?\"\n    },\n    recover: {\n      recover_account_title: \"Account wiederherstelle\",\n      send_password: \"Widerherstelligs Passwort sende\",\n      recovery_sent: \"Widerherstelligs Passwort isch gsendet\"\n    },\n    items: {\n      primary: \"Primär\",\n      secondary: \"Sekundär\",\n      armor: \"Rüschtig\",\n      accessories: \"Accessories\",\n      misc: \"Diverses\",\n      books: \"Büecher\"\n    },\n    common: {\n      back: \"Zrugg\",\n      \"continue\": \"Wiiterfare\",\n      loading: \"Lade...\",\n      saving: \"Speichere...\",\n      sending: \"Sende...\",\n      send: \"G'sendet\",\n      cancel: \"Abbreche\",\n      save: \"Speichere\",\n      publish: \"Veröffentliche\",\n      create: \"Erstelle\",\n      play: \"Spiele\",\n      retry: \"nomol versuche\",\n      actions: \"Aktione\",\n      info: \"Info\",\n      help: \"Hilf\",\n      watch: \"Aluege\",\n      unwatch: \"Nüm Aluege\",\n      submit_patch: \"Patch ireiche\",\n      submit_changes: \"Wechsel ireiche\"\n    },\n    general: {\n      and: \"und\",\n      name: \"Name\",\n      date: \"Datum\",\n      body: \"Body\",\n      version: \"Version\",\n      pending: \"in Bearbeitig\",\n      accepted: \"Akzeptiert\",\n      rejected: \"Nid akzeptiert\",\n      withdrawn: \"Zruggzie\",\n      submitter: \"Sender\",\n      submitted: \"Gesendet\",\n      commit_msg: \"Nachricht abschicke\",\n      version_history: \"Versionsverlauf\",\n      version_history_for: \"Versionsverlauf für: \",\n      select_changes: \"Wähl zwei Verändrige um unne Ihre Unterschid zgse.\",\n      undo_prefix: \"Eis zrugg\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Nomal mache\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Spiel dPreview vom aktuelle Level\",\n      result: \"Resultat\",\n      results: \"Resultat\",\n      description: \"Beschriibig\",\n      or: \"oder\",\n      email: \"E-mail\",\n      password: \"Passwort\",\n      message: \"Nachricht\",\n      code: \"Code\",\n      ladder: \"Leitere\",\n      when: \"Wänn\",\n      opponent: \"Gegner\",\n      rank: \"Rang\",\n      score: \"Punktzahl\",\n      win: \"Gwünn\",\n      loss: \"Verlust\",\n      tie: \"Unentschide\",\n      easy: \"Eifach\",\n      medium: \"Mittel\",\n      hard: \"Schwer\",\n      player: \"Spieler\",\n      player_level: \"Stufe\",\n      warrior: \"Krieger\",\n      ranger: \"Ranger\",\n      wizard: \"Zauberer\"\n    },\n    units: {\n      second: \"Sekunde\",\n      seconds: \"Sekunde\",\n      minute: \"Minute\",\n      minutes: \"Minute\",\n      hour: \"Stund\",\n      hours: \"Stunde\",\n      day: \"Tag\",\n      days: \"Täg\",\n      week: \"Wuche\",\n      weeks: \"Wuche\",\n      month: \"Monet\",\n      months: \"Mönet\",\n      year: \"Johr\",\n      years: \"Johr\"\n    },\n    play_level: {\n      done: \"Fertig\",\n      home: \"Home\",\n      level: \"Level\",\n      skip: \"Überspringe\",\n      game_menu: \"Game Menu\",\n      restart: \"Neu starte\",\n      goals: \"Ziel\",\n      goal: \"Goal\",\n      running: \"s lauft...\",\n      success: \"Erfolg!\",\n      incomplete: \"Unvollständig\",\n      timed_out: \"Ziit abglaufe\",\n      failing: \"Fehler\",\n      reload: \"Neu lade\",\n      reload_title: \"De ganze Code neu lade?\",\n      reload_really: \"Bisch sicher du willsch level neu lade bis zrugg zum Afang?\",\n      reload_confirm: \"Alles neu lade\",\n      victory: \"Gwunne\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Vollständig\",\n      victory_sign_up: \"Meld dich ah zum din Fortschritt speichere\",\n      victory_sign_up_poke: \"Wötsch din Code speichere? Erstell gratis en Account!\",\n      victory_rate_the_level: \"Bewerte das Level: \",\n      victory_return_to_ladder: \"Zrugg zum letzte Level\",\n      victory_saving_progress: \"Fortschritt abspaicherä\",\n      victory_go_home: \"Goon Hai\",\n      victory_review: \"Verzell üs meh!\",\n      victory_hour_of_code_done: \"Bisch fertig?\",\n      victory_hour_of_code_done_yes: \"Jo, ich bin fertig mit mim Hour of Code™!\",\n      victory_experience_gained: \"Erfarig bechoo\",\n      victory_gems_gained: \"Edelstei bechoo\",\n      victory_viking_code_school: \"Oh mein Gott, dass isch aber es stregs Level gsi und du heschs gschafft! Also wen du nu kei Software-Entwickler bisch, sötsch eine sii! Du hesch en Iiladig becho um at Viking Code Schuel zgha wodu dini Fähigkeite chasch wiiterentwickle und en professionele Entwickel in nur 14 Täg werde!\",\n      victory_become_a_viking: \"Werd en Vikinger!\",\n      tome_cast_button_run: \"Renn\",\n      tome_cast_button_running: \"Renne\",\n      tome_cast_button_ran: \"grennt\",\n      tome_submit_button: \"Abschicke\",\n      tome_reload_method: \"Lad de Orginal Code für die Methode\",\n      tome_available_spells: \"Verfüegbari Zaubersprüch\",\n      tome_your_skills: \"Dini Fähigkaitä\",\n      code_saved: \"Code gpeicheret\",\n      skip_tutorial: \"Überspringe (esc)\",\n      keyboard_shortcuts: \"Shortcuts\",\n      loading_start: \"Level starte\",\n      problem_alert_title: \"Reparier diin Code\",\n      time_current: \"Jetzt:\",\n      time_total: \"Max:\",\n      time_goto: \"Goh zu:\",\n      infinite_loop_try_again: \"Versuechs nomol\",\n      infinite_loop_reset_level: \"Level zrugsetze\",\n      infinite_loop_comment_out: \"Min Code uskommentiere\",\n      tip_toggle_play: \"Play/Pausiert mit Ctrl+P ischalte.\",\n      tip_guide_exists: \"Klick ufs Handbuech im obere Teil vo de Siite zum nützlichi Infos becho.\",\n      tip_open_source: \"CodeCombat isch 100% Open Source!\",\n      tip_beta_launch: \"D CodeCombat Beta isch im Oktober 2013 online gange.\",\n      tip_think_solution: \"Denk über d Lösig noh, nid über s Problem.\",\n      tip_theory_practice: \"Theoretisch gits kein Unterschied zwüsche Theorie und Praxis. Praktisch aber scho. - Yogi Berra\",\n      tip_error_free: \"Es git zwei Arte zum fehlerfreii Programm schriibe; nur di dritt funktioniert. - Alan Perils\",\n      tip_debugging_program: \"Wenn Debugging de Prozess isch, mit dem mehr Bugs entfernt, denn mues Programmiere de sii, mit dem mer sie dri tuet. - Edsger W. Dijkstra\",\n      tip_forums: \"Chum übere is Forum und verzell üs, wa du denksch!\",\n      tip_baby_coders: \"I de Zuekunft werded sogar Babies Erzmagier sii.\",\n      tip_morale_improves: \"Es ladet bis d Moral besser worde isch...\",\n      tip_all_species: \"Mir glaubed a gliichi Möglichkeite zum Programmiere lerne für alli Lebewese.\",\n      tip_reticulating: \"Rückgrat isch am wachse...\",\n      tip_harry: \"Yer a Wizard, \",\n      tip_great_responsibility: \"Mit grosse Coding Skills chunt grossi Debug Verantwortig.\",\n      tip_munchkin: \"Wenn du dis Gmües nid issisch, chunt dich en Zwerg go hole wenn du schlofsch.\",\n      tip_binary: \"Es git 10 Arte vo Mensche uf de Welt: die wo s Binärsystem verstönd und die wos nid verstönd.\",\n      tip_commitment_yoda: \"En Programmierer mues tüüfsti Higob ha, en konzentrierte Geist. - Yoda\",\n      tip_no_try: \"Machs. Oder machs nid. Probiere existiert nid. - Yoda\",\n      tip_patience: \"Geduld du bruuchsch, junge Padawan. - Yoda\",\n      tip_documented_bug: \"En dokumentierte Bug isch kein Bug; es isch es Feature.\",\n      tip_impossible: \"Es schiint immer unmöglich bis es gschafft isch. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Rede isch billig. Zeig mir de Code. - Linus Torvalds\",\n      tip_first_language: \"S Katastrophalste wo du chasch lerne, isch dini erst Programmiersproch. - Alan Kay\",\n      tip_hardware_problem: \"F: Wie viel Programmierer bruuchts zum e Glüehbire uswechsle?  A: Keine, da isch es Hardware Problem.\",\n      tip_brute_force: \"Went am verzwifle bisch, bruch brute force. - Ken Thompson\",\n      tip_superpower: \"Coding isch snöchte wo mier hend was ane Superchraaft ane chund!\",\n      tip_no_code: \"Kei Code isch schneller als kei Code!\",\n      tip_source_code: \"Ich wet dWält verändere aber die wend mier de Source Code nid gää.\",\n      tip_javascript_java: \"Java isch zu JavaScript wie es Auto zume Automat. - Chris Heilmann\",\n      tip_move_forward: \"Was immer du machsch, mach immer me Fortschritt. - Martin Luther King Jr.\",\n      tip_google: \"Hesch es Problem und chunsch nüm wiiter? Googles doch mal!\",\n      tip_open_source_contribute: \"Du chasch helfe CodeCombat zverbessere!\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventar\",\n      save_load_tab: \"Spaicherä/Ladä\",\n      options_tab: \"Optionä\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Vidio Tutorial\",\n      guide_tips: \"Tipps\",\n      multiplayer_tab: \"Multiplayer\",\n      auth_tab: \"Regischtriere\",\n      inventory_caption: \"Rüscht din Held uus\",\n      choose_hero_caption: \"Wähl din Held und dini Sprach\",\n      options_caption: \"Iistellige apasse\",\n      guide_caption: \"Doku und Tipps\",\n      multiplayer_caption: \"Spil mid dini Fründe!\",\n      auth_caption: \"Speichere din Fortschritt.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Lueg der dRanglischte aa!\",\n      scores: \"Pünkt\",\n      top_players: \"Beschti Speiler\",\n      day: \"Hüt\",\n      week: \"Die Wuuche\",\n      all: \"Vo immer\",\n      time: \"Ziit\",\n      damage_taken: \"Schade gnoo\",\n      damage_dealt: \"Schade uusteilt\",\n      difficulty: \"Schwirigkeitsgrad\",\n      gold_collected: \"Gold gsammlet\"\n    },\n    inventory: {\n      equipped_item: \"Uusgrüschteti Items\",\n      required_purchase_title: \"Benötigt\",\n      available_item: \"Verfüegbar\",\n      restricted_title: \"Verbote\",\n      should_equip: \"(2mal Klicke zum uusrüschte)\",\n      equipped: \"(usgrüschtet)\",\n      locked: \"(geschperrt)\",\n      restricted: \"(verbote i dem Level)\",\n      equip: \"Uusrüschte\",\n      unequip: \"Nüm Uusrüschte\"\n    },\n    buy_gems: {\n      few_gems: \"Es paar Edelstei\",\n      pile_gems: \"En hufe vo Edelstei\",\n      chest_gems: \"En ganzi True voll Edelstei\",\n      purchasing: \"Kaufen...\",\n      declined: \"Dini Charte isch leider abglehnt worde.\",\n      retrying: \"Server Fehler, probiere nochmals.\",\n      prompt_title: \"Nid gnug Edelstei!\",\n      prompt_body: \"Wetsch mee chaufe?\",\n      prompt_button: \"zum Shop\",\n      recovered: \"Früenere Ichauf zruggerstatet. Bitte dSite neu lade!\"\n    },\n    subscribe: {\n      comparison_blurb: \"Verschärf dins Chönne midme CodeCombat Abonement.\",\n      subscribe_title: \"Aboniere\",\n      unsubscribe: \"Deaboniere\",\n      confirm_unsubscribe: \"Deaboniere beschtätige\",\n      never_mind: \"Keis Problem, ich lieb dich trotzdem.\",\n      thank_you_months_prefix: \"Danke das du üs die Monät\",\n      thank_you_months_suffix: \"so unterschtütz hesch.\",\n      thank_you: \"Danke, dass du CodeCombat so unterschtüzisch.\",\n      sorry_to_see_you_go: \"Schad, dass du gasch! Bitte seg üs doch was mier hetted chönne besser mache.\",\n      unsubscribe_feedback_placeholder: \"Ohaletz, was hemmer gmacht?\",\n      subscription_required_to_play: \"Du bruchsch es Abo um das Level zspile.\",\n      loading_info: \"Lade Abo Informatione...\",\n      managed_by: \"Verwaltet vo\",\n      will_be_cancelled: \"Wird abbroche am\",\n      currently_free: \"Du hesch jetzt grad es frii Abo\",\n      managed_subs: \"Abos verwalte\",\n      subscribing: \"Am Aboniere...\",\n      unsubscribing: \"Am Abo chünde\",\n      subscribe_prepaid: \"Klick Aboniere um en PrePaid Code izlöse\",\n      using_prepaid: \"Bruch en PrePaid Code um en Monet zAboniere\"\n    },\n    choose_hero: {\n      choose_hero: \"Wähl din Held\",\n      programming_language: \"Programmiersprach\",\n      programming_language_description: \"Weli Programmiersprach wetsch benutze?\",\n      \"default\": \"Standard\",\n      python_blurb: \"Eifach und doch mächtig.\",\n      javascript_blurb: \"D Internetsproch.\",\n      coffeescript_blurb: \"Nettere JavaScript Syntax.\",\n      lua_blurb: \"D Sproch für Game Scripts.\",\n      weapons: \"Waffene\",\n      weapons_warrior: \"Schwärter - churzi Richwiti, kei Magie\",\n      weapons_ranger: \"Armbrüscht, Knarre - grossi Richwiti, kei Magie\",\n      weapons_wizard: \"Zauberstäb - grossi Richwiti, Magie\",\n      attack: \"Schadä\",\n      health: \"Läbä\",\n      speed: \"Schnelligkeit\",\n      regeneration: \"Regeneration\",\n      range: \"Richwiti\",\n      skills: \"Fähigkeite\",\n      attack_3: \"Waffeschade.\"\n    },\n    skill_docs: {\n      action_name: \"name\",\n      action_specific_cooldown: \"Abklingziit\",\n      action_damage: \"Schade\",\n      action_range: \"Richwiti\",\n      action_radius: \"Radius\"\n    },\n    save_load: {\n      granularity_saved_games: \"Gschpeicheret\",\n      granularity_change_history: \"Verlauf\"\n    },\n    options: {\n      volume_label: \"Luutstärchi\",\n      music_label: \"Musig\",\n      editor_config_title: \"Editor Konfiguration\",\n      editor_config_livecompletion_label: \"Live Auto-Vervollständigung\",\n      editor_config_livecompletion_description: \"Schlot dir möglichi Wortvervollständigunge vor während du tippsch.\",\n      editor_config_invisibles_label: \"Unsichtbari Zeiche azeige\",\n      editor_config_invisibles_description: \"Zeigt unsichtbari Zeiche ah wie z.B. space und tab.\",\n      editor_config_indentguides_label: \"Izüg azeige\",\n      editor_config_indentguides_description: \"Zeigt vertikali Linie zum de Zeileizug besser gseh.\",\n      editor_config_behaviors_label: \"Intelligents Verhalte\",\n      editor_config_behaviors_description: \"Auto-vervollständigt Chlammere und Ahfüerigszeiche.\"\n    },\n    about: {\n      matt_title: \"Programmierer\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Neui Version speichere\",\n      new_major_version: \"Neui Hauptversion\",\n      submitting_patch: \"Patch am abgee\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"Ich bi iverstandee\"\n    },\n    contact: {\n      contact_us: \"CodeCombat kontaktiere\",\n      welcome: \"Mir ghöred gern vo dir! Benutz das Formular zum üs e E-Mail schicke.\",\n      forum_prefix: \"Für öffentlichi Sache versuechs mol stattdesse i \",\n      forum_page: \"üsem Forum\",\n      forum_suffix: \".\",\n      faq_prefix: \"Es gid au es\",\n      faq: \"FAQ\",\n      send: \"Feedback schicke\"\n    },\n    account_settings: {\n      title: \"Account Istellige\",\n      not_logged_in: \"Log dich ih oder erstelle en Account zum dini Istellige ändere.\",\n      me_tab: \"Ich\",\n      picture_tab: \"Bild\",\n      delete_account_tab: \"Din Account lösche\",\n      wrong_email: \"Falschi Email Adrässe\",\n      delete_this_account: \"Dä Account für immer Lösche\",\n      god_mode: \"Gott Modus\",\n      emails_tab: \"E-Mails\",\n      admin: \"Admin\",\n      new_password: \"Neus Passwort\",\n      new_password_verify: \"Bestätige\",\n      email_subscriptions: \"E-Mail Abos\",\n      email_announcements: \"Akündigunge\",\n      email_announcements_description: \"Bechum Mails mit Neuigkeite und de neuste Entwicklige bi CodeCombat.\",\n      email_notifications: \"Benachrichtigunge\",\n      email_notifications_summary: \"Istellige für personalisierti, automatischi E-Mail Notifikatione im Zemehang mit dine CodeCombat Aktivitäte\",\n      email_any_notes: \"Alli Notifikatione\",\n      email_any_notes_description: \"Deaktiviere zum kei Aktivitäts-Notifikatione meh per E-Mail becho.\",\n      email_news: \"Neuigkeite\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Shortcuts uf de Tastatur\",\n      space: \"Space\",\n      enter: \"Enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"De jetzig Code laufe laa.\",\n      run_real_time: \"In Echtziit laufe laa.\",\n      continue_script: \"Nochem aktuelle Script fortsetze.\",\n      skip_scripts: \"Alli überspringbare Scripts überspringe.\",\n      toggle_playback: \"Play/Pause istelle.\",\n      scrub_playback: \"Reise vorwärts und zrugg i de Ziit.\",\n      single_scrub_playback: \"Reise eis einzels Frame vorwärts und zrugg i de Ziit.\",\n      scrub_execution: \"Gang dur d Zauberusfüehrig.\",\n      toggle_debug: \"Debug Display ischalte/usschalte.\",\n      toggle_grid: \"Gitter ischalte/usschalte.\",\n      toggle_pathfinding: \"Wegfinder ischalte/usschalte.\",\n      beautify: \"Mach din Code schöner, indem du sini Formatierig standartisiersch.\",\n      maximize_editor: \"Maximize/minimize de code editor.\"\n    },\n    community: {\n      main_title: \"CodeCombat Community\"\n    },\n    legal: {\n      page_title: \"Rechtlichs\",\n      opensource_intro: \"CodeCombat isch free to play und komplett Open Source.\",\n      opensource_description_prefix: \"Lueg dir \",\n      github_url: \"üsi GitHub Siite\",\n      opensource_description_center: \"ah und hilf mit, wennd magsch! CodeCombat isch uf dutzendi Open Source Projekt ufbaut und mir liebed sie. Lueg i \",\n      archmage_wiki_url: \"üses Erzmagier-Wiki\",\n      opensource_description_suffix: \"ine zum d Liste a de Software finde, wo das Game möglich mached.\",\n      practices_title: \"Respektvolli bewährti Praxis\",\n      practices_description: \"Das sind üsi Verspreche a dich, de Spieler, in bitz weniger Fachchinesisch.\",\n      privacy_title: \"Dateschutz\",\n      security_title: \"Sicherheit\",\n      security_description: \"Mir bemühed üs, dini persönliche Informatione sicher ufzbewahre. Als es Open Source Projekt isch üsi Siite offe für jede, wo gern möcht üsi Security System besichtige und verbessere.\",\n      email_title: \"E-Mail\",\n      email_description_prefix: \"Mir werded dich nid mit Spam überfluete. I dine\",\n      email_settings_url: \"E-Mail Istellige\",\n      email_description_suffix: \"oder dur d Links i de E-Mails wo mir schicked, chasch du jederziit dini Preferänze ändere und dich ganz eifach us de Mailing-Liste neh.\",\n      cost_title: \"Chöste\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///220\n");

/***/ })

});