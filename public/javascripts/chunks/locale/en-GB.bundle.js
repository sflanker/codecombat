/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:d7e26e9869654749f6f4, name:locale/en-GB, filebase:en-GB.bundle.js, query:, file:javascripts/chunks/locale/en-GB.bundle.js */
webpackJsonp([62],{

/***/ 223:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"English (UK)\",\n  englishDescription: \"English (UK)\",\n  translation: {\n    options: {\n      editor_config_behaviors_label: \"Smart Behaviours\"\n    },\n    contribute: {\n      archmage_introduction: \"One of the best parts about building games is they synthesise so many different things. Graphics, sound, real-time networking, social networking, and of course many of the more common aspects of programming, from low-level database management, and server administration to user facing design and interface building. There's a lot to do, and if you're an experienced programmer with a hankering to really dive into the nitty-gritty of CodeCombat, this class might be for you. We would love to have your help building the best programming game ever.\",\n      diplomat_join_suf_github: \", edit it online, and submit a pull request. Also, check this box below to keep up-to-date on new internationalisation developments!\"\n    },\n    legal: {\n      copyrights_title: \"Copyrights and Licences\",\n      contributor_title: \"Contributor Licence Agreement\",\n      mit_license_url: \"MIT licence\",\n      cc_license_url: \"Creative Commons Attribution 4.0 International Licence\"\n    },\n    code_play_create_account_modal: {\n      title: \"You did it!\",\n      body: \"You are now on your way to becoming a master coder. Sign up to receive an extra <strong>100 Gems</strong> & you will also be entered for a chance to <strong>win £2,000 & other Lenovo Prizes</strong>.\",\n      sign_up: \"Sign up & keep coding ▶\",\n      victory_sign_up_poke: \"Create a free account to save your code & be entered for a chance to win prizes!\",\n      victory_sign_up: \"Sign up & be entered to <strong>win £2,000</strong>\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///223\n");

/***/ })

});