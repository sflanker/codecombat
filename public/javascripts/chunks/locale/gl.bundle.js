/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:d00e845924c53d468d7e, name:locale/gl, filebase:gl.bundle.js, query:, file:javascripts/chunks/locale/gl.bundle.js */
webpackJsonp([53],{

/***/ 232:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Galego\",\n  englishDescription: \"Galician\",\n  translation: {\n    nav: {\n      play: \"Xogar\",\n      community: \"Comunidade\",\n      blog: \"Blog\",\n      forum: \"Foro\",\n      account: \"Conta\",\n      profile: \"Perfil\",\n      home: \"Inicio\",\n      contribute: \"Colaborar\",\n      legal: \"Legalidade\",\n      about: \"Sobre nós\",\n      contact: \"Contacta\",\n      twitter_follow: \"Síguenos en Twitter\"\n    },\n    modal: {\n      close: \"Pechar\",\n      okay: \"Ok\"\n    },\n    not_found: {\n      page_not_found: \"Páxina non atopada\"\n    },\n    diplomat_suggestion: {\n      title: \"Axuda a traducir CodeCombat!\",\n      sub_heading: \"Necesitamos das túas habilidades lingüisticas.\",\n      pitch_body: \"Nós desenvolvemos CodeCombat en inglés, pero xa temos xogadores de todo o mundo. Moitos deles queren xogar en galego porque non falan inglés, así que si falas ambos idiomas, inscríbete como Diplomático e axuda a traducir a web e todos os niveis de CodeCombat ao galego.\",\n      missing_translations: \"Mentras terminamos a traducción ao galego, verás en castelán ou en inglés as partes que non estén ainda dispoñibles.\",\n      learn_more: \"Aprende máis sobre o que é ser un Diplomático\",\n      subscribe_as_diplomat: \"Suscríbete como Diplomático\"\n    },\n    play: {\n      play_as: \"Xogar como\",\n      spectate: \"Mirar\",\n      players: \"xogadores\",\n      hours_played: \"horas xogadas\",\n      items: \"Obxectos\",\n      heroes: \"Heroes\",\n      achievements: \"Logros\",\n      settings: \"Axustes\",\n      next: \"Seguinte Heroe\",\n      change_hero: \"Seleccionar Heroe\",\n      anonymous: \"Xogador Anónimo\",\n      level_difficulty: \"Dificultade: \",\n      campaign_multiplayer: \"Areas Multixogador\",\n      campaign_multiplayer_description: \"... nas que o teu código se enfrentará ao de outros xogadores.\"\n    },\n    login: {\n      sign_up: \"Crear unha conta\",\n      log_in: \"Entrar\",\n      logging_in: \"Entrando...\",\n      log_out: \"Saír\"\n    },\n    signup: {\n      email_announcements: \"Recibir noticias por correo electrónico\",\n      creating: \"Creando conta...\",\n      sign_up: \"Rexistrarse\",\n      log_in: \"Iniciar sesión con contrasinal\",\n      required: \"Tes que estar rexistrado antes de poder continuar.\"\n    },\n    recover: {\n      recover_account_title: \"Recuperar Conta\",\n      send_password: \"Enviar recuperación de contrasinal\",\n      recovery_sent: \"Email de recuperación de contrasinal enviado.\"\n    },\n    items: {\n      armor: \"Armadura\",\n      accessories: \"Accesorios\",\n      misc: \"Miscelánea\"\n    },\n    common: {\n      loading: \"Cargando...\",\n      saving: \"Gardando...\",\n      sending: \"Enviando...\",\n      send: \"Enviar\",\n      cancel: \"Cancelar\",\n      save: \"Gardar\",\n      publish: \"Publicar\",\n      create: \"Crear\",\n      fork: \"Bifurcar\",\n      play: \"Xogar\",\n      retry: \"Reintentar\",\n      watch: \"Mirar\",\n      unwatch: \"Pasar\",\n      submit_patch: \"Enviar Parche\"\n    },\n    general: {\n      and: \"e\",\n      name: \"Nome\",\n      date: \"Data\",\n      body: \"Corpo\",\n      version: \"Versión\",\n      commit_msg: \"Mensaxe de Asignación ou Commit\",\n      version_history: \"Historial de versión\",\n      version_history_for: \"Historial das versións de: \",\n      result: \"Resultado\",\n      results: \"Resultados\",\n      description: \"Descripción\",\n      or: \"ou\",\n      subject: \"Asunto\",\n      email: \"Correo electrónico\",\n      password: \"Contrasinal\",\n      message: \"Mensaxe\",\n      code: \"Código\",\n      ladder: \"Clasificación\",\n      when: \"Cando\",\n      opponent: \"Opoñente\",\n      rank: \"Rango\",\n      score: \"Puntuación\",\n      win: \"Victoria\",\n      loss: \"Derrota\",\n      tie: \"Empate\",\n      easy: \"Doado\",\n      medium: \"Media\",\n      hard: \"Difícil\",\n      player: \"Xogador\"\n    },\n    units: {\n      second: \"segundo\",\n      seconds: \"segundos\",\n      minute: \"minuto\",\n      minutes: \"minutos\",\n      hour: \"hora\",\n      hours: \"horas\",\n      day: \"día\",\n      days: \"días\",\n      week: \"semana\",\n      weeks: \"semanas\",\n      month: \"mes\",\n      months: \"meses\",\n      year: \"ano\",\n      years: \"anos\"\n    },\n    play_level: {\n      done: \"Feito\",\n      home: \"Inicio\",\n      skip: \"Saltar\",\n      game_menu: \"Menú de Xogo\",\n      restart: \"Reiniciar\",\n      goals: \"Obxectivos\",\n      goal: \"Obxectivo Principal\",\n      success: \"Éxito!\",\n      incomplete: \"Incompleto\",\n      timed_out: \"Acabouse o tempo\",\n      failing: \"Fallando\",\n      reload_title: \"Recargar todo o código?\",\n      reload_really: \"Estás seguro de que queres reiniciar o nivel?\",\n      reload_confirm: \"Recargalo todo\",\n      victory_title_prefix: \"¡\",\n      victory_title_suffix: \" Completado!\",\n      victory_sign_up: \"Rexístrate para recibir actualizacións.\",\n      victory_sign_up_poke: \"Queres recibir as últimas noticias no teu correo electrónico? Crea unha conta gratuita e manterémoste informado!\",\n      victory_rate_the_level: \"Puntúa este nivel: \",\n      victory_return_to_ladder: \"Volver á Clasificación\",\n      victory_saving_progress: \"Gardando Progreso\",\n      victory_go_home: \"Ir ao Inicio\",\n      victory_review: \"Contanos máis!\",\n      victory_hour_of_code_done: \"Xa remataches?\",\n      victory_hour_of_code_done_yes: \"Sí, rematei coa miña hora de código!\",\n      tome_cast_button_run: \"Executar\",\n      tome_cast_button_running: \"Executando\",\n      tome_cast_button_ran: \"Executado\",\n      tome_submit_button: \"Mandar\",\n      tome_reload_method: \"Recargar código orixinal para este método\",\n      tome_available_spells: \"Feitizos dispoñibles\",\n      tome_your_skills: \"As túas Habilidades\",\n      code_saved: \"Codigo Gardado\",\n      skip_tutorial: \"Saltar (esc)\",\n      keyboard_shortcuts: \"Atallos de teclado\",\n      loading_start: \"Iniciar Nivel\",\n      time_current: \"Agora:\",\n      time_total: \"Máx:\",\n      time_goto: \"Ir a:\",\n      infinite_loop_try_again: \"Téntao de novo\",\n      infinite_loop_reset_level: \"Reiniciar nivel\",\n      infinite_loop_comment_out: \"Comenta o meu código\",\n      tip_toggle_play: \"Alterna entre xogar/pausa con Ctrl+P.\",\n      tip_scrub_shortcut: \"Ctrl+[ y Ctrl+] rebobina e avanza cara adiante.\",\n      tip_guide_exists: \"Preme na guía arriba da páxina para máis información útil.\",\n      tip_open_source: \"CodeCombat é 100% código aberto!\",\n      tip_beta_launch: \"CodeCombat lanzou a súa beta en Outubro de 2014.\",\n      tip_think_solution: \"Pensa na solución, non no problema.\",\n      tip_theory_practice: \"En teoría, non hai diferenza entre a teoría e a práctica. Pero na práctica, si que a hai. - Yogi Berra\",\n      tip_error_free: \"Hai dúas formas de escribir programas sin erros; só a terceira funciona. - Alan Perlis\",\n      tip_debugging_program: \"Si depurar é o proceso de eliminar erros, entón programar debe ser o proceso de crealos. - Edsger W. Dijkstra\",\n      tip_forums: \"Diríxete aos foros e dinos o que pensas!\",\n      tip_baby_coders: \"No futuro, incluso os bebés serán Archimagos.\",\n      tip_morale_improves: \"Seguirase cargando ata que a moral mellore.\",\n      tip_all_species: \"Cremos nas mesmas oportunidades para aprender a programar para tódalas especies.\",\n      tip_reticulating: \"Recompoñendo o espiñazo.\",\n      tip_harry: \"Ei un mago, \",\n      tip_great_responsibility: \"As Grandes habilidades de codificación-programación conlevan unha gran responsabilidade á hora de depurar.\",\n      tip_munchkin: \"Se non comes a verdura, un munchkin virá a por ti mentras durmes.\",\n      tip_binary: \"Hai 10 tipos de persoas no mundo: as que saben binario e as que non.\",\n      tip_commitment_yoda: \"Un programador debe ter o máis serio compromiso, a mente máis crítica. ~ Ioda\",\n      tip_no_try: \"Faino ou non o fagas, pero non o tentes. - Ioda\",\n      tip_patience: \"Paciencia ter debes, xove Padawan. - Ioda\",\n      tip_documented_bug: \"Un erro documentado non é un erro, é unha característica máis.\",\n      tip_impossible: \"Sempre parece imposible, ata que se fai. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Falar é doado. Ensíname o  código. - Linus Torvalds\",\n      tip_first_language: \"A cousa máis desastrosa que podes aprender é a túa primeira linguaxe de programación. - Alan Kay\",\n      tip_hardware_problem: \"P: Cantos programadores fan falla para cambiar unha bombilla?  R: Ningún, é un problema de hardware.\",\n      tip_premature_optimization: \"A optimizacion prematura é a raíz de todo mal. - Donald Knuth\",\n      tip_brute_force: \"Cando haxa dúbidas, usa a forza bruta. - Ken Thompson\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventario\",\n      save_load_tab: \"Gardar/Cargar\",\n      options_tab: \"Opcións\",\n      guide_tab: \"Guía\",\n      multiplayer_tab: \"Multixogador\",\n      auth_tab: \"Crear conta\",\n      inventory_caption: \"Equipa ao teu Heroe\",\n      choose_hero_caption: \"Escolle a lingua do teu Heroe\",\n      options_caption: \"Axustes de configuración\",\n      guide_caption: \"Documentos e pistas\",\n      multiplayer_caption: \"Xoga cos teus amigos!\",\n      auth_caption: \"Gardar o teu progreso.\"\n    },\n    choose_hero: {\n      choose_hero: \"Selecciona ó teu Heroe\",\n      programming_language: \"Linguaxe de programación\",\n      programming_language_description: \"Que linguaxe de programación desexas usar?\",\n      python_blurb: \"Simple, pero poderoso.\",\n      javascript_blurb: \"A linguaxe da web.\",\n      coffeescript_blurb: \"Síntese de JavaScript mellorada.\",\n      lua_blurb: \"Linguaxe Script para Xogos.\",\n      status: \"Estado\",\n      weapons: \"Armas\",\n      attack: \"Ataque\",\n      health: \"Saúde\",\n      speed: \"Velocidade\",\n      skills: \"Habilidades\"\n    },\n    save_load: {\n      granularity_saved_games: \"Gardado\",\n      granularity_change_history: \"Historia\"\n    },\n    options: {\n      general_options: \"Opcións Xerais\",\n      volume_label: \"Volume\",\n      music_label: \"Música\",\n      music_description: \"Música de fondo activada/desactivada.\",\n      editor_config_title: \"Configuración do editor\",\n      editor_config_livecompletion_description: \"Amosa suxestións de autocompletado mentres se escribe.\",\n      editor_config_invisibles_label: \"Amosar elementos invisibles\",\n      editor_config_invisibles_description: \"Pódense ver elementos invisibles como espazos ou tabulacións.\",\n      editor_config_indentguides_label: \"Amosar guías de sangría\",\n      editor_config_indentguides_description: \"Pódense ver as liñas verticais que definen o sangrado dunha forma máis clara.\",\n      editor_config_behaviors_label: \"Comportamentos intelixentes\",\n      editor_config_behaviors_description: \"Complétanse automáticamente corchetes, paréntesis e comiñas.\"\n    },\n    about: {\n      nick_title: \"Programador\",\n      matt_title: \"Programador\",\n      scott_title: \"Programador\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Gardar nova versión\",\n      new_major_version: \"Nova versión principal\",\n      cla_prefix: \"Para gardar os cambios, primeiro debes aceptar o noso\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"De acordo\"\n    },\n    contact: {\n      contact_us: \"Contacta con CodeCombat\",\n      welcome: \"Gústanos saber de ti! Usa este formulario para enviarnos un correo. \",\n      forum_prefix: \"Para asuntos públicos, por favor usa \",\n      forum_page: \"o noso foro\",\n      forum_suffix: \" no seu lugar.\",\n      send: \"Envía o teu comentario\"\n    },\n    account_settings: {\n      title: \"Axustes da conta\",\n      not_logged_in: \"Inicia sesión ou crea unha conta para cambiar os teus axustes.\",\n      me_tab: \"Eu\",\n      picture_tab: \"Foto\",\n      emails_tab: \"Correos electrónicos\",\n      admin: \"Admin\",\n      new_password: \"Novo contrasinal\",\n      new_password_verify: \"Verificar\",\n      email_subscriptions: \"Suscripcións de correo electrónico\",\n      email_subscriptions_none: \"Sen suscripcións de correo electrónico.\",\n      email_announcements: \"Novas\",\n      email_announcements_description: \"Recibe correos electrónicos coas últimas novas e desenvolvementos de CodeCombat.\",\n      email_notifications: \"Notificacións\",\n      email_notifications_summary: \"Controles para personalizar as notificacións antomáticas por correo electrónico, relacionadas coa túa actividade en CodeCombat.\",\n      email_any_notes: \"Calqueira notificación\",\n      email_any_notes_description: \"Deshabilitar tódalass notificacións por correo electrónico.\",\n      email_news: \"Novas\",\n      email_recruit_notes: \"Oportunidades de Traballo\",\n      email_recruit_notes_description: \"Se xogas realmente ben, pode que contactemos contigo para que consigas un traballo (mellor).\",\n      contributor_emails: \"Correos para colaboradores\",\n      contribute_prefix: \"Buscamos xente que se una á nosa comunidade! Compróbaa \",\n      contribute_page: \"Páxina de colaboracións\",\n      contribute_suffix: \" para saber máis.\",\n      email_toggle: \"Activar todo\",\n      error_saving: \"Erro ao gardar\",\n      saved: \"Cambios gardados\",\n      password_mismatch: \"O contrasinal non coincide\",\n      password_repeat: \"Repite o teu contrasinal.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Atallos de teclado\",\n      space: \"Barra espaciadora (Espazo)\",\n      enter: \"Enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_real_time: \"Executar en tempo real.\",\n      beautify: \"Embelece o teu código estandarizando o formato.\",\n      maximize_editor: \"Maximizar/minimizar o editor de código.\"\n    },\n    community: {\n      main_title: \"Comunidade de CodeCombat\",\n      find_us: \"Podes atoparnos nestes sitios\",\n      social_blog: \"Lee o blog de CodeCombat en Sett\",\n      social_discource: \"Únete á discusion no noso foro\",\n      social_facebook: \"Dalle a Gústame a CodeCombat en Facebook\",\n      social_twitter: \"Segue a CodeCombat en Twitter\",\n      social_gplus: \"Únete a CodeCombat en Google+\",\n      contribute_to_the_project: \"Contribúe ao proxecto\"\n    },\n    classes: {\n      archmage_title: \"Archimago\",\n      archmage_title_description: \"(Programador)\",\n      artisan_title: \"Artesán\",\n      artisan_title_description: \"(Deseñador de Niveis)\",\n      adventurer_title: \"Aventureiro\",\n      adventurer_title_description: \"(Tester de Niveis)\",\n      scribe_title: \"Escriba\",\n      scribe_title_description: \"(Editor de Artigos)\",\n      diplomat_title: \"Diplomático\",\n      diplomat_title_description: \"(Tradutor)\",\n      ambassador_title: \"Embaixador\",\n      ambassador_title_description: \"(Soporte)\"\n    },\n    editor: {\n      main_title: \"Editores de CodeCombat\",\n      article_title: \"Editor de Artigos\",\n      thang_title: \"Editor de Obxectos\",\n      level_title: \"Editor de Niveis\",\n      achievement_title: \"Editor de Logros\",\n      back: \"Voltar\",\n      revert: \"Revertir\",\n      revert_models: \"Revertir Modelos\",\n      pick_a_terrain: \"Escolle un Terreno\",\n      grassy: \"Cuberto de herba\",\n      small: \"Pequeno\",\n      fork_title: \"Bifurcar nova versión\",\n      fork_creating: \"Creando bifurcación...\",\n      generate_terrain: \"Xerar Terreo\",\n      more: \"Máis\",\n      wiki: \"Wiki\",\n      live_chat: \"Chat en directo\",\n      level_some_options: \"Algunhas opcións?\",\n      level_tab_thangs: \"Obxectos\",\n      level_tab_scripts: \"Scripts\",\n      level_tab_components: \"Compoñentes\",\n      level_tab_systems: \"Sistemas\",\n      level_tab_docs: \"Documentación\",\n      level_tab_thangs_title: \"Obxectos actuais\",\n      level_tab_thangs_all: \"Todo\",\n      level_tab_thangs_conditions: \"Condicións de inicio\",\n      level_tab_thangs_add: \"Engadir Obxectos\",\n      \"delete\": \"Borrar\",\n      duplicate: \"Duplicar\",\n      rotate: \"Rotar\",\n      level_component_tab_title: \"Compoñentes Actuais\",\n      level_component_btn_new: \"Crear Novo Compoñente\",\n      level_systems_tab_title: \"Sistemas Actuais\",\n      level_systems_btn_new: \"Crear Novo Sistema\",\n      level_systems_btn_add: \"Engadir Sistema\",\n      level_components_title: \"Voltar a todos os obxectos\",\n      level_components_type: \"Tipo\",\n      level_component_edit_title: \"Editar Compoñente\",\n      level_component_config_schema: \"Configurar esquema\",\n      level_system_edit_title: \"Editar sistema\",\n      create_system_title: \"Crear novo sistema\",\n      new_component_title: \"Crear novo compoñente\",\n      new_component_field_system: \"Sistema\",\n      new_article_title: \"Crear un novo Artigo\",\n      new_thang_title: \"Crear un novo Tipo de obxecto\",\n      new_level_title: \"Crear un novo Nivel\",\n      new_article_title_login: \"Inicia sesión para crear un novo Artigo\",\n      new_thang_title_login: \"Inicia sesión para crear un novo Tipo de Thang\",\n      new_level_title_login: \"Inicia sesión para crear un novo Nivel\",\n      new_achievement_title: \"Crear un novo Logro\",\n      new_achievement_title_login: \"Inicia sesión para crear un novo Logro\",\n      article_search_title: \"Buscar artigos aquí\",\n      thang_search_title: \"Busca tipos de obxectos aquí\",\n      level_search_title: \"Buscar niveis aquí\",\n      achievement_search_title: \"Buscar Logros\",\n      read_only_warning2: \"Nota: non podes gardar nada do que edites aquí porque non iniciaches sesión.\",\n      no_achievements: \"Non se engadiron Logros a este nivel.\",\n      level_completion: \"Porcentaxe de Nivel completado\"\n    },\n    article: {\n      edit_btn_preview: \"Vista preliminar\",\n      edit_article_title: \"Editar artigo\"\n    },\n    contribute: {\n      page_title: \"Colaborar\",\n      alert_account_message_intro: \"Ola!\",\n      alert_account_message: \"Para suscribirse aos correos electrónicos de clase, precisas estar na túa conta.\",\n      archmage_introduction: \"Unha das mellores partes de desenvolver xogos é que combinas cousas moi diferentes: gráficos, son, uso de redes en tempo real, redes sociais e, por suposto, moitos dos aspectos comúns da programación, dende xestión de bases de datos a baixo nivel e administración de servidores ata deseño de experiencia do usuario e creación de interfaces. Hai unha morea de cousas por facer e se eres un programador experimentado con interés en coñecer o que se coce na trastenda de CodeCombat, esta Clase pode ser a ideal para ti. Encantaríanos recibir a túa axuda para crear o mellor xogo de programación da historia.\",\n      class_attributes: \"Atributos das Clases\",\n      archmage_attribute_1_pref: \"Coñecemento en \",\n      archmage_attribute_1_suf: \", ou desexo por aprender. A maior parte do noso código está escrito nesta linguaxe. Se eres un fan de Ruby ou Python sentiraste como na casa: é como JavaScript, pero cunha sintaxe máis agradable.\",\n      archmage_attribute_2: \"Algunha experiencia en programación e iniciativa personal. Orientarémoste, pero non podemos pasar moito tempo ensinándote.\",\n      how_to_join: \"Como unirse\",\n      join_desc_1: \"Calquera pode axudar! So bótalle un ollo ao noso \",\n      join_desc_2: \"para comenzar e marca a casilla de abaixo para etiquetarte como un bravo Archimago e obter as últimas novas por correo electrónico. Queres falar sobre que facer ou como involucrarte máis? \",\n      join_desc_3: \", ou atópanos no noso \",\n      join_desc_4: \"e partiremos dende ese punto!\",\n      join_url_email: \"Escríbenos un correo electrónico\",\n      archmage_subscribe_desc: \"Recibe correos sobre novos anuncios e oportunidades de codificar.\",\n      artisan_introduction_pref: \"Debemos construir niveis adicionais! A xente pide máis contidos e só podemos crear uns cantos. Agora mesmo a túa estación de traballo é o nivel un; o noso editor de niveis apenas é utilizable polos seus creadores, así que ten coidado. Se tes visións de campañas que acadan o infinito\",\n      artisan_introduction_suf: \", entón esta Clase é ideal para ti.\",\n      artisan_attribute_1: \"Calquera experiencia creando contido semellante estaría ben, como por exemplo o editor de niveis de Blizzard. Ainda que non se precisa!\",\n      artisan_attribute_2: \"Un desexo de facer unha morea de testeo e iteracións. Para facer bos niveis necesitas ensinarllos a outros e ver como xogan, ademáis de estar preparado para atopar os fallos a arranxalos.\",\n      artisan_attribute_3: \"Polo momento, a resistencia vai á par co Aventureiro. O noso editor de niveis está a un nivel de desenvolvemento temperá e pode ser moi frustrante usalo. Estás advertido!\",\n      artisan_join_desc: \"Segue as seguintes indicacións para usar o editor de niveis. Tómao ou déixao:\",\n      artisan_join_step1: \"Le a documentación.\",\n      artisan_join_step2: \"Crea un novo nivel e explora os niveis existentes.\",\n      artisan_join_step3: \"Busca a nosa sala pública de Slack en busca de axuda.\",\n      artisan_join_step4: \"Publica os teus niveis no foro para recibir comentarios críticos.\",\n      artisan_subscribe_desc: \"Recibe correos sobre actualizacións do editor de niveis e anuncios.\",\n      adventurer_introduction: \"Falemos claro sobre o teu papel: ti eres o tanque. Vas a recibir fortes danos. Precisamos xente que probe os niveis máis novos e axude a identificar como mellorar. A dor vai a ser enorme; facer bós xogos é un proceso longo e ninguén o fai ben a primeira vez. Se podes sobrevivir e obter unha puntuación alta en resistencia, entón esta clase é para ti.\",\n      adventurer_attribute_1: \"Estar sedento de coñecementos. Queres aprender a programar e nós queremos ensinarte como facelo. Ainda que neste caso é máis probable que sexas ti o que esté facendo a maior parte do ensino.\",\n      adventurer_attribute_2: \"Carismático. Non esquezas ser amable pero claro á hora de desglosar que precisa ser mellorado e suxerir de que formas podería facerse.\",\n      adventurer_join_pref: \"Reúnete cun (ou recluta!) Artesán e traballa con eles, ou marca a casilla de abaixo para recibir un correo cando haxa novos niveis para probar. Tamén publicaremos nas nosas redes novos niveis para revisar.\",\n      adventurer_forum_url: \"o noso foro\",\n      adventurer_join_suf: \"así que se prefires estar informado nesa forma, crea unha conta alí!\",\n      adventurer_subscribe_desc: \"Recibe correos cando haxa novos niveis para probar.\",\n      scribe_introduction_pref: \"CodeCombat non será só unha morea de niveis. Tamén será una fonte de coñecementos, unha wiki de conceptos de programación á que os niveis se engancharán. Desa forma, en lugar de que cada Artesán teña que describir en detalle que é un operador de comparación, poderá sinxelamente ligar o nivel ao Artigo que os describe e que xa foi escrito para a preparación do xogador. Algo na liña do que a \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" construiu. Se o que te gusta é articular os conceptos de programación dunha forma sinxela, entón esta clase é para ti.\",\n      scribe_attribute_1: \"Habilidade á hora de escribir é case todo o que precisas. Non só dominar a gramática e a ortografía senón tamén expresar ideas complicadas aos demais de forma sinxela.\",\n      contact_us_url: \"Escríbenos un correo electrónico\",\n      scribe_join_description: \"contanos máis sobre ti, a túa experiencia no mundo da programación e sobre que cousas te gustaría escribir. E continuaremos a partir de ahí!\",\n      scribe_subscribe_desc: \"Recibe correos sobre anuncios de redacción de Artigos.\",\n      diplomat_introduction_pref: \"Así, se aprendimos algo dende o \",\n      diplomat_launch_url: \"lanzamento en outubro\",\n      diplomat_introduction_suf: \"hai un interés considerable en CodeCombat en outros paises, ¡especialmente no Brasil! Estamos formando un corpo de tradutores con ganas de traducir un grupo de palabras tras outro para facer CodeCombat tan accesible para todo o mundo como sexa posible. Se queres recibir avances dos próximos contdos e se queeres poñer esos niveis á disposición dos que comparten o teu idioma tan pronto como sexa posible, entón esta Clase é para ti.\",\n      diplomat_attribute_1: \"Fluidez co inglés e a lingua á que queiras traducir. Cando se trata de transmitir ideas complexas, é importante ter grandes coñecementos das dúas!\",\n      diplomat_join_pref_github: \"Atopa o ficheiro local do teu idioma \",\n      diplomat_github_url: \"en GitHub\",\n      diplomat_join_suf_github: \", edítao en liña, e solicita que sexa revisado. Ademais, marca a casilla de abaixo para manterte informado dos novos progresos en Internacionalización.\",\n      diplomat_subscribe_desc: \"Recibe correos sobre novos niveis e desenvolvementos para traducir.\",\n      ambassador_introduction: \"Esta é unha comunidade en construcción e ti es parte das conexións. Temos chat Olark, correos electrónicos e as redes sociais cunha gran cantidade de persoas con quen falar, axudar a familiarizarse co xogo e aprender. Se queres axudar á xente a que se involucre, se divirta e teña boas sensacións sobre CodeCombat e cara onde vamos, entón esta clase é para ti.\",\n      ambassador_attribute_1: \"Habilidades de comunicación. Ser capaz de identificar os problemas que os xogadores están tendo e axudarlles a resolvelos. Ademais, manter ao resto de nos informados sobre o que están dicindo os xogadores, o que lles gusta, o que non, e do que máis queren!\",\n      ambassador_join_desc: \"contanos máis sobre ti, que fixeches e que estarías interesado en facer. E continuaremos a partir de ahí!\",\n      ambassador_join_note_strong: \"Nota\",\n      ambassador_join_note_desc: \"Una das nosas principais prioridades é construir un modo multixogador onde os xogadores con maiores dificultades á hora de resolver un nivel, poidan invocar aos magos máis avanzados para que lles axuden. Será unha boa maneira de que os Embaixadores poidan facer o seu traballo. Manterémoste informado!\",\n      ambassador_subscribe_desc: \"Recibe correos sobre actualizacións de soporte e desenvolvemento do multixogador.\",\n      changes_auto_save: \"Os cambios son gardados automáticamente cando marcas as casillas de verificación.\",\n      diligent_scribes: \"Os nosos dilixentes Escribas:\",\n      powerful_archmages: \"Os nosos poderosos Archimagos:\",\n      creative_artisans: \"Os nosos creativos Artesáns:\",\n      brave_adventurers: \"Os nosos bravos Aventureiros:\",\n      translating_diplomats: \"Os nosos políglotas Diplomáticos:\",\n      helpful_ambassadors: \"Os nosos amables Embaixadores:\"\n    },\n    ladder: {\n      my_matches: \"As miñas partidas\",\n      simulate: \"Simular\",\n      simulation_explanation: \"Simulando partidas podes facer que a túa partida sexa calificada máis rápido!\",\n      simulate_games: \"Simula xogos!\",\n      games_simulated_by: \"Xogos simulados por ti:\",\n      games_simulated_for: \"Xogos simulados para ti:\",\n      games_simulated: \"Xogos simulados\",\n      games_played: \"Partidas xogadas\",\n      ratio: \"Ratio\",\n      leaderboard: \"Clasificación\",\n      battle_as: \"Pelexa como \",\n      summary_your: \"As túas \",\n      summary_matches: \"Partidas - \",\n      summary_wins: \" Vitorias, \",\n      summary_losses: \" Derrotas\",\n      rank_no_code: \"Non hai código novo para calificar\",\n      rank_my_game: \"Califica o meu xogo!\",\n      rank_submitting: \"Enviando...\",\n      rank_submitted: \"Enviado para calificación\",\n      rank_failed: \"Fallo ao calificar\",\n      rank_being_ranked: \"O xogo está sendo calificado\",\n      rank_last_submitted: \"enviado \",\n      help_simulate: \"Axudar a simular Xogos?\",\n      code_being_simulated: \"O teu novo código está sendo simulado por outros xogadores para ser calificado. Irase actualizando a medida que as partidas se vaian sucedendo.\",\n      no_ranked_matches_pre: \"Non hai partidas calificadas para \",\n      no_ranked_matches_post: \" equipo! Xoga contra outros competidores e logo volta aquí para que a túa partida apareza na clasificación.\",\n      choose_opponent: \"Escolle un contrincante\",\n      select_your_language: \"Escolle o teu idioma!\",\n      tutorial_play: \"Xogar o Tutorial\",\n      tutorial_recommended: \"Recomendado se non xogaches antes.\",\n      tutorial_skip: \"Saltar o Tutorial\",\n      tutorial_not_sure: \"Non estás seguro de como funciona esto?\",\n      tutorial_play_first: \"Proba o Tutorial primeiro.\",\n      simple_ai: \"IA sinxela\",\n      warmup: \"quentamento\",\n      friends_playing: \"Amigos xogando\",\n      log_in_for_friends: \"Inicia sesión para xogar cos teus amigos!\",\n      social_connect_blurb: \"Conéctate e xoga contra os teus amigos!\",\n      invite_friends_to_battle: \"Invita aos teus amigos a unirse á batalla!\",\n      fight: \"Pelexa!\",\n      watch_victory: \"Ver a túa vitoria\",\n      defeat_the: \"Gaña a\",\n      tournament_ends: \"O torneo remata\",\n      tournament_ended: \"O torneo rematou\",\n      tournament_rules: \"Regras do Torneo\",\n      tournament_blurb: \"Escribe código, consigue ouro, constrúe exércitos, aplasta aos malos, gaña premios e sube na túa carreira no noso Torneo da Avaricia con $40,000! Mira os detalles\",\n      tournament_blurb_criss_cross: \"Gaña puxas, constrúe camiños, aniquila aos teus opoñentes, recolle xemas, e mellora a túa carreira no noso torneo Criss-Cross! Mira os detalles\",\n      tournament_blurb_blog: \"no noso blog\",\n      rules: \"Regras\",\n      winners: \"Gañadores\"\n    },\n    user: {\n      stats: \"Estatísticas\",\n      singleplayer_title: \"Niveis Individuais\",\n      multiplayer_title: \"Niveis Multixogador\",\n      achievements_title: \"Logros\",\n      last_played: \"Último Xogado\",\n      status: \"Status\",\n      status_completed: \"Completado\",\n      status_unfinished: \"Sen Rematar\",\n      no_singleplayer: \"Ainda non xogaches ningún nivel individual.\",\n      no_multiplayer: \"Ainda non xogaches ningún nivel multixogador.\",\n      no_achievements: \"Ainda non alcanzaches ningún logro.\",\n      favorite_prefix: \"O teu idioma favorito \",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      last_earned: \"Gañado a última vez\",\n      amount_achieved: \"Cantidade\",\n      achievement: \"Logro\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" en total\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" gañado\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" ata o nivel\",\n      left_xp_postfix: \"\"\n    },\n    loading_error: {\n      could_not_load: \"Erro ao cargar dende o servidor.\",\n      connection_failure: \"Fallo na conexión.\",\n      unauthorized: \"Tes que iniciar sesión. Non permites a instalación de cookies?\",\n      forbidden: \"Non tes autorización.\",\n      not_found: \"Non atopado.\",\n      not_allowed: \"Método non permitido.\",\n      timeout: \"Tempo de espera do servidor superado.\",\n      conflict: \"Conflicto de recursos.\",\n      bad_input: \"Entrada incorrecta.\",\n      server_error: \"Erro do servidor.\",\n      unknown: \"Erro descoñecido.\"\n    },\n    resources: {\n      level: \"Nivel\",\n      patches: \"Parches\",\n      system: \"Sistema\",\n      systems: \"Sistemas\",\n      component: \"Compoñente\",\n      components: \"Componentes\"\n    },\n    delta: {\n      added: \"Engadido\",\n      modified: \"Modificado\",\n      deleted: \"Eliminado\",\n      moved_index: \"Índice movido\",\n      no_changes: \"Sen Cambios\"\n    },\n    legal: {\n      page_title: \"Legal\",\n      opensource_intro: \"CodeCombat é de balde e totalmente con código aberto.\",\n      opensource_description_prefix: \"Bota un ollo a \",\n      github_url: \"o noso GitHub\",\n      opensource_description_center: \"e axúdanos se queres. CodeCombat está desenvolvido sobre ducias de proxectos de código aberto, e estamos encantados. Mira \",\n      archmage_wiki_url: \"a nosa wiki do Archimago\",\n      opensource_description_suffix: \"para atopar unha lista do software que fai posible este xogo.\",\n      practices_title: \"Prácticas respetuosas\",\n      practices_description: \"Isto é o que che propoñemos a ti, o xogador, sen usar moita terminoloxía legal.\",\n      privacy_title: \"Privacidade\",\n      security_title: \"Seguridade\",\n      security_description: \"Esforzámonos por manter segura a túa información persoal. Como proxecto de código aberto, o noso sitio está aberto a calqueira que queira revisalo e mellorar os nosos sistemas de seguridade.\",\n      email_title: \"Correo electrónico\",\n      email_description_prefix: \"Non te inundaremos con spam. Mediante\",\n      email_settings_url: \"os teus axustes de correo electrónico\",\n      email_description_suffix: \"ou a través das ligazóns nos correos que te enviemos, podes cambiar as túas preferencias e darte de baixa doadamente en calquera momento.\",\n      cost_title: \"Prezo\",\n      copyrights_title: \"Copyrights e Licenzas\",\n      contributor_title: \"Acordo de Licenza do Colaborador\",\n      contributor_description_prefix: \"Todas as colaboracións, tanto na web como no noso repositorio de GitHub, están suxeitas ao noso\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"co que deberás estar de acordo antes de colaborar.\",\n      code_title: \"Código - MIT\",\n      code_description_prefix: \"Todo o código propiedade de CodeCombat ou aloxado en codecombat.com, ámbolos dous no repositorio GitHub ou na base de datos de codecombat.com, está licenciado baixo a \",\n      mit_license_url: \"Licenza MIT\",\n      code_description_suffix: \"Esto inclúe todo o código en Sistemas y Compoñentes posto a disposición por CodeCombat para a creación de niveis.\",\n      art_title: \"Arte/Música - Creative Commons \",\n      art_description_prefix: \"Todo o contido común está dispoñible baixo a\",\n      cc_license_url: \"licenza Creative Commons Attribution 4.0 International\",\n      art_description_suffix: \"Contido común é calqueira cousa posta a disposición por CodeCombat co propósito da creación de niveis. Esto inclúe:\",\n      art_music: \"Música\",\n      art_sound: \"Son\",\n      art_artwork: \"Arte\",\n      art_sprites: \"Persoaxes\",\n      art_other: \"Outros traballos creativos non relacionados con código postos a disposición para a creación de Niveis.\",\n      art_access: \"Actualmente non hai un sistema universal e doado para ir en busca destes recursos. En xeral, recóllelos das URLs como as usadas no sitio, contáctanos para recibir asistencia, ou axúdanos a estender o sitio para facer accesibles estes recursos de maneira máis fácil.\",\n      art_paragraph_1: \"Para a atribución, por favor pon o teu nome e liga a codecombat.com preto do lugar onde se utiliza a fonte ou no seu caso para o medio. Por exemplo:\",\n      use_list_1: \"Se se usa nunha película ou outro xogo, inclúe codecombat.com nos créditos.\",\n      use_list_2: \"Se se usa nunha páxina web, inclúe unha ligazón preto de onde se use, por exemplo baixo unha imaxe, ou nunha páxina xeral de atribucións onde tamén menciones outros traballos Creative Commons e software de código aberto que uses na túa web. Se xa se fai clara referencia a CodeCombat, como no post de un blog mencionando a CodeCombat, non é precisa unha atribución do contido por separado.\",\n      art_paragraph_2: \"Se o contido usado foi creado non por CodeCombat senón por un usuario de codecombat.com, deberá serlle atribuido a dito usuario e seguir as directrices de atribución proporcionadas na descripción do recurso, se as hai.\",\n      rights_title: \"Dereitos Reservados\",\n      rights_desc: \"Todos os dereitos reservados para os Niveis. Esto inclúe\",\n      rights_scripts: \"Scripts\",\n      rights_unit: \"Configuración da Unidade\",\n      rights_writings: \"Escritos\",\n      rights_media: \"Elementos audiovisuais (sons, música) e calqueira outro contido creativo creado específicamente para ese Nivel e que non estivera dispoñible para todos ao crear o/os niveis.\",\n      rights_clarification: \"Para aclarar, calquera cousa que se pon a disposición no editor de niveis co fin de crear Niveis atópase baixo licenza CC, mentras que o contido creado co editor de niveis ou subido no curso da creación de niveis non o é.\",\n      nutshell_title: \"Nunha palabra\",\n      nutshell_description: \"Todos os recursos que ofrecemos no editor de niveis son libres de ser utilizados para crear niveis. Pero reservámosnos o dereito de restrinxir a distribución dos propios niveis (que se crean en codecombat.com) de modo que se poida cobrar por eles no futuro, se iso é o que termina por suceder.\",\n      canonical: \"A versión inglesa deste documento é a canónica, a definitiva. Se hai algunha diferenza coa que poida aparecer nas traduccións, a versión inglesa é a que prevalece sobre as demais.\"\n    },\n    ladder_prizes: {\n      title: \"Premios do Torneo\",\n      blurb_1: \"Estes premios entregaranse dacordo \",\n      blurb_2: \"as regras do torneo\",\n      blurb_3: \"Aos primeiros xogadores humanos e ogros.\",\n      blurb_4: \"Dous equipos significa doble-premio!\",\n      blurb_5: \"(Haberá dous gañadores por posto, dous no primeiro posto, dous no segundo, etc.)\",\n      rank: \"Rango\",\n      prizes: \"Premios\",\n      total_value: \"Valor Total\",\n      in_cash: \"en diñeiro\",\n      custom_wizard: \"Persoaliza o teu Mago de CodeCombat\",\n      custom_avatar: \"Persoaliza o teu avatar de CodeCombat\",\n      heap: \"Por seis meses de acceso \\\"Startup\\\"\",\n      credits: \"créditos\",\n      one_month_coupon: \"cupón: elixe entre Rails ou HTML\",\n      one_month_discount: \"desconto do 30%: elixe entre Rails ou HTML\",\n      license: \"licenza\",\n      oreilly: \"ebook da túa escolla\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///232\n");

/***/ })

});