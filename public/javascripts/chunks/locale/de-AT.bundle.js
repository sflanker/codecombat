/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:9fe3d22e941161a85722, name:locale/de-AT, filebase:de-AT.bundle.js, query:, file:javascripts/chunks/locale/de-AT.bundle.js */
webpackJsonp([66],{

/***/ 219:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Deutsch (Österreich)\",\n  englishDescription: \"German (Austria)\",\n  translation: {\n    nav: {\n      play: \"Spielen\",\n      community: \"Community\",\n      courses: \"Kurse\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Account\",\n      my_account: \"Mein Account\",\n      profile: \"Profil\",\n      home: \"Home\",\n      contribute: \"Helfen\",\n      legal: \"Rechtliches\",\n      about: \"Über\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Twitter\",\n      careers: \"Berufe\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Erstelle eine Klasse\",\n      other: \"Andere\",\n      learn_to_code: \"Lerne zu programmieren!\",\n      toggle_nav: \"Navigation umschalten\",\n      schools: \"Schule\",\n      get_involved: \"Werde eingebunden\",\n      open_source: \"Open source (GitHub)\",\n      support: \"Support\",\n      faqs: \"FAQs\",\n      help_pref: \"Brauchst du Hilfe? Email\",\n      help_suff: \"und wir treten in Kontakt!\"\n    },\n    modal: {\n      close: \"Schließen\",\n      okay: \"Okay\"\n    },\n    not_found: {\n      page_not_found: \"Seite nicht gefunden\"\n    },\n    diplomat_suggestion: {\n      title: \"Hilf CodeCombat zu übersetzen!\",\n      sub_heading: \"Wir brauchen Deine Sprachfähigkeiten.\",\n      pitch_body: \"Wir entwickeln CodeCombat in Englisch, aber wir haben Spieler in der ganzen Welt. Viele von ihnen wollen in Deutsch (Österreich) spielen, sprechen aber kein Englisch. Wenn Du also beide Sprachen beherrscht, melde Dich an um ein Diplomat zu werden und hilf die Website und die Levels zu Deutsch (Österreich) zu übersetzen.\",\n      missing_translations: \"Solange wir nicht alles ins Deutsche (Österreich) übesetzt haben, siehst Du die englische Übersetzung, wo Deutsch (Österreich) leider noch nicht zur Verfügung steht.\",\n      learn_more: \"Finde heraus, wie Du ein Diplomat werden kannst\",\n      subscribe_as_diplomat: \"Schreibe dich als Diplomat ein\"\n    },\n    play: {\n      play_as: \"Spiele als \",\n      compete: \"Abgeschlossen!\",\n      spectate: \"Zuschauen\",\n      players: \"Spieler\",\n      hours_played: \"Stunden gespielt\",\n      items: \"Gegenstände\",\n      unlock: \"Kaufen\",\n      confirm: \"Bestätigen\",\n      owned: \"bereits im Besitz\",\n      locked: \"Gesperrt\",\n      available: \"Verfügbar\",\n      skills_granted: \"Freischaltbare Fähigkeiten\",\n      heroes: \"Helden\",\n      achievements: \"Erfolge\",\n      settings: \"Einstellungen\",\n      next: \"Weiter\",\n      change_hero: \"Held wechseln\",\n      buy_gems: \"Juwelen kaufen\",\n      anonymous: \"Anonymer Spieler\",\n      level_difficulty: \"Schwierigkeit: \",\n      awaiting_levels_adventurer_prefix: \"Wir veröffentlichen wöchentlichen neu Levels.\",\n      awaiting_levels_adventurer: \"Melde dich als Abenteuerer an\",\n      awaiting_levels_adventurer_suffix: \"um der erste zu sein der neue Levels spielt.\",\n      adjust_volume: \"Lautstärke anpassen\",\n      campaign_multiplayer: \"Multiplayerarena\",\n      campaign_multiplayer_description: \"... in der Du Kopf-an-Kopf gegen andere Spieler programmierst.\"\n    },\n    code: {\n      \"if\": \"wenn\",\n      \"else\": \"sonst\",\n      elif: \"sonst wenn\",\n      \"while\": \"so lange\",\n      loop: \"schleife\",\n      \"for\": \"für\",\n      \"break\": \"pause\",\n      \"continue\": \"fortsetzen\",\n      pass: \"bestehen\",\n      \"return\": \"zurückgeben\",\n      then: \"dann\",\n      \"do\": \"mache\",\n      end: \"ende\",\n      \"function\": \"funktion\",\n      def: \"definiere\",\n      \"var\": \"variable\",\n      self: \"selbst\",\n      hero: \"held\",\n      \"this\": \"dies\",\n      or: \"oder\",\n      \"||\": \"oder\",\n      and: \"und\",\n      \"&&\": \"und\",\n      not: \"nicht\",\n      \"!\": \"nicht\",\n      \"=\": \"zuweisen\",\n      \"==\": \"entspricht\",\n      \"===\": \"entspricht strikt\",\n      \"!=\": \"entspricht nicht\",\n      \"!==\": \"entspricht strikt nicht\",\n      \">\": \"ist größer als\",\n      \">=\": \"ist größer als oder gleich\",\n      \"<\": \"ist kleiner als\",\n      \"<=\": \"ist kleiner als oder gleich\",\n      \"*\": \"multipliziert um\",\n      \"/\": \"dividiert durch\",\n      \"+\": \"plus\",\n      \"-\": \"minus\",\n      \"+=\": \"addieren und zuweisen\",\n      \"-=\": \"subtrahieren und zuweisen\",\n      True: \"Wahr\",\n      \"true\": \"wahr\",\n      False: \"Falsch\",\n      \"false\": \"falsch\",\n      undefined: \"undefiniert\",\n      \"null\": \"nichts\",\n      nil: \"nichts\",\n      None: \"Kein\"\n    },\n    login: {\n      sign_up: \"Registrieren\",\n      log_in: \"Einloggen\",\n      logging_in: \"Logge ein\",\n      log_out: \"Ausloggen\",\n      forgot_password: \"Passwort vergessen?\",\n      finishing: \"Fertig stellen\",\n      sign_in_with_facebook: \"Mit Facebook anmelden\",\n      sign_in_with_gplus: \"Mit G+ anmelden\",\n      signup_switch: \"Möchtest du einen Account erstellen?\"\n    },\n    signup: {\n      email_announcements: \"Erhalte Benachrichtigungen per Email\",\n      creating: \"Erzeuge Account...\",\n      sign_up: \"Neuen Account anlegen\",\n      log_in: \"mit Passwort einloggen\",\n      required: \"Du musst dich vorher einloggen um dort hin zu gehen.\",\n      login_switch: \"Du hast bereits einen Account?\",\n      optional: \"Optional\",\n      connected_gplus_header: \"Du hast dich erfolgreich über Google+ verbunden!\",\n      connected_gplus_p: \"Vervollständige die Anmeldung um dich mit deinem Google+ Account anzumelden.\",\n      connected_facebook_header: \"Du hast dich erfolgreich über Facebook verbunden!\",\n      connected_facebook_p: \"Vervollständige die Anmeldung um dich mit deinem Facebook Account anzumelden.\",\n      hey_students: \"Schüler, gebt den Klassencode eures Lehrers ein.\",\n      birthday: \"Geburstag\"\n    },\n    recover: {\n      recover_account_title: \"Account Wiederherstellung\",\n      send_password: \"Wiederherstellungskennwort senden\",\n      recovery_sent: \"Wiederherstellungs-Email versandt.\"\n    },\n    items: {\n      primary: \"Primär\",\n      secondary: \"Sekundär\",\n      armor: \"Rüstung\",\n      accessories: \"Zubehör\",\n      misc: \"Sonstiges\",\n      books: \"Bücher\"\n    },\n    common: {\n      loading: \"Lade...\",\n      saving: \"Speichere...\",\n      sending: \"Übertrage...\",\n      send: \"Senden\",\n      cancel: \"Abbrechen\",\n      save: \"Speichern\",\n      publish: \"Publiziere\",\n      create: \"Erstelle\",\n      fork: \"Fork\",\n      play: \"Abspielen\",\n      retry: \"Erneut versuchen\",\n      submit_patch: \"Patch einreichen\"\n    },\n    general: {\n      and: \"und\",\n      name: \"Name\",\n      date: \"Datum\",\n      body: \"Inhalt\",\n      version: \"Version\",\n      pending: \"Ausstehend\",\n      accepted: \"Akzeptiert\",\n      rejected: \"Abgelehnt\",\n      withdrawn: \"Zurückgezogen\",\n      accept: \"Akzeptieren\",\n      reject: \"Abgelehnen\",\n      withdraw: \"Zurückziehen\",\n      submitter: \"Veröffentlicher\",\n      submitted: \"Veröffentlicht\",\n      commit_msg: \"Nachricht absenden\",\n      version_history: \"Versionshistorie\",\n      version_history_for: \"Versionsgeschichte für: \",\n      select_changes: \"Wählen zwei Änderungen unterhalb um den Unterschied zu sehen.\",\n      undo_prefix: \"Rückgängig\",\n      undo_shortcut: \"(Strg+Z)\",\n      redo_prefix: \"Wiederherstellen\",\n      redo_shortcut: \"(Strg+Umschalt+Z)\",\n      play_preview: \"Vorschau vom aktuellen Level spielen\",\n      result: \"Ergebnis\",\n      results: \"Ergebnisse\",\n      description: \"Beschreibung\",\n      or: \"oder\",\n      subject: \"Betreff\",\n      email: \"Email\",\n      password: \"Passwort\",\n      confirm_password: \"Passwort bestätigen\",\n      message: \"Nachricht\",\n      code: \"Code\",\n      ladder: \"Rangliste\",\n      when: \"Wann\",\n      opponent: \"Gegner\",\n      rank: \"Rang\",\n      score: \"Punktzahl\",\n      win: \"Sieg\",\n      loss: \"Niederlage\",\n      tie: \"Unentschieden\",\n      easy: \"Einfach\",\n      medium: \"Mittel\",\n      hard: \"Schwer\",\n      player: \"Spieler\",\n      player_level: \"Spielerlevel\",\n      warrior: \"Krieger\",\n      ranger: \"Jäger\",\n      wizard: \"Hexer\",\n      first_name: \"Vorname\",\n      last_name: \"Nachname\",\n      username: \"Benutzername\"\n    },\n    units: {\n      second: \"Sekunde\",\n      seconds: \"Sekunden\",\n      minute: \"Minute\",\n      minutes: \"Minuten\",\n      hour: \"Stunde\",\n      hours: \"Stunden\",\n      day: \"Tag\",\n      days: \"Tage\",\n      week: \"Woche\",\n      weeks: \"Wochen\",\n      month: \"Monat\",\n      months: \"Monate\",\n      year: \"Jahr\",\n      years: \"Jahre\"\n    },\n    play_level: {\n      done: \"Fertig\",\n      home: \"Startseite\",\n      level: \"Mission\",\n      skip: \"Überspringen\",\n      game_menu: \"Spielmenü\",\n      restart: \"Neustart\",\n      goals: \"Ziele\",\n      goal: \"Ziel\",\n      success: \"Erfolgreich!\",\n      incomplete: \"Unvollständig\",\n      timed_out: \"Zeit abgelaufen\",\n      reload: \"Neu laden\",\n      reload_title: \"Gesamten Code neu laden?\",\n      reload_really: \"Bist Du sicher, dass Du das Level neu beginnen willst?\",\n      reload_confirm: \"Alles neu laden\",\n      victory: \"Sieg\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Abgeschlossen\",\n      victory_sign_up: \"Melde Dich an, um Fortschritte zu speichern\",\n      victory_sign_up_poke: \"Möchtest Du Neuigkeiten per Mail erhalten? Erstelle einen kostenlosen Account und wir halten Dich auf dem Laufenden.\",\n      victory_rate_the_level: \"Bewerte das Level: \",\n      victory_return_to_ladder: \"Zurück zur Rangliste\",\n      victory_saving_progress: \"Speichere Fortschritt\",\n      victory_go_home: \"Geh auf die Startseite\",\n      victory_review: \"Erzähl uns davon!\",\n      victory_hour_of_code_done: \"Bist Du fertig?\",\n      victory_hour_of_code_done_yes: \"Ja, ich bin mit meiner Code-Stunde fertig!\",\n      victory_experience_gained: \"EP erhalten\",\n      victory_gems_gained: \"Juwelen erhalten\",\n      tome_submit_button: \"Absenden\",\n      tome_reload_method: \"Lade den ursprünglichen Code dieser Methode\",\n      tome_available_spells: \"Verfügbare Zauber\",\n      tome_your_skills: \"Deine Fähigkeiten\",\n      code_saved: \"Code gespeichert\",\n      skip_tutorial: \"Überspringen (Esc)\",\n      keyboard_shortcuts: \"Tastenkürzel\",\n      loading_start: \"Starte Level\",\n      problem_alert_title: \"Korrigiere deinen Code\",\n      time_current: \"Aktuell\",\n      time_total: \"Total\",\n      time_goto: \"Gehe zu\",\n      infinite_loop_try_again: \"Erneut versuchen\",\n      infinite_loop_reset_level: \"Level zurücksetzen\",\n      infinite_loop_comment_out: \"Meinen Code auskommentieren\",\n      tip_toggle_play: \"Wechsel zwischen Play und Pause mit Strg+P.\",\n      tip_scrub_shortcut: \"Spule vor und zurück mit Strg+[ und Strg+]\",\n      tip_guide_exists: \"Klicke auf die Anleitung am oberen Ende der Seite für nützliche Informationen\",\n      tip_open_source: \"CodeCombat ist 100% quelloffen!\",\n      tip_beta_launch: \"CodeCombat startete seine Beta im Oktober 2013.\",\n      tip_think_solution: \"Denke über die Lösung nach, nicht über das Problem.\",\n      tip_theory_practice: \"In der Theorie gibt es keinen Unterschied zwischen Theorie und Praxis. In der Praxis schon. - Yogi Berra\",\n      tip_error_free: \"Es gibt zwei Wege fehlerfreie Programme zu schreiben; nur der Dritte funktioniert. - Alan Perlis\",\n      tip_debugging_program: \"Wenn Debugging der Prozess zum Fehler entfernen ist, dann muss Programmieren der Prozess sein Fehler zu machen. - Edsger W. Dijkstra\",\n      tip_forums: \"Gehe zum Forum und sage uns was du denkst!\",\n      tip_baby_coders: \"In der Zukunft werden sogar Babies Erzmagier sein.\",\n      tip_morale_improves: \"Das Laden wird weiter gehen bis die Stimmung sich verbessert.\",\n      tip_all_species: \"Wir glauben an gleiche Chancen für alle Arten Programmieren zu lernen.\",\n      tip_harry: \"Du bist ein Zauberer, \",\n      tip_great_responsibility: \"Mit großen Programmierfähigkeiten kommt große Verantwortung.\",\n      tip_munchkin: \"Wenn du dein Gemüse nicht isst, besucht dich ein Zwerg während du schläfst.\",\n      tip_binary: \"Es gibt auf der Welt nur 10 Arten von Menschen: die, welche Binär verstehen und die, welche nicht.\",\n      tip_commitment_yoda: \"Ein Programmier muss die größte Hingabe haben, den ernstesten Verstand. ~ Yoda\",\n      tip_no_try: \"Tu. Oder tu nicht. Es gibt kein Versuchen. - Yoda\",\n      tip_patience: \"Geduld du musst haben, junger Padawan. - Yoda\",\n      tip_documented_bug: \"Ein dokumentierter Fehler ist kein Fehler; er ist ein Merkmal.\",\n      tip_impossible: \"Es wirkt immer unmöglich bis es vollbracht ist. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Reden ist billig. Zeig mir den Code. - Linus Torvalds\",\n      tip_first_language: \"Das schwierigste, das du jemals lernen wirst, ist die erste Programmiersprache. - Alan Kay\",\n      tip_hardware_problem: \"Q: Wie viele Programmierer braucht man um eine Glühbirne auszuwechseln? A: Keine, es ist ein Hardware-Problem.\",\n      tip_brute_force: \"Im Zweifelsfall, verwende rohe Gewalt. - Ken Thompson\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventar\",\n      save_load_tab: \"Speichere/Lade\",\n      options_tab: \"Einstellungen\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Video Tutorial\",\n      guide_tips: \"Tipps\",\n      multiplayer_tab: \"Mehrspieler\",\n      auth_tab: \"Anmelden\",\n      inventory_caption: \"Rüste deinen Helden aus\",\n      choose_hero_caption: \"Wähle Helden, Sprache\",\n      options_caption: \"konfiguriere Einstellungen\",\n      guide_caption: \"Doku und Tipps\",\n      multiplayer_caption: \"Spiele mit Freunden!\",\n      auth_caption: \"Fortschritt speichern.\"\n    },\n    inventory: {\n      equipped_item: \"Ausgerüstet\",\n      available_item: \"Verfügbar\",\n      restricted_title: \"Eingeschränkt\",\n      should_equip: \"(Doppelklick um auszurüsten)\",\n      equipped: \"(Ausgerüstet)\",\n      locked: \"(Gesperrt)\",\n      restricted: \"(Eingeschränkt in diesem Level)\",\n      equip: \"Ausrüsten\",\n      unequip: \"Ablegen\"\n    },\n    buy_gems: {\n      few_gems: \"Ein paar Juwelen\",\n      pile_gems: \"Ein Haufen Juwelen\",\n      chest_gems: \"Truhe voll Juwelen\",\n      purchasing: \"Kaufe...\",\n      declined: \"Deine Karte wurde abgelehnt\",\n      retrying: \"Serverfehler, erneuter Versuch.\",\n      prompt_title: \"Nicht genug Juwelen\",\n      prompt_body: \"Möchtest du mehr?\",\n      prompt_button: \"Shop betreten\",\n      recovered: \"Voriger Juwelenkauf wiederhergestellt. Bitte die Seite neu laden.\"\n    },\n    choose_hero: {\n      choose_hero: \"Wähle deinen Helden\",\n      programming_language: \"Programmiersprache\",\n      programming_language_description: \"Welche Programmiersprache möchtest du verwenden?\",\n      \"default\": \"Standard\",\n      experimental: \"Experimentiell\",\n      python_blurb: \"Einfach jedoch leistungsfähig, Python ist eine gute Allzweck-Programmiersprache.\",\n      javascript_blurb: \"Die Sprache des Web.\",\n      coffeescript_blurb: \"Schönere JavaScript Syntax.\",\n      lua_blurb: \"Skriptsprache für Spiele (KI).\",\n      status: \"Status\",\n      weapons: \"Waffen\",\n      weapons_warrior: \"Schwerter - Kurze Reichweite, keine Magie\",\n      weapons_ranger: \"Armbrüste, Pistolen - Hohe Reichweite, keine Magie\",\n      weapons_wizard: \"Stöcke, Stäbe - Hohe Reichweite, Magie\",\n      attack: \"Angriffsschaden\",\n      health: \"Gesundheit\",\n      speed: \"Geschwindigkeit\",\n      regeneration: \"Regeneration\",\n      range: \"Reichweite\",\n      blocks: \"Haltbarkeit\",\n      backstab: \"Hinterhaltsschaden\",\n      skills: \"Fähigkeiten\",\n      available_for_purchase: \"Zum Kauf verfügbar\",\n      level_to_unlock: \"Level zum Freischalten:\",\n      restricted_to_certain_heroes: \"Nur bestimmte Helden können dieses Level spielen.\"\n    },\n    save_load: {\n      granularity_saved_games: \"Gespeichert\",\n      granularity_change_history: \"Historie\"\n    },\n    options: {\n      general_options: \"Allgemeine Einstellungen\",\n      volume_label: \"Lautstärke\",\n      music_label: \"Musik\",\n      music_description: \"Schalte Hintergrundmusik an/aus.\",\n      editor_config_title: \"Editor Einstellungen\",\n      editor_config_livecompletion_label: \"Live Auto-Vervollständigung\",\n      editor_config_livecompletion_description: \"Zeigt Vorschläge der Auto-Vervollständigung an während du tippst.\",\n      editor_config_invisibles_label: \"Zeige unsichtbare Zeichen\",\n      editor_config_invisibles_description: \"Zeigt unsichtbare Zeichen wie Leertasten an.\",\n      editor_config_indentguides_label: \"Zeige Einrückungshilfe\",\n      editor_config_indentguides_description: \"Zeigt vertikale Linien an um Einrückungen besser zu sehen.\",\n      editor_config_behaviors_label: \"Intelligentes Verhalten\",\n      editor_config_behaviors_description: \"Vervollständigt automatisch Klammern und Anführungszeichen.\"\n    },\n    about: {\n      nick_title: \"Programmierer\",\n      matt_title: \"Programmierer\",\n      scott_title: \"Programmierer\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Neue Version speichern\",\n      new_major_version: \"Neue Hauptversion\",\n      cla_prefix: \"Damit Änderungen gespeichert werden können, musst du unsere Lizenzbedingungen (\",\n      cla_url: \"CLA\",\n      cla_suffix: \") akzeptieren.\",\n      cla_agree: \"Ich stimme zu\"\n    },\n    contact: {\n      contact_us: \"Kontaktiere CodeCombat\",\n      welcome: \"Schön von Dir zu hören! Benutze dieses Formular um uns eine Email zu schicken.\",\n      forum_prefix: \"Für alle öffentlichen Themen, benutze stattdessen \",\n      forum_page: \"unser Forum\",\n      forum_suffix: \".\",\n      send: \"Sende Feedback\"\n    },\n    account_settings: {\n      title: \"Accounteinstellungen\",\n      not_logged_in: \"Logge Dich ein oder lege einen Account an, um deine Einstellungen ändern zu können.\",\n      me_tab: \"Ich\",\n      picture_tab: \"Bild\",\n      emails_tab: \"Emails\",\n      admin: \"Admin\",\n      new_password: \"Neues Passwort\",\n      new_password_verify: \"Passwort verifizieren\",\n      email_subscriptions: \"Email Abonnements\",\n      email_subscriptions_none: \"Keine Email Abonnements.\",\n      email_announcements: \"Ankündigungen\",\n      email_announcements_description: \"Erhalte regelmäßig Ankündigungen zu deinem Account.\",\n      email_notifications: \"Benachrichtigungen\",\n      email_notifications_summary: \"Steuerung für personalisierte, automatische Emailbenachrichtigungen im Zusammenhang mit deiner CodeCombat Aktivität.\",\n      email_any_notes: \"Jegliche Benachrichtungen\",\n      email_any_notes_description: \"Deaktivieren um alle aktiven Benachrichtigungen zu stoppen.\",\n      email_news: \"News\",\n      email_recruit_notes: \"Job-Angebote\",\n      email_recruit_notes_description: \"Wenn du besonders gut spielst, werden wir dich evtl. kontaktieren um dir einen (besseren) Job zu suchen.\",\n      contributor_emails: \"Unterstützer Email\",\n      contribute_prefix: \"Wir suchen nach Leuten, die mitmachen! Schau dir die\",\n      contribute_page: \"Unterstützer Seite\",\n      contribute_suffix: \" an um mehr zu erfahren.\",\n      email_toggle: \"Alles wählen\",\n      error_saving: \"Fehler beim Speichern\",\n      saved: \"Änderungen gespeichert\",\n      password_mismatch: \"Passwörter stimmen nicht überein.\",\n      password_repeat: \"Bitte wiederhole dein Passwort.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Tastaturkürzel\",\n      space: \"Leertaste\",\n      enter: \"Eingabetaste\",\n      escape: \"Escape\",\n      shift: \"Umschalttaste\",\n      run_real_time: \"Führe in Echtzeit aus.\",\n      continue_script: \"Setze nach aktuellenm Skript fort.\",\n      skip_scripts: \"Überspringe alle überspringbaren Skripte.\",\n      toggle_playback: \"Umschalten Play/Pause.\",\n      scrub_playback: \"Scrubbe vor und zurück durch die Zeit.\",\n      single_scrub_playback: \"Scrubbe ein Frame vor und zurück durch die Zeit.\",\n      scrub_execution: \"Scrubbe durch die aktuelle Zauberspruch-Ausführung.\",\n      toggle_debug: \"Debug-Anzeige an/aus.\",\n      toggle_grid: \"Grid-Overlay an/aus.\",\n      toggle_pathfinding: \"Wegfindungs-Overlay an/aus.\",\n      beautify: \"Verschönere deinen Code durch die Standardisierung der Formatierung.\",\n      maximize_editor: \"Maximiere/Minimiere Code Editor.\"\n    },\n    community: {\n      main_title: \"CodeCombat Community\",\n      introduction: \"Schaue dir unten die Möglichkeiten wie du mitwirken kannst und entscheide was dir am meisten Spass macht. Wir freuen uns auf die Zusammenarbeit mit dir!\",\n      level_editor_prefix: \"Benutze den CodeCombat\",\n      level_editor_suffix: \"um Level zu erstellen oder zu bearbeiten. Benutzer haben bereits Level für ihre Klassen, Freunde, Hackathons, Schüler und Geschwister erstellt. Wenn das Neuerstellen eines Levels abschreckend wirkt, dann kannst du erstmal ein bestehendes kopieren!\",\n      thang_editor_prefix: \"Wir nennen Einheiten innerhalb des Spiels 'Thangs'. Benutze den\",\n      article_editor_prefix: \"Hast du einen Fehler in unseren Dokus gefunden? Willst du Anleitungen für deine Kreationen erstellen? Schau dir den\",\n      article_editor_suffix: \"und hilf CodeCombat Spielern das meiste aus ihrer Spielzeit heraus zu bekommen.\",\n      find_us: \"Finde uns auf diesen Seiten\",\n      social_blog: \"Lese den CodeCombat Blog auf Sett\",\n      social_discource: \"Schließe dich den Diskussionen in unserem Discourse Forum an\",\n      social_facebook: \"Like CodeCombat auf Facebook\",\n      social_twitter: \"Folge CodeCombat auf Twitter\",\n      social_gplus: \"Schließe dich CodeCombat bei Google+ an\",\n      contribute_to_the_project: \"Trage zu diesem Projekt bei\"\n    },\n    classes: {\n      archmage_title: \"Erzmagier\",\n      archmage_title_description: \"(Programmierer)\",\n      artisan_title: \"Handwerker\",\n      artisan_title_description: \"(Level Entwickler)\",\n      adventurer_title: \"Abenteurer\",\n      adventurer_title_description: \"(Level Spieltester)\",\n      scribe_title: \"Schreiber\",\n      scribe_title_description: \"(Artikel Editor)\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Übersetzer)\",\n      ambassador_title: \"Botschafter\",\n      ambassador_title_description: \"(Support)\"\n    },\n    editor: {\n      main_title: \"CodeCombat Editoren\",\n      article_title: \"Artikel Editor\",\n      thang_title: \"Thang Editor\",\n      level_title: \"Level Editor\",\n      achievement_title: \"Achievement Editor\",\n      back: \"Zurück\",\n      revert: \"Zurücksetzen\",\n      revert_models: \"Models zurücksetzen.\",\n      pick_a_terrain: \"Wähle ein Terrain\",\n      grassy: \"Grasig\",\n      small: \"Klein\",\n      fork_title: \"Forke neue Version\",\n      fork_creating: \"Erzeuge Fork...\",\n      generate_terrain: \"Generiere Terrain\",\n      more: \"Mehr\",\n      wiki: \"Wiki\",\n      live_chat: \"Live Chat\",\n      level_some_options: \"Einige Einstellungsmöglichkeiten?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"Skripte\",\n      level_tab_components: \"Komponenten\",\n      level_tab_systems: \"Systeme\",\n      level_tab_docs: \"Dokumentation\",\n      level_tab_thangs_title: \"Aktuelle Thangs\",\n      level_tab_thangs_all: \"Alle\",\n      level_tab_thangs_conditions: \"Startbedingungen\",\n      level_tab_thangs_add: \"Thangs hinzufügen\",\n      \"delete\": \"Löschen\",\n      duplicate: \"Duplizieren\",\n      level_component_tab_title: \"Aktuelle Komponenten\",\n      level_component_btn_new: \"neue Komponente erstellen\",\n      level_systems_tab_title: \"Aktuelle Systeme\",\n      level_systems_btn_new: \"neues System erstellen\",\n      level_systems_btn_add: \"System hinzufügen\",\n      level_components_title: \"Zurück zu allen Thangs\",\n      level_components_type: \"Typ\",\n      level_component_edit_title: \"Komponente bearbeiten\",\n      level_component_config_schema: \"Konfigurationsschema\",\n      level_system_edit_title: \"System bearbeiten\",\n      create_system_title: \"neues System erstellen\",\n      new_component_title: \"Neue Komponente erstellen\",\n      new_component_field_system: \"System\",\n      new_article_title: \"Erstelle einen neuen Artikel\",\n      new_thang_title: \"Erstelle einen neuen Thang-Typen\",\n      new_level_title: \"Erstelle ein neues Level\",\n      new_article_title_login: \"Melde dich an um einen neuen Artikel zu erstellen\",\n      new_thang_title_login: \"Melde dich an um einen neuen Thang-Typen zu erstellen\",\n      new_level_title_login: \"Melde dich an um ein neues Level zu erstellen\",\n      new_achievement_title: \"Erstelle ein neues Achievement\",\n      new_achievement_title_login: \"Melde dich an um ein neues Achievement zu erstellen\",\n      article_search_title: \"Durchsuche Artikel hier\",\n      thang_search_title: \"Durchsuche Thang-Typen hier\",\n      level_search_title: \"Durchsuche Levels hier\",\n      achievement_search_title: \"Durchsuche Achievements\",\n      read_only_warning2: \"Warnung: Du kannst hier keine Änderungen speichern, weil du nicht angemeldet bist.\",\n      no_achievements: \"Es wurden noch keine Achievements zu diesem Level hinzugefügt.\"\n    },\n    article: {\n      edit_btn_preview: \"Vorschau\",\n      edit_article_title: \"Artikel bearbeiten\"\n    },\n    contribute: {\n      alert_account_message_intro: \"Hey du!\",\n      alert_account_message: \"Um Klassen-Emails abonnieren zu können, musst du dich zuerst anmelden.\",\n      class_attributes: \"Klassenattribute\",\n      join_desc_1: \"Jeder kann mithelfen! Schau dir unseren \",\n      join_desc_2: \"um anzufangen, und hake die Checkbox unten an um dich als mutiger Erzmagier einzutragen und über die neuesten Nachrichten per Email zu erhalten. Möchtest du dich darüber unterhalten was zu tun ist oder wie du dich besser beteiligen kannst? \",\n      join_desc_3: \", oder finde uns in unserem \",\n      join_desc_4: \"und wir schauen von dort mal!\",\n      join_url_email: \"Emaile uns\",\n      archmage_subscribe_desc: \"Erhalte Emails über neue Programmier-Möglichkeiten und Ankündigungen.\",\n      artisan_join_desc: \"Verwende den Level-Editor mit diesen Schritten, mehr oder weniger:\",\n      artisan_join_step1: \"Lese die Dokumentation.\",\n      artisan_join_step2: \"Erstelle ein neues Level und erkunde existierende Level.\",\n      artisan_join_step3: \"Finde uns im öffentlichen Slack Raum, falls du Hilfe brauchst.\",\n      artisan_join_step4: \"Poste deine Level im Forum um Feedback zu erhalten.\",\n      artisan_subscribe_desc: \"Erhalte Emails über Level-Editor Updates und Ankündigungen.\",\n      adventurer_subscribe_desc: \"Erhalte Emails wenn es neue Levels zum Testen gibt.\",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      contact_us_url: \"Kontaktiere uns\",\n      scribe_join_description: \"erzähle uns ein bißchen über dich, deine Erfahrung mit der Programmierung und über welche Themen du schreiben möchtest. Wir werden von dort aus gehen!\",\n      scribe_subscribe_desc: \"Erhalte Emails über Ankündigungen zu schreibenden Artikeln.\",\n      diplomat_introduction_pref: \"Also wenn es eines gibt was wir gelernt haben vom \",\n      diplomat_launch_url: \"Launch im Oktober\",\n      diplomat_introduction_suf: \"ist das es ein großes Interesse an CodeCombat in anderen Ländern gibt! Wir stellen eine Truppe von Übersetzern zusammen, die gewillt sind einen Satz Wörten in einen anderen Satz Wörter umzuwandeln um CodeCombat der Welt so zugänglich wie möglich zu machen. Wenn du es magst eine Vorschau von zukünftigem Content zu erhalten und diese Level so schnell wie möglich deinen Landsleuten zur Verfügung zu stellen, dann ist diese Klasse vielleicht für dich.\",\n      diplomat_join_pref_github: \"Finde deine Sprachdatei \",\n      diplomat_github_url: \"bei GitHub\",\n      diplomat_join_suf_github: \", editiere sie online und reiche einen Pull Request ein. Außerdem, hake die Checkbox unten an um über neue Entwicklungen bei der Internationalisierung auf dem laufenden zu bleiben!\",\n      diplomat_subscribe_desc: \"Erhalte Emails über i18n Entwicklungen und Level die übersetzt werden müssen.\",\n      ambassador_introduction: \"Wir bauen einen Community und du bist die Verbindung dazu. Wir haben Olark Chats, Email und soziale Netzwerke mit vielen Menschen mit denen man sprechen, dabei helfen mit dem Spiel vertraut zu werden und von lernen kann. Wenn du helfen möchtest Leute zu involvieren, Spass zu haben und ein gutes Gefühl für den Puls von CodeCombat und wo wir hn wollen, dann könnte diese Klasse für dich sein.\",\n      ambassador_join_note_strong: \"Anmerkung\",\n      ambassador_subscribe_desc: \"Erhalte Emails über Support-Updates and Mehrspieler-Entwicklungen.\",\n      changes_auto_save: \"Änderungen an Checkboxen werden automatisch gespeichert.\",\n      diligent_scribes: \"Unsere fleißgen Schreiber:\",\n      powerful_archmages: \"Unsere mächtigen Erzmagier:\",\n      creative_artisans: \"Unsere kreativen Handwerker:\",\n      brave_adventurers: \"Unsere mutigen Abenteurer:\",\n      translating_diplomats: \"Unsere übersetzenden Diplomaten:\",\n      helpful_ambassadors: \"Unsere hilfreichen Botschafter:\"\n    },\n    ladder: {\n      my_matches: \"Meine Matches\",\n      simulate: \"Simuliere\",\n      simulation_explanation: \"Durch das Simulieren von Spielen kannst du deine Spiele schneller rangiert bekommen!\",\n      simulate_games: \"Simuliere Spiele!\",\n      games_simulated_by: \"Spiele die durch dich simuliert worden:\",\n      games_simulated_for: \"Spiele die für dich simuliert worden:\",\n      games_simulated: \"simulierte Spiele\",\n      games_played: \"gespielte Spiele\",\n      ratio: \"Ratio\",\n      leaderboard: \"Rangliste\",\n      battle_as: \"Kämpfe als \",\n      summary_your: \"Deine \",\n      summary_matches: \"Matches - \",\n      summary_wins: \" Siege, \",\n      help_simulate: \"Hilf Spiele zu simulieren?\",\n      choose_opponent: \"Wähle einen Gegner\",\n      select_your_language: \"Wähle deine Sprache!\",\n      tutorial_play: \"Spiele Tutorial\",\n      tutorial_recommended: \"Empfohlen, wenn du noch nie zuvor gespielt hast.\",\n      tutorial_skip: \"Überspringe Tutorial\",\n      tutorial_not_sure: \"Nicht sicher was hier ab geht?\",\n      tutorial_play_first: \"Spiele zuerst das Tutorial.\",\n      simple_ai: \"Einfache KI\",\n      warmup: \"Aufwärmen\",\n      friends_playing: \"spielende Freunde\",\n      log_in_for_friends: \"Melde dich an um mit deinen Freunden zu spielen!\",\n      social_connect_blurb: \"Verbinde und spiele gegen deine Freunde!\",\n      invite_friends_to_battle: \"Lade deine Freunde zum Kampf ein!\",\n      fight: \"Kämpft!\",\n      watch_victory: \"Schau dir deinen Sieg an\",\n      defeat_the: \"Besiege den\",\n      tournament_ends: \"Turnier endet\",\n      tournament_ended: \"Turnier beendet\",\n      tournament_rules: \"Turnier-Regeln\",\n      tournament_blurb: \"Schreibe Code, sammle Gold, erstelle Armeen, zerquetsche Feinde, gewinne Preis und verbessere deine Karriere in unserem 40.000 $ Greed-Turnier! Schau dir die Details\",\n      tournament_blurb_criss_cross: \"Gewinne Gebote, konstruiere Pfade, trickse Feinde aus, greife Edelsteine ab und verbessere deine Karriere in unserem Criss-Cross-Turnier! Schau dir die Details\",\n      tournament_blurb_blog: \"auf unserem Blog an\",\n      rules: \"Regeln\",\n      winners: \"Gewinner\"\n    },\n    user: {\n      stats: \"Statistiken\",\n      singleplayer_title: \"Einzelspieler Level\",\n      multiplayer_title: \"Mehrspieler Level\",\n      achievements_title: \"Achievements\",\n      last_played: \"Zuletzt gespielt\",\n      status: \"Status\",\n      status_completed: \"Vollendet\",\n      status_unfinished: \"Unvollendet\",\n      no_singleplayer: \"Noch keine Einzelspieler-Spiele gespielt.\",\n      no_multiplayer: \"Noch keine Mehrspieler-Spiele gespielt.\",\n      no_achievements: \"Noch keine Achievements verdient.\",\n      favorite_prefix: \"Lieblingssprache ist \",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      amount_achieved: \"Anzahl\",\n      achievement: \"Achievement\"\n    },\n    loading_error: {\n      could_not_load: \"Fehler beim Laden vom Server\",\n      connection_failure: \"Verbindung fehlgeschlagen.\",\n      unauthorized: \"Du musst angemeldet sein. Hast du Cookies ausgeschaltet?\",\n      forbidden: \"Sie haben nicht die nötigen Berechtigungen.\",\n      not_found: \"Nicht gefunden.\",\n      not_allowed: \"Methode nicht erlaubt.\",\n      timeout: \"Server timeout.\",\n      conflict: \"Ressourcen Konflikt.\",\n      bad_input: \"Falsche Eingabe.\",\n      server_error: \"Server Fehler.\",\n      unknown: \"Unbekannter Fehler.\"\n    },\n    resources: {\n      level: \"Level\",\n      patches: \"Patche\",\n      system: \"System\",\n      systems: \"Systeme\",\n      component: \"Komponente\",\n      components: \"Komponenten\"\n    },\n    delta: {\n      added: \"hinzugefügt\",\n      modified: \"modifiziert\",\n      deleted: \"gelöscht\",\n      text_diff: \"Text Diff\",\n      merge_conflict_with: \"MERGE KONFLIKT MIT\",\n      no_changes: \"Keine Änderungen\"\n    },\n    legal: {\n      page_title: \"Rechtliches\",\n      opensource_intro: \"CodeCombat ist Free-to-Play und vollständig Open Source.\",\n      opensource_description_prefix: \"Schau dir \",\n      github_url: \"unsere GitHub-Seite\",\n      opensource_description_center: \" an und mach mit wenn Du möchtest! CodeCombat baut auf duzenden Open Source Projekten auf, und wir lieben sie. Schau dir die Liste in \",\n      archmage_wiki_url: \"unserem Erzmagier-Wiki\",\n      opensource_description_suffix: \" an, welche Software dieses Spiel möglich macht.\",\n      practices_title: \"Best Practices\",\n      practices_description: \"Dies sind unsere Versprechen an dich, den Spieler, in weniger Fachchinesisch.\",\n      privacy_title: \"Datenschutz\",\n      security_title: \"Datensicherheit\",\n      security_description: \"Wir streben an, deine persönlichen Daten sicher zu verwahren. Als Open Source Projekt ist unsere Site frei zugänglich für jedermann, auch um unsere Sicherheitsmaßnahmen in Augenschein zu nehmen und zu verbessern.\",\n      email_title: \"Email\",\n      email_description_prefix: \"Wir werden dich nicht mit Spam überschwemmen. Mittels\",\n      email_settings_url: \"deiner Emaileinstellungen\",\n      email_description_suffix: \"oder durch von uns gesendete Links kannst du jederzeit deine Einstellungen ändern und Abonnements kündigen.\",\n      cost_title: \"Kosten\",\n      copyrights_title: \"Copyrights und Lizenzen\",\n      contributor_title: \"Contributor License Agreement\",\n      contributor_description_prefix: \"Alle Beiträge, sowohl auf unserer Webseite als auch in unserem GitHub Repository, unterliegen unserer\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"zu welcher du dich einverstanden erklären musst bevor du beitragen kannst.\",\n      code_title: \"Code - MIT\",\n      code_description_prefix: \"Der gesamte Code der CodeCombat gehört oder auf codecombat.com gehostet wird, sowohl im GitHub Repository als auch auch in der codecombat.com Datenbank, ist lizensiert durch die\",\n      mit_license_url: \"MIT Lizenz\",\n      code_description_suffix: \"Dies beihnhaltet all den Code in Systemen und Komponenten der für die Erstellung von Levels durch CodeCombat zu Verfügung gestellt wird.\",\n      art_title: \"Grafiken/Musik - Creative Commons \",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_music: \"Musik\",\n      art_sound: \"Sound\",\n      art_artwork: \"Grafiken\",\n      art_sprites: \"Sprites\",\n      use_list_1: \"Wenn in einem Film verwendet, nenne codecombat.com in den Credits/Abspann\",\n      rights_title: \"Rechte vorbehalten\",\n      rights_desc: \"Alle Rechte vorbehalten für die Level selbst. Dies beinhaltet\",\n      rights_scripts: \"Skripte\",\n      rights_unit: \"Einheitenkonfiguration\",\n      rights_writings: \"Schriftliches\",\n      rights_media: \"Medien (Sounds, Musik) und jede andere Form von kreativem Inhalt der spezifisch für das Level ist nicht generell für die Levelerstellung bereitgestellt wird.\",\n      nutshell_title: \"Zusammenfassung\",\n      canonical: \"Die englische Version dieses Dokuments ist die definitive, kanonische Version. Sollte es Unterschiede zwischen den Übersetzungen geben, dann hat das englische Dokument Vorrang.\"\n    },\n    ladder_prizes: {\n      title: \"Turnierpreise\",\n      blurb_1: \"Die Preise werden verliehen nach\",\n      blurb_2: \"den Turnierregeln\",\n      blurb_3: \"and den Top Mensch und Oger-Spieler.\",\n      blurb_4: \"Zwei Teams heißt die doppelte Anzahl zu gewinnender Preise!\",\n      blurb_5: \"(Es wird zwei Erstplazierte, zwei Zeitplatzierte, usw. geben)\",\n      rank: \"Rang\",\n      prizes: \"Gewinne\",\n      total_value: \"Gesamtwert\",\n      in_cash: \"in Bar\",\n      custom_wizard: \"Benutzerdefinierter CodeCombat Zauberer\",\n      custom_avatar: \"Benutzerdefinierter CodeCombat Avatar\",\n      one_month_coupon: \"Gutschein: Wähle entweder Rails oder HTML\",\n      one_month_discount: \"30% Rabatt: Wähle entweder Rails oder HTML\",\n      license: \"Lizenz\",\n      oreilly: \"Ebook deiner Wahl\"\n    },\n    calendar: {\n      year: \"Jahr\",\n      day: \"Tag\",\n      month: \"Monat\",\n      january: \"Januar\",\n      february: \"Februar\",\n      march: \"März\",\n      april: \"April\",\n      may: \"Mai\",\n      june: \"Juni\",\n      july: \"Juli\",\n      august: \"August\",\n      september: \"September\",\n      october: \"Oktober\",\n      november: \"November\",\n      december: \"Dezember\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbG9jYWxlL2RlLUFULmNvZmZlZT9jN2VjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0VBQUEsbUJBQW1CLHNCQUFuQjtFQUEyQyxvQkFBb0Isa0JBQS9EO0VBQW1GLGFBZ0VsRztJQUFBLEtBRUU7TUFBQSxNQUFNLFNBQU47TUFDQSxXQUFXLFdBRFg7TUFFQSxTQUFTLE9BRlQ7TUFHQSxNQUFNLE1BSE47TUFJQSxPQUFPLE9BSlA7TUFLQSxTQUFTLFNBTFQ7TUFNQSxZQUFZLGNBTlo7TUFPQSxTQUFTLFFBUFQ7TUFRQSxNQUFNLE1BUk47TUFTQSxZQUFZLFFBVFo7TUFVQSxPQUFPLGFBVlA7TUFZQSxPQUFPLE1BWlA7TUFhQSxTQUFTLFNBYlQ7TUFjQSxnQkFBZ0IsU0FkaEI7TUFpQkEsU0FBUyxRQWpCVDtNQWtCQSxVQUFVLFVBbEJWO01BbUJBLFNBQVMsU0FuQlQ7TUFvQkEsZ0JBQWdCLHNCQXBCaEI7TUFxQkEsT0FBTyxRQXJCUDtNQXNCQSxlQUFlLHlCQXRCZjtNQXVCQSxZQUFZLHVCQXZCWjtNQXdCQSxTQUFTLFFBeEJUO01BeUJBLGNBQWMsbUJBekJkO01BMEJBLGFBQWEsc0JBMUJiO01BMkJBLFNBQVMsU0EzQlQ7TUE0QkEsTUFBTSxNQTVCTjtNQStCQSxXQUFXLDBCQS9CWDtNQWdDQSxXQUFXLDRCQWhDWDtLQUZGO0lBcUNBLE9BQ0U7TUFBQSxPQUFPLFdBQVA7TUFDQSxNQUFNLE1BRE47S0F0Q0Y7SUF5Q0EsV0FDRTtNQUFBLGdCQUFnQixzQkFBaEI7S0ExQ0Y7SUE0Q0EscUJBQ0U7TUFBQSxPQUFPLGdDQUFQO01BQ0EsYUFBYSx1Q0FEYjtNQUVBLFlBQVksbVVBRlo7TUFHQSxzQkFBc0IsdUtBSHRCO01BSUEsWUFBWSxpREFKWjtNQUtBLHVCQUF1QixnQ0FMdkI7S0E3Q0Y7SUFvREEsTUFDRTtNQUFBLFNBQVMsYUFBVDtNQUdBLFNBQVMsZ0JBSFQ7TUFJQSxVQUFV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O01BaURBLGdCQUFnQixpQkFqRGhCO01BbURBLFdBQVcsa0xBbkRYO0tBeHNFRjtJQSt2RUEsZUFDRTtNQUFBLE9BQU8sZUFBUDtNQUNBLFNBQVMsa0NBRFQ7TUFFQSxTQUFTLG1CQUZUO01BR0EsU0FBUyxzQ0FIVDtNQUlBLFNBQVMsNkRBSlQ7TUFLQSxTQUFTLCtEQUxUO01BTUEsTUFBTSxNQU5OO01BT0EsUUFBUSxTQVBSO01BUUEsYUFBYSxZQVJiO01BU0EsU0FBUyxRQVRUO01BVUEsZUFBZSx5Q0FWZjtNQVdBLGVBQWUsdUNBWGY7TUFjQSxrQkFBa0IsMkNBZGxCO01BZUEsb0JBQW9CLDRDQWZwQjtNQWdCQSxTQUFTLFFBaEJUO01BaUJBLFNBQVMsbUJBakJUO0tBaHdFRjtJQW14RUEsVUFDRTtNQUFBLE1BQU0sTUFBTjtNQUNBLEtBQUssS0FETDtNQUVBLE9BQU8sT0FGUDtNQUdBLFNBQVMsUUFIVDtNQUlBLFVBQVUsU0FKVjtNQUtBLE9BQU8sTUFMUDtNQU1BLE9BQU8sT0FOUDtNQU9BLEtBQUssS0FQTDtNQVFBLE1BQU0sTUFSTjtNQVNBLE1BQU0sTUFUTjtNQVVBLFFBQVEsUUFWUjtNQVdBLFdBQVcsV0FYWDtNQVlBLFNBQVMsU0FaVDtNQWFBLFVBQVUsVUFiVjtNQWNBLFVBQVUsVUFkVjtLQXB4RUY7R0FoRWUiLCJmaWxlIjoiMjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVEZXNjcmlwdGlvbjogXCJEZXV0c2NoICjDlnN0ZXJyZWljaClcIiwgZW5nbGlzaERlc2NyaXB0aW9uOiBcIkdlcm1hbiAoQXVzdHJpYSlcIiwgdHJhbnNsYXRpb246XG4jICBuZXdfaG9tZTpcbiMgICAgc2xvZ2FuOiBcIlRoZSBtb3N0IGVuZ2FnaW5nIGdhbWUgZm9yIGxlYXJuaW5nIHByb2dyYW1taW5nLlwiXG4jICAgIGNsYXNzcm9vbV9lZGl0aW9uOiBcIkNsYXNzcm9vbSBFZGl0aW9uOlwiXG4jICAgIGxlYXJuX3RvX2NvZGU6IFwiTGVhcm4gdG8gY29kZTpcIlxuIyAgICBwbGF5X25vdzogXCJQbGF5IE5vd1wiXG4jICAgIGltX2FfdGVhY2hlcjogXCJJJ20gYSBUZWFjaGVyXCJcbiMgICAgaW1fYV9zdHVkZW50OiBcIkknbSBhIFN0dWRlbnRcIlxuIyAgICBsZWFybl9tb3JlOiBcIkxlYXJuIG1vcmVcIlxuIyAgICBjbGFzc3Jvb21faW5fYV9ib3g6IFwiQSBjbGFzc3Jvb20gaW4tYS1ib3ggZm9yIHRlYWNoaW5nIGNvbXB1dGVyIHNjaWVuY2UuXCJcbiMgICAgY29kZWNvbWJhdF9pczogXCJDb2RlQ29tYmF0IGlzIGEgcGxhdGZvcm0gPHN0cm9uZz5mb3Igc3R1ZGVudHM8L3N0cm9uZz4gdG8gbGVhcm4gY29tcHV0ZXIgc2NpZW5jZSB3aGlsZSBwbGF5aW5nIHRocm91Z2ggYSByZWFsIGdhbWUuXCJcbiMgICAgb3VyX2NvdXJzZXM6IFwiT3VyIGNvdXJzZXMgaGF2ZSBiZWVuIHNwZWNpZmljYWxseSBwbGF5dGVzdGVkIDxzdHJvbmc+dG8gZXhjZWwgaW4gdGhlIGNsYXNzcm9vbTwvc3Ryb25nPiwgZXZlbiBmb3IgdGVhY2hlcnMgd2l0aCBsaXR0bGUgdG8gbm8gcHJpb3IgcHJvZ3JhbW1pbmcgZXhwZXJpZW5jZS5cIlxuIyAgICB3YXRjaF9ob3c6IFwiV2F0Y2ggaG93IENvZGVDb21iYXQgaXMgdHJhbnNmb3JtaW5nIHRoZSB3YXkgcGVvcGxlIGxlYXJuIGNvbXB1dGVyIHNjaWVuY2UuXCJcbiMgICAgdG9wX3NjcmVlbnNob3RzX2hpbnQ6IFwiU3R1ZGVudHMgd3JpdGUgY29kZSBhbmQgc2VlIHRoZWlyIGNoYW5nZXMgdXBkYXRlIGluIHJlYWwtdGltZVwiXG4jICAgIGRlc2lnbmVkX3dpdGg6IFwiRGVzaWduZWQgd2l0aCB0ZWFjaGVycyBpbiBtaW5kXCJcbiMgICAgcmVhbF9jb2RlOiBcIlJlYWwsIHR5cGVkIGNvZGVcIlxuIyAgICBmcm9tX3RoZV9maXJzdF9sZXZlbDogXCJmcm9tIHRoZSBmaXJzdCBsZXZlbFwiXG4jICAgIGdldHRpbmdfc3R1ZGVudHM6IFwiR2V0dGluZyBzdHVkZW50cyB0byB0eXBlZCBjb2RlIGFzIHF1aWNrbHkgYXMgcG9zc2libGUgaXMgY3JpdGljYWwgdG8gbGVhcm5pbmcgcHJvZ3JhbW1pbmcgc3ludGF4IGFuZCBwcm9wZXIgc3RydWN0dXJlLlwiXG4jICAgIGVkdWNhdG9yX3Jlc291cmNlczogXCJFZHVjYXRvciByZXNvdXJjZXNcIlxuIyAgICBjb3Vyc2VfZ3VpZGVzOiBcImFuZCBjb3Vyc2UgZ3VpZGVzXCJcbiMgICAgdGVhY2hpbmdfY29tcHV0ZXJfc2NpZW5jZTogXCJUZWFjaGluZyBjb21wdXRlciBzY2llbmNlIGRvZXMgbm90IHJlcXVpcmUgYSBjb3N0bHkgZGVncmVlLCBiZWNhdXNlIHdlIHByb3ZpZGUgdG9vbHMgdG8gc3VwcG9ydCBlZHVjYXRvcnMgb2YgYWxsIGJhY2tncm91bmRzLlwiXG4jICAgIGFjY2Vzc2libGVfdG86IFwiQWNjZXNzaWJsZSB0b1wiXG4jICAgIGV2ZXJ5b25lOiBcImV2ZXJ5b25lXCJcbiMgICAgZGVtb2NyYXRpemluZzogXCJEZW1vY3JhdGl6aW5nIHRoZSBwcm9jZXNzIG9mIGxlYXJuaW5nIGNvZGluZyBpcyBhdCB0aGUgY29yZSBvZiBvdXIgcGhpbG9zb3BoeS4gRXZlcnlvbmUgc2hvdWxkIGJlIGFibGUgdG8gbGVhcm4gdG8gY29kZS5cIlxuIyAgICBmb3Jnb3RfbGVhcm5pbmc6IFwiSSB0aGluayB0aGV5IGFjdHVhbGx5IGZvcmdvdCB0aGF0IHRoZXkgd2VyZSBhY3R1YWxseSBsZWFybmluZyBzb21ldGhpbmcuXCJcbiMgICAgd2FudGVkX3RvX2RvOiBcIiBDb2RpbmcgaXMgc29tZXRoaW5nIEkndmUgYWx3YXlzIHdhbnRlZCB0byBkbywgYW5kIEkgbmV2ZXIgdGhvdWdodCBJIHdvdWxkIGJlIGFibGUgdG8gbGVhcm4gaXQgaW4gc2Nob29sLlwiXG4jICAgIHdoeV9nYW1lczogXCJXaHkgaXMgbGVhcm5pbmcgdGhyb3VnaCBnYW1lcyBpbXBvcnRhbnQ/XCJcbiMgICAgZ2FtZXNfcmV3YXJkOiBcIkdhbWVzIHJld2FyZCB0aGUgcHJvZHVjdGl2ZSBzdHJ1Z2dsZS5cIlxuIyAgICBlbmNvdXJhZ2U6IFwiR2FtaW5nIGlzIGEgbWVkaXVtIHRoYXQgZW5jb3VyYWdlcyBpbnRlcmFjdGlvbiwgZGlzY292ZXJ5LCBhbmQgdHJpYWwtYW5kLWVycm9yLiBBIGdvb2QgZ2FtZSBjaGFsbGVuZ2VzIHRoZSBwbGF5ZXIgdG8gbWFzdGVyIHNraWxscyBvdmVyIHRpbWUsIHdoaWNoIGlzIHRoZSBzYW1lIGNyaXRpY2FsIHByb2Nlc3Mgc3R1ZGVudHMgZ28gdGhyb3VnaCBhcyB0aGV5IGxlYXJuLlwiXG4jICAgIGV4Y2VsOiBcIkdhbWVzIGV4Y2VsIGF0IHJld2FyZGluZ1wiXG4jICAgIHN0cnVnZ2xlOiBcInByb2R1Y3RpdmUgc3RydWdnbGVcIlxuIyAgICBraW5kX29mX3N0cnVnZ2xlOiBcInRoZSBraW5kIG9mIHN0cnVnZ2xlIHRoYXQgcmVzdWx0cyBpbiBsZWFybmluZyB0aGF04oCZcyBlbmdhZ2luZyBhbmRcIlxuIyAgICBtb3RpdmF0aW5nOiBcIm1vdGl2YXRpbmdcIlxuIyAgICBub3RfdGVkaW91czogXCJub3QgdGVkaW91cy5cIlxuIyAgICBnYW1pbmdfaXNfZ29vZDogXCJTdHVkaWVzIHN1Z2dlc3QgZ2FtaW5nIGlzIGdvb2QgZm9yIGNoaWxkcmVu4oCZcyBicmFpbnMuIChpdOKAmXMgdHJ1ZSEpXCJcbiMgICAgZ2FtZV9iYXNlZDogXCJXaGVuIGdhbWUtYmFzZWQgbGVhcm5pbmcgc3lzdGVtcyBhcmVcIlxuIyAgICBjb21wYXJlZDogXCJjb21wYXJlZFwiXG4jICAgIGNvbnZlbnRpb25hbDogXCJhZ2FpbnN0IGNvbnZlbnRpb25hbCBhc3Nlc3NtZW50IG1ldGhvZHMsIHRoZSBkaWZmZXJlbmNlIGlzIGNsZWFyOiBnYW1lcyBhcmUgYmV0dGVyIGF0IGhlbHBpbmcgc3R1ZGVudHMgcmV0YWluIGtub3dsZWRnZSwgY29uY2VudHJhdGUgYW5kXCJcbiMgICAgcGVyZm9ybV9hdF9oaWdoZXJfbGV2ZWw6IFwicGVyZm9ybSBhdCBhIGhpZ2hlciBsZXZlbCBvZiBhY2hpZXZlbWVudFwiXG4jICAgIGZlZWRiYWNrOiBcIkdhbWVzIGFsc28gcHJvdmlkZSByZWFsLXRpbWUgZmVlZGJhY2sgdGhhdCBhbGxvd3Mgc3R1ZGVudHMgdG8gYWRqdXN0IHRoZWlyIHNvbHV0aW9uIHBhdGggYW5kIHVuZGVyc3RhbmQgY29uY2VwdHMgbW9yZSBob2xpc3RpY2FsbHksIGluc3RlYWQgb2YgYmVpbmcgbGltaXRlZCB0byBqdXN0IOKAnGNvcnJlY3TigJ0gb3Ig4oCcaW5jb3JyZWN04oCdIGFuc3dlcnMuXCJcbiMgICAgcmVhbF9nYW1lOiBcIkEgcmVhbCBnYW1lLCBwbGF5ZWQgd2l0aCByZWFsIGNvZGluZy5cIlxuIyAgICBncmVhdF9nYW1lOiBcIkEgZ3JlYXQgZ2FtZSBpcyBtb3JlIHRoYW4ganVzdCBiYWRnZXMgYW5kIGFjaGlldmVtZW50cyAtIGl04oCZcyBhYm91dCBhIHBsYXllcuKAmXMgam91cm5leSwgd2VsbC1kZXNpZ25lZCBwdXp6bGVzLCBhbmQgdGhlIGFiaWxpdHkgdG8gdGFja2xlIGNoYWxsZW5nZXMgd2l0aCBhZ2VuY3kgYW5kIGNvbmZpZGVuY2UuXCJcbiMgICAgYWdlbmN5OiBcIkNvZGVDb21iYXQgaXMgYSBnYW1lIHRoYXQgZ2l2ZXMgcGxheWVycyB0aGF0IGFnZW5jeSBhbmQgY29uZmlkZW5jZSB3aXRoIG91ciByb2J1c3QgdHlwZWQgY29kZSBlbmdpbmUsIHdoaWNoIGhlbHBzIGJlZ2lubmVyIGFuZCBhZHZhbmNlZCBzdHVkZW50cyBhbGlrZSB3cml0ZSBwcm9wZXIsIHZhbGlkIGNvZGUuXCJcbiMgICAgcmVxdWVzdF9kZW1vX3RpdGxlOiBcIkdldCB5b3VyIHN0dWRlbnRzIHN0YXJ0ZWQgdG9kYXkhXCJcbiMgICAgcmVxdWVzdF9kZW1vX3N1YnRpdGxlOiBcIlJlcXVlc3QgYSBkZW1vIGFuZCBnZXQgeW91ciBzdHVkZW50cyBzdGFydGVkIGluIGxlc3MgdGhhbiBhbiBob3VyLlwiXG4jICAgIGdldF9zdGFydGVkX3RpdGxlOiBcIlNldCB1cCB5b3VyIGNsYXNzIHRvZGF5XCJcbiMgICAgZ2V0X3N0YXJ0ZWRfc3VidGl0bGU6IFwiU2V0IHVwIGEgY2xhc3MsIGFkZCB5b3VyIHN0dWRlbnRzLCBhbmQgbW9uaXRvciB0aGVpciBwcm9ncmVzcyBhcyB0aGV5IGxlYXJuIGNvbXB1dGVyIHNjaWVuY2UuXCJcbiMgICAgcmVxdWVzdF9kZW1vOiBcIlJlcXVlc3QgYSBEZW1vXCJcbiMgICAgc2V0dXBfYV9jbGFzczogXCJTZXQgVXAgYSBDbGFzc1wiXG4jICAgIGhhdmVfYW5fYWNjb3VudDogXCJIYXZlIGFuIGFjY291bnQ/XCJcbiMgICAgbG9nZ2VkX2luX2FzOiBcIllvdSBhcmUgY3VycmVudGx5IGxvZ2dlZCBpbiBhc1wiXG4jICAgIGNvbXB1dGVyX3NjaWVuY2U6IFwiT3VyIHNlbGYtcGFjZWQgY291cnNlcyBjb3ZlciBiYXNpYyBzeW50YXggdG8gYWR2YW5jZWQgY29uY2VwdHNcIlxuIyAgICBmZmE6IFwiRnJlZSBmb3IgYWxsIHN0dWRlbnRzXCJcbiMgICAgY29taW5nX3Nvb246IFwiTW9yZSBjb21pbmcgc29vbiFcIlxuIyAgICBjb3Vyc2VzX2F2YWlsYWJsZV9pbjogXCJDb3Vyc2VzIGFyZSBhdmFpbGFibGUgaW4gSmF2YVNjcmlwdCBhbmQgUHl0aG9uLiBXZWIgRGV2ZWxvcG1lbnQgY291cnNlcyB1dGlsaXplIEhUTUwsIENTUywgYW5kIGpRdWVyeS5cIlxuIyAgICBib2FzdDogXCJCb2FzdHMgcmlkZGxlcyB0aGF0IGFyZSBjb21wbGV4IGVub3VnaCB0byBmYXNjaW5hdGUgZ2FtZXJzIGFuZCBjb2RlcnMgYWxpa2UuXCJcbiMgICAgd2lubmluZzogXCJBIHdpbm5pbmcgY29tYmluYXRpb24gb2YgUlBHIGdhbWVwbGF5IGFuZCBwcm9ncmFtbWluZyBob21ld29yayB0aGF0IHB1bGxzIG9mZiBtYWtpbmcga2lkLWZyaWVuZGx5IGVkdWNhdGlvbiBsZWdpdGltYXRlbHkgZW5qb3lhYmxlLlwiXG4jICAgIHJ1bl9jbGFzczogXCJFdmVyeXRoaW5nIHlvdSBuZWVkIHRvIHJ1biBhIGNvbXB1dGVyIHNjaWVuY2UgY2xhc3MgaW4geW91ciBzY2hvb2wgdG9kYXksIG5vIENTIGJhY2tncm91bmQgcmVxdWlyZWQuXCJcbiMgICAgZ290b19jbGFzc2VzOiBcIkdvIHRvIE15IENsYXNzZXNcIlxuIyAgICB2aWV3X3Byb2ZpbGU6IFwiVmlldyBNeSBQcm9maWxlXCJcbiMgICAgdmlld19wcm9ncmVzczogXCJWaWV3IFByb2dyZXNzXCJcbiMgICAgZ29fdG9fY291cnNlczogXCJHbyB0byBNeSBDb3Vyc2VzXCJcbiMgICAgd2FudF9jb2NvOiBcIldhbnQgQ29kZUNvbWJhdCBhdCB5b3VyIHNjaG9vbD9cIlxuXG4gIG5hdjpcbiMgICAgbWFwOiBcIk1hcFwiXG4gICAgcGxheTogXCJTcGllbGVuXCIgIyBUaGUgdG9wIG5hdiBiYXIgZW50cnkgd2hlcmUgcGxheWVycyBjaG9vc2Ugd2hpY2ggbGV2ZWxzIHRvIHBsYXlcbiAgICBjb21tdW5pdHk6IFwiQ29tbXVuaXR5XCJcbiAgICBjb3Vyc2VzOiBcIkt1cnNlXCJcbiAgICBibG9nOiBcIkJsb2dcIlxuICAgIGZvcnVtOiBcIkZvcnVtXCJcbiAgICBhY2NvdW50OiBcIkFjY291bnRcIlxuICAgIG15X2FjY291bnQ6IFwiTWVpbiBBY2NvdW50XCJcbiAgICBwcm9maWxlOiBcIlByb2ZpbFwiXG4gICAgaG9tZTogXCJIb21lXCJcbiAgICBjb250cmlidXRlOiBcIkhlbGZlblwiXG4gICAgbGVnYWw6IFwiUmVjaHRsaWNoZXNcIlxuIyAgICBwcml2YWN5OiBcIlByaXZhY3lcIlxuICAgIGFib3V0OiBcIsOcYmVyXCJcbiAgICBjb250YWN0OiBcIktvbnRha3RcIlxuICAgIHR3aXR0ZXJfZm9sbG93OiBcIlR3aXR0ZXJcIlxuIyAgICBteV9jbGFzc3Jvb21zOiBcIk15IENsYXNzZXNcIlxuIyAgICBteV9jb3Vyc2VzOiBcIk15IENvdXJzZXNcIlxuICAgIGNhcmVlcnM6IFwiQmVydWZlXCJcbiAgICBmYWNlYm9vazogXCJGYWNlYm9va1wiXG4gICAgdHdpdHRlcjogXCJUd2l0dGVyXCJcbiAgICBjcmVhdGVfYV9jbGFzczogXCJFcnN0ZWxsZSBlaW5lIEtsYXNzZVwiXG4gICAgb3RoZXI6IFwiQW5kZXJlXCJcbiAgICBsZWFybl90b19jb2RlOiBcIkxlcm5lIHp1IHByb2dyYW1taWVyZW4hXCJcbiAgICB0b2dnbGVfbmF2OiBcIk5hdmlnYXRpb24gdW1zY2hhbHRlblwiXG4gICAgc2Nob29sczogXCJTY2h1bGVcIlxuICAgIGdldF9pbnZvbHZlZDogXCJXZXJkZSBlaW5nZWJ1bmRlblwiXG4gICAgb3Blbl9zb3VyY2U6IFwiT3BlbiBzb3VyY2UgKEdpdEh1YilcIlxuICAgIHN1cHBvcnQ6IFwiU3VwcG9ydFwiXG4gICAgZmFxczogXCJGQVFzXCJcbiMgICAgY29weXJpZ2h0X3ByZWZpeDogXCJDb3B5cmlnaHRcIlxuIyAgICBjb3B5cmlnaHRfc3VmZml4OiBcIkFsbCBSaWdodHMgUmVzZXJ2ZWQuXCJcbiAgICBoZWxwX3ByZWY6IFwiQnJhdWNoc3QgZHUgSGlsZmU/IEVtYWlsXCJcbiAgICBoZWxwX3N1ZmY6IFwidW5kIHdpciB0cmV0ZW4gaW4gS29udGFrdCFcIlxuIyAgICByZXNvdXJjZV9odWI6IFwiUmVzb3VyY2UgSHViXCJcblxuICBtb2RhbDpcbiAgICBjbG9zZTogXCJTY2hsaWXDn2VuXCJcbiAgICBva2F5OiBcIk9rYXlcIlxuXG4gIG5vdF9mb3VuZDpcbiAgICBwYWdlX25vdF9mb3VuZDogXCJTZWl0ZSBuaWNodCBnZWZ1bmRlblwiXG5cbiAgZGlwbG9tYXRfc3VnZ2VzdGlvbjpcbiAgICB0aXRsZTogXCJIaWxmIENvZGVDb21iYXQgenUgw7xiZXJzZXR6ZW4hXCIgIyBUaGlzIHNob3dzIHVwIHdoZW4gYSBwbGF5ZXIgc3dpdGNoZXMgdG8gYSBub24tRW5nbGlzaCBsYW5ndWFnZSB1c2luZyB0aGUgbGFuZ3VhZ2Ugc2VsZWN0b3IuXG4gICAgc3ViX2hlYWRpbmc6IFwiV2lyIGJyYXVjaGVuIERlaW5lIFNwcmFjaGbDpGhpZ2tlaXRlbi5cIlxuICAgIHBpdGNoX2JvZHk6IFwiV2lyIGVudHdpY2tlbG4gQ29kZUNvbWJhdCBpbiBFbmdsaXNjaCwgYWJlciB3aXIgaGFiZW4gU3BpZWxlciBpbiBkZXIgZ2FuemVuIFdlbHQuIFZpZWxlIHZvbiBpaG5lbiB3b2xsZW4gaW4gRGV1dHNjaCAow5ZzdGVycmVpY2gpIHNwaWVsZW4sIHNwcmVjaGVuIGFiZXIga2VpbiBFbmdsaXNjaC4gV2VubiBEdSBhbHNvIGJlaWRlIFNwcmFjaGVuIGJlaGVycnNjaHQsIG1lbGRlIERpY2ggYW4gdW0gZWluIERpcGxvbWF0IHp1IHdlcmRlbiB1bmQgaGlsZiBkaWUgV2Vic2l0ZSB1bmQgZGllIExldmVscyB6dSBEZXV0c2NoICjDlnN0ZXJyZWljaCkgenUgw7xiZXJzZXR6ZW4uXCJcbiAgICBtaXNzaW5nX3RyYW5zbGF0aW9uczogXCJTb2xhbmdlIHdpciBuaWNodCBhbGxlcyBpbnMgRGV1dHNjaGUgKMOWc3RlcnJlaWNoKSDDvGJlc2V0enQgaGFiZW4sIHNpZWhzdCBEdSBkaWUgZW5nbGlzY2hlIMOcYmVyc2V0enVuZywgd28gRGV1dHNjaCAow5ZzdGVycmVpY2gpIGxlaWRlciBub2NoIG5pY2h0IHp1ciBWZXJmw7xndW5nIHN0ZWh0LlwiXG4gICAgbGVhcm5fbW9yZTogXCJGaW5kZSBoZXJhdXMsIHdpZSBEdSBlaW4gRGlwbG9tYXQgd2VyZGVuIGthbm5zdFwiXG4gICAgc3Vic2NyaWJlX2FzX2RpcGxvbWF0OiBcIlNjaHJlaWJlIGRpY2ggYWxzIERpcGxvbWF0IGVpblwiXG5cbiAgcGxheTpcbiAgICBwbGF5X2FzOiBcIlNwaWVsZSBhbHMgXCIgIyBMYWRkZXIgcGFnZVxuIyAgICBnZXRfY291cnNlX2Zvcl9jbGFzczogXCJBc3NpZ24gR2FtZSBEZXZlbG9wbWVudCBhbmQgbW9yZSB0byB5b3VyIGNsYXNzZXMhXCJcbiMgICAgcmVxdWVzdF9saWNlbnNlczogXCJDb250YWN0IG91ciBzY2hvb2wgc3BlY2lhbGlzdHMgZm9yIGRldGFpbHMuXCJcbiAgICBjb21wZXRlOiBcIkFiZ2VzY2hsb3NzZW4hXCIgIyBDb3Vyc2UgZGV0YWlscyBwYWdlXG4gICAgc3BlY3RhdGU6IFwiWnVzY2hhdWVuXCIgIyBMYWRkZXIgcGFnZVxuICAgIHBsYXllcnM6IFwiU3BpZWxlclwiICMgSG92ZXIgb3ZlciBhIGxldmVsIG9uIC9wbGF5XG4gICAgaG91cnNfcGxheWVkOiBcIlN0dW5kZW4gZ2VzcGllbHRcIiAjIEhvdmVyIG92ZXIgYSBsZXZlbCBvbiAvcGxheVxuICAgIGl0ZW1zOiBcIkdlZ2Vuc3TDpG5kZVwiICMgVG9vbHRpcCBvbiBpdGVtIHNob3AgYnV0dG9uIGZyb20gL3BsYXlcbiAgICB1bmxvY2s6IFwiS2F1ZmVuXCIgIyBGb3IgcHVyY2hhc2luZyBpdGVtcyBhbmQgaGVyb2VzXG4gICAgY29uZmlybTogXCJCZXN0w6R0aWdlblwiXG4gICAgb3duZWQ6IFwiYmVyZWl0cyBpbSBCZXNpdHpcIiAjIEZvciBpdGVtcyB5b3Ugb3duXG4gICAgbG9ja2VkOiBcIkdlc3BlcnJ0XCJcbiAgICBhdmFpbGFibGU6IFwiVmVyZsO8Z2JhclwiXG4gICAgc2tpbGxzX2dyYW50ZWQ6IFwiRnJlaXNjaGFsdGJhcmUgRsOkaGlna2VpdGVuXCIgIyBQcm9wZXJ0eSBkb2N1bWVudGF0aW9uIGRldGFpbHNcbiAgICBoZXJvZXM6IFwiSGVsZGVuXCIgIyBUb29sdGlwIG9uIGhlcm8gc2hvcCBidXR0b24gZnJvbSAvcGxheVxuICAgIGFjaGlldmVtZW50czogXCJFcmZvbGdlXCIgIyBUb29sdGlwIG9uIGFjaGlldmVtZW50IGxpc3QgYnV0dG9uIGZyb20gL3BsYXlcbiAgICBzZXR0aW5nczogXCJFaW5zdGVsbHVuZ2VuXCIgIyBUb29sdGlwIG9uIHNldHRpbmdzIGJ1dHRvbiBmcm9tIC9wbGF5XG4jICAgIHBvbGw6IFwiUG9sbFwiICMgVG9vbHRpcCBvbiBwb2xsIGJ1dHRvbiBmcm9tIC9wbGF5XG4gICAgbmV4dDogXCJXZWl0ZXJcIiAjIEdvIGZyb20gY2hvb3NlIGhlcm8gdG8gY2hvb3NlIGludmVudG9yeSBiZWZvcmUgcGxheWluZyBhIGxldmVsXG4gICAgY2hhbmdlX2hlcm86IFwiSGVsZCB3ZWNoc2VsblwiICMgR28gYmFjayBmcm9tIGNob29zZSBpbnZlbnRvcnkgdG8gY2hvb3NlIGhlcm9cbiAgICBidXlfZ2VtczogXCJKdXdlbGVuIGthdWZlblwiXG4jICAgIHN1YnNjcmliZXJzX29ubHk6IFwiU3Vic2NyaWJlcnMgT25seSFcIlxuIyAgICBzdWJzY3JpYmVfdW5sb2NrOiBcIlN1YnNjcmliZSB0byBVbmxvY2shXCJcbiMgICAgc3Vic2NyaWJlcl9oZXJvZXM6IFwiU3Vic2NyaWJlIHRvZGF5IHRvIGltbWVkaWF0ZWx5IHVubG9jayBBbWFyYSwgSHVzaGJhdW0sIGFuZCBIYXR0b3JpIVwiXG4jICAgIHN1YnNjcmliZXJfZ2VtczogXCJTdWJzY3JpYmUgdG9kYXkgdG8gcHVyY2hhc2UgdGhpcyBoZXJvIHdpdGggZ2VtcyFcIlxuICAgIGFub255bW91czogXCJBbm9ueW1lciBTcGllbGVyXCJcbiAgICBsZXZlbF9kaWZmaWN1bHR5OiBcIlNjaHdpZXJpZ2tlaXQ6IFwiXG4gICAgYXdhaXRpbmdfbGV2ZWxzX2FkdmVudHVyZXJfcHJlZml4OiBcIldpciB2ZXLDtmZmZW50bGljaGVuIHfDtmNoZW50bGljaGVuIG5ldSBMZXZlbHMuXCJcbiAgICBhd2FpdGluZ19sZXZlbHNfYWR2ZW50dXJlcjogXCJNZWxkZSBkaWNoIGFscyBBYmVudGV1ZXJlciBhblwiXG4gICAgYXdhaXRpbmdfbGV2ZWxzX2FkdmVudHVyZXJfc3VmZml4OiBcInVtIGRlciBlcnN0ZSB6dSBzZWluIGRlciBuZXVlIExldmVscyBzcGllbHQuXCJcbiAgICBhZGp1c3Rfdm9sdW1lOiBcIkxhdXRzdMOkcmtlIGFucGFzc2VuXCJcbiAgICBjYW1wYWlnbl9tdWx0aXBsYXllcjogXCJNdWx0aXBsYXllcmFyZW5hXCJcbiAgICBjYW1wYWlnbl9tdWx0aXBsYXllcl9kZXNjcmlwdGlvbjogXCIuLi4gaW4gZGVyIER1IEtvcGYtYW4tS29wZiBnZWdlbiBhbmRlcmUgU3BpZWxlciBwcm9ncmFtbWllcnN0LlwiXG4jICAgIGJyYWluX3BvcF9kb25lOiBcIllvdeKAmXZlIGRlZmVhdGVkIHRoZSBPZ3JlcyB3aXRoIGNvZGUhIFlvdSB3aW4hXCJcbiMgICAgYnJhaW5fcG9wX2NoYWxsZW5nZTogXCJDaGFsbGVuZ2UgeW91cnNlbGYgdG8gcGxheSBhZ2FpbiB1c2luZyBhIGRpZmZlcmVudCBwcm9ncmFtbWluZyBsYW5ndWFnZSFcIlxuIyAgICByZXBsYXk6IFwiUmVwbGF5XCJcbiMgICAgYmFja190b19jbGFzc3Jvb206IFwiQmFjayB0byBDbGFzc3Jvb21cIlxuIyAgICB0ZWFjaGVyX2J1dHRvbjogXCJGb3IgVGVhY2hlcnNcIlxuIyAgICBnZXRfbW9yZV9jb2RlY29tYmF0OiBcIkdldCBNb3JlIENvZGVDb21iYXRcIlxuXG4gIGNvZGU6XG4gICAgaWY6IFwid2VublwiICMgS2V5d29yZHMtLXRoZXNlIHRyYW5zbGF0aW9ucyBzaG93IHVwIG9uIGhvdmVyLCBzbyBwbGVhc2UgdHJhbnNsYXRlIHRoZW0gYWxsLCBldmVuIGlmIGl0J3Mga2luZCBvZiBsb25nLiAoSW4gdGhlIGNvZGUgZWRpdG9yLCB0aGV5IHdpbGwgc3RpbGwgYmUgaW4gRW5nbGlzaC4pXG4gICAgZWxzZTogXCJzb25zdFwiXG4gICAgZWxpZjogXCJzb25zdCB3ZW5uXCJcbiAgICB3aGlsZTogXCJzbyBsYW5nZVwiXG4gICAgbG9vcDogXCJzY2hsZWlmZVwiXG4gICAgZm9yOiBcImbDvHJcIlxuICAgIGJyZWFrOiBcInBhdXNlXCJcbiAgICBjb250aW51ZTogXCJmb3J0c2V0emVuXCJcbiAgICBwYXNzOiBcImJlc3RlaGVuXCJcbiAgICByZXR1cm46IFwienVyw7xja2dlYmVuXCJcbiAgICB0aGVuOiBcImRhbm5cIlxuICAgIGRvOiBcIm1hY2hlXCJcbiAgICBlbmQ6IFwiZW5kZVwiXG4gICAgZnVuY3Rpb246IFwiZnVua3Rpb25cIlxuICAgIGRlZjogXCJkZWZpbmllcmVcIlxuICAgIHZhcjogXCJ2YXJpYWJsZVwiXG4gICAgc2VsZjogXCJzZWxic3RcIlxuICAgIGhlcm86IFwiaGVsZFwiXG4gICAgdGhpczogXCJkaWVzXCJcbiAgICBvcjogXCJvZGVyXCJcbiAgICBcInx8XCI6IFwib2RlclwiXG4gICAgYW5kOiBcInVuZFwiXG4gICAgXCImJlwiOiBcInVuZFwiXG4gICAgbm90OiBcIm5pY2h0XCJcbiAgICBcIiFcIjogXCJuaWNodFwiXG4gICAgXCI9XCI6IFwienV3ZWlzZW5cIlxuICAgIFwiPT1cIjogXCJlbnRzcHJpY2h0XCJcbiAgICBcIj09PVwiOiBcImVudHNwcmljaHQgc3RyaWt0XCJcbiAgICBcIiE9XCI6IFwiZW50c3ByaWNodCBuaWNodFwiXG4gICAgXCIhPT1cIjogXCJlbnRzcHJpY2h0IHN0cmlrdCBuaWNodFwiXG4gICAgXCI+XCI6IFwiaXN0IGdyw7bDn2VyIGFsc1wiXG4gICAgXCI+PVwiOiBcImlzdCBncsO2w59lciBhbHMgb2RlciBnbGVpY2hcIlxuICAgIFwiPFwiOiBcImlzdCBrbGVpbmVyIGFsc1wiXG4gICAgXCI8PVwiOiBcImlzdCBrbGVpbmVyIGFscyBvZGVyIGdsZWljaFwiXG4gICAgXCIqXCI6IFwibXVsdGlwbGl6aWVydCB1bVwiXG4gICAgXCIvXCI6IFwiZGl2aWRpZXJ0IGR1cmNoXCJcbiAgICBcIitcIjogXCJwbHVzXCJcbiAgICBcIi1cIjogXCJtaW51c1wiXG4gICAgXCIrPVwiOiBcImFkZGllcmVuIHVuZCB6dXdlaXNlblwiXG4gICAgXCItPVwiOiBcInN1YnRyYWhpZXJlbiB1bmQgenV3ZWlzZW5cIlxuICAgIFRydWU6IFwiV2FoclwiXG4gICAgdHJ1ZTogXCJ3YWhyXCJcbiAgICBGYWxzZTogXCJGYWxzY2hcIlxuICAgIGZhbHNlOiBcImZhbHNjaFwiXG4gICAgdW5kZWZpbmVkOiBcInVuZGVmaW5pZXJ0XCJcbiAgICBudWxsOiBcIm5pY2h0c1wiXG4gICAgbmlsOiBcIm5pY2h0c1wiXG4gICAgTm9uZTogXCJLZWluXCJcblxuIyAgc2hhcmVfcHJvZ3Jlc3NfbW9kYWw6XG4jICAgIGJsdXJiOiBcIllvdeKAmXJlIG1ha2luZyBncmVhdCBwcm9ncmVzcyEgVGVsbCB5b3VyIHBhcmVudCBob3cgbXVjaCB5b3UndmUgbGVhcm5lZCB3aXRoIENvZGVDb21iYXQuXCJcbiMgICAgZW1haWxfaW52YWxpZDogXCJFbWFpbCBhZGRyZXNzIGludmFsaWQuXCJcbiMgICAgZm9ybV9ibHVyYjogXCJFbnRlciB5b3VyIHBhcmVudCdzIGVtYWlsIGJlbG93IGFuZCB3ZeKAmWxsIHNob3cgdGhlbSFcIlxuIyAgICBmb3JtX2xhYmVsOiBcIkVtYWlsIEFkZHJlc3NcIlxuIyAgICBwbGFjZWhvbGRlcjogXCJlbWFpbCBhZGRyZXNzXCJcbiMgICAgdGl0bGU6IFwiRXhjZWxsZW50IFdvcmssIEFwcHJlbnRpY2VcIlxuXG4gIGxvZ2luOlxuICAgIHNpZ25fdXA6IFwiUmVnaXN0cmllcmVuXCJcbiMgICAgZW1haWxfb3JfdXNlcm5hbWU6IFwiRW1haWwgb3IgdXNlcm5hbWVcIlxuICAgIGxvZ19pbjogXCJFaW5sb2dnZW5cIlxuICAgIGxvZ2dpbmdfaW46IFwiTG9nZ2UgZWluXCJcbiAgICBsb2dfb3V0OiBcIkF1c2xvZ2dlblwiXG4gICAgZm9yZ290X3Bhc3N3b3JkOiBcIlBhc3N3b3J0IHZlcmdlc3Nlbj9cIlxuICAgIGZpbmlzaGluZzogXCJGZXJ0aWcgc3RlbGxlblwiXG4gICAgc2lnbl9pbl93aXRoX2ZhY2Vib29rOiBcIk1pdCBGYWNlYm9vayBhbm1lbGRlblwiXG4gICAgc2lnbl9pbl93aXRoX2dwbHVzOiBcIk1pdCBHKyBhbm1lbGRlblwiXG4gICAgc2lnbnVwX3N3aXRjaDogXCJNw7ZjaHRlc3QgZHUgZWluZW4gQWNjb3VudCBlcnN0ZWxsZW4/XCJcblxuICBzaWdudXA6XG4jICAgIGNvbXBsZXRlX3N1YnNjcmlwdGlvbjogXCJDb21wbGV0ZSBTdWJzY3JpcHRpb25cIlxuIyAgICBjcmVhdGVfc3R1ZGVudF9oZWFkZXI6IFwiQ3JlYXRlIFN0dWRlbnQgQWNjb3VudFwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2hlYWRlcjogXCJDcmVhdGUgVGVhY2hlciBBY2NvdW50XCJcbiMgICAgY3JlYXRlX2luZGl2aWR1YWxfaGVhZGVyOiBcIkNyZWF0ZSBJbmRpdmlkdWFsIEFjY291bnRcIlxuICAgIGVtYWlsX2Fubm91bmNlbWVudHM6IFwiRXJoYWx0ZSBCZW5hY2hyaWNodGlndW5nZW4gcGVyIEVtYWlsXCIgIyB7Y2hhbmdlfVxuIyAgICBzaWduX2luX3RvX2NvbnRpbnVlOiBcIlNpZ24gaW4gb3IgY3JlYXRlIGFuIGFjY291bnQgdG8gY29udGludWVcIlxuIyAgICB0ZWFjaGVyX2VtYWlsX2Fubm91bmNlbWVudHM6IFwiS2VlcCBtZSB1cGRhdGVkIG9uIG5ldyB0ZWFjaGVyIHJlc291cmNlcywgY3VycmljdWx1bSwgYW5kIGNvdXJzZXMhXCJcbiAgICBjcmVhdGluZzogXCJFcnpldWdlIEFjY291bnQuLi5cIlxuICAgIHNpZ25fdXA6IFwiTmV1ZW4gQWNjb3VudCBhbmxlZ2VuXCJcbiAgICBsb2dfaW46IFwibWl0IFBhc3N3b3J0IGVpbmxvZ2dlblwiXG4gICAgcmVxdWlyZWQ6IFwiRHUgbXVzc3QgZGljaCB2b3JoZXIgZWlubG9nZ2VuIHVtIGRvcnQgaGluIHp1IGdlaGVuLlwiXG4gICAgbG9naW5fc3dpdGNoOiBcIkR1IGhhc3QgYmVyZWl0cyBlaW5lbiBBY2NvdW50P1wiXG4gICAgb3B0aW9uYWw6IFwiT3B0aW9uYWxcIlxuICAgIGNvbm5lY3RlZF9ncGx1c19oZWFkZXI6IFwiRHUgaGFzdCBkaWNoIGVyZm9sZ3JlaWNoIMO8YmVyIEdvb2dsZSsgdmVyYnVuZGVuIVwiXG4gICAgY29ubmVjdGVkX2dwbHVzX3A6IFwiVmVydm9sbHN0w6RuZGlnZSBkaWUgQW5tZWxkdW5nIHVtIGRpY2ggbWl0IGRlaW5lbSBHb29nbGUrIEFjY291bnQgYW56dW1lbGRlbi5cIlxuICAgIGNvbm5lY3RlZF9mYWNlYm9va19oZWFkZXI6IFwiRHUgaGFzdCBkaWNoIGVyZm9sZ3JlaWNoIMO8YmVyIEZhY2Vib29rIHZlcmJ1bmRlbiFcIlxuICAgIGNvbm5lY3RlZF9mYWNlYm9va19wOiBcIlZlcnZvbGxzdMOkbmRpZ2UgZGllIEFubWVsZHVuZyB1bSBkaWNoIG1pdCBkZWluZW0gRmFjZWJvb2sgQWNjb3VudCBhbnp1bWVsZGVuLlwiXG4gICAgaGV5X3N0dWRlbnRzOiBcIlNjaMO8bGVyLCBnZWJ0IGRlbiBLbGFzc2VuY29kZSBldXJlcyBMZWhyZXJzIGVpbi5cIlxuICAgIGJpcnRoZGF5OiBcIkdlYnVyc3RhZ1wiXG4jICAgIHBhcmVudF9lbWFpbF9ibHVyYjogXCJXZSBrbm93IHlvdSBjYW4ndCB3YWl0IHRvIGxlYXJuIHByb2dyYW1taW5nICZtZGFzaDsgd2UncmUgZXhjaXRlZCB0b28hIFlvdXIgcGFyZW50cyB3aWxsIHJlY2VpdmUgYW4gZW1haWwgd2l0aCBmdXJ0aGVyIGluc3RydWN0aW9ucyBvbiBob3cgdG8gY3JlYXRlIGFuIGFjY291bnQgZm9yIHlvdS4gRW1haWwge3tlbWFpbF9saW5rfX0gaWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucy5cIlxuIyAgICBjbGFzc3Jvb21fbm90X2ZvdW5kOiBcIk5vIGNsYXNzZXMgZXhpc3Qgd2l0aCB0aGlzIENsYXNzIENvZGUuIENoZWNrIHlvdXIgc3BlbGxpbmcgb3IgYXNrIHlvdXIgdGVhY2hlciBmb3IgaGVscC5cIlxuIyAgICBjaGVja2luZzogXCJDaGVja2luZy4uLlwiXG4jICAgIGFjY291bnRfZXhpc3RzOiBcIlRoaXMgZW1haWwgaXMgYWxyZWFkeSBpbiB1c2U6XCJcbiMgICAgc2lnbl9pbjogXCJTaWduIGluXCJcbiMgICAgZW1haWxfZ29vZDogXCJFbWFpbCBsb29rcyBnb29kIVwiXG4jICAgIG5hbWVfdGFrZW46IFwiVXNlcm5hbWUgYWxyZWFkeSB0YWtlbiEgVHJ5IHt7c3VnZ2VzdGVkTmFtZX19P1wiXG4jICAgIG5hbWVfYXZhaWxhYmxlOiBcIlVzZXJuYW1lIGF2YWlsYWJsZSFcIlxuIyAgICBuYW1lX2lzX2VtYWlsOiBcIlVzZXJuYW1lIG1heSBub3QgYmUgYW4gZW1haWxcIlxuIyAgICBjaG9vc2VfdHlwZTogXCJDaG9vc2UgeW91ciBhY2NvdW50IHR5cGU6XCJcbiMgICAgdGVhY2hlcl90eXBlXzE6IFwiVGVhY2ggcHJvZ3JhbW1pbmcgdXNpbmcgQ29kZUNvbWJhdCFcIlxuIyAgICB0ZWFjaGVyX3R5cGVfMjogXCJTZXQgdXAgeW91ciBjbGFzc1wiXG4jICAgIHRlYWNoZXJfdHlwZV8zOiBcIkFjY2VzcyBDb3Vyc2UgR3VpZGVzXCJcbiMgICAgdGVhY2hlcl90eXBlXzQ6IFwiVmlldyBzdHVkZW50IHByb2dyZXNzXCJcbiMgICAgc2lnbnVwX2FzX3RlYWNoZXI6IFwiU2lnbiB1cCBhcyBhIFRlYWNoZXJcIlxuIyAgICBzdHVkZW50X3R5cGVfMTogXCJMZWFybiB0byBwcm9ncmFtIHdoaWxlIHBsYXlpbmcgYW4gZW5nYWdpbmcgZ2FtZSFcIlxuIyAgICBzdHVkZW50X3R5cGVfMjogXCJQbGF5IHdpdGggeW91ciBjbGFzc1wiXG4jICAgIHN0dWRlbnRfdHlwZV8zOiBcIkNvbXBldGUgaW4gYXJlbmFzXCJcbiMgICAgc3R1ZGVudF90eXBlXzQ6IFwiQ2hvb3NlIHlvdXIgaGVybyFcIlxuIyAgICBzdHVkZW50X3R5cGVfNTogXCJIYXZlIHlvdXIgQ2xhc3MgQ29kZSByZWFkeSFcIlxuIyAgICBzaWdudXBfYXNfc3R1ZGVudDogXCJTaWduIHVwIGFzIGEgU3R1ZGVudFwiXG4jICAgIGluZGl2aWR1YWxzX29yX3BhcmVudHM6IFwiSW5kaXZpZHVhbHMgJiBQYXJlbnRzXCJcbiMgICAgaW5kaXZpZHVhbF90eXBlOiBcIkZvciBwbGF5ZXJzIGxlYXJuaW5nIHRvIGNvZGUgb3V0c2lkZSBvZiBhIGNsYXNzLiBQYXJlbnRzIHNob3VsZCBzaWduIHVwIGZvciBhbiBhY2NvdW50IGhlcmUuXCJcbiMgICAgc2lnbnVwX2FzX2luZGl2aWR1YWw6IFwiU2lnbiB1cCBhcyBhbiBJbmRpdmlkdWFsXCJcbiMgICAgZW50ZXJfY2xhc3NfY29kZTogXCJFbnRlciB5b3VyIENsYXNzIENvZGVcIlxuIyAgICBlbnRlcl9iaXJ0aGRhdGU6IFwiRW50ZXIgeW91ciBiaXJ0aGRhdGU6XCJcbiMgICAgcGFyZW50X3VzZV9iaXJ0aGRhdGU6IFwiUGFyZW50cywgdXNlIHlvdXIgb3duIGJpcnRoZGF0ZS5cIlxuIyAgICBhc2tfdGVhY2hlcl8xOiBcIkFzayB5b3VyIHRlYWNoZXIgZm9yIHlvdXIgQ2xhc3MgQ29kZS5cIlxuIyAgICBhc2tfdGVhY2hlcl8yOiBcIk5vdCBwYXJ0IG9mIGEgY2xhc3M/IENyZWF0ZSBhbiBcIlxuIyAgICBhc2tfdGVhY2hlcl8zOiBcIkluZGl2aWR1YWwgQWNjb3VudFwiXG4jICAgIGFza190ZWFjaGVyXzQ6IFwiIGluc3RlYWQuXCJcbiMgICAgYWJvdXRfdG9fam9pbjogXCJZb3UncmUgYWJvdXQgdG8gam9pbjpcIlxuIyAgICBlbnRlcl9wYXJlbnRfZW1haWw6IFwiRW50ZXIgeW91ciBwYXJlbnTigJlzIGVtYWlsIGFkZHJlc3M6XCJcbiMgICAgcGFyZW50X2VtYWlsX2Vycm9yOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gdHJ5aW5nIHRvIHNlbmQgdGhlIGVtYWlsLiBDaGVjayB0aGUgZW1haWwgYWRkcmVzcyBhbmQgdHJ5IGFnYWluLlwiXG4jICAgIHBhcmVudF9lbWFpbF9zZW50OiBcIldl4oCZdmUgc2VudCBhbiBlbWFpbCB3aXRoIGZ1cnRoZXIgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBjcmVhdGUgYW4gYWNjb3VudC4gQXNrIHlvdXIgcGFyZW50IHRvIGNoZWNrIHRoZWlyIGluYm94LlwiXG4jICAgIGFjY291bnRfY3JlYXRlZDogXCJBY2NvdW50IENyZWF0ZWQhXCJcbiMgICAgY29uZmlybV9zdHVkZW50X2JsdXJiOiBcIldyaXRlIGRvd24geW91ciBpbmZvcm1hdGlvbiBzbyB0aGF0IHlvdSBkb24ndCBmb3JnZXQgaXQuIFlvdXIgdGVhY2hlciBjYW4gYWxzbyBoZWxwIHlvdSByZXNldCB5b3VyIHBhc3N3b3JkIGF0IGFueSB0aW1lLlwiXG4jICAgIGNvbmZpcm1faW5kaXZpZHVhbF9ibHVyYjogXCJXcml0ZSBkb3duIHlvdXIgbG9naW4gaW5mb3JtYXRpb24gaW4gY2FzZSB5b3UgbmVlZCBpdCBsYXRlci4gVmVyaWZ5IHlvdXIgZW1haWwgc28geW91IGNhbiByZWNvdmVyIHlvdXIgYWNjb3VudCBpZiB5b3UgZXZlciBmb3JnZXQgeW91ciBwYXNzd29yZCAtIGNoZWNrIHlvdXIgaW5ib3ghXCJcbiMgICAgd3JpdGVfdGhpc19kb3duOiBcIldyaXRlIHRoaXMgZG93bjpcIlxuIyAgICBzdGFydF9wbGF5aW5nOiBcIlN0YXJ0IFBsYXlpbmchXCJcbiMgICAgc3NvX2Nvbm5lY3RlZDogXCJTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHdpdGg6XCJcbiMgICAgc2VsZWN0X3lvdXJfc3RhcnRpbmdfaGVybzogXCJTZWxlY3QgWW91ciBTdGFydGluZyBIZXJvOlwiXG4jICAgIHlvdV9jYW5fYWx3YXlzX2NoYW5nZV95b3VyX2hlcm9fbGF0ZXI6IFwiWW91IGNhbiBhbHdheXMgY2hhbmdlIHlvdXIgaGVybyBsYXRlci5cIlxuIyAgICBmaW5pc2g6IFwiRmluaXNoXCJcbiMgICAgdGVhY2hlcl9yZWFkeV90b19jcmVhdGVfY2xhc3M6IFwiWW91J3JlIHJlYWR5IHRvIGNyZWF0ZSB5b3VyIGZpcnN0IGNsYXNzIVwiXG4jICAgIHRlYWNoZXJfc3R1ZGVudHNfY2FuX3N0YXJ0X25vdzogXCJZb3VyIHN0dWRlbnRzIHdpbGwgYmUgYWJsZSB0byBzdGFydCBwbGF5aW5nIHRoZSBmaXJzdCBjb3Vyc2UsIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlLCBpbW1lZGlhdGVseS5cIlxuIyAgICB0ZWFjaGVyX2xpc3RfY3JlYXRlX2NsYXNzOiBcIk9uIHRoZSBuZXh0IHNjcmVlbiB5b3Ugd2lsbCBiZSBhYmxlIHRvIGNyZWF0ZSBhIG5ldyBjbGFzcy5cIlxuIyAgICB0ZWFjaGVyX2xpc3RfYWRkX3N0dWRlbnRzOiBcIkFkZCBzdHVkZW50cyB0byB0aGUgY2xhc3MgYnkgY2xpY2tpbmcgdGhlIFZpZXcgQ2xhc3MgbGluaywgdGhlbiBzZW5kaW5nIHlvdXIgc3R1ZGVudHMgdGhlIENsYXNzIENvZGUgb3IgVVJMLiBZb3UgY2FuIGFsc28gaW52aXRlIHRoZW0gdmlhIGVtYWlsIGlmIHRoZXkgaGF2ZSBlbWFpbCBhZGRyZXNzZXMuXCJcbiMgICAgdGVhY2hlcl9saXN0X3Jlc291cmNlX2h1Yl8xOiBcIkNoZWNrIG91dCB0aGVcIlxuIyAgICB0ZWFjaGVyX2xpc3RfcmVzb3VyY2VfaHViXzI6IFwiQ291cnNlIEd1aWRlc1wiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfMzogXCJmb3Igc29sdXRpb25zIHRvIGV2ZXJ5IGxldmVsLCBhbmQgdGhlXCJcbiMgICAgdGVhY2hlcl9saXN0X3Jlc291cmNlX2h1Yl80OiBcIlJlc291cmNlIEh1YlwiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfNTogXCJmb3IgY3VycmljdWx1bSBndWlkZXMsIGFjdGl2aXRpZXMsIGFuZCBtb3JlIVwiXG4jICAgIHRlYWNoZXJfYWRkaXRpb25hbF9xdWVzdGlvbnM6IFwiVGhhdOKAmXMgaXQhIElmIHlvdSBuZWVkIGFkZGl0aW9uYWwgaGVscCBvciBoYXZlIHF1ZXN0aW9ucywgcmVhY2ggb3V0IHRvIF9fc3VwcG9ydEVtYWlsX18uXCJcbiMgICAgZG9udF91c2Vfb3VyX2VtYWlsX3NpbGx5OiBcIkRvbid0IHB1dCBvdXIgZW1haWwgaGVyZSEgUHV0IHlvdXIgcGFyZW50J3MgZW1haWwuXCJcbiMgICAgd2FudF9jb2RlY29tYmF0X2luX3NjaG9vbDogXCJXYW50IHRvIHBsYXkgQ29kZUNvbWJhdCBhbGwgdGhlIHRpbWU/XCJcblxuICByZWNvdmVyOlxuICAgIHJlY292ZXJfYWNjb3VudF90aXRsZTogXCJBY2NvdW50IFdpZWRlcmhlcnN0ZWxsdW5nXCJcbiAgICBzZW5kX3Bhc3N3b3JkOiBcIldpZWRlcmhlcnN0ZWxsdW5nc2tlbm53b3J0IHNlbmRlblwiXG4gICAgcmVjb3Zlcnlfc2VudDogXCJXaWVkZXJoZXJzdGVsbHVuZ3MtRW1haWwgdmVyc2FuZHQuXCJcblxuICBpdGVtczpcbiAgICBwcmltYXJ5OiBcIlByaW3DpHJcIlxuICAgIHNlY29uZGFyeTogXCJTZWt1bmTDpHJcIlxuICAgIGFybW9yOiBcIlLDvHN0dW5nXCJcbiAgICBhY2Nlc3NvcmllczogXCJadWJlaMO2clwiXG4gICAgbWlzYzogXCJTb25zdGlnZXNcIlxuICAgIGJvb2tzOiBcIkLDvGNoZXJcIlxuXG4gIGNvbW1vbjpcbiMgICAgYmFjazogXCJCYWNrXCIgIyBXaGVuIHVzZWQgYXMgYW4gYWN0aW9uIHZlcmIsIGxpa2UgXCJOYXZpZ2F0ZSBiYWNrd2FyZFwiXG4jICAgIGNvbWluZ19zb29uOiBcIkNvbWluZyBzb29uIVwiXG4jICAgIGNvbnRpbnVlOiBcIkNvbnRpbnVlXCIgIyBXaGVuIHVzZWQgYXMgYW4gYWN0aW9uIHZlcmIsIGxpa2UgXCJDb250aW51ZSBmb3J3YXJkXCJcbiMgICAgbmV4dDogXCJOZXh0XCJcbiMgICAgZGVmYXVsdF9jb2RlOiBcIkRlZmF1bHQgQ29kZVwiXG4gICAgbG9hZGluZzogXCJMYWRlLi4uXCJcbiMgICAgb3ZlcnZpZXc6IFwiT3ZlcnZpZXdcIlxuIyAgICBwcm9jZXNzaW5nOiBcIlByb2Nlc3NpbmcuLi5cIlxuIyAgICBzb2x1dGlvbjogXCJTb2x1dGlvblwiXG4jICAgIHRhYmxlX29mX2NvbnRlbnRzOiBcIlRhYmxlIG9mIENvbnRlbnRzXCJcbiMgICAgaW50cm86IFwiSW50cm9cIlxuICAgIHNhdmluZzogXCJTcGVpY2hlcmUuLi5cIlxuICAgIHNlbmRpbmc6IFwiw5xiZXJ0cmFnZS4uLlwiXG4gICAgc2VuZDogXCJTZW5kZW5cIlxuIyAgICBzZW50OiBcIlNlbnRcIlxuICAgIGNhbmNlbDogXCJBYmJyZWNoZW5cIlxuICAgIHNhdmU6IFwiU3BlaWNoZXJuXCJcbiAgICBwdWJsaXNoOiBcIlB1YmxpemllcmVcIlxuICAgIGNyZWF0ZTogXCJFcnN0ZWxsZVwiXG4gICAgZm9yazogXCJGb3JrXCJcbiAgICBwbGF5OiBcIkFic3BpZWxlblwiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiUGxheSBuZXh0IGxldmVsXCJcbiAgICByZXRyeTogXCJFcm5ldXQgdmVyc3VjaGVuXCJcbiMgICAgYWN0aW9uczogXCJBY3Rpb25zXCJcbiMgICAgaW5mbzogXCJJbmZvXCJcbiMgICAgaGVscDogXCJIZWxwXCJcbiMgICAgd2F0Y2g6IFwiV2F0Y2hcIlxuIyAgICB1bndhdGNoOiBcIlVud2F0Y2hcIlxuICAgIHN1Ym1pdF9wYXRjaDogXCJQYXRjaCBlaW5yZWljaGVuXCJcbiMgICAgc3VibWl0X2NoYW5nZXM6IFwiU3VibWl0IENoYW5nZXNcIlxuIyAgICBzYXZlX2NoYW5nZXM6IFwiU2F2ZSBDaGFuZ2VzXCJcbiMgICAgcmVxdWlyZWRfZmllbGQ6IFwicmVxdWlyZWRcIlxuXG4gIGdlbmVyYWw6XG4gICAgYW5kOiBcInVuZFwiXG4gICAgbmFtZTogXCJOYW1lXCJcbiAgICBkYXRlOiBcIkRhdHVtXCJcbiAgICBib2R5OiBcIkluaGFsdFwiXG4gICAgdmVyc2lvbjogXCJWZXJzaW9uXCJcbiAgICBwZW5kaW5nOiBcIkF1c3N0ZWhlbmRcIlxuICAgIGFjY2VwdGVkOiBcIkFremVwdGllcnRcIlxuICAgIHJlamVjdGVkOiBcIkFiZ2VsZWhudFwiXG4gICAgd2l0aGRyYXduOiBcIlp1csO8Y2tnZXpvZ2VuXCJcbiAgICBhY2NlcHQ6IFwiQWt6ZXB0aWVyZW5cIlxuICAgIHJlamVjdDogXCJBYmdlbGVobmVuXCJcbiAgICB3aXRoZHJhdzogXCJadXLDvGNremllaGVuXCJcbiAgICBzdWJtaXR0ZXI6IFwiVmVyw7ZmZmVudGxpY2hlclwiXG4gICAgc3VibWl0dGVkOiBcIlZlcsO2ZmZlbnRsaWNodFwiXG4gICAgY29tbWl0X21zZzogXCJOYWNocmljaHQgYWJzZW5kZW5cIlxuICAgIHZlcnNpb25faGlzdG9yeTogXCJWZXJzaW9uc2hpc3RvcmllXCJcbiAgICB2ZXJzaW9uX2hpc3RvcnlfZm9yOiBcIlZlcnNpb25zZ2VzY2hpY2h0ZSBmw7xyOiBcIlxuICAgIHNlbGVjdF9jaGFuZ2VzOiBcIlfDpGhsZW4gendlaSDDhG5kZXJ1bmdlbiB1bnRlcmhhbGIgdW0gZGVuIFVudGVyc2NoaWVkIHp1IHNlaGVuLlwiXG4gICAgdW5kb19wcmVmaXg6IFwiUsO8Y2tnw6RuZ2lnXCJcbiAgICB1bmRvX3Nob3J0Y3V0OiBcIihTdHJnK1opXCJcbiAgICByZWRvX3ByZWZpeDogXCJXaWVkZXJoZXJzdGVsbGVuXCJcbiAgICByZWRvX3Nob3J0Y3V0OiBcIihTdHJnK1Vtc2NoYWx0K1opXCJcbiAgICBwbGF5X3ByZXZpZXc6IFwiVm9yc2NoYXUgdm9tIGFrdHVlbGxlbiBMZXZlbCBzcGllbGVuXCJcbiAgICByZXN1bHQ6IFwiRXJnZWJuaXNcIlxuICAgIHJlc3VsdHM6IFwiRXJnZWJuaXNzZVwiXG4gICAgZGVzY3JpcHRpb246IFwiQmVzY2hyZWlidW5nXCJcbiAgICBvcjogXCJvZGVyXCJcbiAgICBzdWJqZWN0OiBcIkJldHJlZmZcIlxuICAgIGVtYWlsOiBcIkVtYWlsXCJcbiAgICBwYXNzd29yZDogXCJQYXNzd29ydFwiXG4gICAgY29uZmlybV9wYXNzd29yZDogXCJQYXNzd29ydCBiZXN0w6R0aWdlblwiXG4gICAgbWVzc2FnZTogXCJOYWNocmljaHRcIlxuICAgIGNvZGU6IFwiQ29kZVwiXG4gICAgbGFkZGVyOiBcIlJhbmdsaXN0ZVwiXG4gICAgd2hlbjogXCJXYW5uXCJcbiAgICBvcHBvbmVudDogXCJHZWduZXJcIlxuICAgIHJhbms6IFwiUmFuZ1wiXG4gICAgc2NvcmU6IFwiUHVua3R6YWhsXCJcbiAgICB3aW46IFwiU2llZ1wiXG4gICAgbG9zczogXCJOaWVkZXJsYWdlXCJcbiAgICB0aWU6IFwiVW5lbnRzY2hpZWRlblwiXG4gICAgZWFzeTogXCJFaW5mYWNoXCJcbiAgICBtZWRpdW06IFwiTWl0dGVsXCJcbiAgICBoYXJkOiBcIlNjaHdlclwiXG4gICAgcGxheWVyOiBcIlNwaWVsZXJcIlxuICAgIHBsYXllcl9sZXZlbDogXCJTcGllbGVybGV2ZWxcIiAjIExpa2UgcGxheWVyIGxldmVsIDUsIG5vdCBsaWtlIGxldmVsOiBEdW5nZW9ucyBvZiBLaXRoZ2FyZFxuICAgIHdhcnJpb3I6IFwiS3JpZWdlclwiXG4gICAgcmFuZ2VyOiBcIkrDpGdlclwiXG4gICAgd2l6YXJkOiBcIkhleGVyXCJcbiAgICBmaXJzdF9uYW1lOiBcIlZvcm5hbWVcIlxuICAgIGxhc3RfbmFtZTogXCJOYWNobmFtZVwiXG4jICAgIGxhc3RfaW5pdGlhbDogXCJMYXN0IEluaXRpYWxcIlxuICAgIHVzZXJuYW1lOiBcIkJlbnV0emVybmFtZVwiXG4jICAgIGNvbnRhY3RfdXM6IFwiQ29udGFjdCBVc1wiXG4jICAgIGNsb3NlX3dpbmRvdzogXCJDbG9zZSBXaW5kb3dcIlxuIyAgICBsZWFybl9tb3JlOiBcIkxlYXJuIE1vcmVcIlxuIyAgICBtb3JlOiBcIk1vcmVcIlxuIyAgICBmZXdlcjogXCJGZXdlclwiXG4jICAgIHdpdGg6IFwid2l0aFwiXG5cbiAgdW5pdHM6XG4gICAgc2Vjb25kOiBcIlNla3VuZGVcIlxuICAgIHNlY29uZHM6IFwiU2VrdW5kZW5cIlxuIyAgICBzZWM6IFwic2VjXCJcbiAgICBtaW51dGU6IFwiTWludXRlXCJcbiAgICBtaW51dGVzOiBcIk1pbnV0ZW5cIlxuICAgIGhvdXI6IFwiU3R1bmRlXCJcbiAgICBob3VyczogXCJTdHVuZGVuXCJcbiAgICBkYXk6IFwiVGFnXCJcbiAgICBkYXlzOiBcIlRhZ2VcIlxuICAgIHdlZWs6IFwiV29jaGVcIlxuICAgIHdlZWtzOiBcIldvY2hlblwiXG4gICAgbW9udGg6IFwiTW9uYXRcIlxuICAgIG1vbnRoczogXCJNb25hdGVcIlxuICAgIHllYXI6IFwiSmFoclwiXG4gICAgeWVhcnM6IFwiSmFocmVcIlxuXG4gIHBsYXlfbGV2ZWw6XG4jICAgIGJhY2tfdG9fbWFwOiBcIkJhY2sgdG8gTWFwXCJcbiMgICAgZGlyZWN0aW9uczogXCJEaXJlY3Rpb25zXCJcbiMgICAgZWRpdF9sZXZlbDogXCJFZGl0IExldmVsXCJcbiMgICAga2VlcF9sZWFybmluZzogXCJLZWVwIExlYXJuaW5nXCJcbiMgICAgZXhwbG9yZV9jb2RlY29tYmF0OiBcIkV4cGxvcmUgQ29kZUNvbWJhdFwiXG4jICAgIGZpbmlzaGVkX2hvYzogXCJJJ20gZmluaXNoZWQgd2l0aCBteSBIb3VyIG9mIENvZGVcIlxuIyAgICBnZXRfY2VydGlmaWNhdGU6IFwiR2V0IHlvdXIgY2VydGlmaWNhdGUhXCJcbiMgICAgbGV2ZWxfY29tcGxldGU6IFwiTGV2ZWwgQ29tcGxldGVcIlxuIyAgICBjb21wbGV0ZWRfbGV2ZWw6IFwiQ29tcGxldGVkIExldmVsOlwiXG4jICAgIGNvdXJzZTogXCJDb3Vyc2U6XCJcbiAgICBkb25lOiBcIkZlcnRpZ1wiXG4jICAgIG5leHRfbGV2ZWw6IFwiTmV4dCBMZXZlbFwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZTogXCJDb21ibyBDaGFsbGVuZ2VcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZTogXCJDb25jZXB0IENoYWxsZW5nZVwiXG4jICAgIGNoYWxsZW5nZV91bmxvY2tlZDogXCJDaGFsbGVuZ2UgVW5sb2NrZWRcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfdW5sb2NrZWQ6IFwiQ29tYm8gQ2hhbGxlbmdlIFVubG9ja2VkXCJcbiMgICAgY29uY2VwdF9jaGFsbGVuZ2VfdW5sb2NrZWQ6IFwiQ29uY2VwdCBDaGFsbGVuZ2UgVW5sb2NrZWRcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZV9jb21wbGV0ZTogXCJDb25jZXB0IENoYWxsZW5nZSBDb21wbGV0ZSFcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfY29tcGxldGU6IFwiQ29tYm8gQ2hhbGxlbmdlIENvbXBsZXRlIVwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV9jb21wbGV0ZV9ib2R5OiBcIkdyZWF0IGpvYiwgaXQgbG9va3MgbGlrZSB5b3UncmUgd2VsbCBvbiB5b3VyIHdheSB0byB1bmRlcnN0YW5kaW5nIF9fY29uY2VwdF9fIVwiXG4jICAgIHJlcGxheV9sZXZlbDogXCJSZXBsYXkgTGV2ZWxcIlxuIyAgICBjb21ib19jb25jZXB0c191c2VkOiBcIl9fY29tcGxldGVfXy9fX3RvdGFsX18gQ29uY2VwdHMgVXNlZFwiXG4jICAgIGNvbWJvX2FsbF9jb25jZXB0c191c2VkOiBcIllvdSB1c2VkIGFsbCBjb25jZXB0cyBwb3NzaWJsZSB0byBzb2x2ZSB0aGUgY2hhbGxlbmdlLiBHcmVhdCBqb2IhXCJcbiMgICAgY29tYm9fbm90X2FsbF9jb25jZXB0c191c2VkOiBcIllvdSB1c2VkIF9fY29tcGxldGVfXyBvdXQgb2YgdGhlIF9fdG90YWxfXyBjb25jZXB0cyBwb3NzaWJsZSB0byBzb2x2ZSB0aGUgY2hhbGxlbmdlLiBUcnkgdG8gZ2V0IGFsbCBfX3RvdGFsX18gY29uY2VwdHMgbmV4dCB0aW1lIVwiXG4jICAgIHN0YXJ0X2NoYWxsZW5nZTogXCJTdGFydCBDaGFsbGVuZ2VcIlxuIyAgICBuZXh0X2dhbWU6IFwiTmV4dCBnYW1lXCJcbiMgICAgbGFuZ3VhZ2VzOiBcIkxhbmd1YWdlc1wiXG4jICAgIHByb2dyYW1taW5nX2xhbmd1YWdlOiBcIlByb2dyYW1taW5nIGxhbmd1YWdlXCJcbiMgICAgc2hvd19tZW51OiBcIlNob3cgZ2FtZSBtZW51XCJcbiAgICBob21lOiBcIlN0YXJ0c2VpdGVcIiAjIE5vdCB1c2VkIGFueSBtb3JlLCB3aWxsIGJlIHJlbW92ZWQgc29vbi5cbiAgICBsZXZlbDogXCJNaXNzaW9uXCIgIyBMaWtlIFwiTGV2ZWw6IER1bmdlb25zIG9mIEtpdGhnYXJkXCJcbiAgICBza2lwOiBcIsOcYmVyc3ByaW5nZW5cIlxuICAgIGdhbWVfbWVudTogXCJTcGllbG1lbsO8XCJcbiAgICByZXN0YXJ0OiBcIk5ldXN0YXJ0XCJcbiAgICBnb2FsczogXCJaaWVsZVwiXG4gICAgZ29hbDogXCJaaWVsXCJcbiMgICAgY2hhbGxlbmdlX2xldmVsX2dvYWxzOiBcIkNoYWxsZW5nZSBMZXZlbCBHb2Fsc1wiXG4jICAgIGNoYWxsZW5nZV9sZXZlbF9nb2FsOiBcIkNoYWxsZW5nZSBMZXZlbCBHb2FsXCJcbiMgICAgY29uY2VwdF9jaGFsbGVuZ2VfZ29hbHM6IFwiQ29uY2VwdCBDaGFsbGVuZ2UgR29hbHNcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfZ29hbHM6IFwiQ2hhbGxlbmdlIExldmVsIEdvYWxzXCJcbiMgICAgY29uY2VwdF9jaGFsbGVuZ2VfZ29hbDogXCJDb25jZXB0IENoYWxsZW5nZSBHb2FsXCJcbiMgICAgY29tYm9fY2hhbGxlbmdlX2dvYWw6IFwiQ2hhbGxlbmdlIExldmVsIEdvYWxcIlxuIyAgICBydW5uaW5nOiBcIlJ1bm5pbmcuLi5cIlxuICAgIHN1Y2Nlc3M6IFwiRXJmb2xncmVpY2ghXCJcbiAgICBpbmNvbXBsZXRlOiBcIlVudm9sbHN0w6RuZGlnXCJcbiAgICB0aW1lZF9vdXQ6IFwiWmVpdCBhYmdlbGF1ZmVuXCJcbiMgICAgZmFpbGluZzogXCJGYWlsaW5nXCJcbiAgICByZWxvYWQ6IFwiTmV1IGxhZGVuXCJcbiAgICByZWxvYWRfdGl0bGU6IFwiR2VzYW10ZW4gQ29kZSBuZXUgbGFkZW4/XCJcbiAgICByZWxvYWRfcmVhbGx5OiBcIkJpc3QgRHUgc2ljaGVyLCBkYXNzIER1IGRhcyBMZXZlbCBuZXUgYmVnaW5uZW4gd2lsbHN0P1wiXG4gICAgcmVsb2FkX2NvbmZpcm06IFwiQWxsZXMgbmV1IGxhZGVuXCJcbiMgICAgdGVzdF9sZXZlbDogXCJUZXN0IExldmVsXCJcbiAgICB2aWN0b3J5OiBcIlNpZWdcIlxuICAgIHZpY3RvcnlfdGl0bGVfcHJlZml4OiBcIlwiXG4gICAgdmljdG9yeV90aXRsZV9zdWZmaXg6IFwiIEFiZ2VzY2hsb3NzZW5cIlxuICAgIHZpY3Rvcnlfc2lnbl91cDogXCJNZWxkZSBEaWNoIGFuLCB1bSBGb3J0c2Nocml0dGUgenUgc3BlaWNoZXJuXCJcbiAgICB2aWN0b3J5X3NpZ25fdXBfcG9rZTogXCJNw7ZjaHRlc3QgRHUgTmV1aWdrZWl0ZW4gcGVyIE1haWwgZXJoYWx0ZW4/IEVyc3RlbGxlIGVpbmVuIGtvc3Rlbmxvc2VuIEFjY291bnQgdW5kIHdpciBoYWx0ZW4gRGljaCBhdWYgZGVtIExhdWZlbmRlbi5cIlxuICAgIHZpY3RvcnlfcmF0ZV90aGVfbGV2ZWw6IFwiQmV3ZXJ0ZSBkYXMgTGV2ZWw6IFwiICMge2NoYW5nZX1cbiAgICB2aWN0b3J5X3JldHVybl90b19sYWRkZXI6IFwiWnVyw7xjayB6dXIgUmFuZ2xpc3RlXCJcbiAgICB2aWN0b3J5X3NhdmluZ19wcm9ncmVzczogXCJTcGVpY2hlcmUgRm9ydHNjaHJpdHRcIlxuICAgIHZpY3RvcnlfZ29faG9tZTogXCJHZWggYXVmIGRpZSBTdGFydHNlaXRlXCJcbiAgICB2aWN0b3J5X3JldmlldzogXCJFcnrDpGhsIHVucyBkYXZvbiFcIlxuIyAgICB2aWN0b3J5X3Jldmlld19wbGFjZWhvbGRlcjogXCJIb3cgd2FzIHRoZSBsZXZlbD9cIlxuICAgIHZpY3RvcnlfaG91cl9vZl9jb2RlX2RvbmU6IFwiQmlzdCBEdSBmZXJ0aWc/XCJcbiAgICB2aWN0b3J5X2hvdXJfb2ZfY29kZV9kb25lX3llczogXCJKYSwgaWNoIGJpbiBtaXQgbWVpbmVyIENvZGUtU3R1bmRlIGZlcnRpZyFcIlxuICAgIHZpY3RvcnlfZXhwZXJpZW5jZV9nYWluZWQ6IFwiRVAgZXJoYWx0ZW5cIlxuICAgIHZpY3RvcnlfZ2Vtc19nYWluZWQ6IFwiSnV3ZWxlbiBlcmhhbHRlblwiXG4jICAgIHZpY3RvcnlfbmV3X2l0ZW06IFwiTmV3IEl0ZW1cIlxuIyAgICB2aWN0b3J5X25ld19oZXJvOiBcIk5ldyBIZXJvXCJcbiMgICAgdmljdG9yeV92aWtpbmdfY29kZV9zY2hvb2w6IFwiSG9seSBzbW9rZXMsIHRoYXQgd2FzIGEgaGFyZCBsZXZlbCB5b3UganVzdCBiZWF0ISBJZiB5b3UgYXJlbid0IGFscmVhZHkgYSBzb2Z0d2FyZSBkZXZlbG9wZXIsIHlvdSBzaG91bGQgYmUuIFlvdSBqdXN0IGdvdCBmYXN0LXRyYWNrZWQgZm9yIGFjY2VwdGFuY2Ugd2l0aCBWaWtpbmcgQ29kZSBTY2hvb2wsIHdoZXJlIHlvdSBjYW4gdGFrZSB5b3VyIHNraWxscyB0byB0aGUgbmV4dCBsZXZlbCBhbmQgYmVjb21lIGEgcHJvZmVzc2lvbmFsIHdlYiBkZXZlbG9wZXIgaW4gMTQgd2Vla3MuXCJcbiMgICAgdmljdG9yeV9iZWNvbWVfYV92aWtpbmc6IFwiQmVjb21lIGEgVmlraW5nXCJcbiMgICAgdmljdG9yeV9ub19wcm9ncmVzc19mb3JfdGVhY2hlcnM6IFwiUHJvZ3Jlc3MgaXMgbm90IHNhdmVkIGZvciB0ZWFjaGVycy4gQnV0LCB5b3UgY2FuIGFkZCBhIHN0dWRlbnQgYWNjb3VudCB0byB5b3VyIGNsYXNzcm9vbSBmb3IgeW91cnNlbGYuXCJcbiMgICAgdG9tZV9jYXN0X2J1dHRvbl9ydW46IFwiUnVuXCJcbiMgICAgdG9tZV9jYXN0X2J1dHRvbl9ydW5uaW5nOiBcIlJ1bm5pbmdcIlxuIyAgICB0b21lX2Nhc3RfYnV0dG9uX3JhbjogXCJSYW5cIlxuICAgIHRvbWVfc3VibWl0X2J1dHRvbjogXCJBYnNlbmRlblwiXG4gICAgdG9tZV9yZWxvYWRfbWV0aG9kOiBcIkxhZGUgZGVuIHVyc3Byw7xuZ2xpY2hlbiBDb2RlIGRpZXNlciBNZXRob2RlXCIgIyB7Y2hhbmdlfVxuICAgIHRvbWVfYXZhaWxhYmxlX3NwZWxsczogXCJWZXJmw7xnYmFyZSBaYXViZXJcIlxuICAgIHRvbWVfeW91cl9za2lsbHM6IFwiRGVpbmUgRsOkaGlna2VpdGVuXCJcbiMgICAgaGludHM6IFwiSGludHNcIlxuIyAgICBoaW50c190aXRsZTogXCJIaW50IHt7bnVtYmVyfX1cIlxuICAgIGNvZGVfc2F2ZWQ6IFwiQ29kZSBnZXNwZWljaGVydFwiXG4gICAgc2tpcF90dXRvcmlhbDogXCLDnGJlcnNwcmluZ2VuIChFc2MpXCJcbiAgICBrZXlib2FyZF9zaG9ydGN1dHM6IFwiVGFzdGVua8O8cnplbFwiXG4gICAgbG9hZGluZ19zdGFydDogXCJTdGFydGUgTGV2ZWxcIlxuIyAgICBsb2FkaW5nX3N0YXJ0X2NvbWJvOiBcIlN0YXJ0IENvbWJvIENoYWxsZW5nZVwiXG4jICAgIGxvYWRpbmdfc3RhcnRfY29uY2VwdDogXCJTdGFydCBDb25jZXB0IENoYWxsZW5nZVwiXG4gICAgcHJvYmxlbV9hbGVydF90aXRsZTogXCJLb3JyaWdpZXJlIGRlaW5lbiBDb2RlXCJcbiAgICB0aW1lX2N1cnJlbnQ6IFwiQWt0dWVsbFwiXG4gICAgdGltZV90b3RhbDogXCJUb3RhbFwiXG4gICAgdGltZV9nb3RvOiBcIkdlaGUgenVcIlxuIyAgICBub25fdXNlcl9jb2RlX3Byb2JsZW1fdGl0bGU6IFwiVW5hYmxlIHRvIExvYWQgTGV2ZWxcIlxuIyAgICBpbmZpbml0ZV9sb29wX3RpdGxlOiBcIkluZmluaXRlIExvb3AgRGV0ZWN0ZWRcIlxuIyAgICBpbmZpbml0ZV9sb29wX2Rlc2NyaXB0aW9uOiBcIlRoZSBpbml0aWFsIGNvZGUgdG8gYnVpbGQgdGhlIHdvcmxkIG5ldmVyIGZpbmlzaGVkIHJ1bm5pbmcuIEl0J3MgcHJvYmFibHkgZWl0aGVyIHJlYWxseSBzbG93IG9yIGhhcyBhbiBpbmZpbml0ZSBsb29wLiBPciB0aGVyZSBtaWdodCBiZSBhIGJ1Zy4gWW91IGNhbiBlaXRoZXIgdHJ5IHJ1bm5pbmcgdGhpcyBjb2RlIGFnYWluIG9yIHJlc2V0IHRoZSBjb2RlIHRvIHRoZSBkZWZhdWx0IHN0YXRlLiBJZiB0aGF0IGRvZXNuJ3QgZml4IGl0LCBwbGVhc2UgbGV0IHVzIGtub3cuXCJcbiMgICAgY2hlY2tfZGV2X2NvbnNvbGU6IFwiWW91IGNhbiBhbHNvIG9wZW4gdGhlIGRldmVsb3BlciBjb25zb2xlIHRvIHNlZSB3aGF0IG1pZ2h0IGJlIGdvaW5nIHdyb25nLlwiXG4jICAgIGNoZWNrX2Rldl9jb25zb2xlX2xpbms6IFwiKGluc3RydWN0aW9ucylcIlxuICAgIGluZmluaXRlX2xvb3BfdHJ5X2FnYWluOiBcIkVybmV1dCB2ZXJzdWNoZW5cIlxuICAgIGluZmluaXRlX2xvb3BfcmVzZXRfbGV2ZWw6IFwiTGV2ZWwgenVyw7xja3NldHplblwiXG4gICAgaW5maW5pdGVfbG9vcF9jb21tZW50X291dDogXCJNZWluZW4gQ29kZSBhdXNrb21tZW50aWVyZW5cIlxuICAgIHRpcF90b2dnbGVfcGxheTogXCJXZWNoc2VsIHp3aXNjaGVuIFBsYXkgdW5kIFBhdXNlIG1pdCBTdHJnK1AuXCJcbiAgICB0aXBfc2NydWJfc2hvcnRjdXQ6IFwiU3B1bGUgdm9yIHVuZCB6dXLDvGNrIG1pdCBTdHJnK1sgdW5kIFN0cmcrXVwiICMge2NoYW5nZX1cbiAgICB0aXBfZ3VpZGVfZXhpc3RzOiBcIktsaWNrZSBhdWYgZGllIEFubGVpdHVuZyBhbSBvYmVyZW4gRW5kZSBkZXIgU2VpdGUgZsO8ciBuw7x0emxpY2hlIEluZm9ybWF0aW9uZW5cIlxuICAgIHRpcF9vcGVuX3NvdXJjZTogXCJDb2RlQ29tYmF0IGlzdCAxMDAlIHF1ZWxsb2ZmZW4hXCJcbiMgICAgdGlwX3RlbGxfZnJpZW5kczogXCJFbmpveWluZyBDb2RlQ29tYmF0PyBUZWxsIHlvdXIgZnJpZW5kcyBhYm91dCB1cyFcIlxuICAgIHRpcF9iZXRhX2xhdW5jaDogXCJDb2RlQ29tYmF0IHN0YXJ0ZXRlIHNlaW5lIEJldGEgaW0gT2t0b2JlciAyMDEzLlwiXG4gICAgdGlwX3RoaW5rX3NvbHV0aW9uOiBcIkRlbmtlIMO8YmVyIGRpZSBMw7ZzdW5nIG5hY2gsIG5pY2h0IMO8YmVyIGRhcyBQcm9ibGVtLlwiXG4gICAgdGlwX3RoZW9yeV9wcmFjdGljZTogXCJJbiBkZXIgVGhlb3JpZSBnaWJ0IGVzIGtlaW5lbiBVbnRlcnNjaGllZCB6d2lzY2hlbiBUaGVvcmllIHVuZCBQcmF4aXMuIEluIGRlciBQcmF4aXMgc2Nob24uIC0gWW9naSBCZXJyYVwiXG4gICAgdGlwX2Vycm9yX2ZyZWU6IFwiRXMgZ2lidCB6d2VpIFdlZ2UgZmVobGVyZnJlaWUgUHJvZ3JhbW1lIHp1IHNjaHJlaWJlbjsgbnVyIGRlciBEcml0dGUgZnVua3Rpb25pZXJ0LiAtIEFsYW4gUGVybGlzXCJcbiAgICB0aXBfZGVidWdnaW5nX3Byb2dyYW06IFwiV2VubiBEZWJ1Z2dpbmcgZGVyIFByb3plc3MgenVtIEZlaGxlciBlbnRmZXJuZW4gaXN0LCBkYW5uIG11c3MgUHJvZ3JhbW1pZXJlbiBkZXIgUHJvemVzcyBzZWluIEZlaGxlciB6dSBtYWNoZW4uIC0gRWRzZ2VyIFcuIERpamtzdHJhXCJcbiAgICB0aXBfZm9ydW1zOiBcIkdlaGUgenVtIEZvcnVtIHVuZCBzYWdlIHVucyB3YXMgZHUgZGVua3N0IVwiXG4gICAgdGlwX2JhYnlfY29kZXJzOiBcIkluIGRlciBadWt1bmZ0IHdlcmRlbiBzb2dhciBCYWJpZXMgRXJ6bWFnaWVyIHNlaW4uXCJcbiAgICB0aXBfbW9yYWxlX2ltcHJvdmVzOiBcIkRhcyBMYWRlbiB3aXJkIHdlaXRlciBnZWhlbiBiaXMgZGllIFN0aW1tdW5nIHNpY2ggdmVyYmVzc2VydC5cIlxuICAgIHRpcF9hbGxfc3BlY2llczogXCJXaXIgZ2xhdWJlbiBhbiBnbGVpY2hlIENoYW5jZW4gZsO8ciBhbGxlIEFydGVuIFByb2dyYW1taWVyZW4genUgbGVybmVuLlwiXG4jICAgIHRpcF9yZXRpY3VsYXRpbmc6IFwiUmV0aWN1bGF0aW5nIHNwaW5lcy5cIlxuICAgIHRpcF9oYXJyeTogXCJEdSBiaXN0IGVpbiBaYXViZXJlciwgXCJcbiAgICB0aXBfZ3JlYXRfcmVzcG9uc2liaWxpdHk6IFwiTWl0IGdyb8OfZW4gUHJvZ3JhbW1pZXJmw6RoaWdrZWl0ZW4ga29tbXQgZ3Jvw59lIFZlcmFudHdvcnR1bmcuXCJcbiAgICB0aXBfbXVuY2hraW46IFwiV2VubiBkdSBkZWluIEdlbcO8c2UgbmljaHQgaXNzdCwgYmVzdWNodCBkaWNoIGVpbiBad2VyZyB3w6RocmVuZCBkdSBzY2hsw6Rmc3QuXCJcbiAgICB0aXBfYmluYXJ5OiBcIkVzIGdpYnQgYXVmIGRlciBXZWx0IG51ciAxMCBBcnRlbiB2b24gTWVuc2NoZW46IGRpZSwgd2VsY2hlIEJpbsOkciB2ZXJzdGVoZW4gdW5kIGRpZSwgd2VsY2hlIG5pY2h0LlwiXG4gICAgdGlwX2NvbW1pdG1lbnRfeW9kYTogXCJFaW4gUHJvZ3JhbW1pZXIgbXVzcyBkaWUgZ3LDtsOfdGUgSGluZ2FiZSBoYWJlbiwgZGVuIGVybnN0ZXN0ZW4gVmVyc3RhbmQuIH4gWW9kYVwiXG4gICAgdGlwX25vX3RyeTogXCJUdS4gT2RlciB0dSBuaWNodC4gRXMgZ2lidCBrZWluIFZlcnN1Y2hlbi4gLSBZb2RhXCJcbiAgICB0aXBfcGF0aWVuY2U6IFwiR2VkdWxkIGR1IG11c3N0IGhhYmVuLCBqdW5nZXIgUGFkYXdhbi4gLSBZb2RhXCJcbiAgICB0aXBfZG9jdW1lbnRlZF9idWc6IFwiRWluIGRva3VtZW50aWVydGVyIEZlaGxlciBpc3Qga2VpbiBGZWhsZXI7IGVyIGlzdCBlaW4gTWVya21hbC5cIlxuICAgIHRpcF9pbXBvc3NpYmxlOiBcIkVzIHdpcmt0IGltbWVyIHVubcO2Z2xpY2ggYmlzIGVzIHZvbGxicmFjaHQgaXN0LiAtIE5lbHNvbiBNYW5kZWxhXCJcbiAgICB0aXBfdGFsa19pc19jaGVhcDogXCJSZWRlbiBpc3QgYmlsbGlnLiBaZWlnIG1pciBkZW4gQ29kZS4gLSBMaW51cyBUb3J2YWxkc1wiXG4gICAgdGlwX2ZpcnN0X2xhbmd1YWdlOiBcIkRhcyBzY2h3aWVyaWdzdGUsIGRhcyBkdSBqZW1hbHMgbGVybmVuIHdpcnN0LCBpc3QgZGllIGVyc3RlIFByb2dyYW1taWVyc3ByYWNoZS4gLSBBbGFuIEtheVwiXG4gICAgdGlwX2hhcmR3YXJlX3Byb2JsZW06IFwiUTogV2llIHZpZWxlIFByb2dyYW1taWVyZXIgYnJhdWNodCBtYW4gdW0gZWluZSBHbMO8aGJpcm5lIGF1c3p1d2VjaHNlbG4/IEE6IEtlaW5lLCBlcyBpc3QgZWluIEhhcmR3YXJlLVByb2JsZW0uXCJcbiMgICAgdGlwX2hvZnN0YWR0ZXJzX2xhdzogXCJIb2ZzdGFkdGVyJ3MgTGF3OiBJdCBhbHdheXMgdGFrZXMgbG9uZ2VyIHRoYW4geW91IGV4cGVjdCwgZXZlbiB3aGVuIHlvdSB0YWtlIGludG8gYWNjb3VudCBIb2ZzdGFkdGVyJ3MgTGF3LlwiXG4jICAgIHRpcF9wcmVtYXR1cmVfb3B0aW1pemF0aW9uOiBcIlByZW1hdHVyZSBvcHRpbWl6YXRpb24gaXMgdGhlIHJvb3Qgb2YgYWxsIGV2aWwuIC0gRG9uYWxkIEtudXRoXCJcbiAgICB0aXBfYnJ1dGVfZm9yY2U6IFwiSW0gWndlaWZlbHNmYWxsLCB2ZXJ3ZW5kZSByb2hlIEdld2FsdC4gLSBLZW4gVGhvbXBzb25cIlxuIyAgICB0aXBfZXh0cmFwb2xhdGlvbjogXCJUaGVyZSBhcmUgb25seSB0d28ga2luZHMgb2YgcGVvcGxlOiB0aG9zZSB0aGF0IGNhbiBleHRyYXBvbGF0ZSBmcm9tIGluY29tcGxldGUgZGF0YS4uLlwiXG4jICAgIHRpcF9zdXBlcnBvd2VyOiBcIkNvZGluZyBpcyB0aGUgY2xvc2VzdCB0aGluZyB3ZSBoYXZlIHRvIGEgc3VwZXJwb3dlci5cIlxuIyAgICB0aXBfY29udHJvbF9kZXN0aW55OiBcIkluIHJlYWwgb3BlbiBzb3VyY2UsIHlvdSBoYXZlIHRoZSByaWdodCB0byBjb250cm9sIHlvdXIgb3duIGRlc3RpbnkuIC0gTGludXMgVG9ydmFsZHNcIlxuIyAgICB0aXBfbm9fY29kZTogXCJObyBjb2RlIGlzIGZhc3RlciB0aGFuIG5vIGNvZGUuXCJcbiMgICAgdGlwX2NvZGVfbmV2ZXJfbGllczogXCJDb2RlIG5ldmVyIGxpZXMsIGNvbW1lbnRzIHNvbWV0aW1lcyBkby4g4oCUIFJvbiBKZWZmcmllc1wiXG4jICAgIHRpcF9yZXVzYWJsZV9zb2Z0d2FyZTogXCJCZWZvcmUgc29mdHdhcmUgY2FuIGJlIHJldXNhYmxlIGl0IGZpcnN0IGhhcyB0byBiZSB1c2FibGUuXCJcbiMgICAgdGlwX29wdGltaXphdGlvbl9vcGVyYXRvcjogXCJFdmVyeSBsYW5ndWFnZSBoYXMgYW4gb3B0aW1pemF0aW9uIG9wZXJhdG9yLiBJbiBtb3N0IGxhbmd1YWdlcyB0aGF0IG9wZXJhdG9yIGlzIOKAmC8v4oCZXCJcbiMgICAgdGlwX2xpbmVzX29mX2NvZGU6IFwiTWVhc3VyaW5nIHByb2dyYW1taW5nIHByb2dyZXNzIGJ5IGxpbmVzIG9mIGNvZGUgaXMgbGlrZSBtZWFzdXJpbmcgYWlyY3JhZnQgYnVpbGRpbmcgcHJvZ3Jlc3MgYnkgd2VpZ2h0LiDigJQgQmlsbCBHYXRlc1wiXG4jICAgIHRpcF9zb3VyY2VfY29kZTogXCJJIHdhbnQgdG8gY2hhbmdlIHRoZSB3b3JsZCBidXQgdGhleSB3b3VsZCBub3QgZ2l2ZSBtZSB0aGUgc291cmNlIGNvZGUuXCJcbiMgICAgdGlwX2phdmFzY3JpcHRfamF2YTogXCJKYXZhIGlzIHRvIEphdmFTY3JpcHQgd2hhdCBDYXIgaXMgdG8gQ2FycGV0LiAtIENocmlzIEhlaWxtYW5uXCJcbiMgICAgdGlwX21vdmVfZm9yd2FyZDogXCJXaGF0ZXZlciB5b3UgZG8sIGtlZXAgbW92aW5nIGZvcndhcmQuIC0gTWFydGluIEx1dGhlciBLaW5nIEpyLlwiXG4jICAgIHRpcF9nb29nbGU6IFwiSGF2ZSBhIHByb2JsZW0geW91IGNhbid0IHNvbHZlPyBHb29nbGUgaXQhXCJcbiMgICAgdGlwX2FkZGluZ19ldmlsOiBcIkFkZGluZyBhIHBpbmNoIG9mIGV2aWwuXCJcbiMgICAgdGlwX2hhdGVfY29tcHV0ZXJzOiBcIlRoYXQncyB0aGUgdGhpbmcgYWJvdXQgcGVvcGxlIHdobyB0aGluayB0aGV5IGhhdGUgY29tcHV0ZXJzLiBXaGF0IHRoZXkgcmVhbGx5IGhhdGUgaXMgbG91c3kgcHJvZ3JhbW1lcnMuIC0gTGFycnkgTml2ZW5cIlxuIyAgICB0aXBfb3Blbl9zb3VyY2VfY29udHJpYnV0ZTogXCJZb3UgY2FuIGhlbHAgQ29kZUNvbWJhdCBpbXByb3ZlIVwiXG4jICAgIHRpcF9yZWN1cnNlOiBcIlRvIGl0ZXJhdGUgaXMgaHVtYW4sIHRvIHJlY3Vyc2UgZGl2aW5lLiAtIEwuIFBldGVyIERldXRzY2hcIlxuIyAgICB0aXBfZnJlZV95b3VyX21pbmQ6IFwiWW91IGhhdmUgdG8gbGV0IGl0IGFsbCBnbywgTmVvLiBGZWFyLCBkb3VidCwgYW5kIGRpc2JlbGllZi4gRnJlZSB5b3VyIG1pbmQuIC0gTW9ycGhldXNcIlxuIyAgICB0aXBfc3Ryb25nX29wcG9uZW50czogXCJFdmVuIHRoZSBzdHJvbmdlc3Qgb2Ygb3Bwb25lbnRzIGFsd2F5cyBoYXMgYSB3ZWFrbmVzcy4gLSBJdGFjaGkgVWNoaWhhXCJcbiMgICAgdGlwX3BhcGVyX2FuZF9wZW46IFwiQmVmb3JlIHlvdSBzdGFydCBjb2RpbmcsIHlvdSBjYW4gYWx3YXlzIHBsYW4gd2l0aCBhIHNoZWV0IG9mIHBhcGVyIGFuZCBhIHBlbi5cIlxuIyAgICB0aXBfc29sdmVfdGhlbl93cml0ZTogXCJGaXJzdCwgc29sdmUgdGhlIHByb2JsZW0uIFRoZW4sIHdyaXRlIHRoZSBjb2RlLiAtIEpvaG4gSm9obnNvblwiXG4jICAgIHRpcF9jb21waWxlcl9pZ25vcmVzX2NvbW1lbnRzOiBcIlNvbWV0aW1lcyBJIHRoaW5rIHRoYXQgdGhlIGNvbXBpbGVyIGlnbm9yZXMgbXkgY29tbWVudHMuXCJcbiMgICAgdGlwX3VuZGVyc3RhbmRfcmVjdXJzaW9uOiBcIlRoZSBvbmx5IHdheSB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbiBpcyB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbi5cIlxuIyAgICB0aXBfbGlmZV9hbmRfcG9seW1vcnBoaXNtOiBcIk9wZW4gU291cmNlIGlzIGxpa2UgYSB0b3RhbGx5IHBvbHltb3JwaGljIGhldGVyb2dlbmVvdXMgc3RydWN0dXJlOiBBbGwgdHlwZXMgYXJlIHdlbGNvbWUuXCJcbiMgICAgdGlwX21pc3Rha2VzX3Byb29mX29mX3RyeWluZzogXCJNaXN0YWtlcyBpbiB5b3VyIGNvZGUgYXJlIGp1c3QgcHJvb2YgdGhhdCB5b3UgYXJlIHRyeWluZy5cIlxuIyAgICB0aXBfYWRkaW5nX29yZ3JlczogXCJSb3VuZGluZyB1cCBvZ3Jlcy5cIlxuIyAgICB0aXBfc2hhcnBlbmluZ19zd29yZHM6IFwiU2hhcnBlbmluZyB0aGUgc3dvcmRzLlwiXG4jICAgIHRpcF9yYXRhdG91aWxsZTogXCJZb3UgbXVzdCBub3QgbGV0IGFueW9uZSBkZWZpbmUgeW91ciBsaW1pdHMgYmVjYXVzZSBvZiB3aGVyZSB5b3UgY29tZSBmcm9tLiBZb3VyIG9ubHkgbGltaXQgaXMgeW91ciBzb3VsLiAtIEd1c3RlYXUsIFJhdGF0b3VpbGxlXCJcbiMgICAgdGlwX25lbW86IFwiV2hlbiBsaWZlIGdldHMgeW91IGRvd24sIHdhbnQgdG8ga25vdyB3aGF0IHlvdSd2ZSBnb3R0YSBkbz8gSnVzdCBrZWVwIHN3aW1taW5nLCBqdXN0IGtlZXAgc3dpbW1pbmcuIC0gRG9yeSwgRmluZGluZyBOZW1vXCJcbiMgICAgdGlwX2ludGVybmV0X3dlYXRoZXI6IFwiSnVzdCBtb3ZlIHRvIHRoZSBpbnRlcm5ldCwgaXQncyBncmVhdCBoZXJlLiBXZSBnZXQgdG8gbGl2ZSBpbnNpZGUgd2hlcmUgdGhlIHdlYXRoZXIgaXMgYWx3YXlzIGF3ZXNvbWUuIC0gSm9obiBHcmVlblwiXG4jICAgIHRpcF9uZXJkczogXCJOZXJkcyBhcmUgYWxsb3dlZCB0byBsb3ZlIHN0dWZmLCBsaWtlIGp1bXAtdXAtYW5kLWRvd24taW4tdGhlLWNoYWlyLWNhbid0LWNvbnRyb2wteW91cnNlbGYgbG92ZSBpdC4gLSBKb2huIEdyZWVuXCJcbiMgICAgdGlwX3NlbGZfdGF1Z2h0OiBcIkkgdGF1Z2h0IG15c2VsZiA5MCUgb2Ygd2hhdCBJJ3ZlIGxlYXJuZWQuIEFuZCB0aGF0J3Mgbm9ybWFsISAtIEhhbmsgR3JlZW5cIlxuIyAgICB0aXBfbHVuYV9sb3ZlZ29vZDogXCJEb24ndCB3b3JyeSwgeW91J3JlIGp1c3QgYXMgc2FuZSBhcyBJIGFtLiAtIEx1bmEgTG92ZWdvb2RcIlxuIyAgICB0aXBfZ29vZF9pZGVhOiBcIlRoZSBiZXN0IHdheSB0byBoYXZlIGEgZ29vZCBpZGVhIGlzIHRvIGhhdmUgYSBsb3Qgb2YgaWRlYXMuIC0gTGludXMgUGF1bGluZ1wiXG4jICAgIHRpcF9wcm9ncmFtbWluZ19ub3RfYWJvdXRfY29tcHV0ZXJzOiBcIkNvbXB1dGVyIFNjaWVuY2UgaXMgbm8gbW9yZSBhYm91dCBjb21wdXRlcnMgdGhhbiBhc3Ryb25vbXkgaXMgYWJvdXQgdGVsZXNjb3Blcy4gLSBFZHNnZXIgRGlqa3N0cmFcIlxuIyAgICB0aXBfbXVsYW46IFwiQmVsaWV2ZSB5b3UgY2FuLCB0aGVuIHlvdSB3aWxsLiAtIE11bGFuXCJcbiMgICAgcHJvamVjdF9jb21wbGV0ZTogXCJQcm9qZWN0IENvbXBsZXRlIVwiXG4jICAgIHNoYXJlX3RoaXNfcHJvamVjdDogXCJTaGFyZSB0aGlzIHByb2plY3Qgd2l0aCBmcmllbmRzIG9yIGZhbWlseTpcIlxuIyAgICByZWFkeV90b19zaGFyZTogXCJSZWFkeSB0byBwdWJsaXNoIHlvdXIgcHJvamVjdD9cIlxuIyAgICBjbGlja19wdWJsaXNoOiBcIkNsaWNrIFxcXCJQdWJsaXNoXFxcIiB0byBtYWtlIGl0IGFwcGVhciBpbiB0aGUgY2xhc3MgZ2FsbGVyeSwgdGhlbiBjaGVjayBvdXQgd2hhdCB5b3VyIGNsYXNzbWF0ZXMgYnVpbHQhIFlvdSBjYW4gY29tZSBiYWNrIGFuZCBjb250aW51ZSB0byB3b3JrIG9uIHRoaXMgcHJvamVjdC4gQW55IGZ1cnRoZXIgY2hhbmdlcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2F2ZWQgYW5kIHNoYXJlZCB3aXRoIHlvdXIgY2xhc3NtYXRlcy5cIlxuIyAgICBhbHJlYWR5X3B1Ymxpc2hlZF9wcmVmaXg6IFwiWW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBwdWJsaXNoZWQgdG8gdGhlIGNsYXNzIGdhbGxlcnkuXCJcbiMgICAgYWxyZWFkeV9wdWJsaXNoZWRfc3VmZml4OiBcIktlZXAgZXhwZXJpbWVudGluZyBhbmQgbWFraW5nIHRoaXMgcHJvamVjdCBldmVuIGJldHRlciwgb3Igc2VlIHdoYXQgdGhlIHJlc3Qgb2YgeW91ciBjbGFzcyBoYXMgYnVpbHQhIFlvdXIgY2hhbmdlcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2F2ZWQgYW5kIHNoYXJlZCB3aXRoIHlvdXIgY2xhc3NtYXRlcy5cIlxuIyAgICB2aWV3X2dhbGxlcnk6IFwiVmlldyBHYWxsZXJ5XCJcbiMgICAgcHJvamVjdF9wdWJsaXNoZWRfbm90eTogXCJZb3VyIGxldmVsIGhhcyBiZWVuIHB1Ymxpc2hlZCFcIlxuIyAgICBrZWVwX2VkaXRpbmc6IFwiS2VlcCBFZGl0aW5nXCJcblxuIyAgYXBpczpcbiMgICAgbWV0aG9kczogXCJNZXRob2RzXCJcbiMgICAgZXZlbnRzOiBcIkV2ZW50c1wiXG4jICAgIHNwYXduYWJsZTogXCJTcGF3bmFibGVcIlxuIyAgICBodG1sOiBcIkhUTUxcIlxuIyAgICBtYXRoOiBcIk1hdGhcIlxuIyAgICBhcnJheTogXCJBcnJheVwiXG4jICAgIG9iamVjdDogXCJPYmplY3RcIlxuIyAgICBzdHJpbmc6IFwiU3RyaW5nXCJcbiMgICAgZnVuY3Rpb246IFwiRnVuY3Rpb25cIlxuIyAgICB2ZWN0b3I6IFwiVmVjdG9yXCJcbiMgICAgZGF0ZTogXCJEYXRlXCJcbiMgICAganF1ZXJ5OiBcImpRdWVyeVwiXG4jICAgIGpzb246IFwiSlNPTlwiXG4jICAgIG51bWJlcjogXCJOdW1iZXJcIlxuIyAgICB3ZWJqYXZhc2NyaXB0OiBcIkphdmFTY3JpcHRcIlxuXG4jICBhbWF6b25faG9jOlxuIyAgICB0aXRsZTogXCJLZWVwIExlYXJuaW5nIHdpdGggQW1hem9uIVwiXG4jICAgIGNvbmdyYXRzOiBcIkNvbmdyYXR1bGF0aW9ucyBvbiBjb25xdWVyaW5nIHRoYXQgY2hhbGxlbmdpbmcgSG91ciBvZiBDb2RlIVwiXG4jICAgIGVkdWNhdGVfMTogXCJOb3csIGtlZXAgbGVhcm5pbmcgYWJvdXQgY29kaW5nIGFuZCBjbG91ZCBjb21wdXRpbmcgd2l0aCBBV1MgRWR1Y2F0ZSwgYW4gZXhjaXRpbmcsIGZyZWUgcHJvZ3JhbSBmcm9tIEFtYXpvbiBmb3IgYm90aCBzdHVkZW50cyBhbmQgdGVhY2hlcnMuIFdpdGggQVdTIEVkdWNhdGUsIHlvdSBjYW4gZWFybiBjb29sIGJhZGdlcyBhcyB5b3UgbGVhcm4gYWJvdXQgdGhlIGJhc2ljcyBvZiB0aGUgY2xvdWQgYW5kIGN1dHRpbmctZWRnZSB0ZWNobm9sb2dpZXMgc3VjaCBhcyBnYW1pbmcsIHZpcnR1YWwgcmVhbGl0eSwgYW5kIEFsZXhhLlwiXG4jICAgIGVkdWNhdGVfMjogXCJMZWFybiBtb3JlIGFuZCBzaWduIHVwIGhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzE6IFwiWW91IGNhbiBhbHNvIHRyeSB0byBidWlsZCB5b3VyIG93biBzY2hvb2wgZmFjdHMgc2tpbGwgZm9yIEFsZXhhXCJcbiMgICAgZnV0dXJlX2VuZ18yOiBcImhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzM6IFwiKGRldmljZSBpcyBub3QgcmVxdWlyZWQpLiBUaGlzIEFsZXhhIGFjdGl2aXR5IGlzIGJyb3VnaHQgdG8geW91IGJ5IHRoZVwiXG4jICAgIGZ1dHVyZV9lbmdfNDogXCJBbWF6b24gRnV0dXJlIEVuZ2luZWVyXCJcbiMgICAgZnV0dXJlX2VuZ181OiBcInByb2dyYW0gd2hpY2ggY3JlYXRlcyBsZWFybmluZyBhbmQgd29yayBvcHBvcnR1bml0aWVzIGZvciBhbGwgSy0xMiBzdHVkZW50cyBpbiB0aGUgVW5pdGVkIFN0YXRlcyB3aG8gd2lzaCB0byBwdXJzdWUgY29tcHV0ZXIgc2NpZW5jZS5cIlxuXG4jICBwbGF5X2dhbWVfZGV2X2xldmVsOlxuIyAgICBjcmVhdGVkX2J5OiBcIkNyZWF0ZWQgYnkge3tuYW1lfX1cIlxuIyAgICBjcmVhdGVkX2R1cmluZ19ob2M6IFwiQ3JlYXRlZCBkdXJpbmcgSG91ciBvZiBDb2RlXCJcbiMgICAgcmVzdGFydDogXCJSZXN0YXJ0IExldmVsXCJcbiMgICAgcGxheTogXCJQbGF5IExldmVsXCJcbiMgICAgcGxheV9tb3JlX2NvZGVjb21iYXQ6IFwiUGxheSBNb3JlIENvZGVDb21iYXRcIlxuIyAgICBkZWZhdWx0X3N0dWRlbnRfaW5zdHJ1Y3Rpb25zOiBcIkNsaWNrIHRvIGNvbnRyb2wgeW91ciBoZXJvIGFuZCB3aW4geW91ciBnYW1lIVwiXG4jICAgIGdvYWxfc3Vydml2ZTogXCJTdXJ2aXZlLlwiXG4jICAgIGdvYWxfc3Vydml2ZV90aW1lOiBcIlN1cnZpdmUgZm9yIF9fc2Vjb25kc19fIHNlY29uZHMuXCJcbiMgICAgZ29hbF9kZWZlYXQ6IFwiRGVmZWF0IGFsbCBlbmVtaWVzLlwiXG4jICAgIGdvYWxfZGVmZWF0X2Ftb3VudDogXCJEZWZlYXQgX19hbW91bnRfXyBlbmVtaWVzLlwiXG4jICAgIGdvYWxfbW92ZTogXCJNb3ZlIHRvIGFsbCB0aGUgcmVkIFggbWFya3MuXCJcbiMgICAgZ29hbF9jb2xsZWN0OiBcIkNvbGxlY3QgYWxsIHRoZSBpdGVtcy5cIlxuIyAgICBnb2FsX2NvbGxlY3RfYW1vdW50OiBcIkNvbGxlY3QgX19hbW91bnRfXyBpdGVtcy5cIlxuXG4gIGdhbWVfbWVudTpcbiAgICBpbnZlbnRvcnlfdGFiOiBcIkludmVudGFyXCJcbiAgICBzYXZlX2xvYWRfdGFiOiBcIlNwZWljaGVyZS9MYWRlXCJcbiAgICBvcHRpb25zX3RhYjogXCJFaW5zdGVsbHVuZ2VuXCJcbiAgICBndWlkZV90YWI6IFwiR3VpZGVcIlxuICAgIGd1aWRlX3ZpZGVvX3R1dG9yaWFsOiBcIlZpZGVvIFR1dG9yaWFsXCJcbiAgICBndWlkZV90aXBzOiBcIlRpcHBzXCJcbiAgICBtdWx0aXBsYXllcl90YWI6IFwiTWVocnNwaWVsZXJcIlxuICAgIGF1dGhfdGFiOiBcIkFubWVsZGVuXCJcbiAgICBpbnZlbnRvcnlfY2FwdGlvbjogXCJSw7xzdGUgZGVpbmVuIEhlbGRlbiBhdXNcIlxuICAgIGNob29zZV9oZXJvX2NhcHRpb246IFwiV8OkaGxlIEhlbGRlbiwgU3ByYWNoZVwiXG4gICAgb3B0aW9uc19jYXB0aW9uOiBcImtvbmZpZ3VyaWVyZSBFaW5zdGVsbHVuZ2VuXCJcbiAgICBndWlkZV9jYXB0aW9uOiBcIkRva3UgdW5kIFRpcHBzXCJcbiAgICBtdWx0aXBsYXllcl9jYXB0aW9uOiBcIlNwaWVsZSBtaXQgRnJldW5kZW4hXCJcbiAgICBhdXRoX2NhcHRpb246IFwiRm9ydHNjaHJpdHQgc3BlaWNoZXJuLlwiXG5cbiMgIGxlYWRlcmJvYXJkOlxuIyAgICB2aWV3X290aGVyX3NvbHV0aW9uczogXCJWaWV3IExlYWRlcmJvYXJkc1wiXG4jICAgIHNjb3JlczogXCJTY29yZXNcIlxuIyAgICB0b3BfcGxheWVyczogXCJUb3AgUGxheWVycyBieVwiXG4jICAgIGRheTogXCJUb2RheVwiXG4jICAgIHdlZWs6IFwiVGhpcyBXZWVrXCJcbiMgICAgYWxsOiBcIkFsbC1UaW1lXCJcbiMgICAgbGF0ZXN0OiBcIkxhdGVzdFwiXG4jICAgIHRpbWU6IFwiV2luIFRpbWVcIlxuIyAgICBkYW1hZ2VfdGFrZW46IFwiRGFtYWdlIFRha2VuXCJcbiMgICAgZGFtYWdlX2RlYWx0OiBcIkRhbWFnZSBEZWFsdFwiXG4jICAgIGRpZmZpY3VsdHk6IFwiRGlmZmljdWx0eVwiXG4jICAgIGdvbGRfY29sbGVjdGVkOiBcIkdvbGQgQ29sbGVjdGVkXCJcbiMgICAgc3Vydml2YWxfdGltZTogXCJTdXJ2aXZlZFwiXG4jICAgIGRlZmVhdGVkOiBcIkVuZW1pZXMgRGVmZWF0ZWRcIlxuIyAgICBjb2RlX2xlbmd0aDogXCJMaW5lcyBvZiBDb2RlXCJcbiMgICAgc2NvcmVfZGlzcGxheTogXCJfX3Njb3JlVHlwZV9fOiBfX3Njb3JlX19cIlxuXG4gIGludmVudG9yeTpcbiAgICBlcXVpcHBlZF9pdGVtOiBcIkF1c2dlcsO8c3RldFwiXG4jICAgIHJlcXVpcmVkX3B1cmNoYXNlX3RpdGxlOiBcIlJlcXVpcmVkXCJcbiAgICBhdmFpbGFibGVfaXRlbTogXCJWZXJmw7xnYmFyXCJcbiAgICByZXN0cmljdGVkX3RpdGxlOiBcIkVpbmdlc2NocsOkbmt0XCJcbiAgICBzaG91bGRfZXF1aXA6IFwiKERvcHBlbGtsaWNrIHVtIGF1c3p1csO8c3RlbilcIlxuICAgIGVxdWlwcGVkOiBcIihBdXNnZXLDvHN0ZXQpXCJcbiAgICBsb2NrZWQ6IFwiKEdlc3BlcnJ0KVwiXG4gICAgcmVzdHJpY3RlZDogXCIoRWluZ2VzY2hyw6Rua3QgaW4gZGllc2VtIExldmVsKVwiXG4gICAgZXF1aXA6IFwiQXVzcsO8c3RlblwiXG4gICAgdW5lcXVpcDogXCJBYmxlZ2VuXCJcbiMgICAgd2Fycmlvcl9vbmx5OiBcIldhcnJpb3IgT25seVwiXG4jICAgIHJhbmdlcl9vbmx5OiBcIlJhbmdlciBPbmx5XCJcbiMgICAgd2l6YXJkX29ubHk6IFwiV2l6YXJkIE9ubHlcIlxuXG4gIGJ1eV9nZW1zOlxuICAgIGZld19nZW1zOiBcIkVpbiBwYWFyIEp1d2VsZW5cIlxuICAgIHBpbGVfZ2VtczogXCJFaW4gSGF1ZmVuIEp1d2VsZW5cIlxuICAgIGNoZXN0X2dlbXM6IFwiVHJ1aGUgdm9sbCBKdXdlbGVuXCJcbiAgICBwdXJjaGFzaW5nOiBcIkthdWZlLi4uXCJcbiAgICBkZWNsaW5lZDogXCJEZWluZSBLYXJ0ZSB3dXJkZSBhYmdlbGVobnRcIlxuICAgIHJldHJ5aW5nOiBcIlNlcnZlcmZlaGxlciwgZXJuZXV0ZXIgVmVyc3VjaC5cIlxuICAgIHByb21wdF90aXRsZTogXCJOaWNodCBnZW51ZyBKdXdlbGVuXCJcbiAgICBwcm9tcHRfYm9keTogXCJNw7ZjaHRlc3QgZHUgbWVocj9cIlxuICAgIHByb21wdF9idXR0b246IFwiU2hvcCBiZXRyZXRlblwiXG4gICAgcmVjb3ZlcmVkOiBcIlZvcmlnZXIgSnV3ZWxlbmthdWYgd2llZGVyaGVyZ2VzdGVsbHQuIEJpdHRlIGRpZSBTZWl0ZSBuZXUgbGFkZW4uXCJcbiMgICAgcHJpY2U6IFwieHt7Z2Vtc319IC8gbW9cIlxuIyAgICBidXlfcHJlbWl1bTogXCJCdXkgUHJlbWl1bVwiXG4jICAgIHB1cmNoYXNlOiBcIlB1cmNoYXNlXCJcbiMgICAgcHVyY2hhc2VkOiBcIlB1cmNoYXNlZFwiXG5cbiMgIGVhcm5fZ2VtczpcbiMgICAgcHJvbXB0X3RpdGxlOiBcIk5vdCBFbm91Z2ggR2Vtc1wiXG4jICAgIHByb21wdF9ib2R5OiBcIktlZXAgcGxheWluZyB0byBlYXJuIG1vcmUhXCJcblxuIyAgc3Vic2NyaWJlOlxuIyAgICBiZXN0X2RlYWw6IFwiQmVzdCBEZWFsIVwiXG4jICAgIGNvbmZpcm1hdGlvbjogXCJDb25ncmF0dWxhdGlvbnMhIFlvdSBub3cgaGF2ZSBhIENvZGVDb21iYXQgUHJlbWl1bSBTdWJzY3JpcHRpb24hXCJcbiMgICAgcHJlbWl1bV9hbHJlYWR5X3N1YnNjcmliZWQ6IFwiWW91J3JlIGFscmVhZHkgc3Vic2NyaWJlZCB0byBQcmVtaXVtIVwiXG4jICAgIHN1YnNjcmliZV9tb2RhbF90aXRsZTogXCJDb2RlQ29tYmF0IFByZW1pdW1cIlxuIyAgICBjb21wYXJpc29uX2JsdXJiOiBcIkJlY29tZSBhIE1hc3RlciBDb2RlciAtIHN1YnNjcmliZSB0byA8Yj5QcmVtaXVtPC9iPiB0b2RheSFcIlxuIyAgICBtdXN0X2JlX2xvZ2dlZDogXCJZb3UgbXVzdCBiZSBsb2dnZWQgaW4gZmlyc3QuIFBsZWFzZSBjcmVhdGUgYW4gYWNjb3VudCBvciBsb2cgaW4gZnJvbSB0aGUgbWVudSBhYm92ZS5cIlxuIyAgICBzdWJzY3JpYmVfdGl0bGU6IFwiU3Vic2NyaWJlXCIgIyBBY3R1YWxseSB1c2VkIGluIHN1YnNjcmliZSBidXR0b25zLCB0b29cbiMgICAgdW5zdWJzY3JpYmU6IFwiVW5zdWJzY3JpYmVcIlxuIyAgICBjb25maXJtX3Vuc3Vic2NyaWJlOiBcIkNvbmZpcm0gVW5zdWJzY3JpYmVcIlxuIyAgICBuZXZlcl9taW5kOiBcIk5ldmVyIE1pbmQsIEkgU3RpbGwgTG92ZSBZb3VcIlxuIyAgICB0aGFua195b3VfbW9udGhzX3ByZWZpeDogXCJUaGFuayB5b3UgZm9yIHN1cHBvcnRpbmcgdXMgdGhlc2UgbGFzdFwiXG4jICAgIHRoYW5rX3lvdV9tb250aHNfc3VmZml4OiBcIm1vbnRocy5cIlxuIyAgICB0aGFua195b3U6IFwiVGhhbmsgeW91IGZvciBzdXBwb3J0aW5nIENvZGVDb21iYXQuXCJcbiMgICAgc29ycnlfdG9fc2VlX3lvdV9nbzogXCJTb3JyeSB0byBzZWUgeW91IGdvISBQbGVhc2UgbGV0IHVzIGtub3cgd2hhdCB3ZSBjb3VsZCBoYXZlIGRvbmUgYmV0dGVyLlwiXG4jICAgIHVuc3Vic2NyaWJlX2ZlZWRiYWNrX3BsYWNlaG9sZGVyOiBcIk8sIHdoYXQgaGF2ZSB3ZSBkb25lP1wiXG4jICAgIHN0cmlwZV9kZXNjcmlwdGlvbjogXCJNb250aGx5IFN1YnNjcmlwdGlvblwiXG4jICAgIGJ1eV9ub3c6IFwiQnV5IE5vd1wiXG4jICAgIHN1YnNjcmlwdGlvbl9yZXF1aXJlZF90b19wbGF5OiBcIllvdSdsbCBuZWVkIGEgc3Vic2NyaXB0aW9uIHRvIHBsYXkgdGhpcyBsZXZlbC5cIlxuIyAgICB1bmxvY2tfaGVscF92aWRlb3M6IFwiU3Vic2NyaWJlIHRvIHVubG9jayBhbGwgdmlkZW8gdHV0b3JpYWxzLlwiXG4jICAgIHBlcnNvbmFsX3N1YjogXCJQZXJzb25hbCBTdWJzY3JpcHRpb25cIiAjIEFjY291bnRzIFN1YnNjcmlwdGlvbiBWaWV3IGJlbG93XG4jICAgIGxvYWRpbmdfaW5mbzogXCJMb2FkaW5nIHN1YnNjcmlwdGlvbiBpbmZvcm1hdGlvbi4uLlwiXG4jICAgIG1hbmFnZWRfYnk6IFwiTWFuYWdlZCBieVwiXG4jICAgIHdpbGxfYmVfY2FuY2VsbGVkOiBcIldpbGwgYmUgY2FuY2VsbGVkIG9uXCJcbiMgICAgY3VycmVudGx5X2ZyZWU6IFwiWW91IGN1cnJlbnRseSBoYXZlIGEgZnJlZSBzdWJzY3JpcHRpb25cIlxuIyAgICBjdXJyZW50bHlfZnJlZV91bnRpbDogXCJZb3UgY3VycmVudGx5IGhhdmUgYSBzdWJzY3JpcHRpb24gdW50aWxcIlxuIyAgICBmcmVlX3N1YnNjcmlwdGlvbjogXCJGcmVlIHN1YnNjcmlwdGlvblwiXG4jICAgIHdhc19mcmVlX3VudGlsOiBcIllvdSBoYWQgYSBmcmVlIHN1YnNjcmlwdGlvbiB1bnRpbFwiXG4jICAgIG1hbmFnZWRfc3ViczogXCJNYW5hZ2VkIFN1YnNjcmlwdGlvbnNcIlxuIyAgICBzdWJzY3JpYmluZzogXCJTdWJzY3JpYmluZy4uLlwiXG4jICAgIGN1cnJlbnRfcmVjaXBpZW50czogXCJDdXJyZW50IFJlY2lwaWVudHNcIlxuIyAgICB1bnN1YnNjcmliaW5nOiBcIlVuc3Vic2NyaWJpbmdcIlxuIyAgICBzdWJzY3JpYmVfcHJlcGFpZDogXCJDbGljayBTdWJzY3JpYmUgdG8gdXNlIHByZXBhaWQgY29kZVwiXG4jICAgIHVzaW5nX3ByZXBhaWQ6IFwiVXNpbmcgcHJlcGFpZCBjb2RlIGZvciBtb250aGx5IHN1YnNjcmlwdGlvblwiXG4jICAgIGZlYXR1cmVfbGV2ZWxfYWNjZXNzOiBcIkFjY2VzcyAzMDArIGxldmVscyBhdmFpbGFibGVcIlxuIyAgICBmZWF0dXJlX2hlcm9lczogXCJVbmxvY2sgZXhjbHVzaXZlIGhlcm9lcyBhbmQgcGV0c1wiXG4jICAgIGZlYXR1cmVfbGVhcm46IFwiTGVhcm4gdG8gbWFrZSBnYW1lcyBhbmQgd2Vic2l0ZXNcIlxuIyAgICBtb250aF9wcmljZTogXCIkX19wcmljZV9fXCJcbiMgICAgZmlyc3RfbW9udGhfcHJpY2U6IFwiT25seSAkX19wcmljZV9fIGZvciB5b3VyIGZpcnN0IG1vbnRoIVwiXG4jICAgIGxpZmV0aW1lOiBcIkxpZmV0aW1lIEFjY2Vzc1wiXG4jICAgIGxpZmV0aW1lX3ByaWNlOiBcIiRfX3ByaWNlX19cIlxuIyAgICB5ZWFyX3N1YnNjcmlwdGlvbjogXCJZZWFybHkgU3Vic2NyaXB0aW9uXCJcbiMgICAgeWVhcl9wcmljZTogXCIkX19wcmljZV9fL3llYXJcIlxuIyAgICBzdXBwb3J0X3BhcnQxOiBcIk5lZWQgaGVscCB3aXRoIHBheW1lbnQgb3IgcHJlZmVyIFBheVBhbD8gRW1haWxcIlxuIyAgICBzdXBwb3J0X3BhcnQyOiBcInN1cHBvcnRAY29kZWNvbWJhdC5jb21cIlxuXG4jICBhbm5vdW5jZW1lbnQ6XG4jICAgIG5vd19hdmFpbGFibGU6IFwiTm93IGF2YWlsYWJsZSBmb3Igc3Vic2NyaWJlcnMhXCJcbiMgICAgc3Vic2NyaWJlcjogXCJzdWJzY3JpYmVyXCJcbiMgICAgY3VkZGx5X2NvbXBhbmlvbnM6IFwiQ3VkZGx5IENvbXBhbmlvbnMhXCIgIyBQZXQgQW5ub3VuY2VtZW50IE1vZGFsXG4jICAgIGtpbmRsaW5nX25hbWU6IFwiS2luZGxpbmcgRWxlbWVudGFsXCJcbiMgICAga2luZGxpbmdfZGVzY3JpcHRpb246IFwiS2luZGxpbmcgRWxlbWVudGFscyBqdXN0IHdhbnQgdG8ga2VlcCB5b3Ugd2FybSBhdCBuaWdodC4gQW5kIGR1cmluZyB0aGUgZGF5LiBBbGwgdGhlIHRpbWUsIHJlYWxseS5cIlxuIyAgICBncmlmZmluX25hbWU6IFwiQmFieSBHcmlmZmluXCJcbiMgICAgZ3JpZmZpbl9kZXNjcmlwdGlvbjogXCJHcmlmZmlucyBhcmUgaGFsZiBlYWdsZSwgaGFsZiBsaW9uLCBhbGwgYWRvcmFibGUuXCJcbiMgICAgcmF2ZW5fbmFtZTogXCJSYXZlblwiXG4jICAgIHJhdmVuX2Rlc2NyaXB0aW9uOiBcIlJhdmVucyBhcmUgZXhjZWxsZW50IGF0IGdhdGhlcmluZyBzaGlueSBib3R0bGVzIGZ1bGwgb2YgaGVhbHRoIGZvciB5b3UuXCJcbiMgICAgbWltaWNfbmFtZTogXCJNaW1pY1wiXG4jICAgIG1pbWljX2Rlc2NyaXB0aW9uOiBcIk1pbWljcyBjYW4gcGljayB1cCBjb2lucyBmb3IgeW91LiBNb3ZlIHRoZW0gb24gdG9wIG9mIGNvaW5zIHRvIGluY3JlYXNlIHlvdXIgZ29sZCBzdXBwbHkuXCJcbiMgICAgY291Z2FyX25hbWU6IFwiQ291Z2FyXCJcbiMgICAgY291Z2FyX2Rlc2NyaXB0aW9uOiBcIkNvdWdhcnMgbGlrZSB0byBlYXJuIGEgUGhEIGJ5IFB1cnJpbmcgSGFwcGlseSBEYWlseS5cIlxuIyAgICBmb3hfbmFtZTogXCJCbHVlIEZveFwiXG4jICAgIGZveF9kZXNjcmlwdGlvbjogXCJCbHVlIGZveGVzIGFyZSB2ZXJ5IGNsZXZlciBhbmQgbG92ZSBkaWdnaW5nIGluIHRoZSBkaXJ0IGFuZCBzbm93IVwiXG4jICAgIHB1Z2ljb3JuX25hbWU6IFwiUHVnaWNvcm5cIlxuIyAgICBwdWdpY29ybl9kZXNjcmlwdGlvbjogXCJQdWdpY29ybnMgYXJlIHNvbWUgb2YgdGhlIHJhcmVzdCBjcmVhdHVyZXMgYW5kIGNhbiBjYXN0IHNwZWxscyFcIlxuIyAgICB3b2xmX25hbWU6IFwiV29sZiBQdXBcIlxuIyAgICB3b2xmX2Rlc2NyaXB0aW9uOiBcIldvbGYgcHVwcyBleGNlbCBpbiBodW50aW5nLCBnYXRoZXJpbmcsIGFuZCBwbGF5aW5nIGEgbWVhbiBnYW1lIG9mIGhpZGUtYW5kLXNlZWshXCJcbiMgICAgYmFsbF9uYW1lOiBcIlJlZCBTcXVlYWt5IEJhbGxcIlxuIyAgICBiYWxsX2Rlc2NyaXB0aW9uOiBcImJhbGwuc3F1ZWFrKClcIlxuIyAgICBjb2xsZWN0X3BldHM6IFwiQ29sbGVjdCBwZXRzIGZvciB5b3VyIGhlcm9lcyFcIlxuIyAgICBlYWNoX3BldDogXCJFYWNoIHBldCBoYXMgYSB1bmlxdWUgaGVscGVyIGFiaWxpdHkhXCJcbiMgICAgdXBncmFkZV90b19wcmVtaXVtOiBcIkJlY29tZSBhIHt7c3Vic2NyaWJlcn19IHRvIGVxdWlwIHBldHMuXCJcbiMgICAgcGxheV9zZWNvbmRfa2l0aG1hemU6IFwiUGxheSB7e3RoZV9zZWNvbmRfa2l0aG1hemV9fSB0byB1bmxvY2sgdGhlIFdvbGYgUHVwIVwiXG4jICAgIHRoZV9zZWNvbmRfa2l0aG1hemU6IFwiVGhlIFNlY29uZCBLaXRobWF6ZVwiXG4jICAgIGtlZXBfcGxheWluZzogXCJLZWVwIHBsYXlpbmcgdG8gZGlzY292ZXIgdGhlIGZpcnN0IHBldCFcIlxuIyAgICBjb21pbmdfc29vbjogXCJDb21pbmcgc29vblwiXG4jICAgIHJpdGljOiBcIlJpdGljIHRoZSBDb2xkXCIgIyBSaXRpYyBBbm5vdW5jZW1lbnQgTW9kYWxcbiMgICAgcml0aWNfZGVzY3JpcHRpb246IFwiUml0aWMgdGhlIENvbGQuIFRyYXBwZWQgaW4gS2VsdmludGFwaCBHbGFjaWVyIGZvciBjb3VudGxlc3MgYWdlcywgZmluYWxseSBmcmVlIGFuZCByZWFkeSB0byB0ZW5kIHRvIHRoZSBvZ3JlcyB0aGF0IGltcHJpc29uZWQgaGltLlwiXG4jICAgIGljZV9ibG9jazogXCJBIGJsb2NrIG9mIGljZVwiXG4jICAgIGljZV9kZXNjcmlwdGlvbjogXCJUaGVyZSBhcHBlYXJzIHRvIGJlIHNvbWV0aGluZyB0cmFwcGVkIGluc2lkZS4uLlwiXG4jICAgIGJsaW5rX25hbWU6IFwiQmxpbmtcIlxuIyAgICBibGlua19kZXNjcmlwdGlvbjogXCJSaXRpYyBkaXNhcHBlYXJzIGFuZCByZWFwcGVhcnMgaW4gYSBibGluayBvZiBhbiBleWUsIGxlYXZpbmcgbm90aGluZyBidXQgYSBzaGFkb3cuXCJcbiMgICAgc2hhZG93U3RlcF9uYW1lOiBcIlNoYWRvd3N0ZXBcIlxuIyAgICBzaGFkb3dTdGVwX2Rlc2NyaXB0aW9uOiBcIkEgbWFzdGVyIGFzc2Fzc2luIGtub3dzIGhvdyB0byB3YWxrIGJldHdlZW4gdGhlIHNoYWRvd3MuXCJcbiMgICAgdG9ybmFkb19uYW1lOiBcIlRvcm5hZG9cIlxuIyAgICB0b3JuYWRvX2Rlc2NyaXB0aW9uOiBcIkl0IGlzIGdvb2QgdG8gaGF2ZSBhIHJlc2V0IGJ1dHRvbiB3aGVuIG9uZSdzIGNvdmVyIGlzIGJsb3duLlwiXG4jICAgIHdhbGxPZkRhcmtuZXNzX25hbWU6IFwiV2FsbCBvZiBEYXJrbmVzc1wiXG4jICAgIHdhbGxPZkRhcmtuZXNzX2Rlc2NyaXB0aW9uOiBcIkhpZGUgYmVoaW5kIGEgd2FsbCBvZiBzaGFkb3dzIHRvIHByZXZlbnQgdGhlIGdhemUgb2YgcHJ5aW5nIGV5ZXMuXCJcblxuIyAgcHJlbWl1bV9mZWF0dXJlczpcbiMgICAgZ2V0X3ByZW1pdW06IFwiR2V0PGJyPkNvZGVDb21iYXQ8YnI+UHJlbWl1bVwiICMgRml0IGludG8gdGhlIGJhbm5lciBvbiB0aGUgL2ZlYXR1cmVzIHBhZ2VcbiMgICAgbWFzdGVyX2NvZGVyOiBcIkJlY29tZSBhIE1hc3RlciBDb2RlciBieSBzdWJzY3JpYmluZyB0b2RheSFcIlxuIyAgICBwYXlwYWxfcmVkaXJlY3Q6IFwiWW91IHdpbGwgYmUgcmVkaXJlY3RlZCB0byBQYXlQYWwgdG8gY29tcGxldGUgdGhlIHN1YnNjcmlwdGlvbiBwcm9jZXNzLlwiXG4jICAgIHN1YnNjcmliZV9ub3c6IFwiU3Vic2NyaWJlIE5vd1wiXG4jICAgIGhlcm9fYmx1cmJfMTogXCJHZXQgYWNjZXNzIHRvIF9fcHJlbWl1bUhlcm9lc0NvdW50X18gc3VwZXItY2hhcmdlZCBzdWJzY3JpYmVyLW9ubHkgaGVyb2VzISBIYXJuZXNzIHRoZSB1bnN0b3BwYWJsZSBwb3dlciBvZiBPa2FyIFN0b21wZm9vdCwgdGhlIGRlYWRseSBwcmVjaXNpb24gb2YgTmFyaWEgb2YgdGhlIExlYWYsIG9yIHN1bW1vbiBcXFwiYWRvcmFibGVcXFwiIHNrZWxldG9ucyB3aXRoIE5hbGZhciBDcnlwdG9yLlwiXG4jICAgIGhlcm9fYmx1cmJfMjogXCJQcmVtaXVtIFdhcnJpb3JzIHVubG9jayBzdHVubmluZyBtYXJ0aWFsIHNraWxscyBsaWtlIFdhcmNyeSwgU3RvbXAsIGFuZCBIdXJsIEVuZW15LiBPciwgcGxheSBhcyBhIFJhbmdlciwgdXNpbmcgc3RlYWx0aCBhbmQgYm93cywgdGhyb3dpbmcga25pdmVzLCB0cmFwcyEgVHJ5IHlvdXIgc2tpbGwgYXMgYSB0cnVlIGNvZGluZyBXaXphcmQsIGFuZCB1bmxlYXNoIGEgcG93ZXJmdWwgYXJyYXkgb2YgUHJpbW9yZGlhbCwgTmVjcm9tYW50aWMgb3IgRWxlbWVudGFsIG1hZ2ljIVwiXG4jICAgIGhlcm9fY2FwdGlvbjogXCJFeGNpdGluZyBuZXcgaGVyb2VzIVwiXG4jICAgIHBldF9ibHVyYl8xOiBcIlBldHMgYXJlbid0IGp1c3QgYWRvcmFibGUgY29tcGFuaW9ucywgdGhleSBhbHNvIHByb3ZpZGUgdW5pcXVlIGZ1bmN0aW9uYWxpdHkgYW5kIG1ldGhvZHMuIFRoZSBCYWJ5IEdyaWZmb24gY2FuIGNhcnJ5IHVuaXRzIHRocm91Z2ggdGhlIGFpciwgdGhlIFdvbGYgUHVwIHBsYXlzIGNhdGNoIHdpdGggZW5lbXkgYXJyb3dzLCB0aGUgQ291Z2FyIGlzIGZvbmQgb2YgY2hhc2luZyBvZ3JlcyBhcm91bmQsIGFuZCB0aGUgTWltaWMgYXR0cmFjdHMgY29pbnMgbGlrZSBhIG1hZ25ldCFcIlxuIyAgICBwZXRfYmx1cmJfMjogXCJDb2xsZWN0IGFsbCB0aGUgcGV0cyB0byBkaXNjb3ZlciB0aGVpciB1bmlxdWUgYWJpbGl0aWVzIVwiXG4jICAgIHBldF9jYXB0aW9uOiBcIkFkb3B0IHBldHMgdG8gYWNjb21wYW55IHlvdXIgaGVybyFcIlxuIyAgICBnYW1lX2Rldl9ibHVyYjogXCJMZWFybiBnYW1lIHNjcmlwdGluZyBhbmQgYnVpbGQgbmV3IGxldmVscyB0byBzaGFyZSB3aXRoIHlvdXIgZnJpZW5kcyEgUGxhY2UgdGhlIGl0ZW1zIHlvdSB3YW50LCB3cml0ZSBjb2RlIGZvciB1bml0IGxvZ2ljIGFuZCBiZWhhdmlvciwgYW5kIHNlZSBpZiB5b3VyIGZyaWVuZHMgY2FuIGJlYXQgdGhlIGxldmVsIVwiXG4jICAgIGdhbWVfZGV2X2NhcHRpb246IFwiRGVzaWduIHlvdXIgb3duIGdhbWVzIHRvIGNoYWxsZW5nZSB5b3VyIGZyaWVuZHMhXCJcbiMgICAgZXZlcnl0aGluZ19pbl9wcmVtaXVtOiBcIkV2ZXJ5dGhpbmcgeW91IGdldCBpbiBDb2RlQ29tYmF0IFByZW1pdW06XCJcbiMgICAgbGlzdF9nZW1zOiBcIlJlY2VpdmUgYm9udXMgZ2VtcyB0byBidXkgZ2VhciwgcGV0cywgYW5kIGhlcm9lc1wiXG4jICAgIGxpc3RfbGV2ZWxzOiBcIkdhaW4gYWNjZXNzIHRvIF9fcHJlbWl1bUxldmVsc0NvdW50X18gbW9yZSBsZXZlbHNcIlxuIyAgICBsaXN0X2hlcm9lczogXCJVbmxvY2sgZXhjbHVzaXZlIGhlcm9lcywgaW5jbHVkZSBSYW5nZXIgYW5kIFdpemFyZCBjbGFzc2VzXCJcbiMgICAgbGlzdF9nYW1lX2RldjogXCJNYWtlIGFuZCBzaGFyZSBnYW1lcyB3aXRoIGZyaWVuZHNcIlxuIyAgICBsaXN0X3dlYl9kZXY6IFwiQnVpbGQgd2Vic2l0ZXMgYW5kIGludGVyYWN0aXZlIGFwcHNcIlxuIyAgICBsaXN0X2l0ZW1zOiBcIkVxdWlwIFByZW1pdW0tb25seSBpdGVtcyBsaWtlIHBldHNcIlxuIyAgICBsaXN0X3N1cHBvcnQ6IFwiR2V0IFByZW1pdW0gc3VwcG9ydCB0byBoZWxwIHlvdSBkZWJ1ZyB0cmlja3kgY29kZVwiXG4jICAgIGxpc3RfY2xhbnM6IFwiQ3JlYXRlIHByaXZhdGUgY2xhbnMgdG8gaW52aXRlIHlvdXIgZnJpZW5kcyBhbmQgY29tcGV0ZSBvbiBhIGdyb3VwIGxlYWRlcmJvYXJkXCJcblxuICBjaG9vc2VfaGVybzpcbiAgICBjaG9vc2VfaGVybzogXCJXw6RobGUgZGVpbmVuIEhlbGRlblwiXG4gICAgcHJvZ3JhbW1pbmdfbGFuZ3VhZ2U6IFwiUHJvZ3JhbW1pZXJzcHJhY2hlXCJcbiAgICBwcm9ncmFtbWluZ19sYW5ndWFnZV9kZXNjcmlwdGlvbjogXCJXZWxjaGUgUHJvZ3JhbW1pZXJzcHJhY2hlIG3DtmNodGVzdCBkdSB2ZXJ3ZW5kZW4/XCJcbiAgICBkZWZhdWx0OiBcIlN0YW5kYXJkXCJcbiAgICBleHBlcmltZW50YWw6IFwiRXhwZXJpbWVudGllbGxcIlxuICAgIHB5dGhvbl9ibHVyYjogXCJFaW5mYWNoIGplZG9jaCBsZWlzdHVuZ3Nmw6RoaWcsIFB5dGhvbiBpc3QgZWluZSBndXRlIEFsbHp3ZWNrLVByb2dyYW1taWVyc3ByYWNoZS5cIlxuICAgIGphdmFzY3JpcHRfYmx1cmI6IFwiRGllIFNwcmFjaGUgZGVzIFdlYi5cIlxuICAgIGNvZmZlZXNjcmlwdF9ibHVyYjogXCJTY2jDtm5lcmUgSmF2YVNjcmlwdCBTeW50YXguXCJcbiAgICBsdWFfYmx1cmI6IFwiU2tyaXB0c3ByYWNoZSBmw7xyIFNwaWVsZSAoS0kpLlwiXG4jICAgIGphdmFfYmx1cmI6IFwiKFN1YnNjcmliZXIgT25seSkgQW5kcm9pZCBhbmQgZW50ZXJwcmlzZS5cIlxuICAgIHN0YXR1czogXCJTdGF0dXNcIlxuICAgIHdlYXBvbnM6IFwiV2FmZmVuXCJcbiAgICB3ZWFwb25zX3dhcnJpb3I6IFwiU2Nod2VydGVyIC0gS3VyemUgUmVpY2h3ZWl0ZSwga2VpbmUgTWFnaWVcIlxuICAgIHdlYXBvbnNfcmFuZ2VyOiBcIkFybWJyw7xzdGUsIFBpc3RvbGVuIC0gSG9oZSBSZWljaHdlaXRlLCBrZWluZSBNYWdpZVwiXG4gICAgd2VhcG9uc193aXphcmQ6IFwiU3TDtmNrZSwgU3TDpGJlIC0gSG9oZSBSZWljaHdlaXRlLCBNYWdpZVwiXG4gICAgYXR0YWNrOiBcIkFuZ3JpZmZzc2NoYWRlblwiICMgQ2FuIGFsc28gdHJhbnNsYXRlIGFzIFwiQXR0YWNrXCJcbiAgICBoZWFsdGg6IFwiR2VzdW5kaGVpdFwiXG4gICAgc3BlZWQ6IFwiR2VzY2h3aW5kaWdrZWl0XCJcbiAgICByZWdlbmVyYXRpb246IFwiUmVnZW5lcmF0aW9uXCJcbiAgICByYW5nZTogXCJSZWljaHdlaXRlXCIgIyBBcyBpbiBcImF0dGFjayBvciB2aXN1YWwgcmFuZ2VcIlxuICAgIGJsb2NrczogXCJIYWx0YmFya2VpdFwiICMgQXMgaW4gXCJ0aGlzIHNoaWVsZCBibG9ja3MgdGhpcyBtdWNoIGRhbWFnZVwiXG4gICAgYmFja3N0YWI6IFwiSGludGVyaGFsdHNzY2hhZGVuXCIgIyBBcyBpbiBcInRoaXMgZGFnZ2VyIGRvZXMgdGhpcyBtdWNoIGJhY2tzdGFiIGRhbWFnZVwiXG4gICAgc2tpbGxzOiBcIkbDpGhpZ2tlaXRlblwiXG4jICAgIGF0dGFja18xOiBcIkRlYWxzXCJcbiMgICAgYXR0YWNrXzI6IFwib2YgbGlzdGVkXCJcbiMgICAgYXR0YWNrXzM6IFwid2VhcG9uIGRhbWFnZS5cIlxuIyAgICBoZWFsdGhfMTogXCJHYWluc1wiXG4jICAgIGhlYWx0aF8yOiBcIm9mIGxpc3RlZFwiXG4jICAgIGhlYWx0aF8zOiBcImFybW9yIGhlYWx0aC5cIlxuIyAgICBzcGVlZF8xOiBcIk1vdmVzIGF0XCJcbiMgICAgc3BlZWRfMjogXCJtZXRlcnMgcGVyIHNlY29uZC5cIlxuICAgIGF2YWlsYWJsZV9mb3JfcHVyY2hhc2U6IFwiWnVtIEthdWYgdmVyZsO8Z2JhclwiICMgU2hvd3MgdXAgd2hlbiB5b3UgaGF2ZSB1bmxvY2tlZCwgYnV0IG5vdCBwdXJjaGFzZWQsIGEgaGVybyBpbiB0aGUgaGVybyBzdG9yZVxuICAgIGxldmVsX3RvX3VubG9jazogXCJMZXZlbCB6dW0gRnJlaXNjaGFsdGVuOlwiICMgTGFiZWwgZm9yIHdoaWNoIGxldmVsIHlvdSBoYXZlIHRvIGJlYXQgdG8gdW5sb2NrIGEgcGFydGljdWxhciBoZXJvIChjbGljayBhIGxvY2tlZCBoZXJvIGluIHRoZSBzdG9yZSB0byBzZWUpXG4gICAgcmVzdHJpY3RlZF90b19jZXJ0YWluX2hlcm9lczogXCJOdXIgYmVzdGltbXRlIEhlbGRlbiBrw7ZubmVuIGRpZXNlcyBMZXZlbCBzcGllbGVuLlwiXG5cbiMgIHNraWxsX2RvY3M6XG4jICAgIGZ1bmN0aW9uOiBcImZ1bmN0aW9uXCIgIyBza2lsbCB0eXBlc1xuIyAgICBtZXRob2Q6IFwibWV0aG9kXCJcbiMgICAgc25pcHBldDogXCJzbmlwcGV0XCJcbiMgICAgbnVtYmVyOiBcIm51bWJlclwiXG4jICAgIGFycmF5OiBcImFycmF5XCJcbiMgICAgb2JqZWN0OiBcIm9iamVjdFwiXG4jICAgIHN0cmluZzogXCJzdHJpbmdcIlxuIyAgICB3cml0YWJsZTogXCJ3cml0YWJsZVwiICMgSG92ZXIgb3ZlciBcImF0dGFja1wiIGluIFlvdXIgU2tpbGxzIHdoaWxlIHBsYXlpbmcgYSBsZXZlbCB0byBzZWUgbW9zdCBvZiB0aGlzXG4jICAgIHJlYWRfb25seTogXCJyZWFkLW9ubHlcIlxuIyAgICBhY3Rpb246IFwiQWN0aW9uXCJcbiMgICAgc3BlbGw6IFwiU3BlbGxcIlxuIyAgICBhY3Rpb25fbmFtZTogXCJuYW1lXCJcbiMgICAgYWN0aW9uX2Nvb2xkb3duOiBcIlRha2VzXCJcbiMgICAgYWN0aW9uX3NwZWNpZmljX2Nvb2xkb3duOiBcIkNvb2xkb3duXCJcbiMgICAgYWN0aW9uX2RhbWFnZTogXCJEYW1hZ2VcIlxuIyAgICBhY3Rpb25fcmFuZ2U6IFwiUmFuZ2VcIlxuIyAgICBhY3Rpb25fcmFkaXVzOiBcIlJhZGl1c1wiXG4jICAgIGFjdGlvbl9kdXJhdGlvbjogXCJEdXJhdGlvblwiXG4jICAgIGV4YW1wbGU6IFwiRXhhbXBsZVwiXG4jICAgIGV4OiBcImV4XCIgIyBBYmJyZXZpYXRpb24gb2YgXCJleGFtcGxlXCJcbiMgICAgY3VycmVudF92YWx1ZTogXCJDdXJyZW50IFZhbHVlXCJcbiMgICAgZGVmYXVsdF92YWx1ZTogXCJEZWZhdWx0IHZhbHVlXCJcbiMgICAgcGFyYW1ldGVyczogXCJQYXJhbWV0ZXJzXCJcbiMgICAgcmVxdWlyZWRfcGFyYW1ldGVyczogXCJSZXF1aXJlZCBQYXJhbWV0ZXJzXCJcbiMgICAgb3B0aW9uYWxfcGFyYW1ldGVyczogXCJPcHRpb25hbCBQYXJhbWV0ZXJzXCJcbiMgICAgcmV0dXJuczogXCJSZXR1cm5zXCJcbiMgICAgZ3JhbnRlZF9ieTogXCJHcmFudGVkIGJ5XCJcblxuICBzYXZlX2xvYWQ6XG4gICAgZ3JhbnVsYXJpdHlfc2F2ZWRfZ2FtZXM6IFwiR2VzcGVpY2hlcnRcIlxuICAgIGdyYW51bGFyaXR5X2NoYW5nZV9oaXN0b3J5OiBcIkhpc3RvcmllXCJcblxuICBvcHRpb25zOlxuICAgIGdlbmVyYWxfb3B0aW9uczogXCJBbGxnZW1laW5lIEVpbnN0ZWxsdW5nZW5cIiAjIENoZWNrIG91dCB0aGUgT3B0aW9ucyB0YWIgaW4gdGhlIEdhbWUgTWVudSB3aGlsZSBwbGF5aW5nIGEgbGV2ZWxcbiAgICB2b2x1bWVfbGFiZWw6IFwiTGF1dHN0w6Rya2VcIlxuICAgIG11c2ljX2xhYmVsOiBcIk11c2lrXCJcbiAgICBtdXNpY19kZXNjcmlwdGlvbjogXCJTY2hhbHRlIEhpbnRlcmdydW5kbXVzaWsgYW4vYXVzLlwiXG4gICAgZWRpdG9yX2NvbmZpZ190aXRsZTogXCJFZGl0b3IgRWluc3RlbGx1bmdlblwiXG4gICAgZWRpdG9yX2NvbmZpZ19saXZlY29tcGxldGlvbl9sYWJlbDogXCJMaXZlIEF1dG8tVmVydm9sbHN0w6RuZGlndW5nXCJcbiAgICBlZGl0b3JfY29uZmlnX2xpdmVjb21wbGV0aW9uX2Rlc2NyaXB0aW9uOiBcIlplaWd0IFZvcnNjaGzDpGdlIGRlciBBdXRvLVZlcnZvbGxzdMOkbmRpZ3VuZyBhbiB3w6RocmVuZCBkdSB0aXBwc3QuXCJcbiAgICBlZGl0b3JfY29uZmlnX2ludmlzaWJsZXNfbGFiZWw6IFwiWmVpZ2UgdW5zaWNodGJhcmUgWmVpY2hlblwiXG4gICAgZWRpdG9yX2NvbmZpZ19pbnZpc2libGVzX2Rlc2NyaXB0aW9uOiBcIlplaWd0IHVuc2ljaHRiYXJlIFplaWNoZW4gd2llIExlZXJ0YXN0ZW4gYW4uXCJcbiAgICBlZGl0b3JfY29uZmlnX2luZGVudGd1aWRlc19sYWJlbDogXCJaZWlnZSBFaW5yw7xja3VuZ3NoaWxmZVwiXG4gICAgZWRpdG9yX2NvbmZpZ19pbmRlbnRndWlkZXNfZGVzY3JpcHRpb246IFwiWmVpZ3QgdmVydGlrYWxlIExpbmllbiBhbiB1bSBFaW5yw7xja3VuZ2VuIGJlc3NlciB6dSBzZWhlbi5cIlxuICAgIGVkaXRvcl9jb25maWdfYmVoYXZpb3JzX2xhYmVsOiBcIkludGVsbGlnZW50ZXMgVmVyaGFsdGVuXCJcbiAgICBlZGl0b3JfY29uZmlnX2JlaGF2aW9yc19kZXNjcmlwdGlvbjogXCJWZXJ2b2xsc3TDpG5kaWd0IGF1dG9tYXRpc2NoIEtsYW1tZXJuIHVuZCBBbmbDvGhydW5nc3plaWNoZW4uXCJcblxuICBhYm91dDpcbiMgICAgbGVhcm5fbW9yZTogXCJMZWFybiBNb3JlXCJcbiMgICAgbWFpbl90aXRsZTogXCJJZiB5b3Ugd2FudCB0byBsZWFybiB0byBwcm9ncmFtLCB5b3UgbmVlZCB0byB3cml0ZSAoYSBsb3Qgb2YpIGNvZGUuXCJcbiMgICAgbWFpbl9kZXNjcmlwdGlvbjogXCJBdCBDb2RlQ29tYmF0LCBvdXIgam9iIGlzIHRvIG1ha2Ugc3VyZSB5b3UncmUgZG9pbmcgdGhhdCB3aXRoIGEgc21pbGUgb24geW91ciBmYWNlLlwiXG4jICAgIG1pc3Npb25fbGluazogXCJNaXNzaW9uXCJcbiMgICAgdGVhbV9saW5rOiBcIlRlYW1cIlxuIyAgICBzdG9yeV9saW5rOiBcIlN0b3J5XCJcbiMgICAgcHJlc3NfbGluazogXCJQcmVzc1wiXG4jICAgIG1pc3Npb25fdGl0bGU6IFwiT3VyIG1pc3Npb246IG1ha2UgcHJvZ3JhbW1pbmcgYWNjZXNzaWJsZSB0byBldmVyeSBzdHVkZW50IG9uIEVhcnRoLlwiXG4jICAgIG1pc3Npb25fZGVzY3JpcHRpb25fMTogXCI8c3Ryb25nPlByb2dyYW1taW5nIGlzIG1hZ2ljPC9zdHJvbmc+LiBJdCdzIHRoZSBhYmlsaXR5IHRvIGNyZWF0ZSB0aGluZ3MgZnJvbSBwdXJlIGltYWdpbmF0aW9uLiBXZSBzdGFydGVkIENvZGVDb21iYXQgdG8gZ2l2ZSBsZWFybmVycyB0aGUgZmVlbGluZyBvZiB3aXphcmRseSBwb3dlciBhdCB0aGVpciBmaW5nZXJ0aXBzIGJ5IHVzaW5nIDxzdHJvbmc+dHlwZWQgY29kZTwvc3Ryb25nPi5cIlxuIyAgICBtaXNzaW9uX2Rlc2NyaXB0aW9uXzI6IFwiQXMgaXQgdHVybnMgb3V0LCB0aGF0IGVuYWJsZXMgdGhlbSB0byBsZWFybiBmYXN0ZXIgdG9vLiBXQVkgZmFzdGVyLiBJdCdzIGxpa2UgaGF2aW5nIGEgY29udmVyc2F0aW9uIGluc3RlYWQgb2YgcmVhZGluZyBhIG1hbnVhbC4gV2Ugd2FudCB0byBicmluZyB0aGF0IGNvbnZlcnNhdGlvbiB0byBldmVyeSBzY2hvb2wgYW5kIHRvIDxzdHJvbmc+ZXZlcnkgc3R1ZGVudDwvc3Ryb25nPiwgYmVjYXVzZSBldmVyeW9uZSBzaG91bGQgaGF2ZSB0aGUgY2hhbmNlIHRvIGxlYXJuIHRoZSBtYWdpYyBvZiBwcm9ncmFtbWluZy5cIlxuIyAgICB0ZWFtX3RpdGxlOiBcIk1lZXQgdGhlIENvZGVDb21iYXQgdGVhbVwiXG4jICAgIHRlYW1fdmFsdWVzOiBcIldlIHZhbHVlIG9wZW4gYW5kIHJlc3BlY3RmdWwgZGlhbG9nLCB3aGVyZSB0aGUgYmVzdCBpZGVhIHdpbnMuIE91ciBkZWNpc2lvbnMgYXJlIGdyb3VuZGVkIGluIGN1c3RvbWVyIHJlc2VhcmNoIGFuZCBvdXIgcHJvY2VzcyBpcyBmb2N1c2VkIG9uIGRlbGl2ZXJpbmcgdGFuZ2libGUgcmVzdWx0cyBmb3IgdGhlbS4gRXZlcnlvbmUgaXMgaGFuZHMtb24sIGZyb20gb3VyIENFTyB0byBvdXIgR2l0SHViIGNvbnRyaWJ1dG9ycywgYmVjYXVzZSB3ZSB2YWx1ZSBncm93dGggYW5kIGxlYXJuaW5nIGluIG91ciB0ZWFtLlwiXG4gICAgbmlja190aXRsZTogXCJQcm9ncmFtbWllcmVyXCIgIyB7Y2hhbmdlfVxuICAgIG1hdHRfdGl0bGU6IFwiUHJvZ3JhbW1pZXJlclwiICMge2NoYW5nZX1cbiMgICAgY2F0X3RpdGxlOiBcIkdhbWUgRGVzaWduZXJcIlxuICAgIHNjb3R0X3RpdGxlOiBcIlByb2dyYW1taWVyZXJcIiAjIHtjaGFuZ2V9XG4jICAgIG1ha2FfdGl0bGU6IFwiQ3VzdG9tZXIgQWR2b2NhdGVcIlxuIyAgICByb2Jpbl90aXRsZTogXCJQcm9kdWN0IE1hbmFnZXJcIlxuIyAgICBub2xhbl90aXRsZTogXCJTYWxlcyBNYW5hZ2VyXCJcbiMgICAgbGlzYV90aXRsZTogXCJCdXNpbmVzcyBEZXZlbG9wbWVudCBNYW5hZ2VyXCJcbiMgICAgc2Vhbl90aXRsZTogXCJUZXJyaXRvcnkgTWFuYWdlclwiXG4jICAgIGxpel90aXRsZTogXCJUZXJyaXRvcnkgTWFuYWdlclwiXG4jICAgIGphbmVfdGl0bGU6IFwiQ3VzdG9tZXIgU3VjY2VzcyBNYW5hZ2VyXCJcbiMgICAgZGF2aWRfdGl0bGU6IFwiTWFya2V0aW5nIExlYWRcIlxuIyAgICByZXRyb3N0eWxlX3RpdGxlOiBcIklsbHVzdHJhdGlvblwiXG4gICAgcmV0cm9zdHlsZV9ibHVyYjogXCJSZXRyb1N0eWxlIEdhbWVzXCJcbiMgICAgYnJ5dWtoX3RpdGxlOiBcIkdhbWUgRGVzaWduZXJcIlxuIyAgICBicnl1a2hfYmx1cmI6IFwiQ29uc3RydWN0cyBwdXp6bGVzXCJcbiMgICAgY29tbXVuaXR5X3RpdGxlOiBcIi4uLmFuZCBvdXIgb3Blbi1zb3VyY2UgY29tbXVuaXR5XCJcbiMgICAgY29tbXVuaXR5X3N1YnRpdGxlOiBcIk92ZXIgNTAwIGNvbnRyaWJ1dG9ycyBoYXZlIGhlbHBlZCBidWlsZCBDb2RlQ29tYmF0LCB3aXRoIG1vcmUgam9pbmluZyBldmVyeSB3ZWVrIVwiXG4jICAgIGNvbW11bml0eV9kZXNjcmlwdGlvbl8zOiBcIkNvZGVDb21iYXQgaXMgYVwiXG4jICAgIGNvbW11bml0eV9kZXNjcmlwdGlvbl9saW5rXzI6IFwiY29tbXVuaXR5IHByb2plY3RcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fMTogXCJ3aXRoIGh1bmRyZWRzIG9mIHBsYXllcnMgdm9sdW50ZWVyaW5nIHRvIGNyZWF0ZSBsZXZlbHMsIGNvbnRyaWJ1dGUgdG8gb3VyIGNvZGUgdG8gYWRkIGZlYXR1cmVzLCBmaXggYnVncywgcGxheXRlc3QsIGFuZCBldmVuIHRyYW5zbGF0ZSB0aGUgZ2FtZSBpbnRvIDUwIGxhbmd1YWdlcyBzbyBmYXIuIEVtcGxveWVlcywgY29udHJpYnV0b3JzIGFuZCB0aGUgc2l0ZSBnYWluIGJ5IHNoYXJpbmcgaWRlYXMgYW5kIHBvb2xpbmcgZWZmb3J0LCBhcyBkb2VzIHRoZSBvcGVuIHNvdXJjZSBjb21tdW5pdHkgaW4gZ2VuZXJhbC4gVGhlIHNpdGUgaXMgYnVpbHQgb24gbnVtZXJvdXMgb3BlbiBzb3VyY2UgcHJvamVjdHMsIGFuZCB3ZSBhcmUgb3BlbiBzb3VyY2VkIHRvIGdpdmUgYmFjayB0byB0aGUgY29tbXVuaXR5IGFuZCBwcm92aWRlIGNvZGUtY3VyaW91cyBwbGF5ZXJzIGEgZmFtaWxpYXIgcHJvamVjdCB0byBleHBsb3JlIGFuZCBleHBlcmltZW50IHdpdGguIEFueW9uZSBjYW4gam9pbiB0aGUgQ29kZUNvbWJhdCBjb21tdW5pdHkhIENoZWNrIG91dCBvdXJcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fbGluazogXCJjb250cmlidXRlIHBhZ2VcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fMjogXCJmb3IgbW9yZSBpbmZvLlwiXG4jICAgIG51bWJlcl9jb250cmlidXRvcnM6IFwiT3ZlciA0NTAgY29udHJpYnV0b3JzIGhhdmUgbGVudCB0aGVpciBzdXBwb3J0IGFuZCB0aW1lIHRvIHRoaXMgcHJvamVjdC5cIlxuIyAgICBzdG9yeV90aXRsZTogXCJPdXIgc3Rvcnkgc28gZmFyXCJcbiMgICAgc3Rvcnlfc3VidGl0bGU6IFwiU2luY2UgMjAxMywgQ29kZUNvbWJhdCBoYXMgZ3Jvd24gZnJvbSBhIG1lcmUgc2V0IG9mIHNrZXRjaGVzIHRvIGEgbGl2aW5nLCB0aHJpdmluZyBnYW1lLlwiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18xYTogXCI1LDAwMCwwMDArXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzFiOiBcInRvdGFsIHBsYXllcnNcIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfMWM6IFwiaGF2ZSBzdGFydGVkIHRoZWlyIHByb2dyYW1taW5nIGpvdXJuZXkgdGhyb3VnaCBDb2RlQ29tYmF0XCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzJhOiBcIldl4oCZdmUgYmVlbiB0cmFuc2xhdGVkIGludG8gb3ZlciA1MCBsYW5ndWFnZXMg4oCUIG91ciBwbGF5ZXJzIGhhaWwgZnJvbVwiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18yYjogXCIyMDArIGNvdW50cmllc1wiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18zYTogXCJUb2dldGhlciwgdGhleSBoYXZlIHdyaXR0ZW5cIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfM2I6IFwiMSBiaWxsaW9uIGxpbmVzIG9mIGNvZGUgYW5kIGNvdW50aW5nXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzNjOiBcImFjcm9zcyBtYW55IGRpZmZlcmVudCBwcm9ncmFtbWluZyBsYW5ndWFnZXNcIlxuIyAgICBzdG9yeV9sb25nX3dheV8xOiBcIlRob3VnaCB3ZSd2ZSBjb21lIGEgbG9uZyB3YXkuLi5cIlxuIyAgICBzdG9yeV9za2V0Y2hfY2FwdGlvbjogXCJOaWNrJ3MgdmVyeSBmaXJzdCBza2V0Y2ggZGVwaWN0aW5nIGEgcHJvZ3JhbW1pbmcgZ2FtZSBpbiBhY3Rpb24uXCJcbiMgICAgc3RvcnlfbG9uZ193YXlfMjogXCJ3ZSBzdGlsbCBoYXZlIG11Y2ggdG8gZG8gYmVmb3JlIHdlIGNvbXBsZXRlIG91ciBxdWVzdCwgc28uLi5cIlxuIyAgICBqb2JzX3RpdGxlOiBcIkNvbWUgd29yayB3aXRoIHVzIGFuZCBoZWxwIHdyaXRlIENvZGVDb21iYXQgaGlzdG9yeSFcIlxuIyAgICBqb2JzX3N1YnRpdGxlOiBcIkRvbid0IHNlZSBhIGdvb2QgZml0IGJ1dCBpbnRlcmVzdGVkIGluIGtlZXBpbmcgaW4gdG91Y2g/IFNlZSBvdXIgXFxcIkNyZWF0ZSBZb3VyIE93blxcXCIgbGlzdGluZy5cIlxuIyAgICBqb2JzX2JlbmVmaXRzOiBcIkVtcGxveWVlIEJlbmVmaXRzXCJcbiMgICAgam9ic19iZW5lZml0XzQ6IFwiVW5saW1pdGVkIHZhY2F0aW9uXCJcbiMgICAgam9ic19iZW5lZml0XzU6IFwiUHJvZmVzc2lvbmFsIGRldmVsb3BtZW50IGFuZCBjb250aW51aW5nIGVkdWNhdGlvbiBzdXBwb3J0IOKAkyBmcmVlIGJvb2tzIGFuZCBnYW1lcyFcIlxuIyAgICBqb2JzX2JlbmVmaXRfNjogXCJNZWRpY2FsIChnb2xkKSwgZGVudGFsLCB2aXNpb24sIGNvbW11dGVyXCJcbiMgICAgam9ic19iZW5lZml0Xzc6IFwiU2l0LXN0YW5kIGRlc2tzIGZvciBhbGxcIlxuIyAgICBqb2JzX2JlbmVmaXRfOTogXCIxMC15ZWFyIG9wdGlvbiBleGVyY2lzZSB3aW5kb3dcIlxuIyAgICBqb2JzX2JlbmVmaXRfMTA6IFwiTWF0ZXJuaXR5IGxlYXZlOiAxMCB3ZWVrcyBwYWlkLCBuZXh0IDYgQCA1NSUgc2FsYXJ5XCJcbiMgICAgam9ic19iZW5lZml0XzExOiBcIlBhdGVybml0eSBsZWF2ZTogMTAgd2Vla3MgcGFpZFwiXG4jICAgIGpvYnNfY3VzdG9tX3RpdGxlOiBcIkNyZWF0ZSBZb3VyIE93blwiXG4jICAgIGpvYnNfY3VzdG9tX2Rlc2NyaXB0aW9uOiBcIkFyZSB5b3UgcGFzc2lvbmF0ZSBhYm91dCBDb2RlQ29tYmF0IGJ1dCBkb24ndCBzZWUgYSBqb2IgbGlzdGVkIHRoYXQgbWF0Y2hlcyB5b3VyIHF1YWxpZmljYXRpb25zPyBXcml0ZSB1cyBhbmQgc2hvdyBob3cgeW91IHRoaW5rIHlvdSBjYW4gY29udHJpYnV0ZSB0byBvdXIgdGVhbS4gV2UnZCBsb3ZlIHRvIGhlYXIgZnJvbSB5b3UhXCJcbiMgICAgam9ic19jdXN0b21fY29udGFjdF8xOiBcIlNlbmQgdXMgYSBub3RlIGF0XCJcbiMgICAgam9ic19jdXN0b21fY29udGFjdF8yOiBcImludHJvZHVjaW5nIHlvdXJzZWxmIGFuZCB3ZSBtaWdodCBnZXQgaW4gdG91Y2ggaW4gdGhlIGZ1dHVyZSFcIlxuIyAgICBjb250YWN0X3RpdGxlOiBcIlByZXNzICYgQ29udGFjdFwiXG4jICAgIGNvbnRhY3Rfc3VidGl0bGU6IFwiTmVlZCBtb3JlIGluZm9ybWF0aW9uPyBHZXQgaW4gdG91Y2ggd2l0aCB1cyBhdFwiXG4jICAgIHNjcmVlbnNob3RzX3RpdGxlOiBcIkdhbWUgU2NyZWVuc2hvdHNcIlxuIyAgICBzY3JlZW5zaG90c19oaW50OiBcIihjbGljayB0byB2aWV3IGZ1bGwgc2l6ZSlcIlxuIyAgICBkb3dubG9hZHNfdGl0bGU6IFwiRG93bmxvYWQgQXNzZXRzICYgSW5mb3JtYXRpb25cIlxuIyAgICBhYm91dF9jb2RlY29tYmF0OiBcIkFib3V0IENvZGVDb21iYXRcIlxuIyAgICBsb2dvOiBcIkxvZ29cIlxuIyAgICBzY3JlZW5zaG90czogXCJTY3JlZW5zaG90c1wiXG4jICAgIGNoYXJhY3Rlcl9hcnQ6IFwiQ2hhcmFjdGVyIEFydFwiXG4jICAgIGRvd25sb2FkX2FsbDogXCJEb3dubG9hZCBBbGxcIlxuIyAgICBwcmV2aW91czogXCJQcmV2aW91c1wiXG4jICAgIGxvY2F0aW9uX3RpdGxlOiBcIldlJ3JlIGxvY2F0ZWQgaW4gZG93bnRvd24gU0Y6XCJcblxuIyAgdGVhY2hlcnM6XG4jICAgIGxpY2Vuc2VzX25lZWRlZDogXCJMaWNlbnNlcyBuZWVkZWRcIlxuXG4jICBzcGVjaWFsX29mZmVyOlxuIyAgICBzcGVjaWFsX29mZmVyOiBcIlNwZWNpYWwgT2ZmZXJcIlxuIyAgICBwcm9qZWN0X2Jhc2VkX3RpdGxlOiBcIlByb2plY3QtQmFzZWQgQ291cnNlc1wiXG4jICAgIHByb2plY3RfYmFzZWRfZGVzY3JpcHRpb246IFwiV2ViIGFuZCBHYW1lIERldmVsb3BtZW50IGNvdXJzZXMgZmVhdHVyZSBzaGFyZWFibGUgZmluYWwgcHJvamVjdHMuXCJcbiMgICAgZ3JlYXRfZm9yX2NsdWJzX3RpdGxlOiBcIkdyZWF0IGZvciBjbHVicyBhbmQgZWxlY3RpdmVzXCJcbiMgICAgZ3JlYXRfZm9yX2NsdWJzX2Rlc2NyaXB0aW9uOiBcIlRlYWNoZXJzIGNhbiBwdXJjaGFzZSB1cCB0byBfX21heFF1YW50aXR5U3RhcnRlckxpY2Vuc2VzX18gU3RhcnRlciBMaWNlbnNlcy5cIiAjXG4jICAgIGxvd19wcmljZV90aXRsZTogXCJKdXN0IF9fc3RhcnRlckxpY2Vuc2VQcmljZV9fIHBlciBzdHVkZW50XCJcbiMgICAgbG93X3ByaWNlX2Rlc2NyaXB0aW9uOiBcIlN0YXJ0ZXIgTGljZW5zZXMgYXJlIGFjdGl2ZSBmb3IgX19zdGFydGVyTGljZW5zZUxlbmd0aE1vbnRoc19fIG1vbnRocyBmcm9tIHB1cmNoYXNlLlwiXG4jICAgIHRocmVlX2dyZWF0X2NvdXJzZXM6IFwiVGhyZWUgZ3JlYXQgY291cnNlcyBpbmNsdWRlZCBpbiB0aGUgU3RhcnRlciBMaWNlbnNlOlwiXG4jICAgIGxpY2Vuc2VfbGltaXRfZGVzY3JpcHRpb246IFwiVGVhY2hlcnMgY2FuIHB1cmNoYXNlIHVwIHRvIF9fbWF4UXVhbnRpdHlTdGFydGVyTGljZW5zZXNfXyBTdGFydGVyIExpY2Vuc2VzLiBZb3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCBfX3F1YW50aXR5QWxyZWFkeVB1cmNoYXNlZF9fLiBJZiB5b3UgbmVlZCBtb3JlLCBjb250YWN0IF9fc3VwcG9ydEVtYWlsX18uIFN0YXJ0ZXIgTGljZW5zZXMgYXJlIHZhbGlkIGZvciBfX3N0YXJ0ZXJMaWNlbnNlTGVuZ3RoTW9udGhzX18gbW9udGhzLlwiXG4jICAgIHN0dWRlbnRfc3RhcnRlcl9saWNlbnNlOiBcIlN0dWRlbnQgU3RhcnRlciBMaWNlbnNlXCJcbiMgICAgcHVyY2hhc2Vfc3RhcnRlcl9saWNlbnNlczogXCJQdXJjaGFzZSBTdGFydGVyIExpY2Vuc2VzXCJcbiMgICAgcHVyY2hhc2Vfc3RhcnRlcl9saWNlbnNlc190b19ncmFudDogXCJQdXJjaGFzZSBTdGFydGVyIExpY2Vuc2VzIHRvIGdyYW50IGFjY2VzcyB0byBfX3N0YXJ0ZXJMaWNlbnNlQ291cnNlTGlzdF9fXCJcbiMgICAgc3RhcnRlcl9saWNlbnNlc19jYW5fYmVfdXNlZDogXCJTdGFydGVyIExpY2Vuc2VzIGNhbiBiZSB1c2VkIHRvIGFzc2lnbiBhZGRpdGlvbmFsIGNvdXJzZXMgaW1tZWRpYXRlbHkgYWZ0ZXIgcHVyY2hhc2UuXCJcbiMgICAgcGF5X25vdzogXCJQYXkgTm93XCJcbiMgICAgd2VfYWNjZXB0X2FsbF9tYWpvcl9jcmVkaXRfY2FyZHM6IFwiV2UgYWNjZXB0IGFsbCBtYWpvciBjcmVkaXQgY2FyZHMuXCJcbiMgICAgY3MyX2Rlc2NyaXB0aW9uOiBcImJ1aWxkcyBvbiB0aGUgZm91bmRhdGlvbiBmcm9tIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlLCBkaXZpbmcgaW50byBpZi1zdGF0ZW1lbnRzLCBmdW5jdGlvbnMsIGV2ZW50cyBhbmQgbW9yZS5cIlxuIyAgICB3ZDFfZGVzY3JpcHRpb246IFwiaW50cm9kdWNlcyB0aGUgYmFzaWNzIG9mIEhUTUwgYW5kIENTUyB3aGlsZSB0ZWFjaGluZyBza2lsbHMgbmVlZGVkIGZvciBzdHVkZW50cyB0byBidWlsZCB0aGVpciBmaXJzdCB3ZWJwYWdlLlwiXG4jICAgIGdkMV9kZXNjcmlwdGlvbjogXCJ1c2VzIHN5bnRheCBzdHVkZW50cyBhcmUgYWxyZWFkeSBmYW1pbGlhciB3aXRoIHRvIHNob3cgdGhlbSBob3cgdG8gYnVpbGQgYW5kIHNoYXJlIHRoZWlyIG93biBwbGF5YWJsZSBnYW1lIGxldmVscy5cIlxuIyAgICBzZWVfYW5fZXhhbXBsZV9wcm9qZWN0OiBcInNlZSBhbiBleGFtcGxlIHByb2plY3RcIlxuIyAgICBnZXRfc3RhcnRlZF90b2RheTogXCJHZXQgc3RhcnRlZCB0b2RheSFcIlxuIyAgICB3YW50X2FsbF90aGVfY291cnNlczogXCJXYW50IGFsbCB0aGUgY291cnNlcz8gUmVxdWVzdCBpbmZvcm1hdGlvbiBvbiBvdXIgRnVsbCBMaWNlbnNlcy5cIlxuIyAgICBjb21wYXJlX2xpY2Vuc2VfdHlwZXM6IFwiQ29tcGFyZSBMaWNlbnNlIFR5cGVzOlwiXG4jICAgIGNzOiBcIkNvbXB1dGVyIFNjaWVuY2VcIlxuIyAgICB3ZDogXCJXZWIgRGV2ZWxvcG1lbnRcIlxuIyAgICB3ZDE6IFwiV2ViIERldmVsb3BtZW50IDFcIlxuIyAgICBnZDogXCJHYW1lIERldmVsb3BtZW50XCJcbiMgICAgZ2QxOiBcIkdhbWUgRGV2ZWxvcG1lbnQgMVwiXG4jICAgIG1heGltdW1fc3R1ZGVudHM6IFwiTWF4aW11bSAjIG9mIFN0dWRlbnRzXCJcbiMgICAgdW5saW1pdGVkOiBcIlVubGltaXRlZFwiXG4jICAgIHByaW9yaXR5X3N1cHBvcnQ6IFwiUHJpb3JpdHkgc3VwcG9ydFwiXG4jICAgIHllczogXCJZZXNcIlxuIyAgICBwcmljZV9wZXJfc3R1ZGVudDogXCJfX3ByaWNlX18gcGVyIHN0dWRlbnRcIlxuIyAgICBwcmljaW5nOiBcIlByaWNpbmdcIlxuIyAgICBmcmVlOiBcIkZyZWVcIlxuIyAgICBwdXJjaGFzZTogXCJQdXJjaGFzZVwiXG4jICAgIGNvdXJzZXNfcHJlZml4OiBcIkNvdXJzZXNcIlxuIyAgICBjb3Vyc2VzX3N1ZmZpeDogXCJcIlxuIyAgICBjb3Vyc2VfcHJlZml4OiBcIkNvdXJzZVwiXG4jICAgIGNvdXJzZV9zdWZmaXg6IFwiXCJcblxuIyAgdGVhY2hlcnNfcXVvdGU6XG4jICAgIHN1YnRpdGxlOiBcIkdldCB5b3VyIHN0dWRlbnRzIHN0YXJ0ZWQgaW4gbGVzcyB0aGFuIGFuIGhvdXIuIFlvdSdsbCBiZSBhYmxlIHRvIDxzdHJvbmc+Y3JlYXRlIGEgY2xhc3MsIGFkZCBzdHVkZW50cywgYW5kIG1vbml0b3IgdGhlaXIgcHJvZ3Jlc3M8L3N0cm9uZz4gYXMgdGhleSBsZWFybiBjb21wdXRlciBzY2llbmNlLlwiXG4jICAgIGVtYWlsX2V4aXN0czogXCJVc2VyIGV4aXN0cyB3aXRoIHRoaXMgZW1haWwuXCJcbiMgICAgcGhvbmVfbnVtYmVyOiBcIlBob25lIG51bWJlclwiXG4jICAgIHBob25lX251bWJlcl9oZWxwOiBcIldoZXJlIGNhbiB3ZSByZWFjaCB5b3UgZHVyaW5nIHRoZSB3b3JrZGF5P1wiXG4jICAgIHByaW1hcnlfcm9sZV9sYWJlbDogXCJZb3VyIFByaW1hcnkgUm9sZVwiXG4jICAgIHJvbGVfZGVmYXVsdDogXCJTZWxlY3QgUm9sZVwiXG4jICAgIHByaW1hcnlfcm9sZV9kZWZhdWx0OiBcIlNlbGVjdCBQcmltYXJ5IFJvbGVcIlxuIyAgICBwdXJjaGFzZXJfcm9sZV9kZWZhdWx0OiBcIlNlbGVjdCBQdXJjaGFzZXIgUm9sZVwiXG4jICAgIHRlY2hfY29vcmRpbmF0b3I6IFwiVGVjaG5vbG9neSBjb29yZGluYXRvclwiXG4jICAgIGFkdmlzb3I6IFwiQ3VycmljdWx1bSBTcGVjaWFsaXN0L0Fkdmlzb3JcIlxuIyAgICBwcmluY2lwYWw6IFwiUHJpbmNpcGFsXCJcbiMgICAgc3VwZXJpbnRlbmRlbnQ6IFwiU3VwZXJpbnRlbmRlbnRcIlxuIyAgICBwYXJlbnQ6IFwiUGFyZW50XCJcbiMgICAgcHVyY2hhc2VyX3JvbGVfbGFiZWw6IFwiWW91ciBQdXJjaGFzZXIgUm9sZVwiXG4jICAgIGluZmx1ZW5jZV9hZHZvY2F0ZTogXCJJbmZsdWVuY2UvQWR2b2NhdGVcIlxuIyAgICBldmFsdWF0ZV9yZWNvbW1lbmQ6IFwiRXZhbHVhdGUvUmVjb21tZW5kXCJcbiMgICAgYXBwcm92ZV9mdW5kczogXCJBcHByb3ZlIEZ1bmRzXCJcbiMgICAgbm9fcHVyY2hhc2VyX3JvbGU6IFwiTm8gcm9sZSBpbiBwdXJjaGFzZSBkZWNpc2lvbnNcIlxuIyAgICBkaXN0cmljdF9sYWJlbDogXCJEaXN0cmljdFwiXG4jICAgIGRpc3RyaWN0X25hbWU6IFwiRGlzdHJpY3QgTmFtZVwiXG4jICAgIGRpc3RyaWN0X25hOiBcIkVudGVyIE4vQSBpZiBub3QgYXBwbGljYWJsZVwiXG4jICAgIG9yZ2FuaXphdGlvbl9sYWJlbDogXCJTY2hvb2xcIlxuIyAgICBzY2hvb2xfbmFtZTogXCJTY2hvb2wgTmFtZVwiXG4jICAgIGNpdHk6IFwiQ2l0eVwiXG4jICAgIHN0YXRlOiBcIlN0YXRlXCJcbiMgICAgY291bnRyeTogXCJDb3VudHJ5XCJcbiMgICAgbnVtX3N0dWRlbnRzX2hlbHA6IFwiSG93IG1hbnkgc3R1ZGVudHMgd2lsbCB1c2UgQ29kZUNvbWJhdD9cIlxuIyAgICBudW1fc3R1ZGVudHNfZGVmYXVsdDogXCJTZWxlY3QgUmFuZ2VcIlxuIyAgICBlZHVjYXRpb25fbGV2ZWxfbGFiZWw6IFwiRWR1Y2F0aW9uIExldmVsIG9mIFN0dWRlbnRzXCJcbiMgICAgZWR1Y2F0aW9uX2xldmVsX2hlbHA6IFwiQ2hvb3NlIGFzIG1hbnkgYXMgYXBwbHkuXCJcbiMgICAgZWxlbWVudGFyeV9zY2hvb2w6IFwiRWxlbWVudGFyeSBTY2hvb2xcIlxuIyAgICBoaWdoX3NjaG9vbDogXCJIaWdoIFNjaG9vbFwiXG4jICAgIHBsZWFzZV9leHBsYWluOiBcIihwbGVhc2UgZXhwbGFpbilcIlxuIyAgICBtaWRkbGVfc2Nob29sOiBcIk1pZGRsZSBTY2hvb2xcIlxuIyAgICBjb2xsZWdlX3BsdXM6IFwiQ29sbGVnZSBvciBoaWdoZXJcIlxuIyAgICByZWZlcnJlcjogXCJIb3cgZGlkIHlvdSBoZWFyIGFib3V0IHVzP1wiXG4jICAgIHJlZmVycmVyX2hlbHA6IFwiRm9yIGV4YW1wbGU6IGZyb20gYW5vdGhlciB0ZWFjaGVyLCBhIGNvbmZlcmVuY2UsIHlvdXIgc3R1ZGVudHMsIENvZGUub3JnLCBldGMuXCJcbiMgICAgcmVmZXJyZXJfZGVmYXVsdDogXCJTZWxlY3QgT25lXCJcbiMgICAgcmVmZXJyZXJfaG9jOiBcIkNvZGUub3JnL0hvdXIgb2YgQ29kZVwiXG4jICAgIHJlZmVycmVyX3RlYWNoZXI6IFwiQSB0ZWFjaGVyXCJcbiMgICAgcmVmZXJyZXJfYWRtaW46IFwiQW4gYWRtaW5pc3RyYXRvclwiXG4jICAgIHJlZmVycmVyX3N0dWRlbnQ6IFwiQSBzdHVkZW50XCJcbiMgICAgcmVmZXJyZXJfcGQ6IFwiUHJvZmVzc2lvbmFsIHRyYWluaW5ncy93b3Jrc2hvcHNcIlxuIyAgICByZWZlcnJlcl93ZWI6IFwiR29vZ2xlXCJcbiMgICAgcmVmZXJyZXJfb3RoZXI6IFwiT3RoZXJcIlxuIyAgICBhbnl0aGluZ19lbHNlOiBcIldoYXQga2luZCBvZiBjbGFzcyBkbyB5b3UgYW50aWNpcGF0ZSB1c2luZyBDb2RlQ29tYmF0IGZvcj9cIlxuIyAgICB0aGFua3NfaGVhZGVyOiBcIlJlcXVlc3QgUmVjZWl2ZWQhXCJcbiMgICAgdGhhbmtzX3N1Yl9oZWFkZXI6IFwiVGhhbmtzIGZvciBleHByZXNzaW5nIGludGVyZXN0IGluIENvZGVDb21iYXQgZm9yIHlvdXIgc2Nob29sLlwiXG4jICAgIHRoYW5rc19wOiBcIldlJ2xsIGJlIGluIHRvdWNoIHNvb24hIElmIHlvdSBuZWVkIHRvIGdldCBpbiBjb250YWN0LCB5b3UgY2FuIHJlYWNoIHVzIGF0OlwiXG4jICAgIGJhY2tfdG9fY2xhc3NlczogXCJCYWNrIHRvIENsYXNzZXNcIlxuIyAgICBmaW5pc2hfc2lnbnVwOiBcIkZpbmlzaCBjcmVhdGluZyB5b3VyIHRlYWNoZXIgYWNjb3VudDpcIlxuIyAgICBmaW5pc2hfc2lnbnVwX3A6IFwiQ3JlYXRlIGFuIGFjY291bnQgdG8gc2V0IHVwIGEgY2xhc3MsIGFkZCB5b3VyIHN0dWRlbnRzLCBhbmQgbW9uaXRvciB0aGVpciBwcm9ncmVzcyBhcyB0aGV5IGxlYXJuIGNvbXB1dGVyIHNjaWVuY2UuXCJcbiMgICAgc2lnbnVwX3dpdGg6IFwiU2lnbiB1cCB3aXRoOlwiXG4jICAgIGNvbm5lY3Rfd2l0aDogXCJDb25uZWN0IHdpdGg6XCJcbiMgICAgY29udmVyc2lvbl93YXJuaW5nOiBcIldBUk5JTkc6IFlvdXIgY3VycmVudCBhY2NvdW50IGlzIGEgPGVtPlN0dWRlbnQgQWNjb3VudDwvZW0+LiBPbmNlIHlvdSBzdWJtaXQgdGhpcyBmb3JtLCB5b3VyIGFjY291bnQgd2lsbCBiZSB1cGRhdGVkIHRvIGEgVGVhY2hlciBBY2NvdW50LlwiXG4jICAgIGxlYXJuX21vcmVfbW9kYWw6IFwiVGVhY2hlciBhY2NvdW50cyBvbiBDb2RlQ29tYmF0IGhhdmUgdGhlIGFiaWxpdHkgdG8gbW9uaXRvciBzdHVkZW50IHByb2dyZXNzLCBhc3NpZ24gbGljZW5zZXMgYW5kIG1hbmFnZSBjbGFzc3Jvb21zLiBUZWFjaGVyIGFjY291bnRzIGNhbm5vdCBiZSBhIHBhcnQgb2YgYSBjbGFzc3Jvb20gLSBpZiB5b3UgYXJlIGN1cnJlbnRseSBlbnJvbGxlZCBpbiBhIGNsYXNzIHVzaW5nIHRoaXMgYWNjb3VudCwgeW91IHdpbGwgbm8gbG9uZ2VyIGJlIGFibGUgdG8gYWNjZXNzIGl0IG9uY2UgeW91IHVwZGF0ZSB0byBhIFRlYWNoZXIgQWNjb3VudC5cIlxuIyAgICBjcmVhdGVfYWNjb3VudDogXCJDcmVhdGUgYSBUZWFjaGVyIEFjY291bnRcIlxuIyAgICBjcmVhdGVfYWNjb3VudF9zdWJ0aXRsZTogXCJHZXQgYWNjZXNzIHRvIHRlYWNoZXItb25seSB0b29scyBmb3IgdXNpbmcgQ29kZUNvbWJhdCBpbiB0aGUgY2xhc3Nyb29tLiAgPHN0cm9uZz5TZXQgdXAgYSBjbGFzczwvc3Ryb25nPiwgYWRkIHlvdXIgc3R1ZGVudHMsIGFuZCA8c3Ryb25nPm1vbml0b3IgdGhlaXIgcHJvZ3Jlc3M8L3N0cm9uZz4hXCJcbiMgICAgY29udmVydF9hY2NvdW50X3RpdGxlOiBcIlVwZGF0ZSB0byBUZWFjaGVyIEFjY291bnRcIlxuIyAgICBub3Q6IFwiTm90XCJcblxuICB2ZXJzaW9uczpcbiAgICBzYXZlX3ZlcnNpb25fdGl0bGU6IFwiTmV1ZSBWZXJzaW9uIHNwZWljaGVyblwiXG4gICAgbmV3X21ham9yX3ZlcnNpb246IFwiTmV1ZSBIYXVwdHZlcnNpb25cIlxuIyAgICBzdWJtaXR0aW5nX3BhdGNoOiBcIlN1Ym1pdHRpbmcgUGF0Y2guLi5cIlxuICAgIGNsYV9wcmVmaXg6IFwiRGFtaXQgw4RuZGVydW5nZW4gZ2VzcGVpY2hlcnQgd2VyZGVuIGvDtm5uZW4sIG11c3N0IGR1IHVuc2VyZSBMaXplbnpiZWRpbmd1bmdlbiAoXCJcbiAgICBjbGFfdXJsOiBcIkNMQVwiXG4gICAgY2xhX3N1ZmZpeDogXCIpIGFremVwdGllcmVuLlwiXG4gICAgY2xhX2FncmVlOiBcIkljaCBzdGltbWUgenVcIlxuIyAgICBvd25lcl9hcHByb3ZlOiBcIkFuIG93bmVyIHdpbGwgbmVlZCB0byBhcHByb3ZlIGl0IGJlZm9yZSB5b3VyIGNoYW5nZXMgd2lsbCBiZWNvbWUgdmlzaWJsZS5cIlxuXG4gIGNvbnRhY3Q6XG4gICAgY29udGFjdF91czogXCJLb250YWt0aWVyZSBDb2RlQ29tYmF0XCJcbiAgICB3ZWxjb21lOiBcIlNjaMO2biB2b24gRGlyIHp1IGjDtnJlbiEgQmVudXR6ZSBkaWVzZXMgRm9ybXVsYXIgdW0gdW5zIGVpbmUgRW1haWwgenUgc2NoaWNrZW4uXCJcbiAgICBmb3J1bV9wcmVmaXg6IFwiRsO8ciBhbGxlIMO2ZmZlbnRsaWNoZW4gVGhlbWVuLCBiZW51dHplIHN0YXR0ZGVzc2VuIFwiXG4gICAgZm9ydW1fcGFnZTogXCJ1bnNlciBGb3J1bVwiXG4gICAgZm9ydW1fc3VmZml4OiBcIi5cIlxuIyAgICBmYXFfcHJlZml4OiBcIlRoZXJlJ3MgYWxzbyBhXCJcbiMgICAgZmFxOiBcIkZBUVwiXG4jICAgIHN1YnNjcmliZV9wcmVmaXg6IFwiSWYgeW91IG5lZWQgaGVscCBmaWd1cmluZyBvdXQgYSBsZXZlbCwgcGxlYXNlXCJcbiMgICAgc3Vic2NyaWJlOiBcImJ1eSBhIENvZGVDb21iYXQgc3Vic2NyaXB0aW9uXCJcbiMgICAgc3Vic2NyaWJlX3N1ZmZpeDogXCJhbmQgd2UnbGwgYmUgaGFwcHkgdG8gaGVscCB5b3Ugd2l0aCB5b3VyIGNvZGUuXCJcbiMgICAgc3Vic2NyaWJlcl9zdXBwb3J0OiBcIlNpbmNlIHlvdSdyZSBhIENvZGVDb21iYXQgc3Vic2NyaWJlciwgeW91ciBlbWFpbCB3aWxsIGdldCBvdXIgcHJpb3JpdHkgc3VwcG9ydC5cIlxuIyAgICBzY3JlZW5zaG90X2luY2x1ZGVkOiBcIlNjcmVlbnNob3QgaW5jbHVkZWQuXCJcbiMgICAgd2hlcmVfcmVwbHk6IFwiV2hlcmUgc2hvdWxkIHdlIHJlcGx5P1wiXG4gICAgc2VuZDogXCJTZW5kZSBGZWVkYmFja1wiXG5cbiAgYWNjb3VudF9zZXR0aW5nczpcbiAgICB0aXRsZTogXCJBY2NvdW50ZWluc3RlbGx1bmdlblwiXG4gICAgbm90X2xvZ2dlZF9pbjogXCJMb2dnZSBEaWNoIGVpbiBvZGVyIGxlZ2UgZWluZW4gQWNjb3VudCBhbiwgdW0gZGVpbmUgRWluc3RlbGx1bmdlbiDDpG5kZXJuIHp1IGvDtm5uZW4uXCJcbiAgICBtZV90YWI6IFwiSWNoXCJcbiAgICBwaWN0dXJlX3RhYjogXCJCaWxkXCJcbiMgICAgZGVsZXRlX2FjY291bnRfdGFiOiBcIkRlbGV0ZSBZb3VyIEFjY291bnRcIlxuIyAgICB3cm9uZ19lbWFpbDogXCJXcm9uZyBFbWFpbFwiXG4jICAgIHdyb25nX3Bhc3N3b3JkOiBcIldyb25nIFBhc3N3b3JkXCJcbiMgICAgdXNlX2dyYXZhdGFyOiBcIkNoYW5nZSB5b3VyIHByb2ZpbGUgcGljdHVyZSBieSBzaWduaW5nIHVwIGZvciBHcmF2YXRhclwiXG4jICAgIGRlbGV0ZV90aGlzX2FjY291bnQ6IFwiRGVsZXRlIHRoaXMgYWNjb3VudCBwZXJtYW5lbnRseVwiXG4jICAgIHJlc2V0X3Byb2dyZXNzX3RhYjogXCJSZXNldCBBbGwgUHJvZ3Jlc3NcIlxuIyAgICByZXNldF95b3VyX3Byb2dyZXNzOiBcIkNsZWFyIGFsbCB5b3VyIHByb2dyZXNzIGFuZCBzdGFydCBvdmVyXCJcbiMgICAgZ29kX21vZGU6IFwiR29kIE1vZGVcIlxuICAgIGVtYWlsc190YWI6IFwiRW1haWxzXCJcbiAgICBhZG1pbjogXCJBZG1pblwiXG4jICAgIG1hbmFnZV9zdWJzY3JpcHRpb246IFwiQ2xpY2sgaGVyZSB0byBtYW5hZ2UgeW91ciBzdWJzY3JpcHRpb24uXCJcbiAgICBuZXdfcGFzc3dvcmQ6IFwiTmV1ZXMgUGFzc3dvcnRcIlxuICAgIG5ld19wYXNzd29yZF92ZXJpZnk6IFwiUGFzc3dvcnQgdmVyaWZpemllcmVuXCJcbiMgICAgdHlwZV9pbl9lbWFpbDogXCJUeXBlIGluIHlvdXIgZW1haWwgb3IgdXNlcm5hbWUgdG8gY29uZmlybSBhY2NvdW50IGRlbGV0aW9uLlwiXG4jICAgIHR5cGVfaW5fZW1haWxfcHJvZ3Jlc3M6IFwiVHlwZSBpbiB5b3VyIGVtYWlsIHRvIGNvbmZpcm0gZGVsZXRpbmcgeW91ciBwcm9ncmVzcy5cIlxuIyAgICB0eXBlX2luX3Bhc3N3b3JkOiBcIkFsc28sIHR5cGUgaW4geW91ciBwYXNzd29yZC5cIlxuICAgIGVtYWlsX3N1YnNjcmlwdGlvbnM6IFwiRW1haWwgQWJvbm5lbWVudHNcIlxuICAgIGVtYWlsX3N1YnNjcmlwdGlvbnNfbm9uZTogXCJLZWluZSBFbWFpbCBBYm9ubmVtZW50cy5cIlxuICAgIGVtYWlsX2Fubm91bmNlbWVudHM6IFwiQW5rw7xuZGlndW5nZW5cIlxuICAgIGVtYWlsX2Fubm91bmNlbWVudHNfZGVzY3JpcHRpb246IFwiRXJoYWx0ZSByZWdlbG3DpMOfaWcgQW5rw7xuZGlndW5nZW4genUgZGVpbmVtIEFjY291bnQuXCJcbiAgICBlbWFpbF9ub3RpZmljYXRpb25zOiBcIkJlbmFjaHJpY2h0aWd1bmdlblwiXG4gICAgZW1haWxfbm90aWZpY2F0aW9uc19zdW1tYXJ5OiBcIlN0ZXVlcnVuZyBmw7xyIHBlcnNvbmFsaXNpZXJ0ZSwgYXV0b21hdGlzY2hlIEVtYWlsYmVuYWNocmljaHRpZ3VuZ2VuIGltIFp1c2FtbWVuaGFuZyBtaXQgZGVpbmVyIENvZGVDb21iYXQgQWt0aXZpdMOkdC5cIlxuICAgIGVtYWlsX2FueV9ub3RlczogXCJKZWdsaWNoZSBCZW5hY2hyaWNodHVuZ2VuXCJcbiAgICBlbWFpbF9hbnlfbm90ZXNfZGVzY3JpcHRpb246IFwiRGVha3RpdmllcmVuIHVtIGFsbGUgYWt0aXZlbiBCZW5hY2hyaWNodGlndW5nZW4genUgc3RvcHBlbi5cIlxuICAgIGVtYWlsX25ld3M6IFwiTmV3c1wiXG4gICAgZW1haWxfcmVjcnVpdF9ub3RlczogXCJKb2ItQW5nZWJvdGVcIlxuICAgIGVtYWlsX3JlY3J1aXRfbm90ZXNfZGVzY3JpcHRpb246IFwiV2VubiBkdSBiZXNvbmRlcnMgZ3V0IHNwaWVsc3QsIHdlcmRlbiB3aXIgZGljaCBldnRsLiBrb250YWt0aWVyZW4gdW0gZGlyIGVpbmVuIChiZXNzZXJlbikgSm9iIHp1IHN1Y2hlbi5cIlxuICAgIGNvbnRyaWJ1dG9yX2VtYWlsczogXCJVbnRlcnN0w7x0emVyIEVtYWlsXCJcbiAgICBjb250cmlidXRlX3ByZWZpeDogXCJXaXIgc3VjaGVuIG5hY2ggTGV1dGVuLCBkaWUgbWl0bWFjaGVuISBTY2hhdSBkaXIgZGllXCJcbiAgICBjb250cmlidXRlX3BhZ2U6IFwiVW50ZXJzdMO8dHplciBTZWl0ZVwiXG4gICAgY29udHJpYnV0ZV9zdWZmaXg6IFwiIGFuIHVtIG1laHIgenUgZXJmYWhyZW4uXCJcbiAgICBlbWFpbF90b2dnbGU6IFwiQWxsZXMgd8OkaGxlblwiXG4gICAgZXJyb3Jfc2F2aW5nOiBcIkZlaGxlciBiZWltIFNwZWljaGVyblwiXG4gICAgc2F2ZWQ6IFwiw4RuZGVydW5nZW4gZ2VzcGVpY2hlcnRcIlxuICAgIHBhc3N3b3JkX21pc21hdGNoOiBcIlBhc3N3w7ZydGVyIHN0aW1tZW4gbmljaHQgw7xiZXJlaW4uXCJcbiAgICBwYXNzd29yZF9yZXBlYXQ6IFwiQml0dGUgd2llZGVyaG9sZSBkZWluIFBhc3N3b3J0LlwiXG5cbiAga2V5Ym9hcmRfc2hvcnRjdXRzOlxuICAgIGtleWJvYXJkX3Nob3J0Y3V0czogXCJUYXN0YXR1cmvDvHJ6ZWxcIlxuICAgIHNwYWNlOiBcIkxlZXJ0YXN0ZVwiXG4gICAgZW50ZXI6IFwiRWluZ2FiZXRhc3RlXCJcbiMgICAgcHJlc3NfZW50ZXI6IFwicHJlc3MgZW50ZXJcIlxuICAgIGVzY2FwZTogXCJFc2NhcGVcIlxuICAgIHNoaWZ0OiBcIlVtc2NoYWx0dGFzdGVcIlxuIyAgICBydW5fY29kZTogXCJSdW4gY3VycmVudCBjb2RlLlwiXG4gICAgcnVuX3JlYWxfdGltZTogXCJGw7xocmUgaW4gRWNodHplaXQgYXVzLlwiXG4gICAgY29udGludWVfc2NyaXB0OiBcIlNldHplIG5hY2ggYWt0dWVsbGVubSBTa3JpcHQgZm9ydC5cIlxuICAgIHNraXBfc2NyaXB0czogXCLDnGJlcnNwcmluZ2UgYWxsZSDDvGJlcnNwcmluZ2JhcmVuIFNrcmlwdGUuXCJcbiAgICB0b2dnbGVfcGxheWJhY2s6IFwiVW1zY2hhbHRlbiBQbGF5L1BhdXNlLlwiXG4gICAgc2NydWJfcGxheWJhY2s6IFwiU2NydWJiZSB2b3IgdW5kIHp1csO8Y2sgZHVyY2ggZGllIFplaXQuXCJcbiAgICBzaW5nbGVfc2NydWJfcGxheWJhY2s6IFwiU2NydWJiZSBlaW4gRnJhbWUgdm9yIHVuZCB6dXLDvGNrIGR1cmNoIGRpZSBaZWl0LlwiXG4gICAgc2NydWJfZXhlY3V0aW9uOiBcIlNjcnViYmUgZHVyY2ggZGllIGFrdHVlbGxlIFphdWJlcnNwcnVjaC1BdXNmw7xocnVuZy5cIlxuICAgIHRvZ2dsZV9kZWJ1ZzogXCJEZWJ1Zy1BbnplaWdlIGFuL2F1cy5cIlxuICAgIHRvZ2dsZV9ncmlkOiBcIkdyaWQtT3ZlcmxheSBhbi9hdXMuXCJcbiAgICB0b2dnbGVfcGF0aGZpbmRpbmc6IFwiV2VnZmluZHVuZ3MtT3ZlcmxheSBhbi9hdXMuXCJcbiAgICBiZWF1dGlmeTogXCJWZXJzY2jDtm5lcmUgZGVpbmVuIENvZGUgZHVyY2ggZGllIFN0YW5kYXJkaXNpZXJ1bmcgZGVyIEZvcm1hdGllcnVuZy5cIlxuICAgIG1heGltaXplX2VkaXRvcjogXCJNYXhpbWllcmUvTWluaW1pZXJlIENvZGUgRWRpdG9yLlwiXG5cbiAgY29tbXVuaXR5OlxuICAgIG1haW5fdGl0bGU6IFwiQ29kZUNvbWJhdCBDb21tdW5pdHlcIlxuICAgIGludHJvZHVjdGlvbjogXCJTY2hhdWUgZGlyIHVudGVuIGRpZSBNw7ZnbGljaGtlaXRlbiB3aWUgZHUgbWl0d2lya2VuIGthbm5zdCB1bmQgZW50c2NoZWlkZSB3YXMgZGlyIGFtIG1laXN0ZW4gU3Bhc3MgbWFjaHQuIFdpciBmcmV1ZW4gdW5zIGF1ZiBkaWUgWnVzYW1tZW5hcmJlaXQgbWl0IGRpciFcIlxuICAgIGxldmVsX2VkaXRvcl9wcmVmaXg6IFwiQmVudXR6ZSBkZW4gQ29kZUNvbWJhdFwiXG4gICAgbGV2ZWxfZWRpdG9yX3N1ZmZpeDogXCJ1bSBMZXZlbCB6dSBlcnN0ZWxsZW4gb2RlciB6dSBiZWFyYmVpdGVuLiBCZW51dHplciBoYWJlbiBiZXJlaXRzIExldmVsIGbDvHIgaWhyZSBLbGFzc2VuLCBGcmV1bmRlLCBIYWNrYXRob25zLCBTY2jDvGxlciB1bmQgR2VzY2h3aXN0ZXIgZXJzdGVsbHQuIFdlbm4gZGFzIE5ldWVyc3RlbGxlbiBlaW5lcyBMZXZlbHMgYWJzY2hyZWNrZW5kIHdpcmt0LCBkYW5uIGthbm5zdCBkdSBlcnN0bWFsIGVpbiBiZXN0ZWhlbmRlcyBrb3BpZXJlbiFcIlxuICAgIHRoYW5nX2VkaXRvcl9wcmVmaXg6IFwiV2lyIG5lbm5lbiBFaW5oZWl0ZW4gaW5uZXJoYWxiIGRlcyBTcGllbHMgJ1RoYW5ncycuIEJlbnV0emUgZGVuXCJcbiMgICAgdGhhbmdfZWRpdG9yX3N1ZmZpeDogXCJ0byBtb2RpZnkgdGhlIENvZGVDb21iYXQgc291cmNlIGFydHdvcmsuIEFsbG93IHVuaXRzIHRvIHRocm93IHByb2plY3RpbGVzLCBhbHRlciB0aGUgZGlyZWN0aW9uIG9mIGFuIGFuaW1hdGlvbiwgY2hhbmdlIGEgdW5pdCdzIGhpdCBwb2ludHMsIG9yIHVwbG9hZCB5b3VyIG93biB2ZWN0b3Igc3ByaXRlcy5cIlxuICAgIGFydGljbGVfZWRpdG9yX3ByZWZpeDogXCJIYXN0IGR1IGVpbmVuIEZlaGxlciBpbiB1bnNlcmVuIERva3VzIGdlZnVuZGVuPyBXaWxsc3QgZHUgQW5sZWl0dW5nZW4gZsO8ciBkZWluZSBLcmVhdGlvbmVuIGVyc3RlbGxlbj8gU2NoYXUgZGlyIGRlblwiXG4gICAgYXJ0aWNsZV9lZGl0b3Jfc3VmZml4OiBcInVuZCBoaWxmIENvZGVDb21iYXQgU3BpZWxlcm4gZGFzIG1laXN0ZSBhdXMgaWhyZXIgU3BpZWx6ZWl0IGhlcmF1cyB6dSBiZWtvbW1lbi5cIlxuICAgIGZpbmRfdXM6IFwiRmluZGUgdW5zIGF1ZiBkaWVzZW4gU2VpdGVuXCJcbiMgICAgc29jaWFsX2dpdGh1YjogXCJDaGVjayBvdXQgYWxsIG91ciBjb2RlIG9uIEdpdEh1YlwiXG4gICAgc29jaWFsX2Jsb2c6IFwiTGVzZSBkZW4gQ29kZUNvbWJhdCBCbG9nIGF1ZiBTZXR0XCJcbiAgICBzb2NpYWxfZGlzY291cmNlOiBcIlNjaGxpZcOfZSBkaWNoIGRlbiBEaXNrdXNzaW9uZW4gaW4gdW5zZXJlbSBEaXNjb3Vyc2UgRm9ydW0gYW5cIlxuICAgIHNvY2lhbF9mYWNlYm9vazogXCJMaWtlIENvZGVDb21iYXQgYXVmIEZhY2Vib29rXCJcbiAgICBzb2NpYWxfdHdpdHRlcjogXCJGb2xnZSBDb2RlQ29tYmF0IGF1ZiBUd2l0dGVyXCJcbiAgICBzb2NpYWxfZ3BsdXM6IFwiU2NobGllw59lIGRpY2ggQ29kZUNvbWJhdCBiZWkgR29vZ2xlKyBhblwiXG4jICAgIHNvY2lhbF9zbGFjazogXCJDaGF0IHdpdGggdXMgaW4gdGhlIHB1YmxpYyBDb2RlQ29tYmF0IFNsYWNrIGNoYW5uZWxcIlxuICAgIGNvbnRyaWJ1dGVfdG9fdGhlX3Byb2plY3Q6IFwiVHJhZ2UgenUgZGllc2VtIFByb2pla3QgYmVpXCJcblxuIyAgY2xhbnM6XG4jICAgIGNsYW46IFwiQ2xhblwiXG4jICAgIGNsYW5zOiBcIkNsYW5zXCJcbiMgICAgbmV3X25hbWU6IFwiTmV3IGNsYW4gbmFtZVwiXG4jICAgIG5ld19kZXNjcmlwdGlvbjogXCJOZXcgY2xhbiBkZXNjcmlwdGlvblwiXG4jICAgIG1ha2VfcHJpdmF0ZTogXCJNYWtlIGNsYW4gcHJpdmF0ZVwiXG4jICAgIHN1YnNfb25seTogXCJzdWJzY3JpYmVycyBvbmx5XCJcbiMgICAgY3JlYXRlX2NsYW46IFwiQ3JlYXRlIE5ldyBDbGFuXCJcbiMgICAgcHJpdmF0ZV9wcmV2aWV3OiBcIlByZXZpZXdcIlxuIyAgICBwcml2YXRlX2NsYW5zOiBcIlByaXZhdGUgQ2xhbnNcIlxuIyAgICBwdWJsaWNfY2xhbnM6IFwiUHVibGljIENsYW5zXCJcbiMgICAgbXlfY2xhbnM6IFwiTXkgQ2xhbnNcIlxuIyAgICBjbGFuX25hbWU6IFwiQ2xhbiBOYW1lXCJcbiMgICAgbmFtZTogXCJOYW1lXCJcbiMgICAgY2hpZWZ0YWluOiBcIkNoaWVmdGFpblwiXG4jICAgIGVkaXRfY2xhbl9uYW1lOiBcIkVkaXQgQ2xhbiBOYW1lXCJcbiMgICAgZWRpdF9jbGFuX2Rlc2NyaXB0aW9uOiBcIkVkaXQgQ2xhbiBEZXNjcmlwdGlvblwiXG4jICAgIGVkaXRfbmFtZTogXCJlZGl0IG5hbWVcIlxuIyAgICBlZGl0X2Rlc2NyaXB0aW9uOiBcImVkaXQgZGVzY3JpcHRpb25cIlxuIyAgICBwcml2YXRlOiBcIihwcml2YXRlKVwiXG4jICAgIHN1bW1hcnk6IFwiU3VtbWFyeVwiXG4jICAgIGF2ZXJhZ2VfbGV2ZWw6IFwiQXZlcmFnZSBMZXZlbFwiXG4jICAgIGF2ZXJhZ2VfYWNoaWV2ZW1lbnRzOiBcIkF2ZXJhZ2UgQWNoaWV2ZW1lbnRzXCJcbiMgICAgZGVsZXRlX2NsYW46IFwiRGVsZXRlIENsYW5cIlxuIyAgICBsZWF2ZV9jbGFuOiBcIkxlYXZlIENsYW5cIlxuIyAgICBqb2luX2NsYW46IFwiSm9pbiBDbGFuXCJcbiMgICAgaW52aXRlXzE6IFwiSW52aXRlOlwiXG4jICAgIGludml0ZV8yOiBcIipJbnZpdGUgcGxheWVycyB0byB0aGlzIENsYW4gYnkgc2VuZGluZyB0aGVtIHRoaXMgbGluay5cIlxuIyAgICBtZW1iZXJzOiBcIk1lbWJlcnNcIlxuIyAgICBwcm9ncmVzczogXCJQcm9ncmVzc1wiXG4jICAgIG5vdF9zdGFydGVkXzE6IFwibm90IHN0YXJ0ZWRcIlxuIyAgICBzdGFydGVkXzE6IFwic3RhcnRlZFwiXG4jICAgIGNvbXBsZXRlXzE6IFwiY29tcGxldGVcIlxuIyAgICBleHBfbGV2ZWxzOiBcIkV4cGFuZCBsZXZlbHNcIlxuIyAgICByZW1faGVybzogXCJSZW1vdmUgSGVyb1wiXG4jICAgIHN0YXR1czogXCJTdGF0dXNcIlxuIyAgICBjb21wbGV0ZV8yOiBcIkNvbXBsZXRlXCJcbiMgICAgc3RhcnRlZF8yOiBcIlN0YXJ0ZWRcIlxuIyAgICBub3Rfc3RhcnRlZF8yOiBcIk5vdCBTdGFydGVkXCJcbiMgICAgdmlld19zb2x1dGlvbjogXCJDbGljayB0byB2aWV3IHNvbHV0aW9uLlwiXG4jICAgIHZpZXdfYXR0ZW1wdDogXCJDbGljayB0byB2aWV3IGF0dGVtcHQuXCJcbiMgICAgbGF0ZXN0X2FjaGlldmVtZW50OiBcIkxhdGVzdCBBY2hpZXZlbWVudFwiXG4jICAgIHBsYXl0aW1lOiBcIlBsYXl0aW1lXCJcbiMgICAgbGFzdF9wbGF5ZWQ6IFwiTGFzdCBwbGF5ZWRcIlxuIyAgICBsZWFndWVzX2V4cGxhbmF0aW9uOiBcIlBsYXkgaW4gYSBsZWFndWUgYWdhaW5zdCBvdGhlciBjbGFuIG1lbWJlcnMgaW4gdGhlc2UgbXVsdGlwbGF5ZXIgYXJlbmEgaW5zdGFuY2VzLlwiXG4jICAgIHRyYWNrX2NvbmNlcHRzMTogXCJUcmFjayBjb25jZXB0c1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzMmE6IFwibGVhcm5lZCBieSBlYWNoIHN0dWRlbnRcIlxuIyAgICB0cmFja19jb25jZXB0czJiOiBcImxlYXJuZWQgYnkgZWFjaCBtZW1iZXJcIlxuIyAgICB0cmFja19jb25jZXB0czNhOiBcIlRyYWNrIGxldmVscyBjb21wbGV0ZWQgZm9yIGVhY2ggc3R1ZGVudFwiXG4jICAgIHRyYWNrX2NvbmNlcHRzM2I6IFwiVHJhY2sgbGV2ZWxzIGNvbXBsZXRlZCBmb3IgZWFjaCBtZW1iZXJcIlxuIyAgICB0cmFja19jb25jZXB0czRhOiBcIlNlZSB5b3VyIHN0dWRlbnRzJ1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzNGI6IFwiU2VlIHlvdXIgbWVtYmVycydcIlxuIyAgICB0cmFja19jb25jZXB0czU6IFwic29sdXRpb25zXCJcbiMgICAgdHJhY2tfY29uY2VwdHM2YTogXCJTb3J0IHN0dWRlbnRzIGJ5IG5hbWUgb3IgcHJvZ3Jlc3NcIlxuIyAgICB0cmFja19jb25jZXB0czZiOiBcIlNvcnQgbWVtYmVycyBieSBuYW1lIG9yIHByb2dyZXNzXCJcbiMgICAgdHJhY2tfY29uY2VwdHM3OiBcIlJlcXVpcmVzIGludml0YXRpb25cIlxuIyAgICB0cmFja19jb25jZXB0czg6IFwidG8gam9pblwiXG4jICAgIHByaXZhdGVfcmVxdWlyZV9zdWI6IFwiUHJpdmF0ZSBjbGFucyByZXF1aXJlIGEgc3Vic2NyaXB0aW9uIHRvIGNyZWF0ZSBvciBqb2luLlwiXG5cbiMgIGNvdXJzZXM6XG4jICAgIGNyZWF0ZV9uZXdfY2xhc3M6IFwiQ3JlYXRlIE5ldyBDbGFzc1wiXG4jICAgIHNvbHV0aW9uc19yZXF1aXJlX2xpY2Vuc2VzOiBcIkxldmVsIHNvbHV0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB0ZWFjaGVycyB3aG8gaGF2ZSBsaWNlbnNlcy5cIlxuIyAgICB1bm5hbWVkX2NsYXNzOiBcIlVubmFtZWQgQ2xhc3NcIlxuIyAgICBlZGl0X3NldHRpbmdzMTogXCJFZGl0IENsYXNzIFNldHRpbmdzXCJcbiMgICAgYWRkX3N0dWRlbnRzOiBcIkFkZCBTdHVkZW50c1wiXG4jICAgIHN0YXRzOiBcIlN0YXRpc3RpY3NcIlxuIyAgICBzdHVkZW50X2VtYWlsX2ludml0ZV9ibHVyYjogXCJZb3VyIHN0dWRlbnRzIGNhbiBhbHNvIHVzZSBjbGFzcyBjb2RlIDxzdHJvbmc+X19jbGFzc0NvZGVfXzwvc3Ryb25nPiB3aGVuIGNyZWF0aW5nIGEgU3R1ZGVudCBBY2NvdW50LCBubyBlbWFpbCByZXF1aXJlZC5cIlxuIyAgICB0b3RhbF9zdHVkZW50czogXCJUb3RhbCBzdHVkZW50czpcIlxuIyAgICBhdmVyYWdlX3RpbWU6IFwiQXZlcmFnZSBsZXZlbCBwbGF5IHRpbWU6XCJcbiMgICAgdG90YWxfdGltZTogXCJUb3RhbCBwbGF5IHRpbWU6XCJcbiMgICAgYXZlcmFnZV9sZXZlbHM6IFwiQXZlcmFnZSBsZXZlbHMgY29tcGxldGVkOlwiXG4jICAgIHRvdGFsX2xldmVsczogXCJUb3RhbCBsZXZlbHMgY29tcGxldGVkOlwiXG4jICAgIHN0dWRlbnRzOiBcIlN0dWRlbnRzXCJcbiMgICAgY29uY2VwdHM6IFwiQ29uY2VwdHNcIlxuIyAgICBwbGF5X3RpbWU6IFwiUGxheSB0aW1lOlwiXG4jICAgIGNvbXBsZXRlZDogXCJDb21wbGV0ZWQ6XCJcbiMgICAgZW50ZXJfZW1haWxzOiBcIlNlcGFyYXRlIGVhY2ggZW1haWwgYWRkcmVzcyBieSBhIGxpbmUgYnJlYWsgb3IgY29tbWFzXCJcbiMgICAgc2VuZF9pbnZpdGVzOiBcIkludml0ZSBTdHVkZW50c1wiXG4jICAgIG51bWJlcl9wcm9ncmFtbWluZ19zdHVkZW50czogXCJOdW1iZXIgb2YgUHJvZ3JhbW1pbmcgU3R1ZGVudHNcIlxuIyAgICBudW1iZXJfdG90YWxfc3R1ZGVudHM6IFwiVG90YWwgU3R1ZGVudHMgaW4gU2Nob29sL0Rpc3RyaWN0XCJcbiMgICAgZW5yb2xsOiBcIkVucm9sbFwiXG4jICAgIGVucm9sbF9wYWlkOiBcIkVucm9sbCBTdHVkZW50cyBpbiBQYWlkIENvdXJzZXNcIlxuIyAgICBnZXRfZW5yb2xsbWVudHM6IFwiR2V0IE1vcmUgTGljZW5zZXNcIlxuIyAgICBjaGFuZ2VfbGFuZ3VhZ2U6IFwiQ2hhbmdlIENvdXJzZSBMYW5ndWFnZVwiXG4jICAgIGtlZXBfdXNpbmc6IFwiS2VlcCBVc2luZ1wiXG4jICAgIHN3aXRjaF90bzogXCJTd2l0Y2ggVG9cIlxuIyAgICBncmVldGluZ3M6IFwiR3JlZXRpbmdzIVwiXG4jICAgIGJhY2tfY2xhc3Nyb29tczogXCJCYWNrIHRvIG15IGNsYXNzcm9vbXNcIlxuIyAgICBiYWNrX2NsYXNzcm9vbTogXCJCYWNrIHRvIGNsYXNzcm9vbVwiXG4jICAgIGJhY2tfY291cnNlczogXCJCYWNrIHRvIG15IGNvdXJzZXNcIlxuIyAgICBlZGl0X2RldGFpbHM6IFwiRWRpdCBjbGFzcyBkZXRhaWxzXCJcbiMgICAgcHVyY2hhc2VfZW5yb2xsbWVudHM6IFwiUHVyY2hhc2UgU3R1ZGVudCBMaWNlbnNlc1wiXG4jICAgIHJlbW92ZV9zdHVkZW50OiBcInJlbW92ZSBzdHVkZW50XCJcbiMgICAgYXNzaWduOiBcIkFzc2lnblwiXG4jICAgIHRvX2Fzc2lnbjogXCJ0byBhc3NpZ24gcGFpZCBjb3Vyc2VzLlwiXG4jICAgIHN0dWRlbnQ6IFwiU3R1ZGVudFwiXG4jICAgIHRlYWNoZXI6IFwiVGVhY2hlclwiXG4jICAgIGFyZW5hOiBcIkFyZW5hXCJcbiMgICAgYXZhaWxhYmxlX2xldmVsczogXCJBdmFpbGFibGUgTGV2ZWxzXCJcbiMgICAgc3RhcnRlZDogXCJzdGFydGVkXCJcbiMgICAgY29tcGxldGU6IFwiY29tcGxldGVcIlxuIyAgICBwcmFjdGljZTogXCJwcmFjdGljZVwiXG4jICAgIHJlcXVpcmVkOiBcInJlcXVpcmVkXCJcbiMgICAgd2VsY29tZV90b19jb3Vyc2VzOiBcIkFkdmVudHVyZXJzLCB3ZWxjb21lIHRvIENvdXJzZXMhXCJcbiMgICAgcmVhZHlfdG9fcGxheTogXCJSZWFkeSB0byBwbGF5P1wiXG4jICAgIHN0YXJ0X25ld19nYW1lOiBcIlN0YXJ0IE5ldyBHYW1lXCJcbiMgICAgcGxheV9ub3dfbGVhcm5faGVhZGVyOiBcIlBsYXkgbm93IHRvIGxlYXJuXCJcbiMgICAgcGxheV9ub3dfbGVhcm5fMTogXCJiYXNpYyBzeW50YXggdG8gY29udHJvbCB5b3VyIGNoYXJhY3RlclwiXG4jICAgIHBsYXlfbm93X2xlYXJuXzI6IFwid2hpbGUgbG9vcHMgdG8gc29sdmUgcGVza3kgcHV6emxlc1wiXG4jICAgIHBsYXlfbm93X2xlYXJuXzM6IFwic3RyaW5ncyAmIHZhcmlhYmxlcyB0byBjdXN0b21pemUgYWN0aW9uc1wiXG4jICAgIHBsYXlfbm93X2xlYXJuXzQ6IFwiaG93IHRvIGRlZmVhdCBhbiBvZ3JlIChpbXBvcnRhbnQgbGlmZSBza2lsbHMhKVwiXG4jICAgIHdlbGNvbWVfdG9fcGFnZTogXCJNeSBTdHVkZW50IERhc2hib2FyZFwiXG4jICAgIG15X2NsYXNzZXM6IFwiQ3VycmVudCBDbGFzc2VzXCJcbiMgICAgY2xhc3NfYWRkZWQ6IFwiQ2xhc3Mgc3VjY2Vzc2Z1bGx5IGFkZGVkIVwiXG4jICAgIHZpZXdfbGV2ZWxzOiBcInZpZXcgYWxsIGxldmVsc1wiXG4jICAgIHZpZXdfcHJvamVjdF9nYWxsZXJ5OiBcInZpZXcgbXkgY2xhc3NtYXRlcycgcHJvamVjdHNcIlxuIyAgICBqb2luX2NsYXNzOiBcIkpvaW4gQSBDbGFzc1wiXG4jICAgIGpvaW5fY2xhc3NfMjogXCJKb2luIGNsYXNzXCJcbiMgICAgYXNrX3RlYWNoZXJfZm9yX2NvZGU6IFwiQXNrIHlvdXIgdGVhY2hlciBpZiB5b3UgaGF2ZSBhIENvZGVDb21iYXQgY2xhc3MgY29kZSEgSWYgc28sIGVudGVyIGl0IGJlbG93OlwiXG4jICAgIGVudGVyX2NfY29kZTogXCI8RW50ZXIgQ2xhc3MgQ29kZT5cIlxuIyAgICBqb2luOiBcIkpvaW5cIlxuIyAgICBqb2luaW5nOiBcIkpvaW5pbmcgY2xhc3NcIlxuIyAgICBjb3Vyc2VfY29tcGxldGU6IFwiQ291cnNlIENvbXBsZXRlXCJcbiMgICAgcGxheV9hcmVuYTogXCJQbGF5IEFyZW5hXCJcbiMgICAgdmlld19wcm9qZWN0OiBcIlZpZXcgUHJvamVjdFwiXG4jICAgIHN0YXJ0OiBcIlN0YXJ0XCJcbiMgICAgbGFzdF9sZXZlbDogXCJMYXN0IGxldmVsIHBsYXllZFwiXG4jICAgIG5vdF95b3U6IFwiTm90IHlvdT9cIlxuIyAgICBjb250aW51ZV9wbGF5aW5nOiBcIkNvbnRpbnVlIFBsYXlpbmdcIlxuIyAgICBvcHRpb24xX2hlYWRlcjogXCJJbnZpdGUgU3R1ZGVudHMgYnkgRW1haWxcIlxuIyAgICByZW1vdmVfc3R1ZGVudDE6IFwiUmVtb3ZlIFN0dWRlbnRcIlxuIyAgICBhcmVfeW91X3N1cmU6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIHN0dWRlbnQgZnJvbSB0aGlzIGNsYXNzP1wiXG4jICAgIHJlbW92ZV9kZXNjcmlwdGlvbjE6IFwiU3R1ZGVudCB3aWxsIGxvc2UgYWNjZXNzIHRvIHRoaXMgY2xhc3Nyb29tIGFuZCBhc3NpZ25lZCBjbGFzc2VzLiBQcm9ncmVzcyBhbmQgZ2FtZXBsYXkgaXMgTk9UIGxvc3QsIGFuZCB0aGUgc3R1ZGVudCBjYW4gYmUgYWRkZWQgYmFjayB0byB0aGUgY2xhc3Nyb29tIGF0IGFueSB0aW1lLlwiXG4jICAgIHJlbW92ZV9kZXNjcmlwdGlvbjI6IFwiVGhlIGFjdGl2YXRlZCBwYWlkIGxpY2Vuc2Ugd2lsbCBub3QgYmUgcmV0dXJuZWQuXCJcbiMgICAgbGljZW5zZV93aWxsX3Jldm9rZTogXCJUaGlzIHN0dWRlbnQncyBwYWlkIGxpY2Vuc2Ugd2lsbCBiZSByZXZva2VkIGFuZCBtYWRlIGF2YWlsYWJsZSB0byBhc3NpZ24gdG8gYW5vdGhlciBzdHVkZW50LlwiXG4jICAgIGtlZXBfc3R1ZGVudDogXCJLZWVwIFN0dWRlbnRcIlxuIyAgICByZW1vdmluZ191c2VyOiBcIlJlbW92aW5nIHVzZXJcIlxuIyAgICBzdWJ0aXRsZTogXCJSZXZpZXcgY291cnNlIG92ZXJ2aWV3cyBhbmQgbGV2ZWxzXCIgIyBGbGF0IHN0eWxlIHJlZGVzaWduXG4jICAgIGNoYW5nZWxvZzogXCJWaWV3IGxhdGVzdCBjaGFuZ2VzIHRvIGNvdXJzZSBsZXZlbHMuXCJcbiMgICAgc2VsZWN0X2xhbmd1YWdlOiBcIlNlbGVjdCBsYW5ndWFnZVwiXG4jICAgIHNlbGVjdF9sZXZlbDogXCJTZWxlY3QgbGV2ZWxcIlxuIyAgICBwbGF5X2xldmVsOiBcIlBsYXkgTGV2ZWxcIlxuIyAgICBjb25jZXB0c19jb3ZlcmVkOiBcIkNvbmNlcHRzIGNvdmVyZWRcIlxuIyAgICB2aWV3X2d1aWRlX29ubGluZTogXCJMZXZlbCBPdmVydmlld3MgYW5kIFNvbHV0aW9uc1wiXG4jICAgIGdyYW50c19saWZldGltZV9hY2Nlc3M6IFwiR3JhbnRzIGFjY2VzcyB0byBhbGwgQ291cnNlcy5cIlxuIyAgICBlbnJvbGxtZW50X2NyZWRpdHNfYXZhaWxhYmxlOiBcIkxpY2Vuc2VzIEF2YWlsYWJsZTpcIlxuIyAgICBsYW5ndWFnZV9zZWxlY3Q6IFwiU2VsZWN0IGEgbGFuZ3VhZ2VcIiAjIENsYXNzcm9vbVNldHRpbmdzTW9kYWxcbiMgICAgbGFuZ3VhZ2VfY2Fubm90X2NoYW5nZTogXCJMYW5ndWFnZSBjYW5ub3QgYmUgY2hhbmdlZCBvbmNlIHN0dWRlbnRzIGpvaW4gYSBjbGFzcy5cIlxuIyAgICBhdmdfc3R1ZGVudF9leHBfbGFiZWw6IFwiQXZlcmFnZSBTdHVkZW50IFByb2dyYW1taW5nIEV4cGVyaWVuY2VcIlxuIyAgICBhdmdfc3R1ZGVudF9leHBfZGVzYzogXCJUaGlzIHdpbGwgaGVscCB1cyB1bmRlcnN0YW5kIGhvdyB0byBwYWNlIGNvdXJzZXMgYmV0dGVyLlwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9zZWxlY3Q6IFwiU2VsZWN0IHRoZSBiZXN0IG9wdGlvblwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9ub25lOiBcIk5vIEV4cGVyaWVuY2UgLSBsaXR0bGUgdG8gbm8gZXhwZXJpZW5jZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9iZWdpbm5lcjogXCJCZWdpbm5lciAtIHNvbWUgZXhwb3N1cmUgb3IgYmxvY2stYmFzZWRcIlxuIyAgICBhdmdfc3R1ZGVudF9leHBfaW50ZXJtZWRpYXRlOiBcIkludGVybWVkaWF0ZSAtIHNvbWUgZXhwZXJpZW5jZSB3aXRoIHR5cGVkIGNvZGVcIlxuIyAgICBhdmdfc3R1ZGVudF9leHBfYWR2YW5jZWQ6IFwiQWR2YW5jZWQgLSBleHRlbnNpdmUgZXhwZXJpZW5jZSB3aXRoIHR5cGVkIGNvZGVcIlxuIyAgICBhdmdfc3R1ZGVudF9leHBfdmFyaWVkOiBcIlZhcmllZCBMZXZlbHMgb2YgRXhwZXJpZW5jZVwiXG4jICAgIHN0dWRlbnRfYWdlX3JhbmdlX2xhYmVsOiBcIlN0dWRlbnQgQWdlIFJhbmdlXCJcbiMgICAgc3R1ZGVudF9hZ2VfcmFuZ2VfeW91bmdlcjogXCJZb3VuZ2VyIHRoYW4gNlwiXG4jICAgIHN0dWRlbnRfYWdlX3JhbmdlX29sZGVyOiBcIk9sZGVyIHRoYW4gMThcIlxuIyAgICBzdHVkZW50X2FnZV9yYW5nZV90bzogXCJ0b1wiXG4jICAgIGNyZWF0ZV9jbGFzczogXCJDcmVhdGUgQ2xhc3NcIlxuIyAgICBjbGFzc19uYW1lOiBcIkNsYXNzIE5hbWVcIlxuIyAgICB0ZWFjaGVyX2FjY291bnRfcmVzdHJpY3RlZDogXCJZb3VyIGFjY291bnQgaXMgYSB0ZWFjaGVyIGFjY291bnQgYW5kIGNhbm5vdCBhY2Nlc3Mgc3R1ZGVudCBjb250ZW50LlwiXG4jICAgIGFjY291bnRfcmVzdHJpY3RlZDogXCJBIHN0dWRlbnQgYWNjb3VudCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyBwYWdlLlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2xvZ2luX3RpdGxlOiBcIkxvZyBpbiB0byB1cGRhdGUgeW91ciBhY2NvdW50XCJcbiMgICAgdXBkYXRlX2FjY291bnRfdGl0bGU6IFwiWW91ciBhY2NvdW50IG5lZWRzIGF0dGVudGlvbiFcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9ibHVyYjogXCJCZWZvcmUgeW91IGNhbiBhY2Nlc3MgeW91ciBjbGFzc2VzLCBjaG9vc2UgaG93IHlvdSB3YW50IHRvIHVzZSB0aGlzIGFjY291bnQuXCJcbiMgICAgdXBkYXRlX2FjY291bnRfY3VycmVudF90eXBlOiBcIkN1cnJlbnQgQWNjb3VudCBUeXBlOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2FjY291bnRfZW1haWw6IFwiQWNjb3VudCBFbWFpbC9Vc2VybmFtZTpcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9hbV90ZWFjaGVyOiBcIkkgYW0gYSB0ZWFjaGVyXCJcbiMgICAgdXBkYXRlX2FjY291bnRfa2VlcF9hY2Nlc3M6IFwiS2VlcCBhY2Nlc3MgdG8gY2xhc3NlcyBJJ3ZlIGNyZWF0ZWRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW46IFwiVGVhY2hlciBhY2NvdW50cyBjYW46XCJcbiMgICAgdXBkYXRlX2FjY291bnRfdGVhY2hlcnNfY2FuMTogXCJDcmVhdGUvbWFuYWdlL2FkZCBjbGFzc2VzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfdGVhY2hlcnNfY2FuMjogXCJBc3NpZ24vZW5yb2xsIHN0dWRlbnRzIGluIGNvdXJzZXNcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW4zOiBcIlVubG9jayBhbGwgY291cnNlIGxldmVscyB0byB0cnkgb3V0XCJcbiMgICAgdXBkYXRlX2FjY291bnRfdGVhY2hlcnNfY2FuNDogXCJBY2Nlc3MgbmV3IHRlYWNoZXItb25seSBmZWF0dXJlcyBhcyB3ZSByZWxlYXNlIHRoZW1cIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc193YXJuaW5nOiBcIldhcm5pbmc6IFlvdSB3aWxsIGJlIHJlbW92ZWQgZnJvbSBhbGwgY2xhc3NlcyB0aGF0IHlvdSBoYXZlIHByZXZpb3VzbHkgam9pbmVkIGFuZCB3aWxsIG5vdCBiZSBhYmxlIHRvIHBsYXkgYXMgYSBzdHVkZW50LlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3JlbWFpbl90ZWFjaGVyOiBcIlJlbWFpbiBhIFRlYWNoZXJcIlxuIyAgICB1cGRhdGVfYWNjb3VudF91cGRhdGVfdGVhY2hlcjogXCJVcGRhdGUgdG8gVGVhY2hlclwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2FtX3N0dWRlbnQ6IFwiSSBhbSBhIHN0dWRlbnRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9yZW1vdmVfYWNjZXNzOiBcIlJlbW92ZSBhY2Nlc3MgdG8gY2xhc3NlcyBJIGhhdmUgY3JlYXRlZFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX2NhbjogXCJTdHVkZW50IGFjY291bnRzIGNhbjpcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9zdHVkZW50c19jYW4xOiBcIkpvaW4gY2xhc3Nlc1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX2NhbjI6IFwiUGxheSB0aHJvdWdoIGNvdXJzZXMgYXMgYSBzdHVkZW50IGFuZCB0cmFjayB5b3VyIG93biBwcm9ncmVzc1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX2NhbjM6IFwiQ29tcGV0ZSBhZ2FpbnN0IGNsYXNzbWF0ZXMgaW4gYXJlbmFzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuNDogXCJBY2Nlc3MgbmV3IHN0dWRlbnQtb25seSBmZWF0dXJlcyBhcyB3ZSByZWxlYXNlIHRoZW1cIlxuIyAgICB1cGRhdGVfYWNjb3VudF9zdHVkZW50c193YXJuaW5nOiBcIldhcm5pbmc6IFlvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIG1hbmFnZSBhbnkgY2xhc3NlcyB0aGF0IHlvdSBoYXZlIHByZXZpb3VzbHkgY3JlYXRlZCBvciBjcmVhdGUgbmV3IGNsYXNzZXMuXCJcbiMgICAgdW5zdWJzY3JpYmVfd2FybmluZzogXCJXYXJuaW5nOiBZb3Ugd2lsbCBiZSB1bnN1YnNjcmliZWQgZnJvbSB5b3VyIG1vbnRobHkgc3Vic2NyaXB0aW9uLlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3JlbWFpbl9zdHVkZW50OiBcIlJlbWFpbiBhIFN0dWRlbnRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF91cGRhdGVfc3R1ZGVudDogXCJVcGRhdGUgdG8gU3R1ZGVudFwiXG4jICAgIG5lZWRfYV9jbGFzc19jb2RlOiBcIllvdSdsbCBuZWVkIGEgQ2xhc3MgQ29kZSBmb3IgdGhlIGNsYXNzIHlvdSdyZSBqb2luaW5nOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X25vdF9zdXJlOiBcIk5vdCBzdXJlIHdoaWNoIG9uZSB0byBjaG9vc2U/IEVtYWlsXCJcbiMgICAgdXBkYXRlX2FjY291bnRfY29uZmlybV91cGRhdGVfc3R1ZGVudDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gdXBkYXRlIHlvdXIgYWNjb3VudCB0byBhIFN0dWRlbnQgZXhwZXJpZW5jZT9cIlxuIyAgICB1cGRhdGVfYWNjb3VudF9jb25maXJtX3VwZGF0ZV9zdHVkZW50MjogXCJZb3Ugd2lsbCBub3QgYmUgYWJsZSB0byBtYW5hZ2UgYW55IGNsYXNzZXMgdGhhdCB5b3UgaGF2ZSBwcmV2aW91c2x5IGNyZWF0ZWQgb3IgY3JlYXRlIG5ldyBjbGFzc2VzLiBZb3VyIHByZXZpb3VzbHkgY3JlYXRlZCBjbGFzc2VzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIENvZGVDb21iYXQgYW5kIGNhbm5vdCBiZSByZXN0b3JlZC5cIlxuIyAgICBpbnN0cnVjdG9yOiBcIkluc3RydWN0b3I6IFwiXG4jICAgIHlvdXZlX2JlZW5faW52aXRlZF8xOiBcIllvdSd2ZSBiZWVuIGludml0ZWQgdG8gam9pbiBcIlxuIyAgICB5b3V2ZV9iZWVuX2ludml0ZWRfMjogXCIsIHdoZXJlIHlvdSdsbCBsZWFybiBcIlxuIyAgICB5b3V2ZV9iZWVuX2ludml0ZWRfMzogXCIgd2l0aCB5b3VyIGNsYXNzbWF0ZXMgaW4gQ29kZUNvbWJhdC5cIlxuIyAgICBieV9qb2luaW5nXzE6IFwiQnkgam9pbmluZyBcIlxuIyAgICBieV9qb2luaW5nXzI6IFwid2lsbCBiZSBhYmxlIHRvIGhlbHAgcmVzZXQgeW91ciBwYXNzd29yZCBpZiB5b3UgZm9yZ2V0IG9yIGxvc2UgaXQuIFlvdSBjYW4gYWxzbyB2ZXJpZnkgeW91ciBlbWFpbCBhZGRyZXNzIHNvIHRoYXQgeW91IGNhbiByZXNldCB0aGUgcGFzc3dvcmQgeW91cnNlbGYhXCJcbiMgICAgc2VudF92ZXJpZmljYXRpb246IFwiV2UndmUgc2VudCBhIHZlcmlmaWNhdGlvbiBlbWFpbCB0bzpcIlxuIyAgICB5b3VfY2FuX2VkaXQ6IFwiWW91IGNhbiBlZGl0IHlvdXIgZW1haWwgYWRkcmVzcyBpbiBcIlxuIyAgICBhY2NvdW50X3NldHRpbmdzOiBcIkFjY291bnQgU2V0dGluZ3NcIlxuIyAgICBzZWxlY3RfeW91cl9oZXJvOiBcIlNlbGVjdCBZb3VyIEhlcm9cIlxuIyAgICBzZWxlY3RfeW91cl9oZXJvX2Rlc2NyaXB0aW9uOiBcIllvdSBjYW4gYWx3YXlzIGNoYW5nZSB5b3VyIGhlcm8gYnkgZ29pbmcgdG8geW91ciBDb3Vyc2VzIHBhZ2UgYW5kIGNsaWNraW5nIFxcXCJDaGFuZ2UgSGVyb1xcXCJcIlxuIyAgICBzZWxlY3RfdGhpc19oZXJvOiBcIlNlbGVjdCB0aGlzIEhlcm9cIlxuIyAgICBjdXJyZW50X2hlcm86IFwiQ3VycmVudCBIZXJvOlwiXG4jICAgIGN1cnJlbnRfaGVyb19mZW1hbGU6IFwiQ3VycmVudCBIZXJvOlwiXG4jICAgIHdlYl9kZXZfbGFuZ3VhZ2VfdHJhbnNpdGlvbjogXCJBbGwgY2xhc3NlcyBwcm9ncmFtIGluIEhUTUwgLyBKYXZhU2NyaXB0IGZvciB0aGlzIGNvdXJzZS4gIENsYXNzZXMgdGhhdCBoYXZlIGJlZW4gdXNpbmcgUHl0aG9uIHdpbGwgc3RhcnQgd2l0aCBleHRyYSBKYXZhU2NyaXB0IGludHJvIGxldmVscyB0byBlYXNlIHRoZSB0cmFuc2l0aW9uLiAgQ2xhc3NlcyB0aGF0IGFyZSBhbHJlYWR5IHVzaW5nIEphdmFTY3JpcHQgd2lsbCBza2lwIHRoZSBpbnRybyBsZXZlbHMuXCJcbiMgICAgY291cnNlX21lbWJlcnNoaXBfcmVxdWlyZWRfdG9fcGxheTogXCJZb3UnbGwgbmVlZCB0byBqb2luIGEgY291cnNlIHRvIHBsYXkgdGhpcyBsZXZlbC5cIlxuIyAgICBsaWNlbnNlX3JlcXVpcmVkX3RvX3BsYXk6IFwiQXNrIHlvdXIgdGVhY2hlciB0byBhc3NpZ24gYSBsaWNlbnNlIHRvIHlvdSBzbyB5b3UgY2FuIGNvbnRpbnVlIHRvIHBsYXkgQ29kZUNvbWJhdCFcIlxuIyAgICB1cGRhdGVfb2xkX2NsYXNzcm9vbTogXCJOZXcgc2Nob29sIHllYXIsIG5ldyBsZXZlbHMhXCJcbiMgICAgdXBkYXRlX29sZF9jbGFzc3Jvb21fZGV0YWlsOiBcIlRvIG1ha2Ugc3VyZSB5b3UncmUgZ2V0dGluZyB0aGUgbW9zdCB1cC10by1kYXRlIGxldmVscywgbWFrZSBzdXJlIHlvdSBjcmVhdGUgYSBuZXcgY2xhc3MgZm9yIHRoaXMgc2VtZXN0ZXIgYnkgY2xpY2tpbmcgQ3JlYXRlIGEgTmV3IENsYXNzIG9uIHlvdXJcIlxuIyAgICB0ZWFjaGVyX2Rhc2hib2FyZDogXCJ0ZWFjaGVyIGRhc2hib2FyZFwiXG4jICAgIHVwZGF0ZV9vbGRfY2xhc3Nyb29tX2RldGFpbF8yOiBcImFuZCBnaXZpbmcgc3R1ZGVudHMgdGhlIG5ldyBDbGFzcyBDb2RlIHRoYXQgYXBwZWFycy5cIlxuIyAgICB2aWV3X2Fzc2Vzc21lbnRzOiBcIlZpZXcgQXNzZXNzbWVudHNcIlxuIyAgICB2aWV3X2NoYWxsZW5nZXM6IFwidmlldyBjaGFsbGVuZ2UgbGV2ZWxzXCJcbiMgICAgY2hhbGxlbmdlOiBcIkNoYWxsZW5nZTpcIlxuIyAgICBjaGFsbGVuZ2VfbGV2ZWw6IFwiQ2hhbGxlbmdlIExldmVsOlwiXG4jICAgIHN0YXR1czogXCJTdGF0dXM6XCJcbiMgICAgYXNzZXNzbWVudHM6IFwiQXNzZXNzbWVudHNcIlxuIyAgICBjaGFsbGVuZ2VzOiBcIkNoYWxsZW5nZXNcIlxuIyAgICBsZXZlbF9uYW1lOiBcIkxldmVsIE5hbWU6XCJcbiMgICAga2VlcF90cnlpbmc6IFwiS2VlcCBUcnlpbmdcIlxuIyAgICBzdGFydF9jaGFsbGVuZ2U6IFwiU3RhcnQgQ2hhbGxlbmdlXCJcbiMgICAgbG9ja2VkOiBcIkxvY2tlZFwiXG4jICAgIGNvbmNlcHRzX3VzZWQ6IFwiQ29uY2VwdHMgVXNlZDpcIlxuXG4jICBwcm9qZWN0X2dhbGxlcnk6XG4jICAgIG5vX3Byb2plY3RzX3B1Ymxpc2hlZDogXCJCZSB0aGUgZmlyc3QgdG8gcHVibGlzaCBhIHByb2plY3QgaW4gdGhpcyBjb3Vyc2UhXCJcbiMgICAgdmlld19wcm9qZWN0OiBcIlZpZXcgUHJvamVjdFwiXG4jICAgIGVkaXRfcHJvamVjdDogXCJFZGl0IFByb2plY3RcIlxuXG4jICB0ZWFjaGVyOlxuIyAgICBhc3NpZ25pbmdfY291cnNlOiBcIkFzc2lnbmluZyBjb3Vyc2VcIlxuIyAgICBiYWNrX3RvX3RvcDogXCJCYWNrIHRvIFRvcFwiXG4jICAgIGNsaWNrX3N0dWRlbnRfY29kZTogXCJDbGljayBvbiBhbnkgbGV2ZWwgdGhhdCB0aGUgc3R1ZGVudCBoYXMgc3RhcnRlZCBvciBjb21wbGV0ZWQgYmVsb3cgdG8gdmlldyB0aGUgY29kZSB0aGV5IHdyb3RlLlwiXG4jICAgIGNvZGU6IFwiX19uYW1lX18ncyBDb2RlXCJcbiMgICAgY29tcGxldGVfc29sdXRpb246IFwiQ29tcGxldGUgU29sdXRpb25cIlxuIyAgICBjb3Vyc2Vfbm90X3N0YXJ0ZWQ6IFwiU3R1ZGVudCBoYXMgbm90IHN0YXJ0ZWQgdGhpcyBjb3Vyc2UgeWV0LlwiXG4jICAgIG5vX2NvZGVfeWV0OiBcIlN0dWRlbnQgaGFzIG5vdCB3cml0dGVuIGFueSBjb2RlIGZvciB0aGlzIGxldmVsIHlldC5cIlxuIyAgICBvcGVuX2VuZGVkX2xldmVsOiBcIk9wZW4tRW5kZWQgTGV2ZWxcIlxuIyAgICBwYXJ0aWFsX3NvbHV0aW9uOiBcIlBhcnRpYWwgU29sdXRpb25cIlxuIyAgICByZW1vdmluZ19jb3Vyc2U6IFwiUmVtb3ZpbmcgY291cnNlXCJcbiMgICAgc29sdXRpb25fYXJlbmFfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gc29sdmUgYXJlbmEgbGV2ZWxzIGNyZWF0aXZlbHkuIFRoZSBzb2x1dGlvbiBwcm92aWRlZCBiZWxvdyBtZWV0cyB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBhcmVuYSBsZXZlbC5cIlxuIyAgICBzb2x1dGlvbl9jaGFsbGVuZ2VfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gc29sdmUgb3Blbi1lbmRlZCBjaGFsbGVuZ2UgbGV2ZWxzIGNyZWF0aXZlbHkuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiBpcyBkaXNwbGF5ZWQgYmVsb3cuXCJcbiMgICAgc29sdXRpb25fcHJvamVjdF9ibHVyYjogXCJTdHVkZW50cyBhcmUgZW5jb3VyYWdlZCB0byBidWlsZCBhIGNyZWF0aXZlIHByb2plY3QgaW4gdGhpcyBsZXZlbC4gVGhlIHNvbHV0aW9uIHByb3ZpZGVkIGJlbG93IG1lZXRzIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIHByb2plY3QgbGV2ZWwuXCJcbiMgICAgc3R1ZGVudHNfY29kZV9ibHVyYjogXCJBIGNvcnJlY3Qgc29sdXRpb24gdG8gZWFjaCBsZXZlbCBpcyBwcm92aWRlZCB3aGVyZSBhcHByb3ByaWF0ZS4gSW4gc29tZSBjYXNlcywgaXTigJlzIHBvc3NpYmxlIGZvciBhIHN0dWRlbnQgdG8gc29sdmUgYSBsZXZlbCB1c2luZyBkaWZmZXJlbnQgY29kZS4gU29sdXRpb25zIGFyZSBub3Qgc2hvd24gZm9yIGxldmVscyB0aGUgc3R1ZGVudCBoYXMgbm90IHN0YXJ0ZWQuXCJcbiMgICAgY291cnNlX3NvbHV0aW9uOiBcIkNvdXJzZSBTb2x1dGlvblwiXG4jICAgIGxldmVsX292ZXJ2aWV3X3NvbHV0aW9uczogXCJMZXZlbCBPdmVydmlldyBhbmQgU29sdXRpb25zXCJcbiMgICAgbm9fc3R1ZGVudF9hc3NpZ25lZDogXCJObyBzdHVkZW50cyBoYXZlIGJlZW4gYXNzaWduZWQgdGhpcyBjb3Vyc2UuXCJcbiMgICAgcGFyZW5fbmV3OiBcIihuZXcpXCJcbiMgICAgc3R1ZGVudF9jb2RlOiBcIl9fbmFtZV9fJ3MgU3R1ZGVudCBDb2RlXCJcbiMgICAgdGVhY2hlcl9kYXNoYm9hcmQ6IFwiVGVhY2hlciBEYXNoYm9hcmRcIiAjIE5hdmJhclxuIyAgICBteV9jbGFzc2VzOiBcIk15IENsYXNzZXNcIlxuIyAgICBjb3Vyc2VzOiBcIkNvdXJzZSBHdWlkZXNcIlxuIyAgICBlbnJvbGxtZW50czogXCJTdHVkZW50IExpY2Vuc2VzXCJcbiMgICAgcmVzb3VyY2VzOiBcIlJlc291cmNlc1wiXG4jICAgIGhlbHA6IFwiSGVscFwiXG4jICAgIGxhbmd1YWdlOiBcIkxhbmd1YWdlXCJcbiMgICAgZWRpdF9jbGFzc19zZXR0aW5nczogXCJlZGl0IGNsYXNzIHNldHRpbmdzXCJcbiMgICAgYWNjZXNzX3Jlc3RyaWN0ZWQ6IFwiQWNjb3VudCBVcGRhdGUgUmVxdWlyZWRcIlxuIyAgICB0ZWFjaGVyX2FjY291bnRfcmVxdWlyZWQ6IFwiQSB0ZWFjaGVyIGFjY291bnQgaXMgcmVxdWlyZWQgdG8gYWNjZXNzIHRoaXMgY29udGVudC5cIlxuIyAgICBjcmVhdGVfdGVhY2hlcl9hY2NvdW50OiBcIkNyZWF0ZSBUZWFjaGVyIEFjY291bnRcIlxuIyAgICB3aGF0X2lzX2FfdGVhY2hlcl9hY2NvdW50OiBcIldoYXQncyBhIFRlYWNoZXIgQWNjb3VudD9cIlxuIyAgICB0ZWFjaGVyX2FjY291bnRfZXhwbGFuYXRpb246IFwiQSBDb2RlQ29tYmF0IFRlYWNoZXIgYWNjb3VudCBhbGxvd3MgeW91IHRvIHNldCB1cCBjbGFzc3Jvb21zLCBtb25pdG9yIHN0dWRlbnRz4oCZIHByb2dyZXNzIGFzIHRoZXkgd29yayB0aHJvdWdoIGNvdXJzZXMsIG1hbmFnZSBsaWNlbnNlcyBhbmQgYWNjZXNzIHJlc291cmNlcyB0byBhaWQgaW4geW91ciBjdXJyaWN1bHVtLWJ1aWxkaW5nLlwiXG4jICAgIGN1cnJlbnRfY2xhc3NlczogXCJDdXJyZW50IENsYXNzZXNcIlxuIyAgICBhcmNoaXZlZF9jbGFzc2VzOiBcIkFyY2hpdmVkIENsYXNzZXNcIlxuIyAgICBhcmNoaXZlZF9jbGFzc2VzX2JsdXJiOiBcIkNsYXNzZXMgY2FuIGJlIGFyY2hpdmVkIGZvciBmdXR1cmUgcmVmZXJlbmNlLiBVbmFyY2hpdmUgYSBjbGFzcyB0byB2aWV3IGl0IGluIHRoZSBDdXJyZW50IENsYXNzZXMgbGlzdCBhZ2Fpbi5cIlxuIyAgICB2aWV3X2NsYXNzOiBcInZpZXcgY2xhc3NcIlxuIyAgICBhcmNoaXZlX2NsYXNzOiBcImFyY2hpdmUgY2xhc3NcIlxuIyAgICB1bmFyY2hpdmVfY2xhc3M6IFwidW5hcmNoaXZlIGNsYXNzXCJcbiMgICAgdW5hcmNoaXZlX3RoaXNfY2xhc3M6IFwiVW5hcmNoaXZlIHRoaXMgY2xhc3NcIlxuIyAgICBub19zdHVkZW50c195ZXQ6IFwiVGhpcyBjbGFzcyBoYXMgbm8gc3R1ZGVudHMgeWV0LlwiXG4jICAgIG5vX3N0dWRlbnRzX3lldF92aWV3X2NsYXNzOiBcIlZpZXcgY2xhc3MgdG8gYWRkIHN0dWRlbnRzLlwiXG4jICAgIHRyeV9yZWZyZXNoaW5nOiBcIihZb3UgbWF5IG5lZWQgdG8gcmVmcmVzaCB0aGUgcGFnZSlcIlxuIyAgICBjcmVhdGVfbmV3X2NsYXNzOiBcIkNyZWF0ZSBhIE5ldyBDbGFzc1wiXG4jICAgIGNsYXNzX292ZXJ2aWV3OiBcIkNsYXNzIE92ZXJ2aWV3XCIgIyBWaWV3IENsYXNzIHBhZ2VcbiMgICAgYXZnX3BsYXl0aW1lOiBcIkF2ZXJhZ2UgbGV2ZWwgcGxheXRpbWVcIlxuIyAgICB0b3RhbF9wbGF5dGltZTogXCJUb3RhbCBwbGF5IHRpbWVcIlxuIyAgICBhdmdfY29tcGxldGVkOiBcIkF2ZXJhZ2UgbGV2ZWxzIGNvbXBsZXRlZFwiXG4jICAgIHRvdGFsX2NvbXBsZXRlZDogXCJUb3RhbCBsZXZlbHMgY29tcGxldGVkXCJcbiMgICAgY3JlYXRlZDogXCJDcmVhdGVkXCJcbiMgICAgY29uY2VwdHNfY292ZXJlZDogXCJDb25jZXB0cyBjb3ZlcmVkXCJcbiMgICAgZWFybGllc3RfaW5jb21wbGV0ZTogXCJFYXJsaWVzdCBpbmNvbXBsZXRlIGxldmVsXCJcbiMgICAgbGF0ZXN0X2NvbXBsZXRlOiBcIkxhdGVzdCBjb21wbGV0ZWQgbGV2ZWxcIlxuIyAgICBlbnJvbGxfc3R1ZGVudDogXCJFbnJvbGwgc3R1ZGVudFwiXG4jICAgIGFwcGx5X2xpY2Vuc2U6IFwiQXBwbHkgTGljZW5zZVwiXG4jICAgIHJldm9rZV9saWNlbnNlOiBcIlJldm9rZSBMaWNlbnNlXCJcbiMgICAgY291cnNlX3Byb2dyZXNzOiBcIkNvdXJzZSBQcm9ncmVzc1wiXG4jICAgIG5vdF9hcHBsaWNhYmxlOiBcIk4vQVwiXG4jICAgIGVkaXQ6IFwiZWRpdFwiXG4jICAgIGVkaXRfMjogXCJFZGl0XCJcbiMgICAgcmVtb3ZlOiBcInJlbW92ZVwiXG4jICAgIGxhdGVzdF9jb21wbGV0ZWQ6IFwiTGF0ZXN0IGNvbXBsZXRlZDpcIlxuIyAgICBzb3J0X2J5OiBcIlNvcnQgYnlcIlxuIyAgICBwcm9ncmVzczogXCJQcm9ncmVzc1wiXG4jICAgIGNvbmNlcHRzX3VzZWQ6IFwiQ29uY2VwdHMgdXNlZCBieSBTdHVkZW50OlwiXG4jICAgIGNvbmNlcHRfY2hlY2tlZDogXCJDb25jZXB0IGNoZWNrZWQ6XCJcbiMgICAgY29tcGxldGVkOiBcIkNvbXBsZXRlZFwiXG4jICAgIHByYWN0aWNlOiBcIlByYWN0aWNlXCJcbiMgICAgc3RhcnRlZDogXCJTdGFydGVkXCJcbiMgICAgbm9fcHJvZ3Jlc3M6IFwiTm8gcHJvZ3Jlc3NcIlxuIyAgICBub3RfcmVxdWlyZWQ6IFwiTm90IHJlcXVpcmVkXCJcbiMgICAgc2VsZWN0X2NvdXJzZTogXCJTZWxlY3QgY291cnNlIHRvIHZpZXdcIlxuIyAgICBwcm9ncmVzc19jb2xvcl9rZXk6IFwiUHJvZ3Jlc3MgY29sb3Iga2V5OlwiXG4jICAgIGxldmVsX2luX3Byb2dyZXNzOiBcIkxldmVsIGluIFByb2dyZXNzXCJcbiMgICAgbGV2ZWxfbm90X3N0YXJ0ZWQ6IFwiTGV2ZWwgTm90IFN0YXJ0ZWRcIlxuIyAgICBwcm9qZWN0X29yX2FyZW5hOiBcIlByb2plY3Qgb3IgQXJlbmFcIlxuIyAgICBzdHVkZW50c19ub3RfYXNzaWduZWQ6IFwiU3R1ZGVudHMgd2hvIGhhdmUgbm90IGJlZW4gYXNzaWduZWQge3tjb3Vyc2VOYW1lfX1cIlxuIyAgICBjb3Vyc2Vfb3ZlcnZpZXc6IFwiQ291cnNlIE92ZXJ2aWV3XCJcbiMgICAgY29weV9jbGFzc19jb2RlOiBcIkNvcHkgQ2xhc3MgQ29kZVwiXG4jICAgIGNsYXNzX2NvZGVfYmx1cmI6IFwiU3R1ZGVudHMgY2FuIGpvaW4geW91ciBjbGFzcyB1c2luZyB0aGlzIENsYXNzIENvZGUuIE5vIGVtYWlsIGFkZHJlc3MgaXMgcmVxdWlyZWQgd2hlbiBjcmVhdGluZyBhIFN0dWRlbnQgYWNjb3VudCB3aXRoIHRoaXMgQ2xhc3MgQ29kZS5cIlxuIyAgICBjb3B5X2NsYXNzX3VybDogXCJDb3B5IENsYXNzIFVSTFwiXG4jICAgIGNsYXNzX2pvaW5fdXJsX2JsdXJiOiBcIllvdSBjYW4gYWxzbyBwb3N0IHRoaXMgdW5pcXVlIGNsYXNzIFVSTCB0byBhIHNoYXJlZCB3ZWJwYWdlLlwiXG4jICAgIGFkZF9zdHVkZW50c19tYW51YWxseTogXCJJbnZpdGUgU3R1ZGVudHMgYnkgRW1haWxcIlxuIyAgICBidWxrX2Fzc2lnbjogXCJTZWxlY3QgY291cnNlXCJcbiMgICAgYXNzaWduZWRfbXNnXzE6IFwie3tudW1iZXJBc3NpZ25lZH19IHN0dWRlbnRzIHdlcmUgYXNzaWduZWQge3tjb3Vyc2VOYW1lfX0uXCJcbiMgICAgYXNzaWduZWRfbXNnXzI6IFwie3tudW1iZXJFbnJvbGxlZH19IGxpY2Vuc2VzIHdlcmUgYXBwbGllZC5cIlxuIyAgICBhc3NpZ25lZF9tc2dfMzogXCJZb3Ugbm93IGhhdmUge3tyZW1haW5pbmdTcG90c319IGF2YWlsYWJsZSBsaWNlbnNlcyByZW1haW5pbmcuXCJcbiMgICAgYXNzaWduX2NvdXJzZTogXCJBc3NpZ24gQ291cnNlXCJcbiMgICAgcmVtb3ZlZF9jb3Vyc2VfbXNnOiBcInt7bnVtYmVyUmVtb3ZlZH19IHN0dWRlbnRzIHdlcmUgcmVtb3ZlZCBmcm9tIHt7Y291cnNlTmFtZX19LlwiXG4jICAgIHJlbW92ZV9jb3Vyc2U6IFwiUmVtb3ZlIENvdXJzZVwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF90aXRsZTogXCJDb3Vyc2VzIHdlcmUgbm90IGFzc2lnbmVkXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX3N0YXJ0ZXJfYm9keV8xOiBcIlRoaXMgY291cnNlIHJlcXVpcmVzIGEgU3RhcnRlciBMaWNlbnNlLiBZb3UgZG8gbm90IGhhdmUgZW5vdWdoIFN0YXJ0ZXIgTGljZW5zZXMgYXZhaWxhYmxlIHRvIGFzc2lnbiB0aGlzIGNvdXJzZSB0byBhbGwgX19zZWxlY3RlZF9fIHNlbGVjdGVkIHN0dWRlbnRzLlwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF9zdGFydGVyX2JvZHlfMjogXCJQdXJjaGFzZSBTdGFydGVyIExpY2Vuc2VzIHRvIGdyYW50IGFjY2VzcyB0byB0aGlzIGNvdXJzZS5cIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfZnVsbF9ib2R5XzE6IFwiVGhpcyBjb3Vyc2UgcmVxdWlyZXMgYSBGdWxsIExpY2Vuc2UuIFlvdSBkbyBub3QgaGF2ZSBlbm91Z2ggRnVsbCBMaWNlbnNlcyBhdmFpbGFibGUgdG8gYXNzaWduIHRoaXMgY291cnNlIHRvIGFsbCBfX3NlbGVjdGVkX18gc2VsZWN0ZWQgc3R1ZGVudHMuXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX2Z1bGxfYm9keV8yOiBcIllvdSBvbmx5IGhhdmUgX19udW1GdWxsTGljZW5zZXNBdmFpbGFibGVfXyBGdWxsIExpY2Vuc2VzIGF2YWlsYWJsZSAoX19udW1TdHVkZW50c1dpdGhvdXRGdWxsTGljZW5zZXNfXyBzdHVkZW50cyBkbyBub3QgY3VycmVudGx5IGhhdmUgYSBGdWxsIExpY2Vuc2UgYWN0aXZlKS5cIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfZnVsbF9ib2R5XzM6IFwiUGxlYXNlIHNlbGVjdCBmZXdlciBzdHVkZW50cywgb3IgcmVhY2ggb3V0IHRvIF9fc3VwcG9ydEVtYWlsX18gZm9yIGFzc2lzdGFuY2UuXCJcbiMgICAgYXNzaWduZWQ6IFwiQXNzaWduZWRcIlxuIyAgICBlbnJvbGxfc2VsZWN0ZWRfc3R1ZGVudHM6IFwiRW5yb2xsIFNlbGVjdGVkIFN0dWRlbnRzXCJcbiMgICAgbm9fc3R1ZGVudHNfc2VsZWN0ZWQ6IFwiTm8gc3R1ZGVudHMgd2VyZSBzZWxlY3RlZC5cIlxuIyAgICBzaG93X3N0dWRlbnRzX2Zyb206IFwiU2hvdyBzdHVkZW50cyBmcm9tXCIgIyBFbnJvbGwgc3R1ZGVudHMgbW9kYWxcbiMgICAgYXBwbHlfbGljZW5zZXNfdG9fdGhlX2ZvbGxvd2luZ19zdHVkZW50czogXCJBcHBseSBMaWNlbnNlcyB0byB0aGUgRm9sbG93aW5nIFN0dWRlbnRzXCJcbiMgICAgc3R1ZGVudHNfaGF2ZV9saWNlbnNlczogXCJUaGUgZm9sbG93aW5nIHN0dWRlbnRzIGFscmVhZHkgaGF2ZSBsaWNlbnNlcyBhcHBsaWVkOlwiXG4jICAgIGFsbF9zdHVkZW50czogXCJBbGwgU3R1ZGVudHNcIlxuIyAgICBhcHBseV9saWNlbnNlczogXCJBcHBseSBMaWNlbnNlc1wiXG4jICAgIG5vdF9lbm91Z2hfZW5yb2xsbWVudHM6IFwiTm90IGVub3VnaCBsaWNlbnNlcyBhdmFpbGFibGUuXCJcbiMgICAgZW5yb2xsbWVudHNfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIHJlcXVpcmVkIHRvIGhhdmUgYSBsaWNlbnNlIHRvIGFjY2VzcyBhbnkgY29udGVudCBhZnRlciB0aGUgZmlyc3QgY291cnNlLlwiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlczogXCJIb3cgdG8gQXBwbHkgTGljZW5zZXNcIlxuIyAgICBleHBvcnRfc3R1ZGVudF9wcm9ncmVzczogXCJFeHBvcnQgU3R1ZGVudCBQcm9ncmVzcyAoQ1NWKVwiXG4jICAgIHNlbmRfZW1haWxfdG86IFwiU2VuZCBSZWNvdmVyIFBhc3N3b3JkIEVtYWlsIHRvOlwiXG4jICAgIGVtYWlsX3NlbnQ6IFwiRW1haWwgc2VudFwiXG4jICAgIHNlbmRfcmVjb3ZlcnlfZW1haWw6IFwiU2VuZCByZWNvdmVyeSBlbWFpbFwiXG4jICAgIGVudGVyX25ld19wYXNzd29yZF9iZWxvdzogXCJFbnRlciBuZXcgcGFzc3dvcmQgYmVsb3c6XCJcbiMgICAgY2hhbmdlX3Bhc3N3b3JkOiBcIkNoYW5nZSBQYXNzd29yZFwiXG4jICAgIGNoYW5nZWQ6IFwiQ2hhbmdlZFwiXG4jICAgIGF2YWlsYWJsZV9jcmVkaXRzOiBcIkF2YWlsYWJsZSBMaWNlbnNlc1wiXG4jICAgIHBlbmRpbmdfY3JlZGl0czogXCJQZW5kaW5nIExpY2Vuc2VzXCJcbiMgICAgZW1wdHlfY3JlZGl0czogXCJFeGhhdXN0ZWQgTGljZW5zZXNcIlxuIyAgICBsaWNlbnNlX3JlbWFpbmluZzogXCJsaWNlbnNlIHJlbWFpbmluZ1wiXG4jICAgIGxpY2Vuc2VzX3JlbWFpbmluZzogXCJsaWNlbnNlcyByZW1haW5pbmdcIlxuIyAgICBvbmVfbGljZW5zZV91c2VkOiBcIjEgbGljZW5zZSBoYXMgYmVlbiB1c2VkXCJcbiMgICAgbnVtX2xpY2Vuc2VzX3VzZWQ6IFwiX19udW1MaWNlbnNlc1VzZWRfXyBsaWNlbnNlcyBoYXZlIGJlZW4gdXNlZFwiXG4jICAgIHN0YXJ0ZXJfbGljZW5zZXM6IFwic3RhcnRlciBsaWNlbnNlc1wiXG4jICAgIHN0YXJ0X2RhdGU6IFwic3RhcnQgZGF0ZTpcIlxuIyAgICBlbmRfZGF0ZTogXCJlbmQgZGF0ZTpcIlxuIyAgICBnZXRfZW5yb2xsbWVudHNfYmx1cmI6IFwiIFdlJ2xsIGhlbHAgeW91IGJ1aWxkIGEgc29sdXRpb24gdGhhdCBtZWV0cyB0aGUgbmVlZHMgb2YgeW91ciBjbGFzcywgc2Nob29sIG9yIGRpc3RyaWN0LlwiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlc19ibHVyYl8xOiBcIldoZW4gYSB0ZWFjaGVyIGFzc2lnbnMgYSBjb3Vyc2UgdG8gYSBzdHVkZW50IGZvciB0aGUgZmlyc3QgdGltZSwgd2XigJlsbCBhdXRvbWF0aWNhbGx5IGFwcGx5IGEgbGljZW5zZS4gVXNlIHRoZSBidWxrLWFzc2lnbiBkcm9wZG93biBpbiB5b3VyIGNsYXNzcm9vbSB0byBhc3NpZ24gYSBjb3Vyc2UgdG8gc2VsZWN0ZWQgc3R1ZGVudHM6XCJcbiMgICAgaG93X3RvX2FwcGx5X2xpY2Vuc2VzX2JsdXJiXzI6IFwiQ2FuIEkgc3RpbGwgYXBwbHkgYSBsaWNlbnNlIHdpdGhvdXQgYXNzaWduaW5nIGEgY291cnNlP1wiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlc19ibHVyYl8zOiBcIlllcyDigJQgZ28gdG8gdGhlIExpY2Vuc2UgU3RhdHVzIHRhYiBpbiB5b3VyIGNsYXNzcm9vbSBhbmQgY2xpY2sgXFxcIkFwcGx5IExpY2Vuc2VcXFwiIHRvIGFueSBzdHVkZW50IHdobyBkb2VzIG5vdCBoYXZlIGFuIGFjdGl2ZSBsaWNlbnNlLlwiXG4jICAgIHJlcXVlc3Rfc2VudDogXCJSZXF1ZXN0IFNlbnQhXCJcbiMgICAgYXNzZXNzbWVudHM6IFwiQXNzZXNzbWVudHNcIlxuIyAgICBsaWNlbnNlX3N0YXR1czogXCJMaWNlbnNlIFN0YXR1c1wiXG4jICAgIHN0YXR1c19leHBpcmVkOiBcIkV4cGlyZWQgb24ge3tkYXRlfX1cIlxuIyAgICBzdGF0dXNfbm90X2Vucm9sbGVkOiBcIk5vdCBFbnJvbGxlZFwiXG4jICAgIHN0YXR1c19lbnJvbGxlZDogXCJFeHBpcmVzIG9uIHt7ZGF0ZX19XCJcbiMgICAgc2VsZWN0X2FsbDogXCJTZWxlY3QgQWxsXCJcbiMgICAgcHJvamVjdDogXCJQcm9qZWN0XCJcbiMgICAgcHJvamVjdF9nYWxsZXJ5OiBcIlByb2plY3QgR2FsbGVyeVwiXG4jICAgIHZpZXdfcHJvamVjdDogXCJWaWV3IFByb2plY3RcIlxuIyAgICB1bnB1Ymxpc2hlZDogXCIodW5wdWJsaXNoZWQpXCJcbiMgICAgdmlld19hcmVuYV9sYWRkZXI6IFwiVmlldyBBcmVuYSBMYWRkZXJcIlxuIyAgICByZXNvdXJjZV9odWI6IFwiUmVzb3VyY2UgSHViXCJcbiMgICAgcGFjaW5nX2d1aWRlczogXCJDbGFzc3Jvb20taW4tYS1Cb3ggUGFjaW5nIEd1aWRlc1wiXG4jICAgIHBhY2luZ19ndWlkZXNfZGVzYzogXCJMZWFybiBob3cgdG8gaW5jb3Jwb3JhdGUgYWxsIG9mIENvZGVDb21iYXQncyByZXNvdXJjZXMgdG8gcGxhbiB5b3VyIHNjaG9vbCB5ZWFyIVwiXG4jICAgIHBhY2luZ19ndWlkZXNfZWxlbTogXCJFbGVtZW50YXJ5IFNjaG9vbCBQYWNpbmcgR3VpZGVcIlxuIyAgICBwYWNpbmdfZ3VpZGVzX21pZGRsZTogXCJNaWRkbGUgU2Nob29sIFBhY2luZyBHdWlkZVwiXG4jICAgIHBhY2luZ19ndWlkZXNfaGlnaDogXCJIaWdoIFNjaG9vbCBQYWNpbmcgR3VpZGVcIlxuIyAgICBnZXR0aW5nX3N0YXJ0ZWQ6IFwiR2V0dGluZyBTdGFydGVkXCJcbiMgICAgZWR1Y2F0b3JfZmFxOiBcIkVkdWNhdG9yIEZBUVwiXG4jICAgIGVkdWNhdG9yX2ZhcV9kZXNjOiBcIkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIGFib3V0IHVzaW5nIENvZGVDb21iYXQgaW4geW91ciBjbGFzc3Jvb20gb3Igc2Nob29sLlwiXG4jICAgIHRlYWNoZXJfZ2V0dGluZ19zdGFydGVkOiBcIlRlYWNoZXIgR2V0dGluZyBTdGFydGVkIEd1aWRlXCJcbiMgICAgdGVhY2hlcl9nZXR0aW5nX3N0YXJ0ZWRfZGVzYzogXCJOZXcgdG8gQ29kZUNvbWJhdD8gRG93bmxvYWQgdGhpcyBUZWFjaGVyIEdldHRpbmcgU3RhcnRlZCBHdWlkZSB0byBzZXQgdXAgeW91ciBhY2NvdW50LCBjcmVhdGUgeW91ciBmaXJzdCBjbGFzcywgYW5kIGludml0ZSBzdHVkZW50cyB0byB0aGUgZmlyc3QgY291cnNlLlwiXG4jICAgIHN0dWRlbnRfZ2V0dGluZ19zdGFydGVkOiBcIlN0dWRlbnQgUXVpY2sgU3RhcnQgR3VpZGVcIlxuIyAgICBzdHVkZW50X2dldHRpbmdfc3RhcnRlZF9kZXNjOiBcIllvdSBjYW4gZGlzdHJpYnV0ZSB0aGlzIGd1aWRlIHRvIHlvdXIgc3R1ZGVudHMgYmVmb3JlIHN0YXJ0aW5nIENvZGVDb21iYXQgc28gdGhhdCB0aGV5IGNhbiBmYW1pbGlhcml6ZSB0aGVtc2VsdmVzIHdpdGggdGhlIGNvZGUgZWRpdG9yLiBUaGlzIGd1aWRlIGNhbiBiZSB1c2VkIGZvciBib3RoIFB5dGhvbiBhbmQgSmF2YVNjcmlwdCBjbGFzc3Jvb21zLlwiXG4jICAgIGFwX2NzX3ByaW5jaXBsZXM6IFwiQVAgQ29tcHV0ZXIgU2NpZW5jZSBQcmluY2lwbGVzXCJcbiMgICAgYXBfY3NfcHJpbmNpcGxlc19kZXNjOiBcIkFQIENvbXB1dGVyIFNjaWVuY2UgUHJpbmNpcGxlcyBnaXZlcyBzdHVkZW50cyBhIGJyb2FkIGludHJvZHVjdGlvbiB0byB0aGUgcG93ZXIsIGltcGFjdCwgYW5kIHBvc3NpYmlsaXRpZXMgb2YgQ29tcHV0ZXIgU2NpZW5jZS4gVGhlIGNvdXJzZSBlbXBoYXNpemVzIGNvbXB1dGF0aW9uYWwgdGhpbmtpbmcgYW5kIHByb2JsZW0gc29sdmluZyB3aGlsZSBhbHNvIHRlYWNoaW5nIHRoZSBiYXNpY3Mgb2YgcHJvZ3JhbW1pbmcuXCJcbiMgICAgY3MxOiBcIkludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlXCJcbiMgICAgY3MyOiBcIkNvbXB1dGVyIFNjaWVuY2UgMlwiXG4jICAgIGNzMzogXCJDb21wdXRlciBTY2llbmNlIDNcIlxuIyAgICBjczQ6IFwiQ29tcHV0ZXIgU2NpZW5jZSA0XCJcbiMgICAgY3M1OiBcIkNvbXB1dGVyIFNjaWVuY2UgNVwiXG4jICAgIGNzMV9zeW50YXhfcHl0aG9uOiBcIkNvdXJzZSAxIFB5dGhvbiBTeW50YXggR3VpZGVcIlxuIyAgICBjczFfc3ludGF4X3B5dGhvbl9kZXNjOiBcIkNoZWF0c2hlZXQgd2l0aCByZWZlcmVuY2VzIHRvIGNvbW1vbiBQeXRob24gc3ludGF4IHRoYXQgc3R1ZGVudHMgd2lsbCBsZWFybiBpbiBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZS5cIlxuIyAgICBjczFfc3ludGF4X2phdmFzY3JpcHQ6IFwiQ291cnNlIDEgSmF2YVNjcmlwdCBTeW50YXggR3VpZGVcIlxuIyAgICBjczFfc3ludGF4X2phdmFzY3JpcHRfZGVzYzogXCJDaGVhdHNoZWV0IHdpdGggcmVmZXJlbmNlcyB0byBjb21tb24gSmF2YVNjcmlwdCBzeW50YXggdGhhdCBzdHVkZW50cyB3aWxsIGxlYXJuIGluIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlLlwiXG4jICAgIGNvbWluZ19zb29uOiBcIkFkZGl0aW9uYWwgZ3VpZGVzIGNvbWluZyBzb29uIVwiXG4jICAgIGVuZ2luZWVyaW5nX2N5Y2xlX3dvcmtzaGVldDogXCJFbmdpbmVlcmluZyBDeWNsZSBXb3Jrc2hlZXRcIlxuIyAgICBlbmdpbmVlcmluZ19jeWNsZV93b3Jrc2hlZXRfZGVzYzogXCJVc2UgdGhpcyB3b3Jrc2hlZXQgdG8gdGVhY2ggc3R1ZGVudHMgdGhlIGJhc2ljcyBvZiB0aGUgZW5naW5lZXJpbmcgY3ljbGU6IEFzc2VzcywgRGVzaWduLCBJbXBsZW1lbnQgYW5kIERlYnVnLiBSZWZlciB0byB0aGUgY29tcGxldGVkIGV4YW1wbGUgd29ya3NoZWV0IGFzIGEgZ3VpZGUuXCJcbiMgICAgZW5naW5lZXJpbmdfY3ljbGVfd29ya3NoZWV0X2xpbms6IFwiVmlldyBleGFtcGxlXCJcbiMgICAgcHJvZ3Jlc3Nfam91cm5hbDogXCJQcm9ncmVzcyBKb3VybmFsXCJcbiMgICAgcHJvZ3Jlc3Nfam91cm5hbF9kZXNjOiBcIkVuY291cmFnZSBzdHVkZW50cyB0byBrZWVwIHRyYWNrIG9mIHRoZWlyIHByb2dyZXNzIHZpYSBhIHByb2dyZXNzIGpvdXJuYWwuXCJcbiMgICAgY3MxX2N1cnJpY3VsdW06IFwiSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgY3MxX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDEuXCJcbiMgICAgYXJlbmFzX2N1cnJpY3VsdW06IFwiQXJlbmEgTGV2ZWxzIC0gVGVhY2hlciBHdWlkZVwiXG4jICAgIGFyZW5hc19jdXJyaWN1bHVtX2Rlc2M6IFwiSW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBydW4gV2Fra2EgTWF1bCwgQ3Jvc3MgQm9uZXMgYW5kIFBvd2VyIFBlYWsgbXVsdGlwbGF5ZXIgYXJlbmFzIHdpdGggeW91ciBjbGFzcy5cIlxuIyAgICBjczJfY3VycmljdWx1bTogXCJDb21wdXRlciBTY2llbmNlIDIgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgY3MyX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDIuXCJcbiMgICAgY3MzX2N1cnJpY3VsdW06IFwiQ29tcHV0ZXIgU2NpZW5jZSAzIC0gQ3VycmljdWx1bSBHdWlkZVwiXG4jICAgIGNzM19jdXJyaWN1bHVtX2Rlc2M6IFwiU2NvcGUgYW5kIHNlcXVlbmNlLCBsZXNzb24gcGxhbnMsIGFjdGl2aXRpZXMgYW5kIG1vcmUgZm9yIENvdXJzZSAzLlwiXG4jICAgIGNzNF9jdXJyaWN1bHVtOiBcIkNvbXB1dGVyIFNjaWVuY2UgNCAtIEN1cnJpY3VsdW0gR3VpZGVcIlxuIyAgICBjczRfY3VycmljdWx1bV9kZXNjOiBcIlNjb3BlIGFuZCBzZXF1ZW5jZSwgbGVzc29uIHBsYW5zLCBhY3Rpdml0aWVzIGFuZCBtb3JlIGZvciBDb3Vyc2UgNC5cIlxuIyAgICBjczVfY3VycmljdWx1bV9qczogXCJDb21wdXRlciBTY2llbmNlIDUgLSBDdXJyaWN1bHVtIEd1aWRlIChKYXZhU2NyaXB0KVwiXG4jICAgIGNzNV9jdXJyaWN1bHVtX2Rlc2NfanM6IFwiU2NvcGUgYW5kIHNlcXVlbmNlLCBsZXNzb24gcGxhbnMsIGFjdGl2aXRpZXMgYW5kIG1vcmUgZm9yIENvdXJzZSA1IGNsYXNzZXMgdXNpbmcgSmF2YVNjcmlwdC5cIlxuIyAgICBjczVfY3VycmljdWx1bV9weTogXCJDb21wdXRlciBTY2llbmNlIDUgLSBDdXJyaWN1bHVtIEd1aWRlIChQeXRob24pXCJcbiMgICAgY3M1X2N1cnJpY3VsdW1fZGVzY19weTogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDUgY2xhc3NlcyB1c2luZyBQeXRob24uXCJcbiMgICAgY3MxX3BhaXJwcm9ncmFtbWluZzogXCJQYWlyIFByb2dyYW1taW5nIEFjdGl2aXR5XCJcbiMgICAgY3MxX3BhaXJwcm9ncmFtbWluZ19kZXNjOiBcIkludHJvZHVjZSBzdHVkZW50cyB0byBhIHBhaXIgcHJvZ3JhbW1pbmcgZXhlcmNpc2UgdGhhdCB3aWxsIGhlbHAgdGhlbSBiZWNvbWUgYmV0dGVyIGxpc3RlbmVycyBhbmQgY29tbXVuaWNhdG9ycy5cIlxuIyAgICBnZDE6IFwiR2FtZSBEZXZlbG9wbWVudCAxXCJcbiMgICAgZ2QxX2d1aWRlOiBcIkdhbWUgRGV2ZWxvcG1lbnQgMSAtIFByb2plY3QgR3VpZGVcIlxuIyAgICBnZDFfZ3VpZGVfZGVzYzogXCJVc2UgdGhpcyB0byBndWlkZSB5b3VyIHN0dWRlbnRzIGFzIHRoZXkgY3JlYXRlIHRoZWlyIGZpcnN0IHNoYXJlYWJsZSBnYW1lIHByb2plY3QgaW4gNSBkYXlzLlwiXG4jICAgIGdkMV9ydWJyaWM6IFwiR2FtZSBEZXZlbG9wbWVudCAxIC0gUHJvamVjdCBSdWJyaWNcIlxuIyAgICBnZDFfcnVicmljX2Rlc2M6IFwiVXNlIHRoaXMgcnVicmljIHRvIGFzc2VzcyBzdHVkZW50IHByb2plY3RzIGF0IHRoZSBlbmQgb2YgR2FtZSBEZXZlbG9wbWVudCAxLlwiXG4jICAgIGdkMjogXCJHYW1lIERldmVsb3BtZW50IDJcIlxuIyAgICBnZDJfY3VycmljdWx1bTogXCJHYW1lIERldmVsb3BtZW50IDIgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgZ2QyX2N1cnJpY3VsdW1fZGVzYzogXCJMZXNzb24gcGxhbnMgZm9yIEdhbWUgRGV2ZWxvcG1lbnQgMi5cIlxuIyAgICBnZDM6IFwiR2FtZSBEZXZlbG9wbWVudCAzXCJcbiMgICAgZ2QzX2N1cnJpY3VsdW06IFwiR2FtZSBEZXZlbG9wbWVudCAzIC0gQ3VycmljdWx1bSBHdWlkZVwiXG4jICAgIGdkM19jdXJyaWN1bHVtX2Rlc2M6IFwiTGVzc29uIHBsYW5zIGZvciBHYW1lIERldmVsb3BtZW50IDMuXCJcbiMgICAgd2QxOiBcIldlYiBEZXZlbG9wbWVudCAxXCJcbiMgICAgd2QxX2hlYWRsaW5lczogXCJIZWFkbGluZXMgJiBIZWFkZXJzIEFjdGl2aXR5XCJcbiMgICAgd2QxX2hlYWRsaW5lc19leGFtcGxlOiBcIlZpZXcgc2FtcGxlIHNvbHV0aW9uXCJcbiMgICAgd2QxX2hlYWRsaW5lc19kZXNjOiBcIldoeSBhcmUgcGFyYWdyYXBoIGFuZCBoZWFkZXIgdGFncyBpbXBvcnRhbnQ/IFVzZSB0aGlzIGFjdGl2aXR5IHRvIHNob3cgaG93IHdlbGwtY2hvc2VuIGhlYWRlcnMgbWFrZSB3ZWIgcGFnZXMgZWFzaWVyIHRvIHJlYWQuIFRoZXJlIGFyZSBtYW55IGNvcnJlY3Qgc29sdXRpb25zIHRvIHRoaXMhXCJcbiMgICAgd2QxX2h0bWxfc3ludGF4OiBcIkhUTUwgU3ludGF4IEd1aWRlXCJcbiMgICAgd2QxX2h0bWxfc3ludGF4X2Rlc2M6IFwiT25lLXBhZ2UgcmVmZXJlbmNlIGZvciB0aGUgSFRNTCBzdHlsZSBzdHVkZW50cyB3aWxsIGxlYXJuIGluIFdlYiBEZXZlbG9wbWVudCAxLlwiXG4jICAgIHdkMV9jc3Nfc3ludGF4OiBcIkNTUyBTeW50YXggR3VpZGVcIlxuIyAgICB3ZDFfY3NzX3N5bnRheF9kZXNjOiBcIk9uZS1wYWdlIHJlZmVyZW5jZSBmb3IgdGhlIENTUyBhbmQgU3R5bGUgc3ludGF4IHN0dWRlbnRzIHdpbGwgbGVhcm4gaW4gV2ViIERldmVsb3BtZW50IDEuXCJcbiMgICAgd2QyOiBcIldlYiBEZXZlbG9wbWVudCAyXCJcbiMgICAgd2QyX2pxdWVyeV9zeW50YXg6IFwialF1ZXJ5IEZ1bmN0aW9ucyBTeW50YXggR3VpZGVcIlxuIyAgICB3ZDJfanF1ZXJ5X3N5bnRheF9kZXNjOiBcIk9uZS1wYWdlIHJlZmVyZW5jZSBmb3IgdGhlIGpRdWVyeSBmdW5jdGlvbnMgc3R1ZGVudHMgd2lsbCBsZWFybiBpbiBXZWIgRGV2ZWxvcG1lbnQgMi5cIlxuIyAgICB3ZDJfcXVpemxldF93b3Jrc2hlZXQ6IFwiUXVpemxldCBQbGFubmluZyBXb3Jrc2hlZXRcIlxuIyAgICB3ZDJfcXVpemxldF93b3Jrc2hlZXRfaW5zdHJ1Y3Rpb25zOiBcIlZpZXcgaW5zdHJ1Y3Rpb25zICYgZXhhbXBsZXNcIlxuIyAgICB3ZDJfcXVpemxldF93b3Jrc2hlZXRfZGVzYzogXCJCZWZvcmUgeW91ciBzdHVkZW50cyBidWlsZCB0aGVpciBwZXJzb25hbGl0eSBxdWl6IHByb2plY3QgYXQgdGhlIGVuZCBvZiBXZWIgRGV2ZWxvcG1lbnQgMiwgdGhleSBzaG91bGQgcGxhbiBvdXQgdGhlaXIgcXVpeiBxdWVzdGlvbnMsIG91dGNvbWVzIGFuZCByZXNwb25zZXMgdXNpbmcgdGhpcyB3b3Jrc2hlZXQuIFRlYWNoZXJzIGNhbiBkaXN0cmlidXRlIHRoZSBpbnN0cnVjdGlvbnMgYW5kIGV4YW1wbGVzIGZvciBzdHVkZW50cyB0byByZWZlciB0by5cIlxuIyAgICBzdHVkZW50X292ZXJ2aWV3OiBcIk92ZXJ2aWV3XCJcbiMgICAgc3R1ZGVudF9kZXRhaWxzOiBcIlN0dWRlbnQgRGV0YWlsc1wiXG4jICAgIHN0dWRlbnRfbmFtZTogXCJTdHVkZW50IE5hbWVcIlxuIyAgICBub19uYW1lOiBcIk5vIG5hbWUgcHJvdmlkZWQuXCJcbiMgICAgbm9fdXNlcm5hbWU6IFwiTm8gdXNlcm5hbWUgcHJvdmlkZWQuXCJcbiMgICAgbm9fZW1haWw6IFwiU3R1ZGVudCBoYXMgbm8gZW1haWwgYWRkcmVzcyBzZXQuXCJcbiMgICAgc3R1ZGVudF9wcm9maWxlOiBcIlN0dWRlbnQgUHJvZmlsZVwiXG4jICAgIHBsYXl0aW1lX2RldGFpbDogXCJQbGF5dGltZSBEZXRhaWxcIlxuIyAgICBzdHVkZW50X2NvbXBsZXRlZDogXCJTdHVkZW50IENvbXBsZXRlZFwiXG4jICAgIHN0dWRlbnRfaW5fcHJvZ3Jlc3M6IFwiU3R1ZGVudCBpbiBQcm9ncmVzc1wiXG4jICAgIGNsYXNzX2F2ZXJhZ2U6IFwiQ2xhc3MgQXZlcmFnZVwiXG4jICAgIG5vdF9hc3NpZ25lZDogXCJoYXMgbm90IGJlZW4gYXNzaWduZWQgdGhlIGZvbGxvd2luZyBjb3Vyc2VzXCJcbiMgICAgcGxheXRpbWVfYXhpczogXCJQbGF5dGltZSBpbiBTZWNvbmRzXCJcbiMgICAgbGV2ZWxzX2F4aXM6IFwiTGV2ZWxzIGluXCJcbiMgICAgc3R1ZGVudF9zdGF0ZTogXCJIb3cgaXNcIlxuIyAgICBzdHVkZW50X3N0YXRlXzI6IFwiZG9pbmc/XCJcbiMgICAgc3R1ZGVudF9nb29kOiBcImlzIGRvaW5nIHdlbGwgaW5cIlxuIyAgICBzdHVkZW50X2dvb2RfZGV0YWlsOiBcIlRoaXMgc3R1ZGVudCBpcyBrZWVwaW5nIHBhY2Ugd2l0aCB0aGUgY2xhc3MuXCJcbiMgICAgc3R1ZGVudF93YXJuOiBcIm1pZ2h0IG5lZWQgc29tZSBoZWxwIGluXCJcbiMgICAgc3R1ZGVudF93YXJuX2RldGFpbDogXCJUaGlzIHN0dWRlbnQgbWlnaHQgbmVlZCBzb21lIGhlbHAgd2l0aCBuZXcgY29uY2VwdHMgdGhhdCBoYXZlIGJlZW4gaW50cm9kdWNlZCBpbiB0aGlzIGNvdXJzZS5cIlxuIyAgICBzdHVkZW50X2dyZWF0OiBcImlzIGRvaW5nIGdyZWF0IGluXCJcbiMgICAgc3R1ZGVudF9ncmVhdF9kZXRhaWw6IFwiVGhpcyBzdHVkZW50IG1pZ2h0IGJlIGEgZ29vZCBjYW5kaWRhdGUgdG8gaGVscCBvdGhlciBzdHVkZW50cyB3b3JraW5nIHRocm91Z2ggdGhpcyBjb3Vyc2UuXCJcbiMgICAgZnVsbF9saWNlbnNlOiBcIkZ1bGwgTGljZW5zZVwiXG4jICAgIHN0YXJ0ZXJfbGljZW5zZTogXCJTdGFydGVyIExpY2Vuc2VcIlxuIyAgICB0cmlhbDogXCJUcmlhbFwiXG4jICAgIGhvY193ZWxjb21lOiBcIkhhcHB5IENvbXB1dGVyIFNjaWVuY2UgRWR1Y2F0aW9uIFdlZWtcIlxuIyAgICBob2NfaW50cm86IFwiVGhlcmUgYXJlIHRocmVlIHdheXMgZm9yIHlvdXIgY2xhc3MgdG8gcGFydGljaXBhdGUgaW4gSG91ciBvZiBDb2RlIHdpdGggQ29kZUNvbWJhdFwiXG4jICAgIGhvY19zZWxmX2xlZDogXCJTZWxmLUxlZCBHYW1lcGxheVwiXG4jICAgIGhvY19zZWxmX2xlZF9kZXNjOiBcIlN0dWRlbnRzIGNhbiBwbGF5IHRocm91Z2ggdHdvIEhvdXIgb2YgQ29kZSBDb2RlQ29tYmF0IHR1dG9yaWFscyBvbiB0aGVpciBvd25cIlxuIyAgICBob2NfZ2FtZV9kZXY6IFwiR2FtZSBEZXZlbG9wbWVudFwiXG4jICAgIGhvY19hbmQ6IFwiYW5kXCJcbiMgICAgaG9jX3Byb2dyYW1taW5nOiBcIkphdmFTY3JpcHQvUHl0aG9uIFByb2dyYW1taW5nXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkOiBcIlRlYWNoZXItTGVkIExlc3NvbnNcIlxuIyAgICBob2NfdGVhY2hlcl9sZWRfZGVzYzE6IFwiRG93bmxvYWQgb3VyXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkX2xpbms6IFwiSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UgbGVzc29uIHBsYW5zXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkX2Rlc2MyOiBcInRvIGludHJvZHVjZSB5b3VyIHN0dWRlbnRzIHRvIHByb2dyYW1taW5nIGNvbmNlcHRzIHVzaW5nIG9mZmxpbmUgYWN0aXZpdGllc1wiXG4jICAgIGhvY19ncm91cDogXCJHcm91cCBHYW1lcGxheVwiXG4jICAgIGhvY19ncm91cF9kZXNjXzE6IFwiVGVhY2hlcnMgY2FuIHVzZSB0aGUgbGVzc29ucyBpbiBjb25qdW5jdGlvbiB3aXRoIG91ciBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSBjb3Vyc2UgdG8gdHJhY2sgc3R1ZGVudCBwcm9ncmVzcy4gU2VlIG91clwiXG4jICAgIGhvY19ncm91cF9saW5rOiBcIkdldHRpbmcgU3RhcnRlZCBHdWlkZVwiXG4jICAgIGhvY19ncm91cF9kZXNjXzI6IFwiZm9yIG1vcmUgZGV0YWlsc1wiXG4jICAgIGhvY19hZGRpdGlvbmFsX2Rlc2MxOiBcIkZvciBhZGRpdGlvbmFsIENvZGVDb21iYXQgcmVzb3VyY2VzIGFuZCBhY3Rpdml0aWVzLCBzZWUgb3VyXCJcbiMgICAgaG9jX2FkZGl0aW9uYWxfZGVzYzI6IFwiUXVlc3Rpb25zXCJcbiMgICAgaG9jX2FkZGl0aW9uYWxfY29udGFjdDogXCJHZXQgaW4gdG91Y2hcIlxuIyAgICByZXZva2VfY29uZmlybTogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmV2b2tlIGEgRnVsbCBMaWNlbnNlIGZyb20ge3tzdHVkZW50X25hbWV9fT8gVGhlIGxpY2Vuc2Ugd2lsbCBiZWNvbWUgYXZhaWxhYmxlIHRvIGFzc2lnbiB0byBhbm90aGVyIHN0dWRlbnQuXCJcbiMgICAgcmV2b2tpbmc6IFwiUmV2b2tpbmcuLi5cIlxuIyAgICB1bnVzZWRfbGljZW5zZXM6IFwiWW91IGhhdmUgdW51c2VkIExpY2Vuc2VzIHRoYXQgYWxsb3cgeW91IHRvIGFzc2lnbiBzdHVkZW50cyBwYWlkIGNvdXJzZXMgd2hlbiB0aGV5J3JlIHJlYWR5IHRvIGxlYXJuIG1vcmUhXCJcbiMgICAgcmVtZW1iZXJfbmV3X2NvdXJzZXM6IFwiUmVtZW1iZXIgdG8gYXNzaWduIG5ldyBjb3Vyc2VzIVwiXG4jICAgIG1vcmVfaW5mbzogXCJNb3JlIEluZm9cIlxuIyAgICBob3dfdG9fYXNzaWduX2NvdXJzZXM6IFwiSG93IHRvIEFzc2lnbiBDb3Vyc2VzXCJcbiMgICAgc2VsZWN0X3N0dWRlbnRzOiBcIlNlbGVjdCBTdHVkZW50c1wiXG4jICAgIHNlbGVjdF9pbnN0cnVjdGlvbnM6IFwiQ2xpY2sgdGhlIGNoZWNrYm94IG5leHQgdG8gZWFjaCBzdHVkZW50IHlvdSB3YW50IHRvIGFzc2lnbiBjb3Vyc2VzIHRvLlwiXG4jICAgIGNob29zZV9jb3Vyc2U6IFwiQ2hvb3NlIENvdXJzZVwiXG4jICAgIGNob29zZV9pbnN0cnVjdGlvbnM6IFwiU2VsZWN0IHRoZSBjb3Vyc2UgZnJvbSB0aGUgZHJvcGRvd24gbWVudSB5b3XigJlkIGxpa2UgdG8gYXNzaWduLCB0aGVuIGNsaWNrIOKAnEFzc2lnbiB0byBTZWxlY3RlZCBTdHVkZW50cy7igJ1cIlxuIyAgICBwdXNoX3Byb2plY3RzOiBcIldlIHJlY29tbWVuZCBhc3NpZ25pbmcgV2ViIERldmVsb3BtZW50IDEgb3IgR2FtZSBEZXZlbG9wbWVudCAxIGFmdGVyIHN0dWRlbnRzIGhhdmUgZmluaXNoZWQgSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UhIFNlZSBvdXIge3tyZXNvdXJjZV9odWJ9fSBmb3IgbW9yZSBkZXRhaWxzIG9uIHRob3NlIGNvdXJzZXMuXCJcbiMgICAgdGVhY2hlcl9xdWVzdDogXCJUZWFjaGVyJ3MgUXVlc3QgZm9yIFN1Y2Nlc3NcIlxuIyAgICBxdWVzdHNfY29tcGxldGU6IFwiUXVlc3RzIENvbXBsZXRlXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9jcmVhdGVfY2xhc3Nyb29tOiBcIkNyZWF0ZSBDbGFzc3Jvb21cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2FkZF9zdHVkZW50czogXCJBZGQgU3R1ZGVudHNcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX21ldGhvZHM6IFwiSGVscCB5b3VyIHN0dWRlbnRzIGxlYXJuIGhvdyB0byBgY2FsbCBtZXRob2RzYC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX21ldGhvZHNfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdGhyb3VnaCB0aGUgZmlyc3QgbGV2ZWwsIF9fRHVuZ2VvbnMgb2YgS2l0aGdhcmRfX1wiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbWV0aG9kc19zdGVwMjogXCJQcmludCBvdXQgdGhlIFtTdHVkZW50IFF1aWNrIFN0YXJ0IEd1aWRlXShodHRwOi8vZmlsZXMuY29kZWNvbWJhdC5jb20vZG9jcy9yZXNvdXJjZXMvU3R1ZGVudFF1aWNrU3RhcnRHdWlkZS5wZGYpIGluIHRoZSBSZXNvdXJjZSBIdWIuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9zdHJpbmdzOiBcIkRvbid0IHN0cmluZyB5b3VyIHN0dWRlbnRzIGFsb25nLCB0ZWFjaCB0aGVtIGBzdHJpbmdzYC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3N0cmluZ3Nfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdGhyb3VnaCBfX1RydWUgTmFtZXNfX1wiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfc3RyaW5nc19zdGVwMjogXCJVc2UgdGhlIFRlYWNoZXIgTGV2ZWwgU2VsZWN0b3Igb24gW0NvdXJzZSBHdWlkZXNdKC90ZWFjaGVycy9jb3Vyc2VzKSBwYWdlIHRvIHByZXZpZXcgX19UcnVlIE5hbWVzX18uXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9sb29wczogXCJLZWVwIHlvdXIgc3R1ZGVudHMgaW4gdGhlIGxvb3AgYWJvdXQgYGxvb3BzYC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX2xvb3BzX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRocm91Z2ggX19GaXJlIERhbmNpbmdfXy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX2xvb3BzX3N0ZXAyOiBcIlVzZSB0aGUgX19Mb29wcyBBY3Rpdml0eV9fIGluIHRoZSBbQ1MxIEN1cnJpY3VsdW0gZ3VpZGVdKC90ZWFjaGVycy9yZXNvdXJjZXMvY3MxKSB0byByZWluZm9yY2UgdGhpcyBjb25jZXB0LlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfdmFyaWFibGVzOiBcIlZhcnkgaXQgdXAgd2l0aCBgdmFyaWFibGVzYC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3ZhcmlhYmxlc19zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0aHJvdWdoIF9fS25vd24gRW5lbXlfXy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3ZhcmlhYmxlc19zdGVwMjogXCJFbmNvdXJhZ2UgY29sbGFib3JhdGlvbiBieSB1c2luZyB0aGUgW1BhaXIgUHJvZ3JhbW1pbmcgQWN0aXZpdHldKC90ZWFjaGVycy9yZXNvdXJjZXMvcGFpci1wcm9ncmFtbWluZykuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9raXRoZ2FyZF9nYXRlc18xMDA6IFwiRXNjYXBlIHRoZSBLaXRoZ2FyZCBHYXRlcyB3aXRoIHlvdXIgY2xhc3MuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9raXRoZ2FyZF9nYXRlc18xMDBfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdGhyb3VnaCBfX0tpdGhnYXJkIEdhdGVzX18uXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9raXRoZ2FyZF9nYXRlc18xMDBfc3RlcDI6IFwiR3VpZGUgc3R1ZGVudHMgdG8gdGhpbmsgdGhyb3VnaCBoYXJkIHByb2JsZW1zIHVzaW5nIHRoZSBbRW5naW5lZXJpbmcgQ3ljbGUgV29ya3NoZWV0XShodHRwOi8vZmlsZXMuY29kZWNvbWJhdC5jb20vZG9jcy9yZXNvdXJjZXMvRW5naW5lZXJpbmdDeWNsZVdvcmtzaGVldC5wZGYpLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfd2Fra2FfbWF1bF8xMDA6IFwiUHJlcGFyZSB0byBkdWVsIGluIFdha2thIE1hdWwuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF93YWtrYV9tYXVsXzEwMF9zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0byBfX1dha2thIE1hdWxfXy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3dha2thX21hdWxfMTAwX3N0ZXAyOiBcIlNlZSB0aGUgW0FyZW5hIEd1aWRlXSgvdGVhY2hlcnMvcmVzb3VyY2VzL2FyZW5hcykgaW4gdGhlIFtSZXNvdXJjZSBIdWJdKC90ZWFjaGVycy9yZXNvdXJjZXMpIGZvciB0aXBzIG9uIGhvdyB0byBydW4gYSBzdWNjZXNzZnVsIGFyZW5hIGRheS5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3JlYWNoX2dhbWVkZXY6IFwiRXhwbG9yZSBuZXcgd29ybGRzIVwiXG4jICAgIHRlYWNoZXJfcXVlc3RfcmVhY2hfZ2FtZWRldl9zdGVwMTogXCJbR2V0IGxpY2Vuc2VzXSgvdGVhY2hlcnMvbGljZW5zZXMpIHNvIHRoYXQgeW91ciBzdHVkZW50cyBjYW4gZXhwbG9yZSBuZXcgd29ybGRzLCBsaWtlIEdhbWUgRGV2ZWxvcG1lbnQgYW5kIFdlYiBEZXZlbG9wbWVudCFcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2RvbmU6IFwiV2FudCB5b3VyIHN0dWRlbnRzIHRvIGxlYXJuIGV2ZW4gbW9yZSBjb2RlPyBHZXQgaW4gdG91Y2ggd2l0aCBvdXIgW3NjaG9vbCBzcGVjaWFsaXN0c10obWFpbHRvOnNjaG9vbHNAY29kZWNvbWJhdC5jb20pIHRvZGF5IVwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfa2VlcF9nb2luZzogXCJLZWVwIGdvaW5nISBIZXJlJ3Mgd2hhdCB5b3UgY2FuIGRvIG5leHQ6XCJcbiMgICAgdGVhY2hlcl9xdWVzdF9tb3JlOiBcIlNlZSBhbGwgcXVlc3RzXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9sZXNzOiBcIlNlZSBmZXdlciBxdWVzdHNcIlxuIyAgICByZWZyZXNoX3RvX3VwZGF0ZTogXCIocmVmcmVzaCB0aGUgcGFnZSB0byBzZWUgdXBkYXRlcylcIlxuIyAgICB2aWV3X3Byb2plY3RfZ2FsbGVyeTogXCJWaWV3IFByb2plY3QgR2FsbGVyeVwiXG4jICAgIG9mZmljZV9ob3VyczogXCJUZWFjaGVyIFdlYmluYXJzXCJcbiMgICAgb2ZmaWNlX2hvdXJzX2RldGFpbDogXCJMZWFybiBob3cgdG8ga2VlcCB1cCB3aXRoIHdpdGggeW91ciBzdHVkZW50cyBhcyB0aGV5IGNyZWF0ZSBnYW1lcyBhbmQgZW1iYXJrIG9uIHRoZWlyIGNvZGluZyBqb3VybmV5ISBDb21lIGFuZCBhdHRlbmQgb3VyXCJcbiMgICAgb2ZmaWNlX2hvdXJzX2xpbms6IFwidGVhY2hlciB3ZWJpbmFyXCJcbiMgICAgb2ZmaWNlX2hvdXJzX2RldGFpbF8yOiBcInNlc3Npb25zLlwiXG4jICAgIHN1Y2Nlc3M6IFwiU3VjY2Vzc1wiXG4jICAgIGluX3Byb2dyZXNzOiBcIkluIFByb2dyZXNzXCJcbiMgICAgbm90X3N0YXJ0ZWQ6IFwiTm90IFN0YXJ0ZWRcIlxuIyAgICBtaWRfY291cnNlOiBcIk1pZC1Db3Vyc2VcIlxuIyAgICBlbmRfY291cnNlOiBcIkVuZCBvZiBDb3Vyc2VcIlxuIyAgICBub25lOiBcIk5vbmUgZGV0ZWN0ZWQgeWV0XCJcbiMgICAgZXhwbGFpbl9vcGVuX2VuZGVkOiBcIk5vdGU6IFN0dWRlbnRzIGFyZSBlbmNvdXJhZ2VkIHRvIHNvbHZlIHRoaXMgbGV2ZWwgY3JlYXRpdmVseSDigJQgb25lIHBvc3NpYmxlIHNvbHV0aW9uIGlzIHByb3ZpZGVkIGJlbG93LlwiXG4jICAgIGxldmVsX2xhYmVsOiBcIkxldmVsOlwiXG4jICAgIHRpbWVfcGxheWVkX2xhYmVsOiBcIlRpbWUgUGxheWVkOlwiXG4jICAgIGJhY2tfdG9fcmVzb3VyY2VfaHViOiBcIkJhY2sgdG8gUmVzb3VyY2UgSHViXCJcbiMgICAgcHJpbnRfZ3VpZGU6IFwiUHJpbnQgdGhpcyBndWlkZVwiXG4jICAgIGNvbWJvOiBcIkNvbWJvXCJcbiMgICAgY29tYm9fZXhwbGFuYXRpb246IFwiU3R1ZGVudHMgcGFzcyBDb21ibyBjaGFsbGVuZ2UgbGV2ZWxzIGJ5IHVzaW5nIGF0IGxlYXN0IG9uZSBsaXN0ZWQgY29uY2VwdC4gUmV2aWV3IHN0dWRlbnQgY29kZSBieSBjbGlja2luZyB0aGUgcHJvZ3Jlc3MgZG90LlwiXG4jICAgIGNvbmNlcHQ6IFwiQ29uY2VwdFwiXG5cbiMgIHNoYXJlX2xpY2Vuc2VzOlxuIyAgICBzaGFyZV9saWNlbnNlczogXCJTaGFyZSBMaWNlbnNlc1wiXG4jICAgIHNoYXJlZF9ieTogXCJTaGFyZWQgQnk6XCJcbiMgICAgYWRkX3RlYWNoZXJfbGFiZWw6IFwiRW50ZXIgZXhhY3QgdGVhY2hlciBlbWFpbDpcIlxuIyAgICBhZGRfdGVhY2hlcl9idXR0b246IFwiQWRkIFRlYWNoZXJcIlxuIyAgICBzdWJoZWFkZXI6IFwiWW91IGNhbiBtYWtlIHlvdXIgbGljZW5zZXMgYXZhaWxhYmxlIHRvIG90aGVyIHRlYWNoZXJzIGluIHlvdXIgb3JnYW5pemF0aW9uLiBFYWNoIGxpY2Vuc2UgY2FuIG9ubHkgYmUgdXNlZCBmb3Igb25lIHN0dWRlbnQgYXQgYSB0aW1lLlwiXG4jICAgIHRlYWNoZXJfbm90X2ZvdW5kOiBcIlRlYWNoZXIgbm90IGZvdW5kLiBQbGVhc2UgbWFrZSBzdXJlIHRoaXMgdGVhY2hlciBoYXMgYWxyZWFkeSBjcmVhdGVkIGEgVGVhY2hlciBBY2NvdW50LlwiXG4jICAgIHRlYWNoZXJfbm90X3ZhbGlkOiBcIlRoaXMgaXMgbm90IGEgdmFsaWQgVGVhY2hlciBBY2NvdW50LiBPbmx5IHRlYWNoZXIgYWNjb3VudHMgY2FuIHNoYXJlIGxpY2Vuc2VzLlwiXG4jICAgIGFscmVhZHlfc2hhcmVkOiBcIllvdSd2ZSBhbHJlYWR5IHNoYXJlZCB0aGVzZSBsaWNlbnNlcyB3aXRoIHRoYXQgdGVhY2hlci5cIlxuIyAgICB0ZWFjaGVyc191c2luZ190aGVzZTogXCJUZWFjaGVycyB3aG8gY2FuIGFjY2VzcyB0aGVzZSBsaWNlbnNlczpcIlxuIyAgICBmb290ZXI6IFwiV2hlbiB0ZWFjaGVycyByZXZva2UgbGljZW5zZXMgZnJvbSBzdHVkZW50cywgdGhlIGxpY2Vuc2VzIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIHNoYXJlZCBwb29sIGZvciBvdGhlciB0ZWFjaGVycyBpbiB0aGlzIGdyb3VwIHRvIHVzZS5cIlxuIyAgICB5b3U6IFwiKHlvdSlcIlxuIyAgICBvbmVfbGljZW5zZV91c2VkOiBcIigxIGxpY2Vuc2UgdXNlZClcIlxuIyAgICBsaWNlbnNlc191c2VkOiBcIihfX2xpY2Vuc2VzVXNlZF9fIGxpY2Vuc2VzIHVzZWQpXCJcbiMgICAgbW9yZV9pbmZvOiBcIk1vcmUgaW5mb1wiXG5cbiMgIHNoYXJpbmc6XG4jICAgIGdhbWU6IFwiR2FtZVwiXG4jICAgIHdlYnBhZ2U6IFwiV2VicGFnZVwiXG4jICAgIHlvdXJfc3R1ZGVudHNfcHJldmlldzogXCJZb3VyIHN0dWRlbnRzIHdpbGwgY2xpY2sgaGVyZSB0byBzZWUgdGhlaXIgZmluaXNoZWQgcHJvamVjdHMhIFVuYXZhaWxhYmxlIGluIHRlYWNoZXIgcHJldmlldy5cIlxuIyAgICB1bmF2YWlsYWJsZTogXCJMaW5rIHNoYXJpbmcgbm90IGF2YWlsYWJsZSBpbiB0ZWFjaGVyIHByZXZpZXcuXCJcbiMgICAgc2hhcmVfZ2FtZTogXCJTaGFyZSBUaGlzIEdhbWVcIlxuIyAgICBzaGFyZV93ZWI6IFwiU2hhcmUgVGhpcyBXZWJwYWdlXCJcbiMgICAgdmljdG9yeV9zaGFyZV9wcmVmaXg6IFwiU2hhcmUgdGhpcyBsaW5rIHRvIGludml0ZSB5b3VyIGZyaWVuZHMgJiBmYW1pbHkgdG9cIlxuIyAgICB2aWN0b3J5X3NoYXJlX3ByZWZpeF9zaG9ydDogXCJJbnZpdGUgcGVvcGxlIHRvXCJcbiMgICAgdmljdG9yeV9zaGFyZV9nYW1lOiBcInBsYXkgeW91ciBnYW1lIGxldmVsXCJcbiMgICAgdmljdG9yeV9zaGFyZV93ZWI6IFwidmlldyB5b3VyIHdlYnBhZ2VcIlxuIyAgICB2aWN0b3J5X3NoYXJlX3N1ZmZpeDogXCIuXCJcbiMgICAgdmljdG9yeV9jb3Vyc2Vfc2hhcmVfcHJlZml4OiBcIlRoaXMgbGluayB3aWxsIGxldCB5b3VyIGZyaWVuZHMgJiBmYW1pbHlcIlxuIyAgICB2aWN0b3J5X2NvdXJzZV9zaGFyZV9nYW1lOiBcInBsYXkgdGhlIGdhbWVcIlxuIyAgICB2aWN0b3J5X2NvdXJzZV9zaGFyZV93ZWI6IFwidmlldyB0aGUgd2VicGFnZVwiXG4jICAgIHZpY3RvcnlfY291cnNlX3NoYXJlX3N1ZmZpeDogXCJ5b3UganVzdCBjcmVhdGVkLlwiXG4jICAgIGNvcHlfdXJsOiBcIkNvcHkgVVJMXCJcbiMgICAgc2hhcmVfd2l0aF90ZWFjaGVyX2VtYWlsOiBcIlNlbmQgdG8geW91ciB0ZWFjaGVyXCJcblxuIyAgZ2FtZV9kZXY6XG4jICAgIGNyZWF0b3I6IFwiQ3JlYXRvclwiXG5cbiMgIHdlYl9kZXY6XG4jICAgIGltYWdlX2dhbGxlcnlfdGl0bGU6IFwiSW1hZ2UgR2FsbGVyeVwiXG4jICAgIHNlbGVjdF9hbl9pbWFnZTogXCJTZWxlY3QgYW4gaW1hZ2UgeW91IHdhbnQgdG8gdXNlXCJcbiMgICAgc2Nyb2xsX2Rvd25fZm9yX21vcmVfaW1hZ2VzOiBcIihTY3JvbGwgZG93biBmb3IgbW9yZSBpbWFnZXMpXCJcbiMgICAgY29weV90aGVfdXJsOiBcIkNvcHkgdGhlIFVSTCBiZWxvd1wiXG4jICAgIGNvcHlfdGhlX3VybF9kZXNjcmlwdGlvbjogXCJVc2VmdWwgaWYgeW91IHdhbnQgdG8gcmVwbGFjZSBhbiBleGlzdGluZyBpbWFnZS5cIlxuIyAgICBjb3B5X3RoZV9pbWdfdGFnOiBcIkNvcHkgdGhlIDxpbWc+IHRhZ1wiXG4jICAgIGNvcHlfdGhlX2ltZ190YWdfZGVzY3JpcHRpb246IFwiVXNlZnVsIGlmIHlvdSB3YW50IHRvIGluc2VydCBhIG5ldyBpbWFnZS5cIlxuIyAgICBjb3B5X3VybDogXCJDb3B5IFVSTFwiXG4jICAgIGNvcHlfaW1nOiBcIkNvcHkgPGltZz5cIlxuIyAgICBob3dfdG9fY29weV9wYXN0ZTogXCJIb3cgdG8gQ29weS9QYXN0ZVwiXG4jICAgIGNvcHk6IFwiQ29weVwiXG4jICAgIHBhc3RlOiBcIlBhc3RlXCJcbiMgICAgYmFja190b19lZGl0aW5nOiBcIkJhY2sgdG8gRWRpdGluZ1wiXG5cbiAgY2xhc3NlczpcbiAgICBhcmNobWFnZV90aXRsZTogXCJFcnptYWdpZXJcIlxuICAgIGFyY2htYWdlX3RpdGxlX2Rlc2NyaXB0aW9uOiBcIihQcm9ncmFtbWllcmVyKVwiXG4jICAgIGFyY2htYWdlX3N1bW1hcnk6IFwiSWYgeW91IGFyZSBhIGRldmVsb3BlciBpbnRlcmVzdGVkIGluIGNvZGluZyBlZHVjYXRpb25hbCBnYW1lcywgYmVjb21lIGFuIGFyY2htYWdlIHRvIGhlbHAgdXMgYnVpbGQgQ29kZUNvbWJhdCFcIlxuICAgIGFydGlzYW5fdGl0bGU6IFwiSGFuZHdlcmtlclwiXG4gICAgYXJ0aXNhbl90aXRsZV9kZXNjcmlwdGlvbjogXCIoTGV2ZWwgRW50d2lja2xlcilcIlxuIyAgICBhcnRpc2FuX3N1bW1hcnk6IFwiQnVpbGQgYW5kIHNoYXJlIGxldmVscyBmb3IgeW91IGFuZCB5b3VyIGZyaWVuZHMgdG8gcGxheS4gQmVjb21lIGFuIEFydGlzYW4gdG8gbGVhcm4gdGhlIGFydCBvZiB0ZWFjaGluZyBvdGhlcnMgdG8gcHJvZ3JhbS5cIlxuICAgIGFkdmVudHVyZXJfdGl0bGU6IFwiQWJlbnRldXJlclwiXG4gICAgYWR2ZW50dXJlcl90aXRsZV9kZXNjcmlwdGlvbjogXCIoTGV2ZWwgU3BpZWx0ZXN0ZXIpXCJcbiMgICAgYWR2ZW50dXJlcl9zdW1tYXJ5OiBcIkdldCBvdXIgbmV3IGxldmVscyAoZXZlbiBvdXIgc3Vic2NyaWJlciBjb250ZW50KSBmb3IgZnJlZSBvbmUgd2VlayBlYXJseSBhbmQgaGVscCB1cyB3b3JrIG91dCBidWdzIGJlZm9yZSBvdXIgcHVibGljIHJlbGVhc2UuXCJcbiAgICBzY3JpYmVfdGl0bGU6IFwiU2NocmVpYmVyXCJcbiAgICBzY3JpYmVfdGl0bGVfZGVzY3JpcHRpb246IFwiKEFydGlrZWwgRWRpdG9yKVwiXG4jICAgIHNjcmliZV9zdW1tYXJ5OiBcIkdvb2QgY29kZSBuZWVkcyBnb29kIGRvY3VtZW50YXRpb24uIFdyaXRlLCBlZGl0LCBhbmQgaW1wcm92ZSB0aGUgZG9jcyByZWFkIGJ5IG1pbGxpb25zIG9mIHBsYXllcnMgYWNyb3NzIHRoZSBnbG9iZS5cIlxuICAgIGRpcGxvbWF0X3RpdGxlOiBcIkRpcGxvbWF0XCJcbiAgICBkaXBsb21hdF90aXRsZV9kZXNjcmlwdGlvbjogXCIow5xiZXJzZXR6ZXIpXCJcbiMgICAgZGlwbG9tYXRfc3VtbWFyeTogXCJDb2RlQ29tYmF0IGlzIGxvY2FsaXplZCBpbiA0NSsgbGFuZ3VhZ2VzIGJ5IG91ciBEaXBsb21hdHMuIEhlbHAgdXMgb3V0IGFuZCBjb250cmlidXRlIHRyYW5zbGF0aW9ucy5cIlxuICAgIGFtYmFzc2Fkb3JfdGl0bGU6IFwiQm90c2NoYWZ0ZXJcIlxuICAgIGFtYmFzc2Fkb3JfdGl0bGVfZGVzY3JpcHRpb246IFwiKFN1cHBvcnQpXCJcbiMgICAgYW1iYXNzYWRvcl9zdW1tYXJ5OiBcIlRhbWUgb3VyIGZvcnVtIHVzZXJzIGFuZCBwcm92aWRlIGRpcmVjdGlvbiBmb3IgdGhvc2Ugd2l0aCBxdWVzdGlvbnMuIE91ciBhbWJhc3NhZG9ycyByZXByZXNlbnQgQ29kZUNvbWJhdCB0byB0aGUgd29ybGQuXCJcbiMgICAgdGVhY2hlcl90aXRsZTogXCJUZWFjaGVyXCJcblxuICBlZGl0b3I6XG4gICAgbWFpbl90aXRsZTogXCJDb2RlQ29tYmF0IEVkaXRvcmVuXCJcbiAgICBhcnRpY2xlX3RpdGxlOiBcIkFydGlrZWwgRWRpdG9yXCJcbiAgICB0aGFuZ190aXRsZTogXCJUaGFuZyBFZGl0b3JcIlxuICAgIGxldmVsX3RpdGxlOiBcIkxldmVsIEVkaXRvclwiXG4jICAgIGNvdXJzZV90aXRsZTogXCJDb3Vyc2UgRWRpdG9yXCJcbiAgICBhY2hpZXZlbWVudF90aXRsZTogXCJBY2hpZXZlbWVudCBFZGl0b3JcIlxuIyAgICBwb2xsX3RpdGxlOiBcIlBvbGwgRWRpdG9yXCJcbiAgICBiYWNrOiBcIlp1csO8Y2tcIlxuICAgIHJldmVydDogXCJadXLDvGNrc2V0emVuXCJcbiAgICByZXZlcnRfbW9kZWxzOiBcIk1vZGVscyB6dXLDvGNrc2V0emVuLlwiXG4gICAgcGlja19hX3RlcnJhaW46IFwiV8OkaGxlIGVpbiBUZXJyYWluXCJcbiMgICAgZHVuZ2VvbjogXCJEdW5nZW9uXCJcbiMgICAgaW5kb29yOiBcIkluZG9vclwiXG4jICAgIGRlc2VydDogXCJEZXNlcnRcIlxuICAgIGdyYXNzeTogXCJHcmFzaWdcIlxuIyAgICBtb3VudGFpbjogXCJNb3VudGFpblwiXG4jICAgIGdsYWNpZXI6IFwiR2xhY2llclwiXG4gICAgc21hbGw6IFwiS2xlaW5cIlxuIyAgICBsYXJnZTogXCJMYXJnZVwiXG4gICAgZm9ya190aXRsZTogXCJGb3JrZSBuZXVlIFZlcnNpb25cIlxuICAgIGZvcmtfY3JlYXRpbmc6IFwiRXJ6ZXVnZSBGb3JrLi4uXCJcbiAgICBnZW5lcmF0ZV90ZXJyYWluOiBcIkdlbmVyaWVyZSBUZXJyYWluXCJcbiAgICBtb3JlOiBcIk1laHJcIlxuICAgIHdpa2k6IFwiV2lraVwiXG4gICAgbGl2ZV9jaGF0OiBcIkxpdmUgQ2hhdFwiXG4jICAgIHRoYW5nX21haW46IFwiTWFpblwiXG4jICAgIHRoYW5nX3Nwcml0ZXNoZWV0czogXCJTcHJpdGVzaGVldHNcIlxuIyAgICB0aGFuZ19jb2xvcnM6IFwiQ29sb3JzXCJcbiAgICBsZXZlbF9zb21lX29wdGlvbnM6IFwiRWluaWdlIEVpbnN0ZWxsdW5nc23DtmdsaWNoa2VpdGVuP1wiXG4gICAgbGV2ZWxfdGFiX3RoYW5nczogXCJUaGFuZ3NcIlxuICAgIGxldmVsX3RhYl9zY3JpcHRzOiBcIlNrcmlwdGVcIlxuICAgIGxldmVsX3RhYl9jb21wb25lbnRzOiBcIktvbXBvbmVudGVuXCJcbiAgICBsZXZlbF90YWJfc3lzdGVtczogXCJTeXN0ZW1lXCJcbiAgICBsZXZlbF90YWJfZG9jczogXCJEb2t1bWVudGF0aW9uXCJcbiAgICBsZXZlbF90YWJfdGhhbmdzX3RpdGxlOiBcIkFrdHVlbGxlIFRoYW5nc1wiXG4gICAgbGV2ZWxfdGFiX3RoYW5nc19hbGw6IFwiQWxsZVwiXG4gICAgbGV2ZWxfdGFiX3RoYW5nc19jb25kaXRpb25zOiBcIlN0YXJ0YmVkaW5ndW5nZW5cIlxuICAgIGxldmVsX3RhYl90aGFuZ3NfYWRkOiBcIlRoYW5ncyBoaW56dWbDvGdlblwiXG4jICAgIGxldmVsX3RhYl90aGFuZ3Nfc2VhcmNoOiBcIlNlYXJjaCB0aGFuZ3NcIlxuIyAgICBhZGRfY29tcG9uZW50czogXCJBZGQgQ29tcG9uZW50c1wiXG4jICAgIGNvbXBvbmVudF9jb25maWdzOiBcIkNvbXBvbmVudCBDb25maWd1cmF0aW9uc1wiXG4jICAgIGNvbmZpZ190aGFuZzogXCJEb3VibGUgY2xpY2sgdG8gY29uZmlndXJlIGEgdGhhbmdcIlxuICAgIGRlbGV0ZTogXCJMw7ZzY2hlblwiXG4gICAgZHVwbGljYXRlOiBcIkR1cGxpemllcmVuXCJcbiMgICAgc3RvcF9kdXBsaWNhdGU6IFwiU3RvcCBEdXBsaWNhdGVcIlxuIyAgICByb3RhdGU6IFwiUm90YXRlXCJcbiAgICBsZXZlbF9jb21wb25lbnRfdGFiX3RpdGxlOiBcIkFrdHVlbGxlIEtvbXBvbmVudGVuXCJcbiAgICBsZXZlbF9jb21wb25lbnRfYnRuX25ldzogXCJuZXVlIEtvbXBvbmVudGUgZXJzdGVsbGVuXCJcbiAgICBsZXZlbF9zeXN0ZW1zX3RhYl90aXRsZTogXCJBa3R1ZWxsZSBTeXN0ZW1lXCJcbiAgICBsZXZlbF9zeXN0ZW1zX2J0bl9uZXc6IFwibmV1ZXMgU3lzdGVtIGVyc3RlbGxlblwiXG4gICAgbGV2ZWxfc3lzdGVtc19idG5fYWRkOiBcIlN5c3RlbSBoaW56dWbDvGdlblwiXG4gICAgbGV2ZWxfY29tcG9uZW50c190aXRsZTogXCJadXLDvGNrIHp1IGFsbGVuIFRoYW5nc1wiXG4gICAgbGV2ZWxfY29tcG9uZW50c190eXBlOiBcIlR5cFwiXG4gICAgbGV2ZWxfY29tcG9uZW50X2VkaXRfdGl0bGU6IFwiS29tcG9uZW50ZSBiZWFyYmVpdGVuXCJcbiAgICBsZXZlbF9jb21wb25lbnRfY29uZmlnX3NjaGVtYTogXCJLb25maWd1cmF0aW9uc3NjaGVtYVwiXG4gICAgbGV2ZWxfc3lzdGVtX2VkaXRfdGl0bGU6IFwiU3lzdGVtIGJlYXJiZWl0ZW5cIlxuICAgIGNyZWF0ZV9zeXN0ZW1fdGl0bGU6IFwibmV1ZXMgU3lzdGVtIGVyc3RlbGxlblwiXG4gICAgbmV3X2NvbXBvbmVudF90aXRsZTogXCJOZXVlIEtvbXBvbmVudGUgZXJzdGVsbGVuXCJcbiAgICBuZXdfY29tcG9uZW50X2ZpZWxkX3N5c3RlbTogXCJTeXN0ZW1cIlxuICAgIG5ld19hcnRpY2xlX3RpdGxlOiBcIkVyc3RlbGxlIGVpbmVuIG5ldWVuIEFydGlrZWxcIlxuICAgIG5ld190aGFuZ190aXRsZTogXCJFcnN0ZWxsZSBlaW5lbiBuZXVlbiBUaGFuZy1UeXBlblwiXG4gICAgbmV3X2xldmVsX3RpdGxlOiBcIkVyc3RlbGxlIGVpbiBuZXVlcyBMZXZlbFwiXG4gICAgbmV3X2FydGljbGVfdGl0bGVfbG9naW46IFwiTWVsZGUgZGljaCBhbiB1bSBlaW5lbiBuZXVlbiBBcnRpa2VsIHp1IGVyc3RlbGxlblwiXG4gICAgbmV3X3RoYW5nX3RpdGxlX2xvZ2luOiBcIk1lbGRlIGRpY2ggYW4gdW0gZWluZW4gbmV1ZW4gVGhhbmctVHlwZW4genUgZXJzdGVsbGVuXCJcbiAgICBuZXdfbGV2ZWxfdGl0bGVfbG9naW46IFwiTWVsZGUgZGljaCBhbiB1bSBlaW4gbmV1ZXMgTGV2ZWwgenUgZXJzdGVsbGVuXCJcbiAgICBuZXdfYWNoaWV2ZW1lbnRfdGl0bGU6IFwiRXJzdGVsbGUgZWluIG5ldWVzIEFjaGlldmVtZW50XCJcbiAgICBuZXdfYWNoaWV2ZW1lbnRfdGl0bGVfbG9naW46IFwiTWVsZGUgZGljaCBhbiB1bSBlaW4gbmV1ZXMgQWNoaWV2ZW1lbnQgenUgZXJzdGVsbGVuXCJcbiMgICAgbmV3X3BvbGxfdGl0bGU6IFwiQ3JlYXRlIGEgTmV3IFBvbGxcIlxuIyAgICBuZXdfcG9sbF90aXRsZV9sb2dpbjogXCJMb2cgSW4gdG8gQ3JlYXRlIGEgTmV3IFBvbGxcIlxuICAgIGFydGljbGVfc2VhcmNoX3RpdGxlOiBcIkR1cmNoc3VjaGUgQXJ0aWtlbCBoaWVyXCJcbiAgICB0aGFuZ19zZWFyY2hfdGl0bGU6IFwiRHVyY2hzdWNoZSBUaGFuZy1UeXBlbiBoaWVyXCJcbiAgICBsZXZlbF9zZWFyY2hfdGl0bGU6IFwiRHVyY2hzdWNoZSBMZXZlbHMgaGllclwiXG4gICAgYWNoaWV2ZW1lbnRfc2VhcmNoX3RpdGxlOiBcIkR1cmNoc3VjaGUgQWNoaWV2ZW1lbnRzXCJcbiMgICAgcG9sbF9zZWFyY2hfdGl0bGU6IFwiU2VhcmNoIFBvbGxzXCJcbiAgICByZWFkX29ubHlfd2FybmluZzI6IFwiV2FybnVuZzogRHUga2FubnN0IGhpZXIga2VpbmUgw4RuZGVydW5nZW4gc3BlaWNoZXJuLCB3ZWlsIGR1IG5pY2h0IGFuZ2VtZWxkZXQgYmlzdC5cIlxuICAgIG5vX2FjaGlldmVtZW50czogXCJFcyB3dXJkZW4gbm9jaCBrZWluZSBBY2hpZXZlbWVudHMgenUgZGllc2VtIExldmVsIGhpbnp1Z2Vmw7xndC5cIlxuIyAgICBhY2hpZXZlbWVudF9xdWVyeV9taXNjOiBcIktleSBhY2hpZXZlbWVudCBvZmYgb2YgbWlzY2VsbGFuZWFcIlxuIyAgICBhY2hpZXZlbWVudF9xdWVyeV9nb2FsczogXCJLZXkgYWNoaWV2ZW1lbnQgb2ZmIG9mIGxldmVsIGdvYWxzXCJcbiMgICAgbGV2ZWxfY29tcGxldGlvbjogXCJMZXZlbCBDb21wbGV0aW9uXCJcbiMgICAgcG9wX2kxOG46IFwiUG9wdWxhdGUgSTE4TlwiXG4jICAgIHRhc2tzOiBcIlRhc2tzXCJcbiMgICAgY2xlYXJfc3RvcmFnZTogXCJDbGVhciB5b3VyIGxvY2FsIGNoYW5nZXNcIlxuIyAgICBhZGRfc3lzdGVtX3RpdGxlOiBcIkFkZCBTeXN0ZW1zIHRvIExldmVsXCJcbiMgICAgZG9uZV9hZGRpbmc6IFwiRG9uZSBBZGRpbmdcIlxuXG4gIGFydGljbGU6XG4gICAgZWRpdF9idG5fcHJldmlldzogXCJWb3JzY2hhdVwiXG4gICAgZWRpdF9hcnRpY2xlX3RpdGxlOiBcIkFydGlrZWwgYmVhcmJlaXRlblwiXG5cbiMgIHBvbGxzOlxuIyAgICBwcmlvcml0eTogXCJQcmlvcml0eVwiXG5cbiAgY29udHJpYnV0ZTpcbiMgICAgcGFnZV90aXRsZTogXCJDb250cmlidXRpbmdcIlxuIyAgICBpbnRyb19ibHVyYjogXCJDb2RlQ29tYmF0IGlzIDEwMCUgb3BlbiBzb3VyY2UhIEh1bmRyZWRzIG9mIGRlZGljYXRlZCBwbGF5ZXJzIGhhdmUgaGVscGVkIHVzIGJ1aWxkIHRoZSBnYW1lIGludG8gd2hhdCBpdCBpcyB0b2RheS4gSm9pbiB1cyBhbmQgd3JpdGUgdGhlIG5leHQgY2hhcHRlciBpbiBDb2RlQ29tYmF0J3MgcXVlc3QgdG8gdGVhY2ggdGhlIHdvcmxkIHRvIGNvZGUhXCJcbiAgICBhbGVydF9hY2NvdW50X21lc3NhZ2VfaW50cm86IFwiSGV5IGR1IVwiXG4gICAgYWxlcnRfYWNjb3VudF9tZXNzYWdlOiBcIlVtIEtsYXNzZW4tRW1haWxzIGFib25uaWVyZW4genUga8O2bm5lbiwgbXVzc3QgZHUgZGljaCB6dWVyc3QgYW5tZWxkZW4uXCJcbiMgICAgYXJjaG1hZ2VfaW50cm9kdWN0aW9uOiBcIk9uZSBvZiB0aGUgYmVzdCBwYXJ0cyBhYm91dCBidWlsZGluZyBnYW1lcyBpcyB0aGV5IHN5bnRoZXNpemUgc28gbWFueSBkaWZmZXJlbnQgdGhpbmdzLiBHcmFwaGljcywgc291bmQsIHJlYWwtdGltZSBuZXR3b3JraW5nLCBzb2NpYWwgbmV0d29ya2luZywgYW5kIG9mIGNvdXJzZSBtYW55IG9mIHRoZSBtb3JlIGNvbW1vbiBhc3BlY3RzIG9mIHByb2dyYW1taW5nLCBmcm9tIGxvdy1sZXZlbCBkYXRhYmFzZSBtYW5hZ2VtZW50LCBhbmQgc2VydmVyIGFkbWluaXN0cmF0aW9uIHRvIHVzZXIgZmFjaW5nIGRlc2lnbiBhbmQgaW50ZXJmYWNlIGJ1aWxkaW5nLiBUaGVyZSdzIGEgbG90IHRvIGRvLCBhbmQgaWYgeW91J3JlIGFuIGV4cGVyaWVuY2VkIHByb2dyYW1tZXIgd2l0aCBhIGhhbmtlcmluZyB0byByZWFsbHkgZGl2ZSBpbnRvIHRoZSBuaXR0eS1ncml0dHkgb2YgQ29kZUNvbWJhdCwgdGhpcyBjbGFzcyBtaWdodCBiZSBmb3IgeW91LiBXZSB3b3VsZCBsb3ZlIHRvIGhhdmUgeW91ciBoZWxwIGJ1aWxkaW5nIHRoZSBiZXN0IHByb2dyYW1taW5nIGdhbWUgZXZlci5cIlxuICAgIGNsYXNzX2F0dHJpYnV0ZXM6IFwiS2xhc3NlbmF0dHJpYnV0ZVwiXG4jICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8xX3ByZWY6IFwiS25vd2xlZGdlIGluIFwiXG4jICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8xX3N1ZjogXCIsIG9yIGEgZGVzaXJlIHRvIGxlYXJuLiBNb3N0IG9mIG91ciBjb2RlIGlzIGluIHRoaXMgbGFuZ3VhZ2UuIElmIHlvdSdyZSBhIGZhbiBvZiBSdWJ5IG9yIFB5dGhvbiwgeW91J2xsIGZlZWwgcmlnaHQgYXQgaG9tZS4gSXQncyBKYXZhU2NyaXB0LCBidXQgd2l0aCBhIG5pY2VyIHN5bnRheC5cIlxuIyAgICBhcmNobWFnZV9hdHRyaWJ1dGVfMjogXCJTb21lIGV4cGVyaWVuY2UgaW4gcHJvZ3JhbW1pbmcgYW5kIHBlcnNvbmFsIGluaXRpYXRpdmUuIFdlJ2xsIGhlbHAgeW91IGdldCBvcmllbnRlZCwgYnV0IHdlIGNhbid0IHNwZW5kIG11Y2ggdGltZSB0cmFpbmluZyB5b3UuXCJcbiMgICAgaG93X3RvX2pvaW46IFwiSG93IFRvIEpvaW5cIlxuICAgIGpvaW5fZGVzY18xOiBcIkplZGVyIGthbm4gbWl0aGVsZmVuISBTY2hhdSBkaXIgdW5zZXJlbiBcIlxuICAgIGpvaW5fZGVzY18yOiBcInVtIGFuenVmYW5nZW4sIHVuZCBoYWtlIGRpZSBDaGVja2JveCB1bnRlbiBhbiB1bSBkaWNoIGFscyBtdXRpZ2VyIEVyem1hZ2llciBlaW56dXRyYWdlbiB1bmQgw7xiZXIgZGllIG5ldWVzdGVuIE5hY2hyaWNodGVuIHBlciBFbWFpbCB6dSBlcmhhbHRlbi4gTcO2Y2h0ZXN0IGR1IGRpY2ggZGFyw7xiZXIgdW50ZXJoYWx0ZW4gd2FzIHp1IHR1biBpc3Qgb2RlciB3aWUgZHUgZGljaCBiZXNzZXIgYmV0ZWlsaWdlbiBrYW5uc3Q/IFwiXG4gICAgam9pbl9kZXNjXzM6IFwiLCBvZGVyIGZpbmRlIHVucyBpbiB1bnNlcmVtIFwiXG4gICAgam9pbl9kZXNjXzQ6IFwidW5kIHdpciBzY2hhdWVuIHZvbiBkb3J0IG1hbCFcIlxuICAgIGpvaW5fdXJsX2VtYWlsOiBcIkVtYWlsZSB1bnNcIlxuIyAgICBqb2luX3VybF9zbGFjazogXCJwdWJsaWMgU2xhY2sgY2hhbm5lbFwiXG4gICAgYXJjaG1hZ2Vfc3Vic2NyaWJlX2Rlc2M6IFwiRXJoYWx0ZSBFbWFpbHMgw7xiZXIgbmV1ZSBQcm9ncmFtbWllci1Nw7ZnbGljaGtlaXRlbiB1bmQgQW5rw7xuZGlndW5nZW4uXCJcbiMgICAgYXJ0aXNhbl9pbnRyb2R1Y3Rpb25fcHJlZjogXCJXZSBtdXN0IGNvbnN0cnVjdCBhZGRpdGlvbmFsIGxldmVscyEgUGVvcGxlIGJlIGNsYW1vcmluZyBmb3IgbW9yZSBjb250ZW50LCBhbmQgd2UgY2FuIG9ubHkgYnVpbGQgc28gbWFueSBvdXJzZWx2ZXMuIFJpZ2h0IG5vdyB5b3VyIHdvcmtzdGF0aW9uIGlzIGxldmVsIG9uZTsgb3VyIGxldmVsIGVkaXRvciBpcyBiYXJlbHkgdXNhYmxlIGV2ZW4gYnkgaXRzIGNyZWF0b3JzLCBzbyBiZSB3YXJ5LiBJZiB5b3UgaGF2ZSB2aXNpb25zIG9mIGNhbXBhaWducyBzcGFubmluZyBmb3ItbG9vcHMgdG9cIlxuIyAgICBhcnRpc2FuX2ludHJvZHVjdGlvbl9zdWY6IFwiLCB0aGVuIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS5cIlxuIyAgICBhcnRpc2FuX2F0dHJpYnV0ZV8xOiBcIkFueSBleHBlcmllbmNlIGluIGJ1aWxkaW5nIGNvbnRlbnQgbGlrZSB0aGlzIHdvdWxkIGJlIG5pY2UsIHN1Y2ggYXMgdXNpbmcgQmxpenphcmQncyBsZXZlbCBlZGl0b3JzLiBCdXQgbm90IHJlcXVpcmVkIVwiXG4jICAgIGFydGlzYW5fYXR0cmlidXRlXzI6IFwiQSBoYW5rZXJpbmcgdG8gZG8gYSB3aG9sZSBsb3Qgb2YgdGVzdGluZyBhbmQgaXRlcmF0aW9uLiBUbyBtYWtlIGdvb2QgbGV2ZWxzLCB5b3UgbmVlZCB0byB0YWtlIGl0IHRvIG90aGVycyBhbmQgd2F0Y2ggdGhlbSBwbGF5IGl0LCBhbmQgYmUgcHJlcGFyZWQgdG8gZmluZCBhIGxvdCBvZiB0aGluZ3MgdG8gZml4LlwiXG4jICAgIGFydGlzYW5fYXR0cmlidXRlXzM6IFwiRm9yIHRoZSB0aW1lIGJlaW5nLCBlbmR1cmFuY2UgZW4gcGFyIHdpdGggYW4gQWR2ZW50dXJlci4gT3VyIExldmVsIEVkaXRvciBpcyBzdXBlciBwcmVsaW1pbmFyeSBhbmQgZnJ1c3RyYXRpbmcgdG8gdXNlLiBZb3UgaGF2ZSBiZWVuIHdhcm5lZCFcIlxuICAgIGFydGlzYW5fam9pbl9kZXNjOiBcIlZlcndlbmRlIGRlbiBMZXZlbC1FZGl0b3IgbWl0IGRpZXNlbiBTY2hyaXR0ZW4sIG1laHIgb2RlciB3ZW5pZ2VyOlwiXG4gICAgYXJ0aXNhbl9qb2luX3N0ZXAxOiBcIkxlc2UgZGllIERva3VtZW50YXRpb24uXCJcbiAgICBhcnRpc2FuX2pvaW5fc3RlcDI6IFwiRXJzdGVsbGUgZWluIG5ldWVzIExldmVsIHVuZCBlcmt1bmRlIGV4aXN0aWVyZW5kZSBMZXZlbC5cIlxuICAgIGFydGlzYW5fam9pbl9zdGVwMzogXCJGaW5kZSB1bnMgaW0gw7ZmZmVudGxpY2hlbiBTbGFjayBSYXVtLCBmYWxscyBkdSBIaWxmZSBicmF1Y2hzdC5cIlxuICAgIGFydGlzYW5fam9pbl9zdGVwNDogXCJQb3N0ZSBkZWluZSBMZXZlbCBpbSBGb3J1bSB1bSBGZWVkYmFjayB6dSBlcmhhbHRlbi5cIlxuICAgIGFydGlzYW5fc3Vic2NyaWJlX2Rlc2M6IFwiRXJoYWx0ZSBFbWFpbHMgw7xiZXIgTGV2ZWwtRWRpdG9yIFVwZGF0ZXMgdW5kIEFua8O8bmRpZ3VuZ2VuLlwiXG4jICAgIGFkdmVudHVyZXJfaW50cm9kdWN0aW9uOiBcIkxldCdzIGJlIGNsZWFyIGFib3V0IHlvdXIgcm9sZTogeW91IGFyZSB0aGUgdGFuay4gWW91J3JlIGdvaW5nIHRvIHRha2UgaGVhdnkgZGFtYWdlLiBXZSBuZWVkIHBlb3BsZSB0byB0cnkgb3V0IGJyYW5kLW5ldyBsZXZlbHMgYW5kIGhlbHAgaWRlbnRpZnkgaG93IHRvIG1ha2UgdGhpbmdzIGJldHRlci4gVGhlIHBhaW4gd2lsbCBiZSBlbm9ybW91czsgbWFraW5nIGdvb2QgZ2FtZXMgaXMgYSBsb25nIHByb2Nlc3MgYW5kIG5vIG9uZSBnZXRzIGl0IHJpZ2h0IHRoZSBmaXJzdCB0aW1lLiBJZiB5b3UgY2FuIGVuZHVyZSBhbmQgaGF2ZSBhIGhpZ2ggY29uc3RpdHV0aW9uIHNjb3JlLCB0aGVuIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS5cIlxuIyAgICBhZHZlbnR1cmVyX2F0dHJpYnV0ZV8xOiBcIkEgdGhpcnN0IGZvciBsZWFybmluZy4gWW91IHdhbnQgdG8gbGVhcm4gaG93IHRvIGNvZGUgYW5kIHdlIHdhbnQgdG8gdGVhY2ggeW91IGhvdyB0byBjb2RlLiBZb3UnbGwgcHJvYmFibHkgYmUgZG9pbmcgbW9zdCBvZiB0aGUgdGVhY2hpbmcgaW4gdGhpcyBjYXNlLCB0aG91Z2guXCJcbiMgICAgYWR2ZW50dXJlcl9hdHRyaWJ1dGVfMjogXCJDaGFyaXNtYXRpYy4gQmUgZ2VudGxlIGJ1dCBhcnRpY3VsYXRlIGFib3V0IHdoYXQgbmVlZHMgaW1wcm92aW5nLCBhbmQgb2ZmZXIgc3VnZ2VzdGlvbnMgb24gaG93IHRvIGltcHJvdmUuXCJcbiMgICAgYWR2ZW50dXJlcl9qb2luX3ByZWY6IFwiRWl0aGVyIGdldCB0b2dldGhlciB3aXRoIChvciByZWNydWl0ISkgYW4gQXJ0aXNhbiBhbmQgd29yayB3aXRoIHRoZW0sIG9yIGNoZWNrIHRoZSBib3ggYmVsb3cgdG8gcmVjZWl2ZSBlbWFpbHMgd2hlbiB0aGVyZSBhcmUgbmV3IGxldmVscyB0byB0ZXN0LiBXZSdsbCBhbHNvIGJlIHBvc3RpbmcgYWJvdXQgbGV2ZWxzIHRvIHJldmlldyBvbiBvdXIgbmV0d29ya3MgbGlrZVwiXG4jICAgIGFkdmVudHVyZXJfZm9ydW1fdXJsOiBcIm91ciBmb3J1bVwiXG4jICAgIGFkdmVudHVyZXJfam9pbl9zdWY6IFwic28gaWYgeW91IHByZWZlciB0byBiZSBub3RpZmllZCB0aG9zZSB3YXlzLCBzaWduIHVwIHRoZXJlIVwiXG4gICAgYWR2ZW50dXJlcl9zdWJzY3JpYmVfZGVzYzogXCJFcmhhbHRlIEVtYWlscyB3ZW5uIGVzIG5ldWUgTGV2ZWxzIHp1bSBUZXN0ZW4gZ2lidC5cIlxuIyAgICBzY3JpYmVfaW50cm9kdWN0aW9uX3ByZWY6IFwiQ29kZUNvbWJhdCBpc24ndCBqdXN0IGdvaW5nIHRvIGJlIGEgYnVuY2ggb2YgbGV2ZWxzLiBJdCB3aWxsIGFsc28gaW5jbHVkZSBhIHJlc291cmNlIGZvciBrbm93bGVkZ2UsIGEgd2lraSBvZiBwcm9ncmFtbWluZyBjb25jZXB0cyB0aGF0IGxldmVscyBjYW4gaG9vayBpbnRvLiBUaGF0IHdheSByYXRoZXIgdGhhbiBlYWNoIEFydGlzYW4gaGF2aW5nIHRvIGRlc2NyaWJlIGluIGRldGFpbCB3aGF0IGEgY29tcGFyaXNvbiBvcGVyYXRvciBpcywgdGhleSBjYW4gc2ltcGx5IGxpbmsgdGhlaXIgbGV2ZWwgdG8gdGhlIEFydGljbGUgZGVzY3JpYmluZyB0aGVtIHRoYXQgaXMgYWxyZWFkeSB3cml0dGVuIGZvciB0aGUgcGxheWVyJ3MgZWRpZmljYXRpb24uIFNvbWV0aGluZyBhbG9uZyB0aGUgbGluZXMgb2Ygd2hhdCB0aGUgXCJcbiAgICBzY3JpYmVfaW50cm9kdWN0aW9uX3VybF9tb3ppbGxhOiBcIk1vemlsbGEgRGV2ZWxvcGVyIE5ldHdvcmtcIlxuIyAgICBzY3JpYmVfaW50cm9kdWN0aW9uX3N1ZjogXCIgaGFzIGJ1aWx0LiBJZiB5b3VyIGlkZWEgb2YgZnVuIGlzIGFydGljdWxhdGluZyB0aGUgY29uY2VwdHMgb2YgcHJvZ3JhbW1pbmcgaW4gTWFya2Rvd24gZm9ybSwgdGhlbiB0aGlzIGNsYXNzIG1pZ2h0IGJlIGZvciB5b3UuXCJcbiMgICAgc2NyaWJlX2F0dHJpYnV0ZV8xOiBcIlNraWxsIGluIHdvcmRzIGlzIHByZXR0eSBtdWNoIGFsbCB5b3UgbmVlZC4gTm90IG9ubHkgZ3JhbW1hciBhbmQgc3BlbGxpbmcsIGJ1dCBhYmxlIHRvIGNvbnZleSBjb21wbGljYXRlZCBpZGVhcyB0byBvdGhlcnMuXCJcbiAgICBjb250YWN0X3VzX3VybDogXCJLb250YWt0aWVyZSB1bnNcIiAjIHtjaGFuZ2V9XG4gICAgc2NyaWJlX2pvaW5fZGVzY3JpcHRpb246IFwiZXJ6w6RobGUgdW5zIGVpbiBiacOfY2hlbiDDvGJlciBkaWNoLCBkZWluZSBFcmZhaHJ1bmcgbWl0IGRlciBQcm9ncmFtbWllcnVuZyB1bmQgw7xiZXIgd2VsY2hlIFRoZW1lbiBkdSBzY2hyZWliZW4gbcO2Y2h0ZXN0LiBXaXIgd2VyZGVuIHZvbiBkb3J0IGF1cyBnZWhlbiFcIlxuICAgIHNjcmliZV9zdWJzY3JpYmVfZGVzYzogXCJFcmhhbHRlIEVtYWlscyDDvGJlciBBbmvDvG5kaWd1bmdlbiB6dSBzY2hyZWliZW5kZW4gQXJ0aWtlbG4uXCJcbiAgICBkaXBsb21hdF9pbnRyb2R1Y3Rpb25fcHJlZjogXCJBbHNvIHdlbm4gZXMgZWluZXMgZ2lidCB3YXMgd2lyIGdlbGVybnQgaGFiZW4gdm9tIFwiXG4gICAgZGlwbG9tYXRfbGF1bmNoX3VybDogXCJMYXVuY2ggaW0gT2t0b2JlclwiXG4gICAgZGlwbG9tYXRfaW50cm9kdWN0aW9uX3N1ZjogXCJpc3QgZGFzIGVzIGVpbiBncm/Dn2VzIEludGVyZXNzZSBhbiBDb2RlQ29tYmF0IGluIGFuZGVyZW4gTMOkbmRlcm4gZ2lidCEgV2lyIHN0ZWxsZW4gZWluZSBUcnVwcGUgdm9uIMOcYmVyc2V0emVybiB6dXNhbW1lbiwgZGllIGdld2lsbHQgc2luZCBlaW5lbiBTYXR6IFfDtnJ0ZW4gaW4gZWluZW4gYW5kZXJlbiBTYXR6IFfDtnJ0ZXIgdW16dXdhbmRlbG4gdW0gQ29kZUNvbWJhdCBkZXIgV2VsdCBzbyB6dWfDpG5nbGljaCB3aWUgbcO2Z2xpY2ggenUgbWFjaGVuLiBXZW5uIGR1IGVzIG1hZ3N0IGVpbmUgVm9yc2NoYXUgdm9uIHp1a8O8bmZ0aWdlbSBDb250ZW50IHp1IGVyaGFsdGVuIHVuZCBkaWVzZSBMZXZlbCBzbyBzY2huZWxsIHdpZSBtw7ZnbGljaCBkZWluZW4gTGFuZHNsZXV0ZW4genVyIFZlcmbDvGd1bmcgenUgc3RlbGxlbiwgZGFubiBpc3QgZGllc2UgS2xhc3NlIHZpZWxsZWljaHQgZsO8ciBkaWNoLlwiXG4jICAgIGRpcGxvbWF0X2F0dHJpYnV0ZV8xOiBcIkZsdWVuY3kgaW4gRW5nbGlzaCBhbmQgdGhlIGxhbmd1YWdlIHlvdSB3b3VsZCBsaWtlIHRvIHRyYW5zbGF0ZSB0by4gV2hlbiBjb252ZXlpbmcgY29tcGxpY2F0ZWQgaWRlYXMsIGl0J3MgaW1wb3J0YW50IHRvIGhhdmUgYSBzdHJvbmcgZ3Jhc3AgaW4gYm90aCFcIlxuIyAgICBkaXBsb21hdF9pMThuX3BhZ2VfcHJlZml4OiBcIllvdSBjYW4gc3RhcnQgdHJhbnNsYXRpbmcgb3VyIGxldmVscyBieSBnb2luZyB0byBvdXJcIlxuIyAgICBkaXBsb21hdF9pMThuX3BhZ2U6IFwidHJhbnNsYXRpb25zIHBhZ2VcIlxuIyAgICBkaXBsb21hdF9pMThuX3BhZ2Vfc3VmZml4OiBcIiwgb3Igb3VyIGludGVyZmFjZSBhbmQgd2Vic2l0ZSBvbiBHaXRIdWIuXCJcbiAgICBkaXBsb21hdF9qb2luX3ByZWZfZ2l0aHViOiBcIkZpbmRlIGRlaW5lIFNwcmFjaGRhdGVpIFwiXG4gICAgZGlwbG9tYXRfZ2l0aHViX3VybDogXCJiZWkgR2l0SHViXCJcbiAgICBkaXBsb21hdF9qb2luX3N1Zl9naXRodWI6IFwiLCBlZGl0aWVyZSBzaWUgb25saW5lIHVuZCByZWljaGUgZWluZW4gUHVsbCBSZXF1ZXN0IGVpbi4gQXXDn2VyZGVtLCBoYWtlIGRpZSBDaGVja2JveCB1bnRlbiBhbiB1bSDDvGJlciBuZXVlIEVudHdpY2tsdW5nZW4gYmVpIGRlciBJbnRlcm5hdGlvbmFsaXNpZXJ1bmcgYXVmIGRlbSBsYXVmZW5kZW4genUgYmxlaWJlbiFcIlxuICAgIGRpcGxvbWF0X3N1YnNjcmliZV9kZXNjOiBcIkVyaGFsdGUgRW1haWxzIMO8YmVyIGkxOG4gRW50d2lja2x1bmdlbiB1bmQgTGV2ZWwgZGllIMO8YmVyc2V0enQgd2VyZGVuIG3DvHNzZW4uXCJcbiAgICBhbWJhc3NhZG9yX2ludHJvZHVjdGlvbjogXCJXaXIgYmF1ZW4gZWluZW4gQ29tbXVuaXR5IHVuZCBkdSBiaXN0IGRpZSBWZXJiaW5kdW5nIGRhenUuIFdpciBoYWJlbiBPbGFyayBDaGF0cywgRW1haWwgdW5kIHNvemlhbGUgTmV0endlcmtlIG1pdCB2aWVsZW4gTWVuc2NoZW4gbWl0IGRlbmVuIG1hbiBzcHJlY2hlbiwgZGFiZWkgaGVsZmVuIG1pdCBkZW0gU3BpZWwgdmVydHJhdXQgenUgd2VyZGVuIHVuZCB2b24gbGVybmVuIGthbm4uIFdlbm4gZHUgaGVsZmVuIG3DtmNodGVzdCBMZXV0ZSB6dSBpbnZvbHZpZXJlbiwgU3Bhc3MgenUgaGFiZW4gdW5kIGVpbiBndXRlcyBHZWbDvGhsIGbDvHIgZGVuIFB1bHMgdm9uIENvZGVDb21iYXQgdW5kIHdvIHdpciBobiB3b2xsZW4sIGRhbm4ga8O2bm50ZSBkaWVzZSBLbGFzc2UgZsO8ciBkaWNoIHNlaW4uXCJcbiMgICAgYW1iYXNzYWRvcl9hdHRyaWJ1dGVfMTogXCJDb21tdW5pY2F0aW9uIHNraWxscy4gQmUgYWJsZSB0byBpZGVudGlmeSB0aGUgcHJvYmxlbXMgcGxheWVycyBhcmUgaGF2aW5nIGFuZCBoZWxwIHRoZW0gc29sdmUgdGhlbS4gQWxzbywga2VlcCB0aGUgcmVzdCBvZiB1cyBpbmZvcm1lZCBhYm91dCB3aGF0IHBsYXllcnMgYXJlIHNheWluZywgd2hhdCB0aGV5IGxpa2UgYW5kIGRvbid0IGxpa2UgYW5kIHdhbnQgbW9yZSBvZiFcIlxuIyAgICBhbWJhc3NhZG9yX2pvaW5fZGVzYzogXCJ0ZWxsIHVzIGEgbGl0dGxlIGFib3V0IHlvdXJzZWxmLCB3aGF0IHlvdSd2ZSBkb25lIGFuZCB3aGF0IHlvdSdkIGJlIGludGVyZXN0ZWQgaW4gZG9pbmcuIFdlJ2xsIGdvIGZyb20gdGhlcmUhXCJcbiAgICBhbWJhc3NhZG9yX2pvaW5fbm90ZV9zdHJvbmc6IFwiQW5tZXJrdW5nXCJcbiMgICAgYW1iYXNzYWRvcl9qb2luX25vdGVfZGVzYzogXCJPbmUgb2Ygb3VyIHRvcCBwcmlvcml0aWVzIGlzIHRvIGJ1aWxkIG11bHRpcGxheWVyIHdoZXJlIHBsYXllcnMgaGF2aW5nIGRpZmZpY3VsdHkgc29sdmluZyBsZXZlbHMgY2FuIHN1bW1vbiBoaWdoZXIgbGV2ZWwgd2l6YXJkcyB0byBoZWxwIHRoZW0uIFRoaXMgd2lsbCBiZSBhIGdyZWF0IHdheSBmb3IgYW1iYXNzYWRvcnMgdG8gZG8gdGhlaXIgdGhpbmcuIFdlJ2xsIGtlZXAgeW91IHBvc3RlZCFcIlxuICAgIGFtYmFzc2Fkb3Jfc3Vic2NyaWJlX2Rlc2M6IFwiRXJoYWx0ZSBFbWFpbHMgw7xiZXIgU3VwcG9ydC1VcGRhdGVzIGFuZCBNZWhyc3BpZWxlci1FbnR3aWNrbHVuZ2VuLlwiXG4jICAgIHRlYWNoZXJfc3Vic2NyaWJlX2Rlc2M6IFwiR2V0IGVtYWlscyBvbiB1cGRhdGVzIGFuZCBhbm5vdW5jZW1lbnRzIGZvciB0ZWFjaGVycy5cIlxuICAgIGNoYW5nZXNfYXV0b19zYXZlOiBcIsOEbmRlcnVuZ2VuIGFuIENoZWNrYm94ZW4gd2VyZGVuIGF1dG9tYXRpc2NoIGdlc3BlaWNoZXJ0LlwiXG4gICAgZGlsaWdlbnRfc2NyaWJlczogXCJVbnNlcmUgZmxlacOfZ2VuIFNjaHJlaWJlcjpcIlxuICAgIHBvd2VyZnVsX2FyY2htYWdlczogXCJVbnNlcmUgbcOkY2h0aWdlbiBFcnptYWdpZXI6XCJcbiAgICBjcmVhdGl2ZV9hcnRpc2FuczogXCJVbnNlcmUga3JlYXRpdmVuIEhhbmR3ZXJrZXI6XCJcbiAgICBicmF2ZV9hZHZlbnR1cmVyczogXCJVbnNlcmUgbXV0aWdlbiBBYmVudGV1cmVyOlwiXG4gICAgdHJhbnNsYXRpbmdfZGlwbG9tYXRzOiBcIlVuc2VyZSDDvGJlcnNldHplbmRlbiBEaXBsb21hdGVuOlwiXG4gICAgaGVscGZ1bF9hbWJhc3NhZG9yczogXCJVbnNlcmUgaGlsZnJlaWNoZW4gQm90c2NoYWZ0ZXI6XCJcblxuICBsYWRkZXI6XG4gICAgbXlfbWF0Y2hlczogXCJNZWluZSBNYXRjaGVzXCJcbiAgICBzaW11bGF0ZTogXCJTaW11bGllcmVcIlxuICAgIHNpbXVsYXRpb25fZXhwbGFuYXRpb246IFwiRHVyY2ggZGFzIFNpbXVsaWVyZW4gdm9uIFNwaWVsZW4ga2FubnN0IGR1IGRlaW5lIFNwaWVsZSBzY2huZWxsZXIgcmFuZ2llcnQgYmVrb21tZW4hXCJcbiMgICAgc2ltdWxhdGlvbl9leHBsYW5hdGlvbl9sZWFndWVzOiBcIllvdSB3aWxsIG1haW5seSBoZWxwIHNpbXVsYXRlIGdhbWVzIGZvciBhbGxpZWQgcGxheWVycyBpbiB5b3VyIGNsYW5zIGFuZCBjb3Vyc2VzLlwiXG4gICAgc2ltdWxhdGVfZ2FtZXM6IFwiU2ltdWxpZXJlIFNwaWVsZSFcIlxuICAgIGdhbWVzX3NpbXVsYXRlZF9ieTogXCJTcGllbGUgZGllIGR1cmNoIGRpY2ggc2ltdWxpZXJ0IHdvcmRlbjpcIlxuICAgIGdhbWVzX3NpbXVsYXRlZF9mb3I6IFwiU3BpZWxlIGRpZSBmw7xyIGRpY2ggc2ltdWxpZXJ0IHdvcmRlbjpcIlxuIyAgICBnYW1lc19pbl9xdWV1ZTogXCJHYW1lcyBjdXJyZW50bHkgaW4gdGhlIHF1ZXVlOlwiXG4gICAgZ2FtZXNfc2ltdWxhdGVkOiBcInNpbXVsaWVydGUgU3BpZWxlXCJcbiAgICBnYW1lc19wbGF5ZWQ6IFwiZ2VzcGllbHRlIFNwaWVsZVwiXG4gICAgcmF0aW86IFwiUmF0aW9cIlxuICAgIGxlYWRlcmJvYXJkOiBcIlJhbmdsaXN0ZVwiXG4gICAgYmF0dGxlX2FzOiBcIkvDpG1wZmUgYWxzIFwiXG4gICAgc3VtbWFyeV95b3VyOiBcIkRlaW5lIFwiXG4gICAgc3VtbWFyeV9tYXRjaGVzOiBcIk1hdGNoZXMgLSBcIlxuICAgIHN1bW1hcnlfd2luczogXCIgU2llZ2UsIFwiXG4jICAgIHN1bW1hcnlfbG9zc2VzOiBcIiBMb3NzZXNcIlxuIyAgICByYW5rX25vX2NvZGU6IFwiTm8gTmV3IENvZGUgdG8gUmFua1wiXG4jICAgIHJhbmtfbXlfZ2FtZTogXCJSYW5rIE15IEdhbWUhXCJcbiMgICAgcmFua19zdWJtaXR0aW5nOiBcIlN1Ym1pdHRpbmcuLi5cIlxuIyAgICByYW5rX3N1Ym1pdHRlZDogXCJTdWJtaXR0ZWQgZm9yIFJhbmtpbmdcIlxuIyAgICByYW5rX2ZhaWxlZDogXCJGYWlsZWQgdG8gUmFua1wiXG4jICAgIHJhbmtfYmVpbmdfcmFua2VkOiBcIkdhbWUgQmVpbmcgUmFua2VkXCJcbiMgICAgcmFua19sYXN0X3N1Ym1pdHRlZDogXCJzdWJtaXR0ZWQgXCJcbiAgICBoZWxwX3NpbXVsYXRlOiBcIkhpbGYgU3BpZWxlIHp1IHNpbXVsaWVyZW4/XCJcbiMgICAgY29kZV9iZWluZ19zaW11bGF0ZWQ6IFwiWW91ciBuZXcgY29kZSBpcyBiZWluZyBzaW11bGF0ZWQgYnkgb3RoZXIgcGxheWVycyBmb3IgcmFua2luZy4gVGhpcyB3aWxsIHJlZnJlc2ggYXMgbmV3IG1hdGNoZXMgY29tZSBpbi5cIlxuIyAgICBub19yYW5rZWRfbWF0Y2hlc19wcmU6IFwiTm8gcmFua2VkIG1hdGNoZXMgZm9yIHRoZSBcIlxuIyAgICBub19yYW5rZWRfbWF0Y2hlc19wb3N0OiBcIiB0ZWFtISBQbGF5IGFnYWluc3Qgc29tZSBjb21wZXRpdG9ycyBhbmQgdGhlbiBjb21lIGJhY2sgaGVyZSB0byBnZXQgeW91ciBnYW1lIHJhbmtlZC5cIlxuICAgIGNob29zZV9vcHBvbmVudDogXCJXw6RobGUgZWluZW4gR2VnbmVyXCJcbiAgICBzZWxlY3RfeW91cl9sYW5ndWFnZTogXCJXw6RobGUgZGVpbmUgU3ByYWNoZSFcIlxuICAgIHR1dG9yaWFsX3BsYXk6IFwiU3BpZWxlIFR1dG9yaWFsXCJcbiAgICB0dXRvcmlhbF9yZWNvbW1lbmRlZDogXCJFbXBmb2hsZW4sIHdlbm4gZHUgbm9jaCBuaWUgenV2b3IgZ2VzcGllbHQgaGFzdC5cIlxuICAgIHR1dG9yaWFsX3NraXA6IFwiw5xiZXJzcHJpbmdlIFR1dG9yaWFsXCJcbiAgICB0dXRvcmlhbF9ub3Rfc3VyZTogXCJOaWNodCBzaWNoZXIgd2FzIGhpZXIgYWIgZ2VodD9cIlxuICAgIHR1dG9yaWFsX3BsYXlfZmlyc3Q6IFwiU3BpZWxlIHp1ZXJzdCBkYXMgVHV0b3JpYWwuXCJcbiAgICBzaW1wbGVfYWk6IFwiRWluZmFjaGUgS0lcIiAjIHtjaGFuZ2V9XG4gICAgd2FybXVwOiBcIkF1ZnfDpHJtZW5cIlxuICAgIGZyaWVuZHNfcGxheWluZzogXCJzcGllbGVuZGUgRnJldW5kZVwiXG4gICAgbG9nX2luX2Zvcl9mcmllbmRzOiBcIk1lbGRlIGRpY2ggYW4gdW0gbWl0IGRlaW5lbiBGcmV1bmRlbiB6dSBzcGllbGVuIVwiXG4gICAgc29jaWFsX2Nvbm5lY3RfYmx1cmI6IFwiVmVyYmluZGUgdW5kIHNwaWVsZSBnZWdlbiBkZWluZSBGcmV1bmRlIVwiXG4gICAgaW52aXRlX2ZyaWVuZHNfdG9fYmF0dGxlOiBcIkxhZGUgZGVpbmUgRnJldW5kZSB6dW0gS2FtcGYgZWluIVwiXG4gICAgZmlnaHQ6IFwiS8OkbXBmdCFcIlxuICAgIHdhdGNoX3ZpY3Rvcnk6IFwiU2NoYXUgZGlyIGRlaW5lbiBTaWVnIGFuXCJcbiAgICBkZWZlYXRfdGhlOiBcIkJlc2llZ2UgZGVuXCJcbiMgICAgd2F0Y2hfYmF0dGxlOiBcIldhdGNoIHRoZSBiYXR0bGVcIlxuIyAgICB0b3VybmFtZW50X3N0YXJ0ZWQ6IFwiLCBzdGFydGVkXCJcbiAgICB0b3VybmFtZW50X2VuZHM6IFwiVHVybmllciBlbmRldFwiXG4gICAgdG91cm5hbWVudF9lbmRlZDogXCJUdXJuaWVyIGJlZW5kZXRcIlxuICAgIHRvdXJuYW1lbnRfcnVsZXM6IFwiVHVybmllci1SZWdlbG5cIlxuICAgIHRvdXJuYW1lbnRfYmx1cmI6IFwiU2NocmVpYmUgQ29kZSwgc2FtbWxlIEdvbGQsIGVyc3RlbGxlIEFybWVlbiwgemVycXVldHNjaGUgRmVpbmRlLCBnZXdpbm5lIFByZWlzIHVuZCB2ZXJiZXNzZXJlIGRlaW5lIEthcnJpZXJlIGluIHVuc2VyZW0gNDAuMDAwICQgR3JlZWQtVHVybmllciEgU2NoYXUgZGlyIGRpZSBEZXRhaWxzXCJcbiAgICB0b3VybmFtZW50X2JsdXJiX2NyaXNzX2Nyb3NzOiBcIkdld2lubmUgR2Vib3RlLCBrb25zdHJ1aWVyZSBQZmFkZSwgdHJpY2tzZSBGZWluZGUgYXVzLCBncmVpZmUgRWRlbHN0ZWluZSBhYiB1bmQgdmVyYmVzc2VyZSBkZWluZSBLYXJyaWVyZSBpbiB1bnNlcmVtIENyaXNzLUNyb3NzLVR1cm5pZXIhIFNjaGF1IGRpciBkaWUgRGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfemVyb19zdW06IFwiVW5sZWFzaCB5b3VyIGNvZGluZyBjcmVhdGl2aXR5IGluIGJvdGggZ29sZCBnYXRoZXJpbmcgYW5kIGJhdHRsZSB0YWN0aWNzIGluIHRoaXMgYWxwaW5lIG1pcnJvciBtYXRjaCBiZXR3ZWVuIHJlZCBzb3JjZXJlciBhbmQgYmx1ZSBzb3JjZXJlci4gVGhlIHRvdXJuYW1lbnQgYmVnYW4gb24gRnJpZGF5LCBNYXJjaCAyNyBhbmQgd2lsbCBydW4gdW50aWwgTW9uZGF5LCBBcHJpbCA2IGF0IDVQTSBQRFQuIENvbXBldGUgZm9yIGZ1biBhbmQgZ2xvcnkhIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfYWNlX29mX2NvZGVyczogXCJCYXR0bGUgaXQgb3V0IGluIHRoZSBmcm96ZW4gZ2xhY2llciBpbiB0aGlzIGRvbWluYXRpb24tc3R5bGUgbWlycm9yIG1hdGNoISBUaGUgdG91cm5hbWVudCBiZWdhbiBvbiBXZWRuZXNkYXksIFNlcHRlbWJlciAxNiBhbmQgd2lsbCBydW4gdW50aWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE0IGF0IDVQTSBQRFQuIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4gICAgdG91cm5hbWVudF9ibHVyYl9ibG9nOiBcImF1ZiB1bnNlcmVtIEJsb2cgYW5cIlxuICAgIHJ1bGVzOiBcIlJlZ2VsblwiXG4gICAgd2lubmVyczogXCJHZXdpbm5lclwiXG4jICAgIGxlYWd1ZTogXCJMZWFndWVcIlxuIyAgICByZWRfYWk6IFwiUmVkIENQVVwiICMgXCJSZWQgQUkgV2luc1wiLCBhdCBlbmQgb2YgbXVsdGlwbGF5ZXIgbWF0Y2ggcGxheWJhY2tcbiMgICAgYmx1ZV9haTogXCJCbHVlIENQVVwiXG4jICAgIHdpbnM6IFwiV2luc1wiICMgQXQgZW5kIG9mIG11bHRpcGxheWVyIG1hdGNoIHBsYXliYWNrXG4jICAgIGh1bWFuczogXCJSZWRcIiAjIExhZGRlciBwYWdlIGRpc3BsYXkgdGVhbSBuYW1lXG4jICAgIG9ncmVzOiBcIkJsdWVcIlxuXG4gIHVzZXI6XG4gICAgc3RhdHM6IFwiU3RhdGlzdGlrZW5cIlxuICAgIHNpbmdsZXBsYXllcl90aXRsZTogXCJFaW56ZWxzcGllbGVyIExldmVsXCJcbiAgICBtdWx0aXBsYXllcl90aXRsZTogXCJNZWhyc3BpZWxlciBMZXZlbFwiXG4gICAgYWNoaWV2ZW1lbnRzX3RpdGxlOiBcIkFjaGlldmVtZW50c1wiXG4gICAgbGFzdF9wbGF5ZWQ6IFwiWnVsZXR6dCBnZXNwaWVsdFwiXG4gICAgc3RhdHVzOiBcIlN0YXR1c1wiXG4gICAgc3RhdHVzX2NvbXBsZXRlZDogXCJWb2xsZW5kZXRcIlxuICAgIHN0YXR1c191bmZpbmlzaGVkOiBcIlVudm9sbGVuZGV0XCJcbiAgICBub19zaW5nbGVwbGF5ZXI6IFwiTm9jaCBrZWluZSBFaW56ZWxzcGllbGVyLVNwaWVsZSBnZXNwaWVsdC5cIlxuICAgIG5vX211bHRpcGxheWVyOiBcIk5vY2gga2VpbmUgTWVocnNwaWVsZXItU3BpZWxlIGdlc3BpZWx0LlwiXG4gICAgbm9fYWNoaWV2ZW1lbnRzOiBcIk5vY2gga2VpbmUgQWNoaWV2ZW1lbnRzIHZlcmRpZW50LlwiXG4gICAgZmF2b3JpdGVfcHJlZml4OiBcIkxpZWJsaW5nc3NwcmFjaGUgaXN0IFwiXG4gICAgZmF2b3JpdGVfcG9zdGZpeDogXCIuXCJcbiMgICAgbm90X21lbWJlcl9vZl9jbGFuczogXCJOb3QgYSBtZW1iZXIgb2YgYW55IGNsYW5zIHlldC5cIlxuXG4gIGFjaGlldmVtZW50czpcbiMgICAgbGFzdF9lYXJuZWQ6IFwiTGFzdCBFYXJuZWRcIlxuICAgIGFtb3VudF9hY2hpZXZlZDogXCJBbnphaGxcIlxuICAgIGFjaGlldmVtZW50OiBcIkFjaGlldmVtZW50XCJcbiMgICAgY3VycmVudF94cF9wcmVmaXg6IFwiXCJcbiMgICAgY3VycmVudF94cF9wb3N0Zml4OiBcIiBpbiB0b3RhbFwiXG4jICAgIG5ld194cF9wcmVmaXg6IFwiXCJcbiMgICAgbmV3X3hwX3Bvc3RmaXg6IFwiIGVhcm5lZFwiXG4jICAgIGxlZnRfeHBfcHJlZml4OiBcIlwiXG4jICAgIGxlZnRfeHBfaW5maXg6IFwiIHVudGlsIGxldmVsIFwiXG4jICAgIGxlZnRfeHBfcG9zdGZpeDogXCJcIlxuXG4jICBhY2NvdW50OlxuIyAgICBwYXltZW50czogXCJQYXltZW50c1wiXG4jICAgIHByZXBhaWRfY29kZXM6IFwiUHJlcGFpZCBDb2Rlc1wiXG4jICAgIHB1cmNoYXNlZDogXCJQdXJjaGFzZWRcIlxuIyAgICBzdWJzY3JpYmVfZm9yX2dlbXM6IFwiU3Vic2NyaWJlIGZvciBnZW1zXCJcbiMgICAgc3Vic2NyaXB0aW9uOiBcIlN1YnNjcmlwdGlvblwiXG4jICAgIGludm9pY2VzOiBcIkludm9pY2VzXCJcbiMgICAgc2VydmljZV9hcHBsZTogXCJBcHBsZVwiXG4jICAgIHNlcnZpY2Vfd2ViOiBcIldlYlwiXG4jICAgIHBhaWRfb246IFwiUGFpZCBPblwiXG4jICAgIHNlcnZpY2U6IFwiU2VydmljZVwiXG4jICAgIHByaWNlOiBcIlByaWNlXCJcbiMgICAgZ2VtczogXCJHZW1zXCJcbiMgICAgYWN0aXZlOiBcIkFjdGl2ZVwiXG4jICAgIHN1YnNjcmliZWQ6IFwiU3Vic2NyaWJlZFwiXG4jICAgIHVuc3Vic2NyaWJlZDogXCJVbnN1YnNjcmliZWRcIlxuIyAgICBhY3RpdmVfdW50aWw6IFwiQWN0aXZlIFVudGlsXCJcbiMgICAgY29zdDogXCJDb3N0XCJcbiMgICAgbmV4dF9wYXltZW50OiBcIk5leHQgUGF5bWVudFwiXG4jICAgIGNhcmQ6IFwiQ2FyZFwiXG4jICAgIHN0YXR1c191bnN1YnNjcmliZWRfYWN0aXZlOiBcIllvdSdyZSBub3Qgc3Vic2NyaWJlZCBhbmQgd29uJ3QgYmUgYmlsbGVkLCBidXQgeW91ciBhY2NvdW50IGlzIHN0aWxsIGFjdGl2ZSBmb3Igbm93LlwiXG4jICAgIHN0YXR1c191bnN1YnNjcmliZWQ6IFwiR2V0IGFjY2VzcyB0byBuZXcgbGV2ZWxzLCBoZXJvZXMsIGl0ZW1zLCBhbmQgYm9udXMgZ2VtcyB3aXRoIGEgQ29kZUNvbWJhdCBzdWJzY3JpcHRpb24hXCJcbiMgICAgbm90X3lldF92ZXJpZmllZDogXCJOb3QgeWV0IHZlcmlmaWVkLlwiXG4jICAgIHJlc2VuZF9lbWFpbDogXCJSZXNlbmQgZW1haWxcIlxuIyAgICBlbWFpbF9zZW50OiBcIkVtYWlsIHNlbnQhIENoZWNrIHlvdXIgaW5ib3guXCJcbiMgICAgdmVyaWZ5aW5nX2VtYWlsOiBcIlZlcmlmeWluZyB5b3VyIGVtYWlsIGFkZHJlc3MuLi5cIlxuIyAgICBzdWNjZXNzZnVsbHlfdmVyaWZpZWQ6IFwiWW91J3ZlIHN1Y2Nlc3NmdWxseSB2ZXJpZmllZCB5b3VyIGVtYWlsIGFkZHJlc3MhXCJcbiMgICAgdmVyaWZ5X2Vycm9yOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gdmVyaWZ5aW5nIHlvdXIgZW1haWwgOihcIlxuXG4jICBhY2NvdW50X2ludm9pY2VzOlxuIyAgICBhbW91bnQ6IFwiQW1vdW50IGluIFVTIGRvbGxhcnNcIlxuIyAgICBkZWNsaW5lZDogXCJZb3VyIGNhcmQgd2FzIGRlY2xpbmVkXCJcbiMgICAgaW52YWxpZF9hbW91bnQ6IFwiUGxlYXNlIGVudGVyIGEgVVMgZG9sbGFyIGFtb3VudC5cIlxuIyAgICBub3RfbG9nZ2VkX2luOiBcIkxvZyBpbiBvciBjcmVhdGUgYW4gYWNjb3VudCB0byBhY2Nlc3MgaW52b2ljZXMuXCJcbiMgICAgcGF5OiBcIlBheSBJbnZvaWNlXCJcbiMgICAgcHVyY2hhc2luZzogXCJQdXJjaGFzaW5nLi4uXCJcbiMgICAgcmV0cnlpbmc6IFwiU2VydmVyIGVycm9yLCByZXRyeWluZy5cIlxuIyAgICBzdWNjZXNzOiBcIlN1Y2Nlc3NmdWxseSBwYWlkLiBUaGFua3MhXCJcblxuIyAgYWNjb3VudF9wcmVwYWlkOlxuIyAgICBwdXJjaGFzZV9jb2RlOiBcIlB1cmNoYXNlIGEgU3Vic2NyaXB0aW9uIENvZGVcIlxuIyAgICBwdXJjaGFzZV9jb2RlMTogXCJTdWJzY3JpcHRpb24gQ29kZXMgY2FuIGJlIHJlZGVlbWVkIHRvIGFkZCBwcmVtaXVtIHN1YnNjcmlwdGlvbiB0aW1lIHRvIG9uZSBvciBtb3JlIGFjY291bnRzIGZvciB0aGUgSG9tZSB2ZXJzaW9uIG9mIENvZGVDb21iYXQuXCIgI1xuIyAgICBwdXJjaGFzZV9jb2RlMjogXCJFYWNoIENvZGVDb21iYXQgYWNjb3VudCBjYW4gb25seSByZWRlZW0gYSBwYXJ0aWN1bGFyIFN1YnNjcmlwdGlvbiBDb2RlIG9uY2UuXCJcbiMgICAgcHVyY2hhc2VfY29kZTM6IFwiU3Vic2NyaXB0aW9uIENvZGUgbW9udGhzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZCBvZiBhbnkgZXhpc3Rpbmcgc3Vic2NyaXB0aW9uIG9uIHRoZSBhY2NvdW50LlwiXG4jICAgIHB1cmNoYXNlX2NvZGU0OiBcIlN1YnNjcmlwdGlvbiBDb2RlcyBhcmUgZm9yIGFjY291bnRzIHBsYXlpbmcgdGhlIEhvbWUgdmVyc2lvbiBvZiBDb2RlQ29tYmF0LCB0aGV5IGNhbm5vdCBiZSB1c2VkIGluIHBsYWNlIG9mIFN0dWRlbnQgTGljZW5zZXMgZm9yIHRoZSBDbGFzc3Jvb20gdmVyc2lvbi5cIlxuIyAgICBwdXJjaGFzZV9jb2RlNTogXCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBTdHVkZW50IExpY2Vuc2VzLCByZWFjaCBvdXQgdG9cIlxuIyAgICB1c2VyczogXCJVc2Vyc1wiXG4jICAgIG1vbnRoczogXCJNb250aHNcIlxuIyAgICBwdXJjaGFzZV90b3RhbDogXCJUb3RhbFwiXG4jICAgIHB1cmNoYXNlX2J1dHRvbjogXCJTdWJtaXQgUHVyY2hhc2VcIlxuIyAgICB5b3VyX2NvZGVzOiBcIllvdXIgQ29kZXNcIlxuIyAgICByZWRlZW1fY29kZXM6IFwiUmVkZWVtIGEgU3Vic2NyaXB0aW9uIENvZGVcIlxuIyAgICBwcmVwYWlkX2NvZGU6IFwiUHJlcGFpZCBDb2RlXCJcbiMgICAgbG9va3VwX2NvZGU6IFwiTG9va3VwIHByZXBhaWQgY29kZVwiXG4jICAgIGFwcGx5X2FjY291bnQ6IFwiQXBwbHkgdG8geW91ciBhY2NvdW50XCJcbiMgICAgY29weV9saW5rOiBcIllvdSBjYW4gY29weSB0aGUgY29kZSdzIGxpbmsgYW5kIHNlbmQgaXQgdG8gc29tZW9uZS5cIlxuIyAgICBxdWFudGl0eTogXCJRdWFudGl0eVwiXG4jICAgIHJlZGVlbWVkOiBcIlJlZGVlbWVkXCJcbiMgICAgbm9fY29kZXM6IFwiTm8gY29kZXMgeWV0IVwiXG4jICAgIHlvdV9jYW4xOiBcIllvdSBjYW5cIlxuIyAgICB5b3VfY2FuMjogXCJwdXJjaGFzZSBhIHByZXBhaWQgY29kZVwiXG4jICAgIHlvdV9jYW4zOiBcInRoYXQgY2FuIGJlIGFwcGxpZWQgdG8geW91ciBvd24gYWNjb3VudCBvciBnaXZlbiB0byBvdGhlcnMuXCJcblxuICBsb2FkaW5nX2Vycm9yOlxuICAgIGNvdWxkX25vdF9sb2FkOiBcIkZlaGxlciBiZWltIExhZGVuIHZvbSBTZXJ2ZXJcIlxuICAgIGNvbm5lY3Rpb25fZmFpbHVyZTogXCJWZXJiaW5kdW5nIGZlaGxnZXNjaGxhZ2VuLlwiXG4jICAgIGNvbm5lY3Rpb25fZmFpbHVyZV9kZXNjOiBcIkl0IGRvZXNu4oCZdCBsb29rIGxpa2UgeW914oCZcmUgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldCEgQ2hlY2sgeW91ciBuZXR3b3JrIGNvbm5lY3Rpb24gYW5kIHRoZW4gcmVsb2FkIHRoaXMgcGFnZS5cIlxuIyAgICBsb2dpbl9yZXF1aXJlZDogXCJMb2dpbiBSZXF1aXJlZFwiXG4jICAgIGxvZ2luX3JlcXVpcmVkX2Rlc2M6IFwiWW91IG5lZWQgdG8gYmUgbG9nZ2VkIGluIHRvIGFjY2VzcyB0aGlzIHBhZ2UuXCJcbiAgICB1bmF1dGhvcml6ZWQ6IFwiRHUgbXVzc3QgYW5nZW1lbGRldCBzZWluLiBIYXN0IGR1IENvb2tpZXMgYXVzZ2VzY2hhbHRldD9cIlxuICAgIGZvcmJpZGRlbjogXCJTaWUgaGFiZW4gbmljaHQgZGllIG7DtnRpZ2VuIEJlcmVjaHRpZ3VuZ2VuLlwiXG4jICAgIGZvcmJpZGRlbl9kZXNjOiBcIk9oIG5vLCB0aGVyZeKAmXMgbm90aGluZyB3ZSBjYW4gc2hvdyB5b3UgaGVyZSEgTWFrZSBzdXJlIHlvdeKAmXJlIGxvZ2dlZCBpbnRvIHRoZSBjb3JyZWN0IGFjY291bnQsIG9yIHZpc2l0IG9uZSBvZiB0aGUgbGlua3MgYmVsb3cgdG8gZ2V0IGJhY2sgdG8gcHJvZ3JhbW1pbmchXCJcbiAgICBub3RfZm91bmQ6IFwiTmljaHQgZ2VmdW5kZW4uXCJcbiMgICAgbm90X2ZvdW5kX2Rlc2M6IFwiSG0sIHRoZXJl4oCZcyBub3RoaW5nIGhlcmUuIFZpc2l0IG9uZSBvZiB0aGUgZm9sbG93aW5nIGxpbmtzIHRvIGdldCBiYWNrIHRvIHByb2dyYW1taW5nIVwiXG4gICAgbm90X2FsbG93ZWQ6IFwiTWV0aG9kZSBuaWNodCBlcmxhdWJ0LlwiXG4gICAgdGltZW91dDogXCJTZXJ2ZXIgdGltZW91dC5cIiAjIHtjaGFuZ2V9XG4gICAgY29uZmxpY3Q6IFwiUmVzc291cmNlbiBLb25mbGlrdC5cIlxuICAgIGJhZF9pbnB1dDogXCJGYWxzY2hlIEVpbmdhYmUuXCJcbiAgICBzZXJ2ZXJfZXJyb3I6IFwiU2VydmVyIEZlaGxlci5cIlxuICAgIHVua25vd246IFwiVW5iZWthbm50ZXIgRmVobGVyLlwiICMge2NoYW5nZX1cbiMgICAgZXJyb3I6IFwiRVJST1JcIlxuIyAgICBnZW5lcmFsX2Rlc2M6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcsIGFuZCBpdOKAmXMgcHJvYmFibHkgb3VyIGZhdWx0LiBUcnkgd2FpdGluZyBhIGJpdCBhbmQgdGhlbiByZWZyZXNoaW5nIHRoZSBwYWdlLCBvciB2aXNpdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBsaW5rcyB0byBnZXQgYmFjayB0byBwcm9ncmFtbWluZyFcIlxuXG4gIHJlc291cmNlczpcbiAgICBsZXZlbDogXCJMZXZlbFwiXG4jICAgIHBhdGNoOiBcIlBhdGNoXCJcbiAgICBwYXRjaGVzOiBcIlBhdGNoZVwiXG4gICAgc3lzdGVtOiBcIlN5c3RlbVwiXG4gICAgc3lzdGVtczogXCJTeXN0ZW1lXCJcbiAgICBjb21wb25lbnQ6IFwiS29tcG9uZW50ZVwiXG4gICAgY29tcG9uZW50czogXCJLb21wb25lbnRlblwiXG4jICAgIGhlcm86IFwiSGVyb1wiXG4jICAgIGNhbXBhaWduczogXCJDYW1wYWlnbnNcIlxuXG4jICBjb25jZXB0czpcbiMgICAgYWR2YW5jZWRfY3NzX3J1bGVzOiBcIkFkdmFuY2VkIENTUyBSdWxlc1wiXG4jICAgIGFkdmFuY2VkX2Nzc19zZWxlY3RvcnM6IFwiQWR2YW5jZWQgQ1NTIFNlbGVjdG9yc1wiXG4jICAgIGFkdmFuY2VkX2h0bWxfYXR0cmlidXRlczogXCJBZHZhbmNlZCBIVE1MIEF0dHJpYnV0ZXNcIlxuIyAgICBhZHZhbmNlZF9odG1sX3RhZ3M6IFwiQWR2YW5jZWQgSFRNTCBUYWdzXCJcbiMgICAgYWxnb3JpdGhtX2F2ZXJhZ2U6IFwiQWxnb3JpdGhtIEF2ZXJhZ2VcIlxuIyAgICBhbGdvcml0aG1fZmluZF9taW5tYXg6IFwiQWxnb3JpdGhtIEZpbmQgTWluL01heFwiXG4jICAgIGFsZ29yaXRobV9zZWFyY2hfYmluYXJ5OiBcIkFsZ29yaXRobSBTZWFyY2ggQmluYXJ5XCJcbiMgICAgYWxnb3JpdGhtX3NlYXJjaF9ncmFwaDogXCJBbGdvcml0aG0gU2VhcmNoIEdyYXBoXCJcbiMgICAgYWxnb3JpdGhtX3NvcnQ6IFwiQWxnb3JpdGhtIFNvcnRcIlxuIyAgICBhbGdvcml0aG1fc3VtOiBcIkFsZ29yaXRobSBTdW1cIlxuIyAgICBhcmd1bWVudHM6IFwiQXJndW1lbnRzXCJcbiMgICAgYXJpdGhtZXRpYzogXCJBcml0aG1ldGljXCJcbiMgICAgYXJyYXlfMmQ6IFwiMkQgQXJyYXlcIlxuIyAgICBhcnJheV9pbmRleDogXCJBcnJheSBJbmRleGluZ1wiXG4jICAgIGFycmF5X2l0ZXJhdGluZzogXCJJdGVyYXRpbmcgT3ZlciBBcnJheXNcIlxuIyAgICBhcnJheV9saXRlcmFsczogXCJBcnJheSBMaXRlcmFsc1wiXG4jICAgIGFycmF5X3NlYXJjaGluZzogXCJBcnJheSBTZWFyY2hpbmdcIlxuIyAgICBhcnJheV9zb3J0aW5nOiBcIkFycmF5IFNvcnRpbmdcIlxuIyAgICBhcnJheXM6IFwiQXJyYXlzXCJcbiMgICAgYmFzaWNfY3NzX3J1bGVzOiBcIkJhc2ljIENTUyBydWxlc1wiXG4jICAgIGJhc2ljX2Nzc19zZWxlY3RvcnM6IFwiQmFzaWMgQ1NTIHNlbGVjdG9yc1wiXG4jICAgIGJhc2ljX2h0bWxfYXR0cmlidXRlczogXCJCYXNpYyBIVE1MIEF0dHJpYnV0ZXNcIlxuIyAgICBiYXNpY19odG1sX3RhZ3M6IFwiQmFzaWMgSFRNTCBUYWdzXCJcbiMgICAgYmFzaWNfc3ludGF4OiBcIkJhc2ljIFN5bnRheFwiXG4jICAgIGJpbmFyeTogXCJCaW5hcnlcIlxuIyAgICBib29sZWFuX2FuZDogXCJCb29sZWFuIEFuZFwiXG4jICAgIGJvb2xlYW5fZXF1YWxpdHk6IFwiQm9vbGVhbiBFcXVhbGl0eVwiXG4jICAgIGJvb2xlYW5fZ3JlYXRlcl9sZXNzOiBcIkJvb2xlYW4gR3JlYXRlci9MZXNzXCJcbiMgICAgYm9vbGVhbl9sb2dpY19zaG9ydGNpcmN1aXQ6IFwiQm9vbGVhbiBMb2dpYyBTaG9ydGNpcmN1aXRpbmdcIlxuIyAgICBib29sZWFuX25vdDogXCJCb29sZWFuIE5vdFwiXG4jICAgIGJvb2xlYW5fb3BlcmF0b3JfcHJlY2VkZW5jZTogXCJCb29sZWFuIE9wZXJhdG9yIFByZWNlZGVuY2VcIlxuIyAgICBib29sZWFuX29yOiBcIkJvb2xlYW4gT3JcIlxuIyAgICBib290c3RyYXA6IFwiQm9vdHN0cmFwXCJcbiMgICAgYnJlYWtfc3RhdGVtZW50czogXCJCcmVhayBTdGF0ZW1lbnRzXCJcbiMgICAgY2xhc3NlczogXCJDbGFzc2VzXCJcbiMgICAgY29udGludWVfc3RhdGVtZW50czogXCJDb250aW51ZSBTdGF0ZW1lbnRzXCJcbiMgICAgZG9tX2V2ZW50czogXCJET00gRXZlbnRzXCJcbiMgICAgZHluYW1pY19zdHlsaW5nOiBcIkR5bmFtaWMgU3R5bGluZ1wiXG4jICAgIGV2ZW50X2NvbmN1cnJlbmN5OiBcIkV2ZW50IENvbmN1cnJlbmN5XCJcbiMgICAgZXZlbnRfZGF0YTogXCJFdmVudCBEYXRhXCJcbiMgICAgZXZlbnRfaGFuZGxlcnM6IFwiRXZlbnQgSGFuZGxlcnNcIlxuIyAgICBldmVudF9zcGF3bjogXCJTcGF3biBFdmVudFwiXG4jICAgIGZvcl9sb29wczogXCJGb3IgTG9vcHNcIlxuIyAgICBmb3JfbG9vcHNfbmVzdGVkOiBcIk5lc3RlZCBGb3IgTG9vcHNcIlxuIyAgICBmb3JfbG9vcHNfcmFuZ2U6IFwiRm9yIExvb3BzIFJhbmdlXCJcbiMgICAgZnVuY3Rpb25zOiBcIkZ1bmN0aW9uc1wiXG4jICAgIGZ1bmN0aW9uc19wYXJhbWV0ZXJzOiBcIlBhcmFtZXRlcnNcIlxuIyAgICBmdW5jdGlvbnNfbXVsdGlwbGVfcGFyYW1ldGVyczogXCJNdWx0aXBsZSBQYXJhbWV0ZXJzXCJcbiMgICAgZ2FtZV9haTogXCJHYW1lIEFJXCJcbiMgICAgZ2FtZV9nb2FsczogXCJHYW1lIEdvYWxzXCJcbiMgICAgZ2FtZV9zcGF3bjogXCJHYW1lIFNwYXduXCJcbiMgICAgZ3JhcGhpY3M6IFwiR3JhcGhpY3NcIlxuIyAgICBncmFwaHM6IFwiR3JhcGhzXCJcbiMgICAgaGVhcHM6IFwiSGVhcHNcIlxuIyAgICBpZl9jb25kaXRpb246IFwiQ29uZGl0aW9uYWwgSWYgU3RhdGVtZW50c1wiXG4jICAgIGlmX2Vsc2VfaWY6IFwiSWYvRWxzZSBJZiBTdGF0ZW1lbnRzXCJcbiMgICAgaWZfZWxzZV9zdGF0ZW1lbnRzOiBcIklmL0Vsc2UgU3RhdGVtZW50c1wiXG4jICAgIGlmX3N0YXRlbWVudHM6IFwiSWYgU3RhdGVtZW50c1wiXG4jICAgIGlmX3N0YXRlbWVudHNfbmVzdGVkOiBcIk5lc3RlZCBJZiBTdGF0ZW1lbnRzXCJcbiMgICAgaW5kZXhpbmc6IFwiQXJyYXkgSW5kZXhlc1wiXG4jICAgIGlucHV0X2hhbmRsaW5nX2ZsYWdzOiBcIklucHV0IEhhbmRsaW5nIC0gRmxhZ3NcIlxuIyAgICBpbnB1dF9oYW5kbGluZ19rZXlib2FyZDogXCJJbnB1dCBIYW5kbGluZyAtIEtleWJvYXJkXCJcbiMgICAgaW5wdXRfaGFuZGxpbmdfbW91c2U6IFwiSW5wdXQgSGFuZGxpbmcgLSBNb3VzZVwiXG4jICAgIGludGVybWVkaWF0ZV9jc3NfcnVsZXM6IFwiSW50ZXJtZWRpYXRlIENTUyBSdWxlc1wiXG4jICAgIGludGVybWVkaWF0ZV9jc3Nfc2VsZWN0b3JzOiBcIkludGVybWVkaWF0ZSBDU1MgU2VsZWN0b3JzXCJcbiMgICAgaW50ZXJtZWRpYXRlX2h0bWxfYXR0cmlidXRlczogXCJJbnRlcm1lZGlhdGUgSFRNTCBBdHRyaWJ1dGVzXCJcbiMgICAgaW50ZXJtZWRpYXRlX2h0bWxfdGFnczogXCJJbnRlcm1lZGlhdGUgSFRNTCBUYWdzXCJcbiMgICAganF1ZXJ5OiBcImpRdWVyeVwiXG4jICAgIGpxdWVyeV9hbmltYXRpb25zOiBcImpRdWVyeSBBbmltYXRpb25zXCJcbiMgICAganF1ZXJ5X2ZpbHRlcmluZzogXCJqUXVlcnkgRWxlbWVudCBGaWx0ZXJpbmdcIlxuIyAgICBqcXVlcnlfc2VsZWN0b3JzOiBcImpRdWVyeSBTZWxlY3RvcnNcIlxuIyAgICBsZW5ndGg6IFwiQXJyYXkgTGVuZ3RoXCJcbiMgICAgbWF0aF9nZW9tZXRyeTogXCJHZW9tZXRyeVwiXG4jICAgIG1hdGhfb3BlcmF0aW9uczogXCJNYXRoIExpYnJhcnkgT3BlcmF0aW9uc1wiXG4jICAgIG1hdGhfdHJpZ29ub21ldHJ5OiBcIlRyaWdvbm9tZXRyeVwiXG4jICAgIG9iamVjdF9saXRlcmFsczogXCJPYmplY3QgTGl0ZXJhbHNcIlxuIyAgICBwYXJhbWV0ZXJzOiBcIlBhcmFtZXRlcnNcIlxuIyAgICBwcm9wZXJ0eV9hY2Nlc3M6IFwiQWNjZXNzaW5nIFByb3BlcnRpZXNcIlxuIyAgICBwcm9wZXJ0eV9hc3NpZ25tZW50OiBcIkFzc2lnbmluZyBQcm9wZXJ0aWVzXCJcbiMgICAgcXVldWVzOiBcIkRhdGEgU3RydWN0dXJlcyAtIFF1ZXVlc1wiXG4jICAgIHJlYWRpbmdfZG9jczogXCJSZWFkaW5nIHRoZSBEb2NzXCJcbiMgICAgcmVjdXJzaW9uOiBcIlJlY3Vyc2lvblwiXG4jICAgIHJldHVybl9zdGF0ZW1lbnRzOiBcIlJldHVybiBTdGF0ZW1lbnRzXCJcbiMgICAgc3RhY2tzOiBcIkRhdGEgU3RydWN0dXJlcyAtIFN0YWNrc1wiXG4jICAgIHN0cmluZ3M6IFwiU3RyaW5nc1wiXG4jICAgIHN0cmluZ3NfY29uY2F0ZW5hdGlvbjogXCJTdHJpbmcgQ29uY2F0ZW5hdGlvblwiXG4jICAgIHN0cmluZ3Nfc3Vic3RyaW5nczogXCJTdWJzdHJpbmdcIlxuIyAgICB0cmVlczogXCJEYXRhIFN0cnVjdHVyZXMgLSBUcmVlc1wiXG4jICAgIHZhcmlhYmxlczogXCJWYXJpYWJsZXNcIlxuIyAgICB2ZWN0b3JzOiBcIlZlY3RvcnNcIlxuIyAgICB3aGlsZV9jb25kaXRpb25fbG9vcHM6IFwiV2hpbGUgTG9vcHMgd2l0aCBDb25kaXRpb25hbHNcIlxuIyAgICB3aGlsZV9sb29wc19zaW1wbGU6IFwiV2hpbGUgTG9vcHNcIlxuIyAgICB3aGlsZV9sb29wc19uZXN0ZWQ6IFwiTmVzdGVkIFdoaWxlIExvb3BzXCJcbiMgICAgeHlfY29vcmRpbmF0ZXM6IFwiQ2FydGVzaWFuIENvb3JkaW5hdGVzXCJcbiMgICAgYWR2YW5jZWRfc3RyaW5nczogXCJBZHZhbmNlZCBTdHJpbmdzXCIgIyBSZXN0IG9mIGNvbmNlcHRzIGFyZSBkZXByZWNhdGVkXG4jICAgIGFsZ29yaXRobXM6IFwiQWxnb3JpdGhtc1wiXG4jICAgIGJvb2xlYW5fbG9naWM6IFwiQm9vbGVhbiBMb2dpY1wiXG4jICAgIGJhc2ljX2h0bWw6IFwiQmFzaWMgSFRNTFwiXG4jICAgIGJhc2ljX2NzczogXCJCYXNpYyBDU1NcIlxuIyAgICBiYXNpY193ZWJfc2NyaXB0aW5nOiBcIkJhc2ljIFdlYiBTY3JpcHRpbmdcIlxuIyAgICBpbnRlcm1lZGlhdGVfaHRtbDogXCJJbnRlcm1lZGlhdGUgSFRNTFwiXG4jICAgIGludGVybWVkaWF0ZV9jc3M6IFwiSW50ZXJtZWRpYXRlIENTU1wiXG4jICAgIGludGVybWVkaWF0ZV93ZWJfc2NyaXB0aW5nOiBcIkludGVybWVkaWF0ZSBXZWIgU2NyaXB0aW5nXCJcbiMgICAgYWR2YW5jZWRfaHRtbDogXCJBZHZhbmNlZCBIVE1MXCJcbiMgICAgYWR2YW5jZWRfY3NzOiBcIkFkdmFuY2VkIENTU1wiXG4jICAgIGFkdmFuY2VkX3dlYl9zY3JpcHRpbmc6IFwiQWR2YW5jZWQgV2ViIFNjcmlwdGluZ1wiXG4jICAgIGlucHV0X2hhbmRsaW5nOiBcIklucHV0IEhhbmRsaW5nXCJcbiMgICAgd2hpbGVfbG9vcHM6IFwiV2hpbGUgTG9vcHNcIlxuIyAgICBwbGFjZV9nYW1lX29iamVjdHM6IFwiUGxhY2UgZ2FtZSBvYmplY3RzXCJcbiMgICAgY29uc3RydWN0X21hemVzOiBcIkNvbnN0cnVjdCBtYXplc1wiXG4jICAgIGNyZWF0ZV9wbGF5YWJsZV9nYW1lOiBcIkNyZWF0ZSBhIHBsYXlhYmxlLCBzaGFyYWJsZSBnYW1lIHByb2plY3RcIlxuIyAgICBhbHRlcl9leGlzdGluZ193ZWJfcGFnZXM6IFwiQWx0ZXIgZXhpc3Rpbmcgd2ViIHBhZ2VzXCJcbiMgICAgY3JlYXRlX3NoYXJhYmxlX3dlYl9wYWdlOiBcIkNyZWF0ZSBhIHNoYXJhYmxlIHdlYiBwYWdlXCJcbiMgICAgYmFzaWNfaW5wdXRfaGFuZGxpbmc6IFwiQmFzaWMgSW5wdXQgSGFuZGxpbmdcIlxuIyAgICBiYXNpY19nYW1lX2FpOiBcIkJhc2ljIEdhbWUgQUlcIlxuIyAgICBiYXNpY19qYXZhc2NyaXB0OiBcIkJhc2ljIEphdmFTY3JpcHRcIlxuIyAgICBiYXNpY19ldmVudF9oYW5kbGluZzogXCJCYXNpYyBFdmVudCBIYW5kbGluZ1wiXG4jICAgIGNyZWF0ZV9zaGFyYWJsZV9pbnRlcmFjdGl2ZV93ZWJfcGFnZTogXCJDcmVhdGUgYSBzaGFyYWJsZSBpbnRlcmFjdGl2ZSB3ZWIgcGFnZVwiXG5cbiMgIGFub255bW91c190ZWFjaGVyOlxuIyAgICBub3RpZnlfdGVhY2hlcjogXCJOb3RpZnkgVGVhY2hlclwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2FjY291bnQ6IFwiQ3JlYXRlIGZyZWUgdGVhY2hlciBhY2NvdW50XCJcbiMgICAgZW50ZXJfc3R1ZGVudF9uYW1lOiBcIllvdXIgbmFtZTpcIlxuIyAgICBlbnRlcl90ZWFjaGVyX2VtYWlsOiBcIllvdXIgdGVhY2hlcidzIGVtYWlsOlwiXG4jICAgIHRlYWNoZXJfZW1haWxfcGxhY2Vob2xkZXI6IFwidGVhY2hlci5lbWFpbEBleGFtcGxlLmNvbVwiXG4jICAgIHN0dWRlbnRfbmFtZV9wbGFjZWhvbGRlcjogXCJ0eXBlIHlvdXIgbmFtZSBoZXJlXCJcbiMgICAgdGVhY2hlcnNfc2VjdGlvbjogXCJUZWFjaGVyczpcIlxuIyAgICBzdHVkZW50c19zZWN0aW9uOiBcIlN0dWRlbnRzOlwiXG4jICAgIHRlYWNoZXJfbm90aWZpZWQ6IFwiV2UndmUgbm90aWZpZWQgeW91ciB0ZWFjaGVyIHRoYXQgeW91IHdhbnQgdG8gcGxheSBtb3JlIENvZGVDb21iYXQgaW4geW91ciBjbGFzc3Jvb20hXCJcblxuICBkZWx0YTpcbiAgICBhZGRlZDogXCJoaW56dWdlZsO8Z3RcIlxuICAgIG1vZGlmaWVkOiBcIm1vZGlmaXppZXJ0XCJcbiMgICAgbm90X21vZGlmaWVkOiBcIk5vdCBNb2RpZmllZFwiXG4gICAgZGVsZXRlZDogXCJnZWzDtnNjaHRcIlxuIyAgICBtb3ZlZF9pbmRleDogXCJNb3ZlZCBJbmRleFwiXG4gICAgdGV4dF9kaWZmOiBcIlRleHQgRGlmZlwiXG4gICAgbWVyZ2VfY29uZmxpY3Rfd2l0aDogXCJNRVJHRSBLT05GTElLVCBNSVRcIlxuICAgIG5vX2NoYW5nZXM6IFwiS2VpbmUgw4RuZGVydW5nZW5cIlxuXG4gIGxlZ2FsOlxuICAgIHBhZ2VfdGl0bGU6IFwiUmVjaHRsaWNoZXNcIlxuICAgIG9wZW5zb3VyY2VfaW50cm86IFwiQ29kZUNvbWJhdCBpc3QgRnJlZS10by1QbGF5IHVuZCB2b2xsc3TDpG5kaWcgT3BlbiBTb3VyY2UuXCJcbiAgICBvcGVuc291cmNlX2Rlc2NyaXB0aW9uX3ByZWZpeDogXCJTY2hhdSBkaXIgXCJcbiAgICBnaXRodWJfdXJsOiBcInVuc2VyZSBHaXRIdWItU2VpdGVcIlxuICAgIG9wZW5zb3VyY2VfZGVzY3JpcHRpb25fY2VudGVyOiBcIiBhbiB1bmQgbWFjaCBtaXQgd2VubiBEdSBtw7ZjaHRlc3QhIENvZGVDb21iYXQgYmF1dCBhdWYgZHV6ZW5kZW4gT3BlbiBTb3VyY2UgUHJvamVrdGVuIGF1ZiwgdW5kIHdpciBsaWViZW4gc2llLiBTY2hhdSBkaXIgZGllIExpc3RlIGluIFwiXG4gICAgYXJjaG1hZ2Vfd2lraV91cmw6IFwidW5zZXJlbSBFcnptYWdpZXItV2lraVwiXG4gICAgb3BlbnNvdXJjZV9kZXNjcmlwdGlvbl9zdWZmaXg6IFwiIGFuLCB3ZWxjaGUgU29mdHdhcmUgZGllc2VzIFNwaWVsIG3DtmdsaWNoIG1hY2h0LlwiXG4gICAgcHJhY3RpY2VzX3RpdGxlOiBcIkJlc3QgUHJhY3RpY2VzXCJcbiAgICBwcmFjdGljZXNfZGVzY3JpcHRpb246IFwiRGllcyBzaW5kIHVuc2VyZSBWZXJzcHJlY2hlbiBhbiBkaWNoLCBkZW4gU3BpZWxlciwgaW4gd2VuaWdlciBGYWNoY2hpbmVzaXNjaC5cIlxuICAgIHByaXZhY3lfdGl0bGU6IFwiRGF0ZW5zY2h1dHpcIlxuIyAgICBwcml2YWN5X2Rlc2NyaXB0aW9uOiBcIldlIHdpbGwgbm90IHNlbGwgYW55IG9mIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24uXCJcbiAgICBzZWN1cml0eV90aXRsZTogXCJEYXRlbnNpY2hlcmhlaXRcIlxuICAgIHNlY3VyaXR5X2Rlc2NyaXB0aW9uOiBcIldpciBzdHJlYmVuIGFuLCBkZWluZSBwZXJzw7ZubGljaGVuIERhdGVuIHNpY2hlciB6dSB2ZXJ3YWhyZW4uIEFscyBPcGVuIFNvdXJjZSBQcm9qZWt0IGlzdCB1bnNlcmUgU2l0ZSBmcmVpIHp1Z8OkbmdsaWNoIGbDvHIgamVkZXJtYW5uLCBhdWNoIHVtIHVuc2VyZSBTaWNoZXJoZWl0c21hw59uYWhtZW4gaW4gQXVnZW5zY2hlaW4genUgbmVobWVuIHVuZCB6dSB2ZXJiZXNzZXJuLlwiXG4gICAgZW1haWxfdGl0bGU6IFwiRW1haWxcIlxuICAgIGVtYWlsX2Rlc2NyaXB0aW9uX3ByZWZpeDogXCJXaXIgd2VyZGVuIGRpY2ggbmljaHQgbWl0IFNwYW0gw7xiZXJzY2h3ZW1tZW4uIE1pdHRlbHNcIlxuICAgIGVtYWlsX3NldHRpbmdzX3VybDogXCJkZWluZXIgRW1haWxlaW5zdGVsbHVuZ2VuXCJcbiAgICBlbWFpbF9kZXNjcmlwdGlvbl9zdWZmaXg6IFwib2RlciBkdXJjaCB2b24gdW5zIGdlc2VuZGV0ZSBMaW5rcyBrYW5uc3QgZHUgamVkZXJ6ZWl0IGRlaW5lIEVpbnN0ZWxsdW5nZW4gw6RuZGVybiB1bmQgQWJvbm5lbWVudHMga8O8bmRpZ2VuLlwiXG4gICAgY29zdF90aXRsZTogXCJLb3N0ZW5cIlxuIyAgICBjb3N0X2Rlc2NyaXB0aW9uOiBcIkNvZGVDb21iYXQgaXMgZnJlZSB0byBwbGF5IGZvciBhbGwgb2YgaXRzIGNvcmUgbGV2ZWxzLCB3aXRoIGEgJHt7cHJpY2V9fSBVU0QvbW8gc3Vic2NyaXB0aW9uIGZvciBhY2Nlc3MgdG8gZXh0cmEgbGV2ZWwgYnJhbmNoZXMgYW5kIHt7Z2Vtc319IGJvbnVzIGdlbXMgcGVyIG1vbnRoLiBZb3UgY2FuIGNhbmNlbCB3aXRoIGEgY2xpY2ssIGFuZCB3ZSBvZmZlciBhIDEwMCUgbW9uZXktYmFjayBndWFyYW50ZWUuXCJcbiAgICBjb3B5cmlnaHRzX3RpdGxlOiBcIkNvcHlyaWdodHMgdW5kIExpemVuemVuXCJcbiAgICBjb250cmlidXRvcl90aXRsZTogXCJDb250cmlidXRvciBMaWNlbnNlIEFncmVlbWVudFwiXG4gICAgY29udHJpYnV0b3JfZGVzY3JpcHRpb25fcHJlZml4OiBcIkFsbGUgQmVpdHLDpGdlLCBzb3dvaGwgYXVmIHVuc2VyZXIgV2Vic2VpdGUgYWxzIGF1Y2ggaW4gdW5zZXJlbSBHaXRIdWIgUmVwb3NpdG9yeSwgdW50ZXJsaWVnZW4gdW5zZXJlclwiXG4gICAgY2xhX3VybDogXCJDTEFcIlxuICAgIGNvbnRyaWJ1dG9yX2Rlc2NyaXB0aW9uX3N1ZmZpeDogXCJ6dSB3ZWxjaGVyIGR1IGRpY2ggZWludmVyc3RhbmRlbiBlcmtsw6RyZW4gbXVzc3QgYmV2b3IgZHUgYmVpdHJhZ2VuIGthbm5zdC5cIlxuICAgIGNvZGVfdGl0bGU6IFwiQ29kZSAtIE1JVFwiXG4gICAgY29kZV9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiRGVyIGdlc2FtdGUgQ29kZSBkZXIgQ29kZUNvbWJhdCBnZWjDtnJ0IG9kZXIgYXVmIGNvZGVjb21iYXQuY29tIGdlaG9zdGV0IHdpcmQsIHNvd29obCBpbSBHaXRIdWIgUmVwb3NpdG9yeSBhbHMgYXVjaCBhdWNoIGluIGRlciBjb2RlY29tYmF0LmNvbSBEYXRlbmJhbmssIGlzdCBsaXplbnNpZXJ0IGR1cmNoIGRpZVwiXG4gICAgbWl0X2xpY2Vuc2VfdXJsOiBcIk1JVCBMaXplbnpcIlxuICAgIGNvZGVfZGVzY3JpcHRpb25fc3VmZml4OiBcIkRpZXMgYmVpaG5oYWx0ZXQgYWxsIGRlbiBDb2RlIGluIFN5c3RlbWVuIHVuZCBLb21wb25lbnRlbiBkZXIgZsO8ciBkaWUgRXJzdGVsbHVuZyB2b24gTGV2ZWxzIGR1cmNoIENvZGVDb21iYXQgenUgVmVyZsO8Z3VuZyBnZXN0ZWxsdCB3aXJkLlwiXG4gICAgYXJ0X3RpdGxlOiBcIkdyYWZpa2VuL011c2lrIC0gQ3JlYXRpdmUgQ29tbW9ucyBcIlxuIyAgICBhcnRfZGVzY3JpcHRpb25fcHJlZml4OiBcIkFsbCBjb21tb24gY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlXCJcbiAgICBjY19saWNlbnNlX3VybDogXCJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIExpY2Vuc2VcIlxuIyAgICBhcnRfZGVzY3JpcHRpb25fc3VmZml4OiBcIkNvbW1vbiBjb250ZW50IGlzIGFueXRoaW5nIG1hZGUgZ2VuZXJhbGx5IGF2YWlsYWJsZSBieSBDb2RlQ29tYmF0IGZvciB0aGUgcHVycG9zZSBvZiBjcmVhdGluZyBMZXZlbHMuIFRoaXMgaW5jbHVkZXM6XCJcbiAgICBhcnRfbXVzaWM6IFwiTXVzaWtcIlxuICAgIGFydF9zb3VuZDogXCJTb3VuZFwiXG4gICAgYXJ0X2FydHdvcms6IFwiR3JhZmlrZW5cIlxuICAgIGFydF9zcHJpdGVzOiBcIlNwcml0ZXNcIlxuIyAgICBhcnRfb3RoZXI6IFwiQW55IGFuZCBhbGwgb3RoZXIgbm9uLWNvZGUgY3JlYXRpdmUgd29ya3MgdGhhdCBhcmUgbWFkZSBhdmFpbGFibGUgd2hlbiBjcmVhdGluZyBMZXZlbHMuXCJcbiMgICAgYXJ0X2FjY2VzczogXCJDdXJyZW50bHkgdGhlcmUgaXMgbm8gdW5pdmVyc2FsLCBlYXN5IHN5c3RlbSBmb3IgZmV0Y2hpbmcgdGhlc2UgYXNzZXRzLiBJbiBnZW5lcmFsLCBmZXRjaCB0aGVtIGZyb20gdGhlIFVSTHMgYXMgdXNlZCBieSB0aGUgc2l0ZSwgY29udGFjdCB1cyBmb3IgYXNzaXN0YW5jZSwgb3IgaGVscCB1cyBpbiBleHRlbmRpbmcgdGhlIHNpdGUgdG8gbWFrZSB0aGVzZSBhc3NldHMgbW9yZSBlYXNpbHkgYWNjZXNzaWJsZS5cIlxuIyAgICBhcnRfcGFyYWdyYXBoXzE6IFwiRm9yIGF0dHJpYnV0aW9uLCBwbGVhc2UgbmFtZSBhbmQgbGluayB0byBjb2RlY29tYmF0LmNvbSBuZWFyIHdoZXJlIHRoZSBzb3VyY2UgaXMgdXNlZCBvciB3aGVyZSBhcHByb3ByaWF0ZSBmb3IgdGhlIG1lZGl1bS4gRm9yIGV4YW1wbGU6XCJcbiAgICB1c2VfbGlzdF8xOiBcIldlbm4gaW4gZWluZW0gRmlsbSB2ZXJ3ZW5kZXQsIG5lbm5lIGNvZGVjb21iYXQuY29tIGluIGRlbiBDcmVkaXRzL0Fic3Bhbm5cIlxuIyAgICB1c2VfbGlzdF8yOiBcIklmIHVzZWQgb24gYSB3ZWJzaXRlLCBpbmNsdWRlIGEgbGluayBuZWFyIHRoZSB1c2FnZSwgZm9yIGV4YW1wbGUgdW5kZXJuZWF0aCBhbiBpbWFnZSwgb3IgaW4gYSBnZW5lcmFsIGF0dHJpYnV0aW9ucyBwYWdlIHdoZXJlIHlvdSBtaWdodCBhbHNvIG1lbnRpb24gb3RoZXIgQ3JlYXRpdmUgQ29tbW9ucyB3b3JrcyBhbmQgb3BlbiBzb3VyY2Ugc29mdHdhcmUgYmVpbmcgdXNlZCBvbiB0aGUgc2l0ZS4gU29tZXRoaW5nIHRoYXQncyBhbHJlYWR5IGNsZWFybHkgcmVmZXJlbmNpbmcgQ29kZUNvbWJhdCwgc3VjaCBhcyBhIGJsb2cgcG9zdCBtZW50aW9uaW5nIENvZGVDb21iYXQsIGRvZXMgbm90IG5lZWQgc29tZSBzZXBhcmF0ZSBhdHRyaWJ1dGlvbi5cIlxuIyAgICBhcnRfcGFyYWdyYXBoXzI6IFwiSWYgdGhlIGNvbnRlbnQgYmVpbmcgdXNlZCBpcyBjcmVhdGVkIG5vdCBieSBDb2RlQ29tYmF0IGJ1dCBpbnN0ZWFkIGJ5IGEgdXNlciBvZiBjb2RlY29tYmF0LmNvbSwgYXR0cmlidXRlIHRoZW0gaW5zdGVhZCwgYW5kIGZvbGxvdyBhdHRyaWJ1dGlvbiBkaXJlY3Rpb25zIHByb3ZpZGVkIGluIHRoYXQgcmVzb3VyY2UncyBkZXNjcmlwdGlvbiBpZiB0aGVyZSBhcmUgYW55LlwiXG4gICAgcmlnaHRzX3RpdGxlOiBcIlJlY2h0ZSB2b3JiZWhhbHRlblwiXG4gICAgcmlnaHRzX2Rlc2M6IFwiQWxsZSBSZWNodGUgdm9yYmVoYWx0ZW4gZsO8ciBkaWUgTGV2ZWwgc2VsYnN0LiBEaWVzIGJlaW5oYWx0ZXRcIlxuICAgIHJpZ2h0c19zY3JpcHRzOiBcIlNrcmlwdGVcIlxuICAgIHJpZ2h0c191bml0OiBcIkVpbmhlaXRlbmtvbmZpZ3VyYXRpb25cIlxuICAgIHJpZ2h0c193cml0aW5nczogXCJTY2hyaWZ0bGljaGVzXCJcbiAgICByaWdodHNfbWVkaWE6IFwiTWVkaWVuIChTb3VuZHMsIE11c2lrKSB1bmQgamVkZSBhbmRlcmUgRm9ybSB2b24ga3JlYXRpdmVtIEluaGFsdCBkZXIgc3BlemlmaXNjaCBmw7xyIGRhcyBMZXZlbCBpc3QgbmljaHQgZ2VuZXJlbGwgZsO8ciBkaWUgTGV2ZWxlcnN0ZWxsdW5nIGJlcmVpdGdlc3RlbGx0IHdpcmQuXCJcbiMgICAgcmlnaHRzX2NsYXJpZmljYXRpb246IFwiVG8gY2xhcmlmeSwgYW55dGhpbmcgdGhhdCBpcyBtYWRlIGF2YWlsYWJsZSBpbiB0aGUgTGV2ZWwgRWRpdG9yIGZvciB0aGUgcHVycG9zZSBvZiBtYWtpbmcgbGV2ZWxzIGlzIHVuZGVyIENDLCB3aGVyZWFzIHRoZSBjb250ZW50IGNyZWF0ZWQgd2l0aCB0aGUgTGV2ZWwgRWRpdG9yIG9yIHVwbG9hZGVkIGluIHRoZSBjb3Vyc2Ugb2YgY3JlYXRpb24gb2YgTGV2ZWxzIGlzIG5vdC5cIlxuICAgIG51dHNoZWxsX3RpdGxlOiBcIlp1c2FtbWVuZmFzc3VuZ1wiXG4jICAgIG51dHNoZWxsX2Rlc2NyaXB0aW9uOiBcIkFueSByZXNvdXJjZXMgd2UgcHJvdmlkZSBpbiB0aGUgTGV2ZWwgRWRpdG9yIGFyZSBmcmVlIHRvIHVzZSBhcyB5b3UgbGlrZSBmb3IgY3JlYXRpbmcgTGV2ZWxzLiBCdXQgd2UgcmVzZXJ2ZSB0aGUgcmlnaHQgdG8gcmVzdHJpY3QgZGlzdHJpYnV0aW9uIG9mIHRoZSBMZXZlbHMgdGhlbXNlbHZlcyAodGhhdCBhcmUgY3JlYXRlZCBvbiBjb2RlY29tYmF0LmNvbSkgc28gdGhhdCB0aGV5IG1heSBiZSBjaGFyZ2VkIGZvci5cIlxuICAgIGNhbm9uaWNhbDogXCJEaWUgZW5nbGlzY2hlIFZlcnNpb24gZGllc2VzIERva3VtZW50cyBpc3QgZGllIGRlZmluaXRpdmUsIGthbm9uaXNjaGUgVmVyc2lvbi4gU29sbHRlIGVzIFVudGVyc2NoaWVkZSB6d2lzY2hlbiBkZW4gw5xiZXJzZXR6dW5nZW4gZ2ViZW4sIGRhbm4gaGF0IGRhcyBlbmdsaXNjaGUgRG9rdW1lbnQgVm9ycmFuZy5cIlxuIyAgICB0aGlyZF9wYXJ0eV90aXRsZTogXCJUaGlyZCBQYXJ0eSBTZXJ2aWNlc1wiXG4jICAgIHRoaXJkX3BhcnR5X2Rlc2NyaXB0aW9uOiBcIkNvZGVDb21iYXQgdXNlcyB0aGUgZm9sbG93aW5nIHRoaXJkIHBhcnR5IHNlcnZpY2VzIChhbW9uZyBvdGhlcnMpOlwiXG5cbiAgbGFkZGVyX3ByaXplczpcbiAgICB0aXRsZTogXCJUdXJuaWVycHJlaXNlXCIgIyBUaGlzIHNlY3Rpb24gd2FzIGZvciBhbiBvbGQgdG91cm5hbWVudCBhbmQgZG9lc24ndCBuZWVkIG5ldyB0cmFuc2xhdGlvbnMgbm93LlxuICAgIGJsdXJiXzE6IFwiRGllIFByZWlzZSB3ZXJkZW4gdmVybGllaGVuIG5hY2hcIlxuICAgIGJsdXJiXzI6IFwiZGVuIFR1cm5pZXJyZWdlbG5cIlxuICAgIGJsdXJiXzM6IFwiYW5kIGRlbiBUb3AgTWVuc2NoIHVuZCBPZ2VyLVNwaWVsZXIuXCJcbiAgICBibHVyYl80OiBcIlp3ZWkgVGVhbXMgaGVpw590IGRpZSBkb3BwZWx0ZSBBbnphaGwgenUgZ2V3aW5uZW5kZXIgUHJlaXNlIVwiXG4gICAgYmx1cmJfNTogXCIoRXMgd2lyZCB6d2VpIEVyc3RwbGF6aWVydGUsIHp3ZWkgWmVpdHBsYXR6aWVydGUsIHVzdy4gZ2ViZW4pXCJcbiAgICByYW5rOiBcIlJhbmdcIlxuICAgIHByaXplczogXCJHZXdpbm5lXCJcbiAgICB0b3RhbF92YWx1ZTogXCJHZXNhbXR3ZXJ0XCJcbiAgICBpbl9jYXNoOiBcImluIEJhclwiXG4gICAgY3VzdG9tX3dpemFyZDogXCJCZW51dHplcmRlZmluaWVydGVyIENvZGVDb21iYXQgWmF1YmVyZXJcIlxuICAgIGN1c3RvbV9hdmF0YXI6IFwiQmVudXR6ZXJkZWZpbmllcnRlciBDb2RlQ29tYmF0IEF2YXRhclwiXG4jICAgIGhlYXA6IFwiZm9yIHNpeCBtb250aHMgb2YgXFxcIlN0YXJ0dXBcXFwiIGFjY2Vzc1wiXG4jICAgIGNyZWRpdHM6IFwiY3JlZGl0c1wiXG4gICAgb25lX21vbnRoX2NvdXBvbjogXCJHdXRzY2hlaW46IFfDpGhsZSBlbnR3ZWRlciBSYWlscyBvZGVyIEhUTUxcIlxuICAgIG9uZV9tb250aF9kaXNjb3VudDogXCIzMCUgUmFiYXR0OiBXw6RobGUgZW50d2VkZXIgUmFpbHMgb2RlciBIVE1MXCJcbiAgICBsaWNlbnNlOiBcIkxpemVuelwiXG4gICAgb3JlaWxseTogXCJFYm9vayBkZWluZXIgV2FobFwiXG5cbiAgY2FsZW5kYXI6XG4gICAgeWVhcjogXCJKYWhyXCJcbiAgICBkYXk6IFwiVGFnXCJcbiAgICBtb250aDogXCJNb25hdFwiXG4gICAgamFudWFyeTogXCJKYW51YXJcIlxuICAgIGZlYnJ1YXJ5OiBcIkZlYnJ1YXJcIlxuICAgIG1hcmNoOiBcIk3DpHJ6XCJcbiAgICBhcHJpbDogXCJBcHJpbFwiXG4gICAgbWF5OiBcIk1haVwiXG4gICAganVuZTogXCJKdW5pXCJcbiAgICBqdWx5OiBcIkp1bGlcIlxuICAgIGF1Z3VzdDogXCJBdWd1c3RcIlxuICAgIHNlcHRlbWJlcjogXCJTZXB0ZW1iZXJcIlxuICAgIG9jdG9iZXI6IFwiT2t0b2JlclwiXG4gICAgbm92ZW1iZXI6IFwiTm92ZW1iZXJcIlxuICAgIGRlY2VtYmVyOiBcIkRlemVtYmVyXCJcblxuIyAgY29kZV9wbGF5X2NyZWF0ZV9hY2NvdW50X21vZGFsOlxuIyAgICB0aXRsZTogXCJZb3UgZGlkIGl0IVwiICMgVGhpcyBzZWN0aW9uIGlzIG9ubHkgbmVlZGVkIGluIFVTLCBVSywgTWV4aWNvLCBJbmRpYSwgYW5kIEdlcm1hbnlcbiMgICAgYm9keTogXCJZb3UgYXJlIG5vdyBvbiB5b3VyIHdheSB0byBiZWNvbWluZyBhIG1hc3RlciBjb2Rlci4gU2lnbiB1cCB0byByZWNlaXZlIGFuIGV4dHJhIDxzdHJvbmc+MTAwIEdlbXM8L3N0cm9uZz4gJiB5b3Ugd2lsbCBhbHNvIGJlIGVudGVyZWQgZm9yIGEgY2hhbmNlIHRvIDxzdHJvbmc+d2luICQyLDUwMCAmIG90aGVyIExlbm92byBQcml6ZXM8L3N0cm9uZz4uXCJcbiMgICAgc2lnbl91cDogXCJTaWduIHVwICYga2VlcCBjb2Rpbmcg4pa2XCJcbiMgICAgdmljdG9yeV9zaWduX3VwX3Bva2U6IFwiQ3JlYXRlIGEgZnJlZSBhY2NvdW50IHRvIHNhdmUgeW91ciBjb2RlICYgYmUgZW50ZXJlZCBmb3IgYSBjaGFuY2UgdG8gd2luIHByaXplcyFcIlxuIyAgICB2aWN0b3J5X3NpZ25fdXA6IFwiU2lnbiB1cCAmIGJlIGVudGVyZWQgdG8gPHN0cm9uZz53aW4gJDIsNTAwPC9zdHJvbmc+XCJcblxuIyAgc2VydmVyX2Vycm9yOlxuIyAgICBlbWFpbF90YWtlbjogXCJFbWFpbCBhbHJlYWR5IHRha2VuXCJcbiMgICAgdXNlcm5hbWVfdGFrZW46IFwiVXNlcm5hbWUgYWxyZWFkeSB0YWtlblwiXG5cbiMgIGVzcGVyOlxuIyAgICBsaW5lX25vOiBcIkxpbmUgJDE6IFwiXG4jICAgIHVuY2F1Z2h0OiBcIlVuY2F1Z2h0ICQxXCIgIyAkMSB3aWxsIGJlIGFuIGVycm9yIHR5cGUsIGVnIFwiVW5jYXVnaHQgU3ludGF4RXJyb3JcIlxuIyAgICByZWZlcmVuY2VfZXJyb3I6IFwiUmVmZXJlbmNlRXJyb3I6IFwiXG4jICAgIGFyZ3VtZW50X2Vycm9yOiBcIkFyZ3VtZW50RXJyb3I6IFwiXG4jICAgIHR5cGVfZXJyb3I6IFwiVHlwZUVycm9yOiBcIlxuIyAgICBzeW50YXhfZXJyb3I6IFwiU3ludGF4RXJyb3I6IFwiXG4jICAgIGVycm9yOiBcIkVycm9yOiBcIlxuIyAgICB4X25vdF9hX2Z1bmN0aW9uOiBcIiQxIGlzIG5vdCBhIGZ1bmN0aW9uXCJcbiMgICAgeF9ub3RfZGVmaW5lZDogXCIkMSBpcyBub3QgZGVmaW5lZFwiXG4jICAgIHNwZWxsaW5nX2lzc3VlczogXCJMb29rIG91dCBmb3Igc3BlbGxpbmcgaXNzdWVzOiBkaWQgeW91IG1lYW4gYCQxYCBpbnN0ZWFkIG9mIGAkMmA/XCJcbiMgICAgY2FwaXRhbGl6YXRpb25faXNzdWVzOiBcIkxvb2sgb3V0IGZvciBjYXBpdGFsaXphdGlvbjogYCQxYCBzaG91bGQgYmUgYCQyYC5cIlxuIyAgICBweV9lbXB0eV9ibG9jazogXCJFbXB0eSAkMS4gUHV0IDQgc3BhY2VzIGluIGZyb250IG9mIHN0YXRlbWVudHMgaW5zaWRlIHRoZSAkMiBzdGF0ZW1lbnQuXCJcbiMgICAgZnhfbWlzc2luZ19wYXJlbjogXCJJZiB5b3Ugd2FudCB0byBjYWxsIGAkMWAgYXMgYSBmdW5jdGlvbiwgeW91IG5lZWQgYCgpYCdzXCJcbiMgICAgdW5tYXRjaGVkX3Rva2VuOiBcIlVubWF0Y2hlZCBgJDFgLiAgRXZlcnkgb3BlbmluZyBgJDJgIG5lZWRzIGEgY2xvc2luZyBgJDNgIHRvIG1hdGNoIGl0LlwiXG4jICAgIHVudGVybWluYXRlZF9zdHJpbmc6IFwiVW50ZXJtaW5hdGVkIHN0cmluZy4gQWRkIGEgbWF0Y2hpbmcgYFxcXCJgIGF0IHRoZSBlbmQgb2YgeW91ciBzdHJpbmcuXCJcbiMgICAgbWlzc2luZ19zZW1pY29sb246IFwiTWlzc2luZyBzZW1pY29sb24uXCJcbiMgICAgbWlzc2luZ19xdW90ZXM6IFwiTWlzc2luZyBxdW90ZXMuIFRyeSBgJDFgXCJcbiMgICAgYXJndW1lbnRfdHlwZTogXCJgJDFgJ3MgYXJndW1lbnQgYCQyYCBzaG91bGQgaGF2ZSB0eXBlIGAkM2AsIGJ1dCBnb3QgYCQ0YDogYCQ1YC5cIlxuIyAgICBhcmd1bWVudF90eXBlMjogXCJgJDFgJ3MgYXJndW1lbnQgYCQyYCBzaG91bGQgaGF2ZSB0eXBlIGAkM2AsIGJ1dCBnb3QgYCQ0YC5cIlxuIyAgICB0YXJnZXRfYV91bml0OiBcIlRhcmdldCBhIHVuaXQuXCJcbiMgICAgYXR0YWNrX2NhcGl0YWxpemF0aW9uOiBcIkF0dGFjayAkMSwgbm90ICQyLiAoQ2FwaXRhbCBsZXR0ZXJzIGFyZSBpbXBvcnRhbnQuKVwiXG4jICAgIGVtcHR5X3doaWxlOiBcIkVtcHR5IHdoaWxlIHN0YXRlbWVudC4gUHV0IDQgc3BhY2VzIGluIGZyb250IG9mIHN0YXRlbWVudHMgaW5zaWRlIHRoZSB3aGlsZSBzdGF0ZW1lbnQuXCJcbiMgICAgbGluZV9vZl9zaXRlOiBcImAkMWAncyBhcmd1bWVudCBgJDJgIGhhcyBhIHByb2JsZW0uIElzIHRoZXJlIGFuIGVuZW15IHdpdGhpbiB5b3VyIGxpbmUtb2Ytc2lnaHQgeWV0P1wiXG4jICAgIG5lZWRfYV9hZnRlcl93aGlsZTogXCJOZWVkIGEgYCQxYCBhZnRlciBgJDJgLlwiXG4jICAgIHRvb19tdWNoX2luZGVudGF0aW9uOiBcIlRvbyBtdWNoIGluZGVudGF0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBsaW5lLlwiXG4jICAgIG1pc3NpbmdfaGVybzogXCJNaXNzaW5nIGAkMWAga2V5d29yZDsgc2hvdWxkIGJlIGAkMmAuXCJcbiMgICAgdGFrZXNfbm9fYXJndW1lbnRzOiBcImAkMWAgdGFrZXMgbm8gYXJndW1lbnRzLlwiXG4jICAgIG5vX29uZV9uYW1lZDogXCJUaGVyZSdzIG5vIG9uZSBuYW1lZCBcXFwiJDFcXFwiIHRvIHRhcmdldC5cIlxuIyAgICBzZXBhcmF0ZWRfYnlfY29tbWE6IFwiRnVuY3Rpb24gY2FsbHMgcGFyYW1hdGVycyBtdXN0IGJlIHNlcGVyYXRlZCBieSBgLGBzXCJcbiMgICAgcHJvdGVjdGVkX3Byb3BlcnR5OiBcIkNhbid0IHJlYWQgcHJvdGVjdGVkIHByb3BlcnR5OiAkMVwiXG4jICAgIG5lZWRfcGFyZW5zX3RvX2NhbGw6IFwiSWYgeW91IHdhbnQgdG8gY2FsbCBgJDFgIGFzIGZ1bmN0aW9uLCB5b3UgbmVlZCBgKClgJ3NcIlxuIyAgICBleHBlY3RlZF9hbl9pZGVudGlmaWVyOiBcIkV4cGVjdGVkIGFuIGlkZW50aWZpZXIgYW5kIGluc3RlYWQgc2F3ICckMScuXCJcbiMgICAgdW5leHBlY3RlZF9pZGVudGlmaWVyOiBcIlVuZXhwZWN0ZWQgaWRlbnRpZmllclwiXG4jICAgIHVuZXhwZWN0ZWRfZW5kX29mOiBcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0XCJcbiMgICAgdW5uZWNlc3Nhcnlfc2VtaWNvbG9uOiBcIlVubmVjZXNzYXJ5IHNlbWljb2xvbi5cIlxuIyAgICB1bmV4cGVjdGVkX3Rva2VuX2V4cGVjdGVkOiBcIlVuZXhwZWN0ZWQgdG9rZW46IGV4cGVjdGVkICQxIGJ1dCBmb3VuZCAkMiB3aGlsZSBwYXJzaW5nICQzXCJcbiMgICAgdW5leHBlY3RlZF90b2tlbjogXCJVbmV4cGVjdGVkIHRva2VuICQxXCJcbiMgICAgdW5leHBlY3RlZF90b2tlbjI6IFwiVW5leHBlY3RlZCB0b2tlblwiXG4jICAgIHVuZXhwZWN0ZWRfbnVtYmVyOiBcIlVuZXhwZWN0ZWQgbnVtYmVyXCJcbiMgICAgdW5leHBlY3RlZDogXCJVbmV4cGVjdGVkICckMScuXCJcbiMgICAgZXNjYXBlX3ByZXNzZWRfY29kZTogXCJFc2NhcGUgcHJlc3NlZDsgY29kZSBhYm9ydGVkLlwiXG4jICAgIHRhcmdldF9hbl9lbmVteTogXCJUYXJnZXQgYW4gZW5lbXkgYnkgbmFtZSwgbGlrZSBgJDFgLCBub3QgdGhlIHN0cmluZyBgJDJgLlwiXG4jICAgIHRhcmdldF9hbl9lbmVteV8yOiBcIlRhcmdldCBhbiBlbmVteSBieSBuYW1lLCBsaWtlICQxLlwiXG4jICAgIGNhbm5vdF9yZWFkX3Byb3BlcnR5OiBcIkNhbm5vdCByZWFkIHByb3BlcnR5ICckMScgb2YgdW5kZWZpbmVkXCJcbiMgICAgYXR0ZW1wdGVkX3RvX2Fzc2lnbjogXCJBdHRlbXB0ZWQgdG8gYXNzaWduIHRvIHJlYWRvbmx5IHByb3BlcnR5LlwiXG4jICAgIHVuZXhwZWN0ZWRfZWFybHlfZW5kOiBcIlVuZXhwZWN0ZWQgZWFybHkgZW5kIG9mIHByb2dyYW0uXCJcbiMgICAgeW91X25lZWRfYV9zdHJpbmc6IFwiWW91IG5lZWQgYSBzdHJpbmcgdG8gYnVpbGQ7IG9uZSBvZiAkMVwiXG4jICAgIHVuYWJsZV90b19nZXRfcHJvcGVydHk6IFwiVW5hYmxlIHRvIGdldCBwcm9wZXJ0eSAnJDEnIG9mIHVuZGVmaW5lZCBvciBudWxsIHJlZmVyZW5jZVwiICMgVE9ETzogRG8gd2UgdHJhbnNsYXRlIHVuZGVmaW5lZC9udWxsP1xuIyAgICBjb2RlX25ldmVyX2ZpbmlzaGVkX2l0czogXCJDb2RlIG5ldmVyIGZpbmlzaGVkLiBJdCdzIGVpdGhlciByZWFsbHkgc2xvdyBvciBoYXMgYW4gaW5maW5pdGUgbG9vcC5cIlxuIyAgICB1bmNsb3NlZF9zdHJpbmc6IFwiVW5jbG9zZWQgc3RyaW5nLlwiXG4jICAgIHVubWF0Y2hlZDogXCJVbm1hdGNoZWQgJyQxJy5cIlxuIyAgICBlcnJvcl95b3Vfc2FpZF9hY2hvbzogXCJZb3Ugc2FpZDogJDEsIGJ1dCB0aGUgcGFzc3dvcmQgaXM6ICQyLiAoQ2FwaXRhbCBsZXR0ZXJzIGFyZSBpbXBvcnRhbnQuKVwiXG4jICAgIGluZGVudGF0aW9uX2Vycm9yX3VuaW5kZW50X2RvZXM6IFwiSW5kZW50YXRpb24gRXJyb3I6IHVuaW5kZW50IGRvZXMgbm90IG1hdGNoIGFueSBvdXRlciBpbmRlbnRhdGlvbiBsZXZlbFwiXG4jICAgIGluZGVudGF0aW9uX2Vycm9yOiBcIkluZGVudGF0aW9uIGVycm9yLlwiXG4jICAgIG5lZWRfYV9vbl90aGU6IFwiTmVlZCBhIGA6YCBvbiB0aGUgZW5kIG9mIHRoZSBsaW5lIGZvbGxvd2luZyBgJDFgLlwiXG4jICAgIGF0dGVtcHRfdG9fY2FsbF91bmRlZmluZWQ6IFwiYXR0ZW1wdCB0byBjYWxsICckMScgKGEgbmlsIHZhbHVlKVwiXG4jICAgIHVudGVybWluYXRlZDogXCJVbnRlcm1pbmF0ZWQgYCQxYFwiXG4jICAgIHRhcmdldF9hbl9lbmVteV92YXJpYWJsZTogXCJUYXJnZXQgYW4gJDEgdmFyaWFibGUsIG5vdCB0aGUgc3RyaW5nICQyLiAoVHJ5IHVzaW5nICQzLilcIlxuIyAgICBlcnJvcl91c2VfdGhlX3ZhcmlhYmxlOiBcIlVzZSB0aGUgdmFyaWFibGUgbmFtZSBsaWtlIGAkMWAgaW5zdGVhZCBvZiBhIHN0cmluZyBsaWtlIGAkMmBcIlxuIyAgICBpbmRlbnRhdGlvbl91bmluZGVudF9kb2VzX25vdDogXCJJbmRlbnRhdGlvbiB1bmluZGVudCBkb2VzIG5vdCBtYXRjaCBhbnkgb3V0ZXIgaW5kZW50YXRpb24gbGV2ZWxcIlxuIyAgICB1bmNsb3NlZF9wYXJlbl9pbl9mdW5jdGlvbl9hcmd1bWVudHM6IFwiVW5jbG9zZWQgJDEgaW4gZnVuY3Rpb24gYXJndW1lbnRzLlwiXG4jICAgIHVuZXhwZWN0ZWRfZW5kX29mX2lucHV0OiBcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0XCJcbiMgICAgdGhlcmVfaXNfbm9fZW5lbXk6IFwiVGhlcmUgaXMgbm8gYCQxYC4gVXNlIGAkMmAgZmlyc3QuXCIgIyBIaW50cyBzdGFydCBoZXJlXG4jICAgIHRyeV9oZXJvZmluZG5lYXJlc3RlbmVteTogXCJUcnkgYCQxYFwiXG4jICAgIHRoZXJlX2lzX25vX2Z1bmN0aW9uOiBcIlRoZXJlIGlzIG5vIGZ1bmN0aW9uIGAkMWAsIGJ1dCBgJDJgIGhhcyBhIG1ldGhvZCBgJDNgLlwiXG4jICAgIGF0dGFja3NfYXJndW1lbnRfZW5lbXlfaGFzOiBcImAkMWAncyBhcmd1bWVudCBgJDJgIGhhcyBhIHByb2JsZW0uXCJcbiMgICAgaXNfdGhlcmVfYW5fZW5lbXk6IFwiSXMgdGhlcmUgYW4gZW5lbXkgd2l0aGluIHlvdXIgbGluZS1vZi1zaWdodCB5ZXQ/XCJcbiMgICAgdGFyZ2V0X2lzX251bGxfaXM6IFwiVGFyZ2V0IGlzICQxLiBJcyB0aGVyZSBhbHdheXMgYSB0YXJnZXQgdG8gYXR0YWNrPyAoVXNlICQyPylcIlxuIyAgICBoZXJvX2hhc19ub19tZXRob2Q6IFwiYCQxYCBoYXMgbm8gbWV0aG9kIGAkMmAuXCJcbiMgICAgdGhlcmVfaXNfYV9wcm9ibGVtOiBcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHlvdXIgY29kZS5cIlxuIyAgICBkaWRfeW91X21lYW46IFwiRGlkIHlvdSBtZWFuICQxPyBZb3UgZG8gbm90IGhhdmUgYW4gaXRlbSBlcXVpcHBlZCB3aXRoIHRoYXQgc2tpbGwuXCJcbiMgICAgbWlzc2luZ19hX3F1b3RhdGlvbl9tYXJrOiBcIk1pc3NpbmcgYSBxdW90YXRpb24gbWFyay4gXCJcbiMgICAgbWlzc2luZ192YXJfdXNlX3ZhcjogXCJNaXNzaW5nIGAkMWAuIFVzZSBgJDJgIHRvIG1ha2UgYSBuZXcgdmFyaWFibGUuXCJcbiMgICAgeW91X2RvX25vdF9oYXZlOiBcIllvdSBkbyBub3QgaGF2ZSBhbiBpdGVtIGVxdWlwcGVkIHdpdGggdGhlICQxIHNraWxsLlwiXG4jICAgIHB1dF9lYWNoX2NvbW1hbmRfb246IFwiUHV0IGVhY2ggY29tbWFuZCBvbiBhIHNlcGFyYXRlIGxpbmVcIlxuIyAgICBhcmVfeW91X21pc3NpbmdfYTogXCJBcmUgeW91IG1pc3NpbmcgYSAnJDEnIGFmdGVyICckMic/IFwiXG4jICAgIHlvdXJfcGFyZW50aGVzZXNfbXVzdF9tYXRjaDogXCJZb3VyIHBhcmVudGhlc2VzIG11c3QgbWF0Y2guXCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9sb2NhbGUvZGUtQVQuY29mZmVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///219\n");

/***/ })

});