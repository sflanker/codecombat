/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:948bf539e834dce771f9, name:locale/sv, filebase:sv.bundle.js, query:, file:javascripts/chunks/locale/sv.bundle.js */
webpackJsonp([23],{

/***/ 261:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Svenska\",\n  englishDescription: \"Swedish\",\n  translation: {\n    nav: {\n      play: \"Spela\",\n      community: \"Community\",\n      courses: \"Lektioner\",\n      blog: \"Blogg\",\n      forum: \"Forum\",\n      account: \"Konto\",\n      profile: \"Profil\",\n      home: \"Hem\",\n      contribute: \"Bidra\",\n      legal: \"Juridik\",\n      about: \"Om oss\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Följ oss på Twitter\",\n      careers: \"Jobbtillfällen\"\n    },\n    modal: {\n      close: \"Stäng\",\n      okay: \"Okej\"\n    },\n    not_found: {\n      page_not_found: \"Sidan kan inte hittas\"\n    },\n    diplomat_suggestion: {\n      title: \"Hjälp till att översätta CodeCombat!\",\n      sub_heading: \"Vi behöver dina språkliga kunskaper.\",\n      pitch_body: \"Vi utvecklar CodeCombat på engelska, men vi har redan spelare världen över. Många av dem vill spela på svenska eftersom de inte talar engelska. Om du talar båda språken, fundera på att registrera dig som Diplomat och hjälp till med översättningen av både hemsidan och alla nivåer till svenska.\",\n      missing_translations: \"Tills vi har översatt allting till svenska, så kommer du se engelska när det inte finns någon svensk översättning tillgänglig.\",\n      learn_more: \"Läs mer om att vara en Diplomat\",\n      subscribe_as_diplomat: \"Registrera dig som Diplomat\"\n    },\n    play: {\n      play_as: \"Spela som \",\n      compete: \"Tävla!\",\n      spectate: \"Titta på\",\n      players: \"spelare\",\n      hours_played: \"timmar spelade\",\n      items: \"Föremål\",\n      unlock: \"Lås upp\",\n      confirm: \"Bekräfta\",\n      owned: \"Ägs av dig\",\n      locked: \"Låst\",\n      available: \"Tillgängligt\",\n      skills_granted: \"Ger färdigheter\",\n      heroes: \"Hjältar\",\n      achievements: \"Prestationer\",\n      settings: \"Inställningar\",\n      poll: \"Omröstning\",\n      next: \"Nästa\",\n      change_hero: \"Byt Hjälte\",\n      buy_gems: \"Köp ädelstenar\",\n      anonymous: \"Anonym Spelare\",\n      level_difficulty: \"Svårighetsgrad: \",\n      awaiting_levels_adventurer_prefix: \"Vi släpper nya nivåer varje vecka.\",\n      awaiting_levels_adventurer: \"Registrera dig som äventyrare\",\n      awaiting_levels_adventurer_suffix: \"för att vara först att spela nya nivåer.\",\n      adjust_volume: \"justera volymen\",\n      campaign_multiplayer: \"Flerspelararenor\",\n      campaign_multiplayer_description: \"... i vilken du tävlar i kodande mot andra spelare\"\n    },\n    share_progress_modal: {\n      blurb: \"Du gör stora framsteg! Berätta för dina föräldrar hur mycket du lärt dig tack vare CodeCombat.\",\n      email_invalid: \"ogiltig mejladress.\",\n      form_blurb: \"Ange en förälders mejladress så visar vi dem!\",\n      form_label: \"Mejladress\",\n      placeholder: \"mejladress\",\n      title: \"Utmärkt arbete, lärling\"\n    },\n    login: {\n      sign_up: \"Skapa konto\",\n      log_in: \"Logga in\",\n      logging_in: \"Loggar in\",\n      log_out: \"Logga ut\",\n      forgot_password: \"Glömt ditt lösenord?\",\n      finishing: \"Färdigställer\",\n      sign_in_with_facebook: \"Logga in med Facebook\",\n      sign_in_with_gplus: \"Logga in med G+\",\n      signup_switch: \"Vill du skapa ett konto?\"\n    },\n    signup: {\n      email_announcements: \"Mottag nyheter via mejl\",\n      creating: \"Skapar konto...\",\n      sign_up: \"Skapa konto\",\n      log_in: \"logga in med lösenord\",\n      required: \"Du måste logga in innan du kan gå dit\",\n      login_switch: \"Har du redan ett konto?\"\n    },\n    recover: {\n      recover_account_title: \"Återskapa ditt konto\",\n      send_password: \"Skicka återskapningslösenord\",\n      recovery_sent: \"Återskapningslösenord skickat.\"\n    },\n    items: {\n      primary: \"Primär\",\n      secondary: \"Sekundär\",\n      armor: \"Rustning\",\n      accessories: \"Tillbehör\",\n      misc: \"Övrigt\",\n      books: \"Böcker\"\n    },\n    common: {\n      back: \"Tillbaka\",\n      \"continue\": \"Fortsätt\",\n      loading: \"Laddar...\",\n      saving: \"Sparar...\",\n      sending: \"Skickar...\",\n      send: \"Skicka\",\n      cancel: \"Avbryt\",\n      save: \"Spara\",\n      publish: \"Publicera\",\n      create: \"Skapa\",\n      fork: \"Förgrena\",\n      play: \"Spela\",\n      retry: \"Försök igen\",\n      actions: \"Handlingar\",\n      info: \"Info\",\n      help: \"Hjälp\",\n      submit_changes: \"Spara Ändringar\",\n      save_changes: \"Spara ändringar\"\n    },\n    general: {\n      and: \"och\",\n      name: \"Namn\",\n      date: \"Datum\",\n      body: \"Kropp\",\n      version: \"Version\",\n      accepted: \"Accepterad\",\n      rejected: \"Avvisad\",\n      accept: \"Acceptera\",\n      reject: \"Avvisa\",\n      submitter: \"Inlämnare\",\n      submitted: \"Inlämnat\",\n      commit_msg: \"Ändringsmeddelande\",\n      version_history: \"Ändringshistorik\",\n      version_history_for: \"Ändringshistorik för: \",\n      select_changes: \"Välj två ändringar nedan för att se skillnaden.\",\n      undo_prefix: \"Ångra\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"gör om\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Spela förhandsversion av aktuell nivå\",\n      result: \"Resultat\",\n      results: \"Resultat\",\n      description: \"Beskrivning\",\n      or: \"eller\",\n      subject: \"Ämne\",\n      email: \"Mejl\",\n      password: \"Lösenord\",\n      message: \"Meddelande\",\n      code: \"Kod\",\n      ladder: \"Stege\",\n      when: \"När\",\n      opponent: \"Fiende\",\n      rank: \"Rank\",\n      score: \"Poäng\",\n      win: \"Vinst\",\n      loss: \"Förlust\",\n      tie: \"Oavgjord\",\n      easy: \"Lätt\",\n      medium: \"Medium\",\n      hard: \"Svår\",\n      player: \"Spelare\",\n      player_level: \"Nivå\",\n      warrior: \"Krigare\",\n      ranger: \"Vandrare\",\n      wizard: \"Trollkarl\"\n    },\n    units: {\n      second: \"sekund\",\n      seconds: \"sekunder\",\n      minute: \"minut\",\n      minutes: \"minuter\",\n      hour: \"timme\",\n      hours: \"timmar\",\n      day: \"dag\",\n      days: \"dagar\",\n      week: \"vecka\",\n      weeks: \"veckor\",\n      month: \"månad\",\n      months: \"månader\",\n      year: \"år\",\n      years: \"år\"\n    },\n    play_level: {\n      completed_level: \"Avklarad nivå:\",\n      course: \"Lektion:\",\n      done: \"Klar\",\n      next_level: \"Nästa nivå\",\n      next_game: \"Nästa spel\",\n      show_menu: \"Visa spelmeny\",\n      home: \"Hem\",\n      level: \"Nivå\",\n      skip: \"Hoppa över\",\n      game_menu: \"Spelmeny\",\n      restart: \"Börja om\",\n      goals: \"Mål\",\n      goal: \"Mål\",\n      running: \"Kör...\",\n      success: \"Du lyckades!\",\n      incomplete: \"Ej färdig\",\n      timed_out: \"Slut på tid\",\n      failing: \"Ingen framgång\",\n      reload: \"Ladda om\",\n      reload_title: \"Ladda om all kod?\",\n      reload_really: \"Är du säker på att du vill ladda om nivån från början?\",\n      reload_confirm: \"Ladda om allt\",\n      victory: \"Seger\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Genomförd\",\n      victory_sign_up: \"Registrera dig för att få uppdateringar\",\n      victory_sign_up_poke: \"Vill du ha de senaste nyheterna via mejl? Skapa ett gratiskonto så håller vi dig informerad!\",\n      victory_rate_the_level: \"Betygsätt nivån: \",\n      victory_return_to_ladder: \"Gå tillbaka till stegen\",\n      victory_saving_progress: \"Sparar framsteg\",\n      victory_go_home: \"Gå hem\",\n      victory_review: \"Berätta mer!\",\n      victory_review_placeholder: \"Hur tyckte du nivån var?\",\n      victory_hour_of_code_done: \"Är du klar?\",\n      victory_hour_of_code_done_yes: \"Ja, jag är klar med min Hour of Code!\",\n      victory_experience_gained: \"XP mottaget\",\n      victory_gems_gained: \"Vunna ädelstenar\",\n      victory_new_item: \"Nytt föremål\",\n      victory_viking_code_school: \"Jösses vilken svår nivå du just klarade! Om du inte redan är en mjukvaruutvecklare så borde du vara det. Du bev precis fast-tracked för antagning vid Viking Code School, där du kan ta dina kunskaper till en ny nivå och bli en professionell webbutvecklare på 14 veckor.\",\n      victory_become_a_viking: \"Bli en Viking\",\n      tome_cast_button_run: \"Kör\",\n      tome_cast_button_running: \"Kör...\",\n      tome_cast_button_ran: \"Körde\",\n      tome_submit_button: \"Lämna in\",\n      tome_reload_method: \"Ladda om den ursprungliga koden för den här metoden\",\n      tome_available_spells: \"Tillgängliga förmågor\",\n      tome_your_skills: \"Dina färdigheter\",\n      code_saved: \"Kod sparad\",\n      skip_tutorial: \"Hoppa över (esc)\",\n      keyboard_shortcuts: \"Kortkommandon\",\n      loading_start: \"Starta Nivå\",\n      problem_alert_title: \"Fixa din kod\",\n      time_current: \"Nu:\",\n      time_total: \"Max:\",\n      time_goto: \"Gå till:\",\n      non_user_code_problem_title: \"Kunde inte ladda nivå\",\n      infinite_loop_title: \"Oändlig loop upptäckt\",\n      check_dev_console_link: \"(instruktioner)\",\n      infinite_loop_try_again: \"Försök igen\",\n      infinite_loop_reset_level: \"Återställ Nivå\",\n      infinite_loop_comment_out: \"Kommentera bort min kod\",\n      tip_toggle_play: \"Spela/pausa med Ctrl+P.\",\n      tip_scrub_shortcut: \"Ctrl+] och Ctrl+[ spolar framåt och bakåt.\",\n      tip_guide_exists: \"Om du vill ha mer användbar information: Klicka på guiden högst upp i spelmenyn\",\n      tip_open_source: \"CodeCombat är 100% öppen källkod!\",\n      tip_tell_friends: \"Gillar du CodeCombat? Tipsa dina vänner om oss!\",\n      tip_beta_launch: \"CodeCombat startade sin beta i oktober 2013.\",\n      tip_think_solution: \"Tänk på lösningen, inte problemet.\",\n      tip_theory_practice: \"Teoretiskt sett så är det ingen skillnad mellan teori och praktik. Men i praktiken så är det. - Yogi Berra\",\n      tip_error_free: \"Det finns två sätt att skriva felfria program; endast det tredje fungerar. - Alan Perlis\",\n      tip_baby_coders: \"I framtiden är till och med bebisar ärkemagiker.\",\n      tip_harry: \"Du e' en trollkarl, \",\n      tip_binary: \"Det finns 10 sorters människor på jorden, de som försår binära tal och de som inte gör det.\",\n      tip_no_try: \"Gör. Eller gör inte. Försök finns inte. - Yoda\",\n      tip_patience: \"Tålamod du måste ha, unge Padawan. - Yoda\",\n      tip_documented_bug: \"En dokumenterad bugg är inte en bugg - det är en funktion.\",\n      tip_impossible: \"Allt verkar alltid omöjligt ända tills någon gör det. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Det är billigt att prata. Visa mig koden. - Linus Torvalds\",\n      tip_hardware_problem: \"Fråga: Hur många programmerare krävs för att byta en glödlampa?  Svar: Inga, det är ett hårdvaruproblem.\",\n      tip_no_code: \"Inge kod är snabbare än ingen kod.\",\n      tip_code_never_lies: \"Kod ljuger aldrig, kommentarer gör det ibland. — Ron Jeffries\",\n      tip_move_forward: \"Vad du än gör, fortsätt framåt. - Martin Luther King Jr.\",\n      tip_google: \"Ett problem du inte kan lösa? Googla det!\",\n      tip_adding_evil: \"Också en nypa ondska.\",\n      tip_hate_computers: \"Det är det som är grejen med folk som tror att de hatar datorer. Det de egentligen hatar är dåliga programmerare. - Larry Niven\",\n      tip_open_source_contribute: \"Du kan få CodeCombat att bli ännu bättre!\",\n      tip_recurse: \"Iteration är mänskligt, rekursion är gudomligt. - L. Peter Deutsch\"\n    },\n    game_menu: {\n      inventory_tab: \"Utrustning\",\n      save_load_tab: \"Spara/Ladda\",\n      options_tab: \"Inställningar\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Videogenomgång\",\n      guide_tips: \"Tips\",\n      multiplayer_tab: \"Flerspelarläge\",\n      auth_tab: \"Registrera dig\",\n      inventory_caption: \"Utrusta din hjälte\",\n      choose_hero_caption: \"Välj hjälte, språk\",\n      options_caption: \"Konfigurera inställningar\",\n      guide_caption: \"Dokument och tips\",\n      multiplayer_caption: \"Spela med vänner!\",\n      auth_caption: \"Spara dina framsteg.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Visa topplistor\",\n      scores: \"Poäng\",\n      top_players: \"Toppspelare efter\",\n      day: \"Idag\",\n      week: \"Den här veckan\",\n      all: \"Genom tiderna\",\n      time: \"Tid\",\n      damage_taken: \"Mottagen skada\",\n      damage_dealt: \"Åsamkad skada\",\n      difficulty: \"Svårighetsgrad\",\n      gold_collected: \"Samlat guld\"\n    },\n    inventory: {\n      equipped_item: \"Används\",\n      required_purchase_title: \"Krävs\",\n      available_item: \"Tillgänglig\",\n      restricted_title: \"Begränsad\",\n      should_equip: \"(dubbeklicka för att använda)\",\n      equipped: \"(används)\",\n      locked: \"(låst)\",\n      restricted: \"(begränsad på den här nivån)\",\n      equip: \"Använd\",\n      unequip: \"Sluta använda\"\n    },\n    buy_gems: {\n      few_gems: \"Ett par ädelstenar\",\n      pile_gems: \"Hög med ädelstenar\",\n      chest_gems: \"Kista med ädelstenar\",\n      purchasing: \"Köp pågår...\",\n      declined: \"Köp nekat\",\n      retrying: \"Serverfel, försöker igen.\",\n      prompt_title: \"Inte tillräckligt många ädelstenar\",\n      prompt_body: \"Vill du skaffa flera?\",\n      prompt_button: \"Gå till affären\",\n      recovered: \"Föregående köp av ädelstenar återskapat. Var vänlig och uppdatera sidan.\"\n    },\n    choose_hero: {\n      choose_hero: \"Välj hjälte\",\n      programming_language: \"Programspråk\",\n      programming_language_description: \"Vilket programspråk vill du använda?\",\n      \"default\": \"Standard\",\n      experimental: \"Experimentell\",\n      python_blurb: \"Enkelt men ändå kraftfullt, perfekt för nybörjare och experter.\",\n      javascript_blurb: \"Webbens språk. (Inte samma sak som Java.)\",\n      coffeescript_blurb: \"Trevligare JavaScript-syntax.\",\n      lua_blurb: \"Språk för spelskript.\",\n      status: \"Status\",\n      weapons: \"Vapen\",\n      weapons_warrior: \"Svärd - Kort räckvidd, ingen magi\",\n      weapons_ranger: \"Armborst, pistoler - Lång räckvidd, ingen magi\",\n      weapons_wizard: \"Trollspön, stavar - Lång räckvidd, magi\",\n      attack: \"Attack\",\n      health: \"Hälsa\",\n      speed: \"Hastighet\",\n      regeneration: \"Regeneration\",\n      range: \"Räckvidd\",\n      blocks: \"Blockerar\",\n      backstab: \"Hugg i ryggen\",\n      skills: \"Färdigheter\",\n      attack_1: \"Gör\",\n      attack_2: \"av noterad vapenskada för\",\n      attack_3: \".\",\n      health_1: \"Får\",\n      health_2: \"av noterad rustningshälsa för\",\n      health_3: \".\",\n      speed_1: \"Rör sig\",\n      speed_2: \"meter per sekund.\",\n      available_for_purchase: \"Tillgänlig att köpa\",\n      level_to_unlock: \"Nivå som låser upp:\",\n      restricted_to_certain_heroes: \"Det är bara vissa hjältar som kan spela den här nivån.\"\n    },\n    skill_docs: {\n      writable: \"skrivbar\",\n      read_only: \"endast läsning\",\n      action: \"Handling\",\n      spell: \"Trollformel\",\n      action_name: \"namn\",\n      action_cooldown: \"Tar\",\n      action_specific_cooldown: \"Återhämtningstid\",\n      action_damage: \"Skada\",\n      action_range: \"Räckvidd\",\n      action_radius: \"Radie\",\n      action_duration: \"Löptid\",\n      example: \"Exampel\",\n      ex: \"ex\",\n      current_value: \"Nuvarande värde\",\n      default_value: \"Standardvärde\",\n      parameters: \"Parametrar\",\n      returns: \"Returnerar\",\n      granted_by: \"Ges av\"\n    },\n    save_load: {\n      granularity_saved_games: \"Sparat\",\n      granularity_change_history: \"Historik\"\n    },\n    options: {\n      general_options: \"Allmänna inställningar\",\n      volume_label: \"Volym\",\n      music_label: \"Musik\",\n      music_description: \"Stäng av/sätt på bakgrundsmusik.\",\n      editor_config_title: \"Redigerarinställningar\",\n      editor_config_livecompletion_description: \"Visar förslag medans du skriver\",\n      editor_config_invisibles_label: \"Visa osynliga\",\n      editor_config_invisibles_description: \"Visar osynliga tecken, till exempel mellanrum och nyradstecken.\",\n      editor_config_indentguides_label: \"Visa indenteringsguider\",\n      editor_config_indentguides_description: \"Visar vertikala linjer för att kunna se indentering bättre.\",\n      editor_config_behaviors_label: \"Smart beteende\",\n      editor_config_behaviors_description: \"Avsluta automatiskt hakparenteser, parenteser, och citat.\"\n    },\n    about: {\n      nick_title: \"Medgrundare\",\n      matt_title: \"Medgrundare\",\n      cat_title: \"Chefshantverkare\",\n      scott_title: \"Medgrundare\",\n      retrostyle_title: \"Illustration\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Spara ny version\",\n      new_major_version: \"Ny betydande version\",\n      submitting_patch: \"Skickar in rättning...\",\n      cla_prefix: \"För att spara ändringar måste du först godkänna vår\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"JAG GODKÄNNER\",\n      owner_approve: \"En ägare måste godkänna ändringen innan den kan produktionssättas.\"\n    },\n    contact: {\n      contact_us: \"Kontakta CodeCombat\",\n      welcome: \"Kul att höra från dig! Använd formuläret för att skicka mejl till oss. \",\n      forum_prefix: \"För någonting offentligt, var vänlig testa \",\n      forum_page: \"vårt forum\",\n      forum_suffix: \" istället.\",\n      faq_prefix: \"Det finns också en\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Om du behöver hjälp med en nivå,\",\n      subscribe: \"köp en CodeCombat prenumeration.\",\n      subscribe_suffix: \"Sedan hjälper vi dig gärna med din kod.\",\n      subscriber_support: \"Eftersom du är en CodeCombat-prenumerant kommer ditt mejl att bli prioriterat.\",\n      screenshot_included: \"Inkluderar skärmbild.\",\n      where_reply: \"Vart ska vi skicka svaret?\",\n      send: \"Skicka Feedback\"\n    },\n    account_settings: {\n      title: \"Kontoinställningar\",\n      not_logged_in: \"Logga in eller skapa ett konto för att ändra dina inställningar.\",\n      me_tab: \"Jag\",\n      picture_tab: \"Profilbild\",\n      delete_account_tab: \"Ta bort ditt konto\",\n      wrong_email: \"Fel mejladress\",\n      wrong_password: \"Felaktigt lösenord\",\n      delete_this_account: \"Ta bort det här kontot för alltid\",\n      reset_progress_tab: \"Återställa alla nivåer\",\n      reset_your_progress: \"Vill du återställa alla nivåer och börja om från början\",\n      god_mode: \"Allsmäktigt läge\",\n      emails_tab: \"Mejladresser\",\n      admin: \"Administratör\",\n      manage_subscription: \"Klicka här för att hantera din prenumeration.\",\n      new_password: \"Nytt lösenord\",\n      new_password_verify: \"Verifiera\",\n      type_in_email: \"Skriv in din mejladress för att bekräfta borttagandet\",\n      type_in_email_progress: \"Skriv in din email för att bekräfta att du vill återställa alla nivåer och börja om från början.\",\n      type_in_password: \"En sak till, skriv in ditt lösenord.\",\n      email_subscriptions: \"Mejlprenumerationer\",\n      email_subscriptions_none: \"Inga mejlprenumerationer.\",\n      email_announcements: \"Meddelanden\",\n      email_announcements_description: \"Få mejl med de senaste nyheterna och utvecklingen på CodeCombat.\",\n      email_notifications: \"Underrättelser\",\n      email_notifications_summary: \"Kontroller för personliga, automatiska mejlunderrättelser relaterade till din aktivitet på CodeCombat.\",\n      email_any_notes: \"Alla underrättelser\",\n      email_any_notes_description: \"Stäng av för att hindra alla mejl om aktiviteter.\",\n      email_news: \"Nyheter\",\n      email_recruit_notes: \"Jobbtillfällen\",\n      email_recruit_notes_description: \"Om du spelar riktigt bra så kanske vi kontaktar dig för att erbjuda ett (bättre) jobb.\",\n      contributor_emails: \"Mejl för bidragare\",\n      contribute_prefix: \"Vi söker mer folk som vill var med och hjälpa till! Kolla in \",\n      contribute_page: \" bidragarsidan \",\n      contribute_suffix: \" för att få veta mer.\",\n      email_toggle: \"Växla alla\",\n      error_saving: \"Ett fel uppstod när ändringarna skulle sparas\",\n      saved: \"Ändringar sparade\",\n      password_mismatch: \"De angivna lösenorden stämmer inte överens.\",\n      password_repeat: \"Upprepa ditt lösenord.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Kortkommandon\",\n      space: \"Mellanslag\",\n      enter: \"Enter\",\n      press_enter: \"tryck enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"Kör nuvarande kod.\",\n      run_real_time: \"Kör i realtid.\",\n      continue_script: \"Fortsätt förbi nuvarande kod.\",\n      skip_scripts: \"Hoppa över all kod som kan hoppas över.\",\n      toggle_playback: \"Spela/Pausa.\",\n      scrub_playback: \"Spela bakåt och framåt genom tiden.\",\n      single_scrub_playback: \"Spela bakåt och framåt genom tiden, en frame i taget.\",\n      scrub_execution: \"Spela genom nuvarande magiska trollformel.\",\n      toggle_debug: \"Toggla debug display.\",\n      toggle_grid: \"Toggla grid overlay.\",\n      maximize_editor: \"Maximera/minimera kodredigeraren.\"\n    },\n    community: {\n      main_title: \"CodeCombat Community\",\n      introduction: \"Kolla in på vilka sätt du kan vara delaktig och välj det som låter mest kul. Vi ser fram emot att jobba med dig!\",\n      level_editor_prefix: \"Använd\",\n      level_editor_suffix: \"till att skapa och ändra nivåer. Användare har skapat nivåer till sina klasser, vänner, hackathons, elever och syskon. Om det låter svårt att skapa en nivå så kan du använda en av våra som grund!\",\n      thang_editor_prefix: \"Vi kallar enheter i spelet 'thangs'. Använd\",\n      thang_editor_suffix: \"till att ändra CodeCombats grafik. Låt enheter kasta saker, ändra riktningen på animeringar, ändra en enhets livslängd eller ladda upp din egen vektorgrafik.\",\n      article_editor_prefix: \"Sett ett misstag i något av våra dokument? Vill du göra instruktioner till dina egna skapelser? Ta en titt på\",\n      article_editor_suffix: \"och hjälp CodeCombatspelare att få så mycket ut från sin speltid som möjligt.\",\n      find_us: \"Här hittar du oss\",\n      social_github: \"Kolla in all vår kod på GitHub\",\n      social_blog: \"Läs CodeCombatbloggen på Sett\",\n      social_discource: \"Gå med i diskussionerna i vårt forum\",\n      social_facebook: \"Gilla CodeCombat på Facebook\",\n      social_twitter: \"Följ CodeCombat på Twitter\",\n      social_gplus: \"Följ CodeCombat på Google+\",\n      contribute_to_the_project: \"Bidra till projektet\"\n    },\n    clans: {\n      clan: \"Klan\",\n      clans: \"Klaner\",\n      new_name: \"Namn på ny klan\",\n      new_description: \"Beskrivning av ny klan\",\n      make_private: \"Gör klanen privat\",\n      subs_only: \"endast följare\",\n      create_clan: \"Skapa ny klan\",\n      private_preview: \"Förhandsgranska\",\n      private_clans: \"Privata klaner\",\n      public_clans: \"Publik klan\",\n      my_clans: \"Mina klaner\",\n      clan_name: \"Klanens namn\",\n      name: \"Namn\",\n      edit_clan_name: \"Ändra klanens namn\",\n      edit_clan_description: \"Ändra beskrivningen av klanen\",\n      edit_name: \"ändra namn\",\n      edit_description: \"ändra beskrivning\",\n      \"private\": \"(privat)\",\n      summary: \"Summering\",\n      average_level: \"Medelnivå\",\n      delete_clan: \"Ta bort klan\",\n      leave_clan: \"Lämna klan\",\n      join_clan: \"Gå med i klan\",\n      invite_1: \"Bjud in:\",\n      invite_2: \"*Bjud in spelare till klanen genom att skicka denna länk.\",\n      members: \"Medlemmar\",\n      progress: \"Framsteg\",\n      not_started_1: \"ej påbörjad\",\n      started_1: \"påbörjad\",\n      complete_1: \"avklarad\",\n      exp_levels: \"Expandera nivåer\",\n      rem_hero: \"Ta bort hjälte\",\n      status: \"Status\",\n      complete_2: \"Avklarad\",\n      started_2: \"Påbörjad\",\n      not_started_2: \"Ej påbörjad\",\n      view_solution: \"Klicka för att se lösning.\",\n      view_attempt: \"Klicka för att se försök.\",\n      latest_achievement: \"Senaste prestation\",\n      playtime: \"Speltid\",\n      last_played: \"Senast spelad\"\n    },\n    classes: {\n      archmage_title: \"Ärkemagiker\",\n      archmage_title_description: \"(Kodare)\",\n      archmage_summary: \"Om du är en utvecklare som är intresserad av att koda utbildningsspel, bli då en ärkemagiker och hjälp oss bygga CodeCombat!\",\n      artisan_title: \"Hantverkare\",\n      artisan_title_description: \"(Nivåbyggare)\",\n      artisan_summary: \"Bygg och dela nivåer till dig och dina vänner. Bli en hantverkare för att lära dig konsten att lära andra att koda.\",\n      adventurer_title: \"Äventyrare\",\n      adventurer_title_description: \"(Nivåtestare)\",\n      adventurer_summary: \"Få nya nivåer (till och med prenumerantinnehåll) gratis en vecka innan alla andra och hjälp oss fixa buggar innan nivåerna blir publika.\",\n      scribe_title: \"Skriftlärd\",\n      scribe_title_description: \"(Artikelredigerare)\",\n      scribe_summary: \"Bra kod behöver bra dokumentation. Skriv, ändra och förbättra dokumenten som läses av miljoner spelare över hela världen.\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Översättare)\",\n      diplomat_summary: \"CodeCombat är översätts till över 45 språk av våra diplomater. Hjälp oss genom att göra översättningar.\",\n      ambassador_title: \"Ambassadör\",\n      ambassador_title_description: \"(Support)\",\n      ambassador_summary: \"Tämj forumanvändarna och hjälp dem som har frågor. Ambassadörerna representerar CodeCombat ute i världen.\"\n    },\n    editor: {\n      main_title: \"Redigerare: CodeCombat\",\n      article_title: \"Redigerare: Artiklar\",\n      thang_title: \"Redigerare: Enheter\",\n      level_title: \"Redigerare: Nivåer\",\n      achievement_title: \"Redigerare: Prestationer\",\n      poll_title: \"Redigerare: Omröstning\",\n      back: \"Backa\",\n      revert: \"Återställ\",\n      revert_models: \"Återställ modeller\",\n      pick_a_terrain: \"Välj terräng\",\n      dungeon: \"Håla\",\n      indoor: \"Inomhus\",\n      desert: \"Öken\",\n      grassy: \"Gräs\",\n      mountain: \"Berg\",\n      glacier: \"Glaciär\",\n      small: \"Liten\",\n      large: \"Stor\",\n      more: \"Mer\",\n      wiki: \"Wiki\",\n      thang_colors: \"Färger\",\n      level_some_options: \"Några inställningar?\",\n      level_tab_thangs: \"Enheter\",\n      level_tab_scripts: \"Skript\",\n      level_tab_components: \"Komponenter\",\n      level_tab_systems: \"System\",\n      level_tab_docs: \"Dokumentation\",\n      level_tab_thangs_title: \"Nuvarande enheter\",\n      level_tab_thangs_all: \"Alla\",\n      level_tab_thangs_conditions: \"Startvillkor\",\n      level_tab_thangs_add: \"Lägg till enheter\",\n      level_tab_thangs_search: \"Sök enheter\",\n      add_components: \"Lägg till komponenter\",\n      component_configs: \"Konfigurera komponenter\",\n      config_thang: \"Dubbelklicka för att konfigurera en enhet\",\n      \"delete\": \"Ta bort\",\n      duplicate: \"Duplicera\",\n      stop_duplicate: \"Sluta duplicera\",\n      rotate: \"Rotera\",\n      level_component_tab_title: \"Nuvarande komponenter\",\n      level_component_btn_new: \"Skapa ny komponent\",\n      level_systems_tab_title: \"Nuvarande system\",\n      level_systems_btn_new: \"Skapa nytt system\",\n      level_systems_btn_add: \"Lägg till system\",\n      level_components_title: \"Tillbaka till alla enheter\",\n      level_components_type: \"Typ\",\n      level_component_edit_title: \"Redigera komponent\",\n      level_component_config_schema: \"Konfigurera schema\",\n      level_system_edit_title: \"Redigera system\",\n      create_system_title: \"Skapa nytt system\",\n      new_component_title: \"Skapa ny komponent\",\n      new_component_field_system: \"System\",\n      new_article_title: \"Skapa ny artikel\",\n      new_thang_title: \"Skapa ny enhetstyp\",\n      new_level_title: \"Skapa ny nivå\",\n      new_article_title_login: \"Logga in för att skapa en ny artikel\",\n      new_thang_title_login: \"Logga in för att ska en ny typ av enhet\",\n      new_level_title_login: \"Logga in för att skapa en ny nivå\",\n      new_achievement_title: \"Skapa en ny prestation\",\n      new_achievement_title_login: \"Logga in för att skapa en ny prestation\",\n      new_poll_title: \"Skapa en ny omröstning\",\n      new_poll_title_login: \"Logga in för att skapa en ny omröstning\",\n      article_search_title: \"Sök artiklar här\",\n      thang_search_title: \"Sök enhetstyper här\",\n      level_search_title: \"Sök nivåer här\",\n      achievement_search_title: \"Sök prestationer\",\n      poll_search_title: \"Sök röstningar\"\n    },\n    article: {\n      edit_btn_preview: \"Förhandsgranska\",\n      edit_article_title: \"Redigera artikel\"\n    },\n    polls: {\n      priority: \"Prioritet\"\n    },\n    contribute: {\n      page_title: \"Att bidra\",\n      intro_blurb: \"CodeCombat är 100% öppen källkod! Hundratals hängivna spelare har hjälpt till att skapa det spel du ser idag. Häng med oss och skriv nästa kapitel i CodeCombats uppdrag att lära världen att koda!\",\n      alert_account_message_intro: \"Hej där!\",\n      alert_account_message: \"För att prenumerera på klassmejl behöver du vara inloggad först.\",\n      archmage_introduction: \"En av de bästa delarna med att bygga spel är att de syntetiserar så många olika saker. Grafik, ljud, realtidsnätverkande, socialt netvärkande och så klart många av de vanligare aspekterna av programmering, från databashantering och serveradministration på låg nivå till användargränssnitt och gränsnittsbyggande. Det finns mycket att göra, och om du är en erfaren programmerare som längtar efter att dyka ner i CodeCombats detaljer kan den här klassen vara för dig. Vi skulle älska din hjälp med att bygga det bästa programmeringsspelet någonsin.\",\n      class_attributes: \"Klassattribut\",\n      archmage_attribute_1_pref: \"Kunskap om \",\n      archmage_attribute_1_suf: \", eller en vilja att lära. Det mesta av vår kod är i det här språket. Är du ett fan av Ruby eller Python kommer du att känna dig hemma. Det är Javascript, men med en trevligare syntax.\",\n      archmage_attribute_2: \"Viss erfarenhet av programmering och personligt initiativ. Vi hjälper dig att bli orienterad, men kan inte lägga mycket tid på att träna dig.\",\n      how_to_join: \"Hur man går med\",\n      join_desc_1: \"Alla kan hjälpa till! Kolla bara in vår \",\n      join_desc_2: \"för att komma igång, och kryssa i rutan nedanför för att markera att du är en modig ärkemagiker och få de senaste nyheterna via email. Vill du chatta om vad som ska göras eller hur du bli mer involverad?\",\n      join_desc_3: \", eller hitta oss i vår \",\n      join_desc_4: \"så tar vi det därifrån!\",\n      join_url_email: \"Maila oss\",\n      archmage_subscribe_desc: \"Få mail om nya kodmöjligheter och tillkännagivanden.\",\n      artisan_introduction_pref: \"Vi måste bygga fler nivåer! Människor kräver mer innehåll, och vi kan bara bygga en viss mängd själva. Just nu är arbetsstation nivå ett; vår nivåredigerare är knappt användbar ens av dess skapare, så var uppmärksam. Om du har visioner av kampanjer som sträcker sig från for-loopar till\",\n      artisan_introduction_suf: \", är den här klassen kanske något för dig.\",\n      artisan_attribute_1: \"Någon erfarenhet av att bygga liknande innehåll vore bra, som till exempel Blizzards nivåredigerare. Det är dock inget krav!\",\n      artisan_attribute_2: \"En vilja att göra en hel del testande och upprepning. För att göra bra nivåer, måste du ta dem till andra och se dem spela den, och vara beredd på att hitta många saker att laga.\",\n      artisan_attribute_3: \"För tillfället, uthållighet i klass med en äventyrare. Vår nivåredigerare är väldigt preliminär och frustrerande att använda. Du är varnad!\",\n      artisan_join_desc: \"Använd nivåredigeraren i dessa steg, mer eller mindre:\",\n      artisan_join_step1: \"Läs dokumentationen.\",\n      artisan_join_step2: \"Skapa en ny nivå och utforska existerande nivåer.\",\n      artisan_join_step3: \"Hitta oss i vårt offentliga Slack-rum för hjälp.\",\n      artisan_join_step4: \"Anslå dina nivåer på forumet för feedback.\",\n      artisan_subscribe_desc: \"Få mail om nivåredigeraruppdateringar och tillkännagivanden\",\n      adventurer_introduction: \"Låt oss vara tydliga med din roll: du är tanken. Du kommer att ta stor skada. Vi behöver människor som kan testa splitternya nivåer och hjälpa till att identifiera hur man kan göra saker bättre. Smärtan kommer att vara enorm; att göra bra spel är en lång process och ingen gör rätt första gången. Om du kan härda ut och tål mycket stryk är det här klassen för dig.\",\n      adventurer_attribute_1: \"En törst efter att lära sig. Du vill lära dig att koda och vi vill lära dig att koda. Du kommer förmodligen att vara den som lär ut mest i det här fallet, dock.\",\n      adventurer_attribute_2: \"Karismatisk. Var varsammen tydlig med vad som behöver förbättras, och erbjud förslag på hur förbättringar kan ske.\",\n      adventurer_join_pref: \"Antingen träffar (eller rekryterar!) du en hantverkare och jobbar med denna, eller så kryssar du i rutan nedanför för att få mail när det finns nya nivåer att testa. Vi kommer också att anslå nivåer som behöver granskas på nätverk som\",\n      adventurer_forum_url: \"vårt forum\",\n      adventurer_join_suf: \"så om du föredrar att bli notifierad på sådana sätt, bli medlem där!\",\n      adventurer_subscribe_desc: \"Få mail när det finns nya nivåer att testa.\",\n      scribe_introduction_pref: \"CodeCombat kommer inte att vara bara ett gäng nivåer. Det kommer också att inkludera en resurs för kunskap, en wiki av programmeringskoncept som nivåer kan ansluta till. På det sättet slipper varje hantverkare förklara i detalj vad en jämförelseoperator är, utan kan bara länka sin nivå till artikeln som förklarar det och redan är skriven, till spelarens uppbyggelse. Någonting i stil med vad \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" har byggt. Om du tycker att det är kul att uttrycka programmeringskoncept i Markdown-form, är det här klassen för dig.\",\n      scribe_attribute_1: \"Förmåga med ord är i princip allt du behöver. Inte bara grammatik och stavning, utan förmåga att förmedla komplicerade idéer till andra.\",\n      contact_us_url: \"Kontakta oss\",\n      scribe_join_description: \"Berätta lite om dig själv, din erfarenhet med programmering och vilka saker du skulle vilja skriva om. Vi går vidare därifrån!\",\n      scribe_subscribe_desc: \"Få mail om tillkännagivanden om artiklar.\",\n      diplomat_introduction_pref: \"Om vi lärde oss någonting från \",\n      diplomat_launch_url: \"lanseringen i oktober\",\n      diplomat_introduction_suf: \"är det att det finns ett stort intresse för CodeCombat i andra länder! Vi bygger en kår av översättare ivriga att förvandla en samling ord till en annan samling ord för att få CodeCombat så tillgänglig i världen som möjligt. Om du gillar att få tjuvkikar på kommande innehåll och att få dessa nivåer till de andra i ditt land så snart som möjligt är det här kanske klassen för dig.\",\n      diplomat_attribute_1: \"Flytande engelska och språket du vill översätta till. När man förmedlar komplicerade idéer är det viktigt att ha ett starkt grepp om båda!\",\n      diplomat_i18n_page_prefix: \"Du kan börja översätta nivåer genom att gå till vår\",\n      diplomat_i18n_page: \"översättningssida\",\n      diplomat_i18n_page_suffix: \", eller använda vårt gränssnitt och hemsida på GitHub.\",\n      diplomat_join_pref_github: \"Hitta ditt språks locale-fil \",\n      diplomat_github_url: \"på GitHub\",\n      diplomat_join_suf_github: \", redigera den online, och skicka en ryckförfrågan. Kryssa också i rutan här nedanför för att hålla dig uppdaterad om nya internationaliseringsutvecklingar.\",\n      diplomat_subscribe_desc: \"Få mail om i18n-utvecklingar och nivåer att översätta.\",\n      ambassador_introduction: \"Det är en gemenskap vi bygger, och du är anslutningarna. Vi har Olark-chatter, mail och sociala nätverk med många människor att prata med och hjälpa bekanta sig med spelet och lära sig från. Om du vill hjälpa människor att bli involverade och ha kul, och ha bra koll på CodeCombats puls och var vi är på väg, kanske det här är klassen för dig.\",\n      ambassador_attribute_1: \"Kommunikationsfärdigheter. Kunna identifiera problemen spelarna har och hjälpa till att lösa dem. Också att hålla resten av oss informerade om vad spelarna säger, vad de gillar och vad de inte gillar och vad de vill ha mer av!\",\n      ambassador_join_desc: \"berätta om dig själv, vad du har gjort och vad du skulle vara intresserad av att göra. Vi tar det därifrån!\",\n      ambassador_join_note_strong: \"Notera\",\n      ambassador_join_note_desc: \"En av våra högsta prioriteringar är att bygga ett flerspelarläge där spelare som har problem med att lösa nivåer kan kalla på trollkarlar av en högre nivå för att hjälpa dem. Det kommer att vara ett jättebra sätt för ambassadörer att göra sin grej. Vi håller dig informerad!\",\n      ambassador_subscribe_desc: \"Få mail om supportuppdateringar och flerspelarutvecklingar\",\n      changes_auto_save: \"Förändringar sparas automatiskt när du ändrar kryssrutor.\",\n      diligent_scribes: \"Våra flitiga skriftlärda:\",\n      powerful_archmages: \"Våra kraftfulla ärkemagiker:\",\n      creative_artisans: \"Våra kreativa hantverkare:\",\n      brave_adventurers: \"Våra modiga äventyrare:\",\n      translating_diplomats: \"Våra översättande diplomater:\",\n      helpful_ambassadors: \"Våra hjälpfulla ambassadörer:\"\n    },\n    ladder: {\n      my_matches: \"Mina matcher\",\n      simulate: \"Simulera\",\n      simulation_explanation: \"Genom att simulera matcher kan du få dina matcher rankade fortare.\",\n      simulate_games: \"Simulera matcher!\",\n      games_simulated_by: \"Spel simulerade av dig:\",\n      games_simulated_for: \"Spel simulerade åt dig:\",\n      games_simulated: \"Simulerade spel\",\n      games_played: \"Spelade spel\",\n      ratio: \"Förhållande\",\n      leaderboard: \"Resultattavla\",\n      battle_as: \"Kämpa som \",\n      summary_your: \"Dina \",\n      summary_matches: \"Matcher - \",\n      summary_wins: \" Vinster, \",\n      summary_losses: \" Förlustar\",\n      rank_no_code: \"Ingen ny kod att ranka\",\n      rank_my_game: \"Ranka min match!\",\n      rank_submitting: \"Skickar...\",\n      rank_submitted: \"Inskickad för rankning\",\n      rank_failed: \"Kunde inte ranka\",\n      rank_being_ranked: \"Matchen blir rankad\",\n      help_simulate: \"Hjälp till att simulera spel?\",\n      code_being_simulated: \"Din nya kod håller på att bli simulerad av andra spelare för rankning. Detta kommer att uppdateras allt eftersom nya matcher kommer in.\",\n      no_ranked_matches_pre: \"Inga rankade matcher för \",\n      no_ranked_matches_post: \" laget! Spela mot några motståndare och kom sedan tillbaka it för att få din match rankad.\",\n      choose_opponent: \"Välj en motståndare\",\n      select_your_language: \"Välj språk!\",\n      tutorial_play: \"Spela tutorial\",\n      tutorial_recommended: \"Rekommenderas om du aldrig har spelat tidigare\",\n      tutorial_skip: \"Hoppa över tutorial\",\n      tutorial_not_sure: \"Inte säker på vad som händer?\",\n      tutorial_play_first: \"Spela tutorial först.\",\n      simple_ai: \"Enkelt AI\",\n      warmup: \"Uppvärmning\",\n      rules: \"Regler\",\n      winners: \"Vinnare\"\n    },\n    user: {\n      stats: \"Stats\",\n      singleplayer_title: \"Enspelarnivåer\",\n      multiplayer_title: \"Flerspelarnivåer\",\n      achievements_title: \"Prestationer\",\n      last_played: \"Senast spelad\",\n      status: \"Status\",\n      status_completed: \"Avklarad\",\n      status_unfinished: \"Ej avklarad\",\n      no_singleplayer: \"Inga spel i enkelspelarläge än.\",\n      no_multiplayer: \"Inga spel i flerspelarläge än.\",\n      no_achievements: \"Inga prestationer än.\",\n      favorite_prefix: \"Favoritspråk: \"\n    },\n    achievements: {\n      last_earned: \"Senast förvärvad den\",\n      amount_achieved: \"Antal\",\n      achievement: \"Prestation\"\n    },\n    account: {\n      payments: \"Betalningar\",\n      subscription: \"Prenumeration\",\n      invoices: \"Fakturor\",\n      service_web: \"Webb\",\n      paid_on: \"Betalat den\",\n      price: \"Pris\",\n      gems: \"Ädelstenar\",\n      active: \"Aktiv\",\n      cost: \"Kostnad\",\n      next_payment: \"Nästa betalning\",\n      card: \"Kort\"\n    },\n    delta: {\n      no_changes: \"Inga ändringar\"\n    },\n    legal: {\n      page_title: \"Juridik\",\n      opensource_intro: \"CodeCombat är gratis att spela och helt öppen programvara.\",\n      opensource_description_prefix: \"Spana in \",\n      github_url: \"vår GitHub\",\n      opensource_description_center: \" och hjälp till om du vill! CodeCombat är byggt på dussintals projekt med öppen källkod, och vi älskar dem. Se \",\n      archmage_wiki_url: \"vår Ärkemagiker-wiki\",\n      opensource_description_suffix: \"för en lista över mjukvaran som gör detta spel möjligt.\",\n      practices_title: \"Respektfulla \\\"best practices\\\"\",\n      practices_description: \"Dessa är våra löften till dig, spelaren, på lite mindre juristspråk.\",\n      privacy_title: \"Integritet\",\n      security_title: \"Säkerhet\",\n      security_description: \"Vi strävar efter att hålla din personliga information säker. Eftersom vår källkod är öppen är vår det fritt fram för vem som helst att granska och förbättra våra säkerhetssystem.\",\n      email_title: \"Mejl\",\n      email_description_prefix: \"Vi kommer inte att översvämma dig med spam. Genom \",\n      email_settings_url: \"dina mejlinställningar\",\n      email_description_suffix: \"eller genom länkar i mejlen vi skickar kan du ändra dina inställningar och lätt avprenumerera när som helst.\",\n      cost_title: \"Kostnad\",\n      copyrights_title: \"Upphovsrätt och licenser\",\n      contributor_title: \"Överenskommelse för bidragarlicens\",\n      contributor_description_prefix: \"Alla bidrag, både på sajten och på vårt GitHub-repo, faller under vår\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \", som du borde godkänna innan du börjar bidra.\",\n      code_title: \"Kod - MIT\",\n      code_description_prefix: \"All kod som ägs av CodeCombat eller som finns på codecombat.com, både i GitHub-repot och i codecombat.com-databasen, är licensierad under\",\n      mit_license_url: \"MIT license\",\n      code_description_suffix: \"Detta inkluderar all kod i system och komponenter som gjorts tillgänglig för CodeCombat i syftet att skapa nivåer.\",\n      art_title: \"Konst/Musik - Creative Commons \",\n      art_description_prefix: \"Allt gemensamt innehåll är tillgängligt under\",\n      cc_license_url: \"Creative Commons Erkännande 4.0 Internationell-licensen\",\n      art_description_suffix: \"Gemensamt innehåll är vad som helst som gjorts allmänt tillgängligt för CodeCombat i syfte att skapa nivåer. Detta inkluderar:\",\n      art_music: \"Musik\",\n      art_sound: \"Ljud\",\n      art_artwork: \"Illustrationer\",\n      art_sprites: \"Sprites\",\n      art_other: \"Allt (icke-kod) kreativt arbete som görs tillgängliga när nivåer skapas.\",\n      art_access: \"För tillfället finns det inget universellt, enkelt system för att hämta dessa tillgångar. Allmänt gäller: hämta dem från URL:erna som sajten använder, kontakta oss för hjälp, eller hjälp oss att utöka sajten för att göra dessa tillgångar mer lättillgängliga.\",\n      art_paragraph_1: \"För tillskrivning, var vänlig namnge och länka till codecombat.com i närheten av var källan används eller där det är passande för mediet. Till exempel:\",\n      use_list_1: \"Om det används i en film eller ett annat spel, inkludera codecombat.com i eftertexterna.\",\n      use_list_2: \"Om det används på en webbplats, inkludera en länk nära användandet, till exempel under en bild eller i en allmän tilldelningssida där du också kan nämna andra Create Commons-resurser och öppen programvara som används på webbplatsen. Någonting som redan tydligt refererar till CodeCombat, exempelvis en bloggpost som nämner CodeCombat, behöver ingen separat tillskrivning.\",\n      art_paragraph_2: \"Om innehållet som används inte är skapat av CodeCombat utan istället av en användare av codecombat.com, tillskriv dem istället, och följ tillskrivningsinstruktioner som ges i den resursens beskrivning om det finns några.\",\n      rights_title: \"Rättigheter förbehålls\",\n      rights_desc: \"Alla rättigheter förbehålls för själva nivåerna. Detta inkluderar:\",\n      rights_scripts: \"Script\",\n      rights_unit: \"Enhetskonfiguration\",\n      rights_writings: \"Skifter\",\n      rights_media: \"Media (ljud, musik) och annat kreativt innehåll som skapats specifikt för denna nivå och inte gjorts allmänt tillgängligt när nivåer skapats.\",\n      rights_clarification: \"För att klargöra, allt som gjorts tillgängligt i nivåredigeraren i syfte att skapa nivåer är under CC, medan innehållet skapat med nivåredigeraren eller uppladdat under skapandet inte är detta.\",\n      nutshell_title: \"I ett nötskal\",\n      nutshell_description: \"Alla resurser vi tillhandahåller i nivåredigeraren är gratis att använda som du vill för att skapa nivåer. Men vi reserverar oss rättigheten att begränsa distribution av nivåerna själva (som skapas på codecombat.com) så att de kan tas betalt för i framtiden, om det är så det blir.\",\n      canonical: \"Den engelska versionen av detta dokument är den definitiva, erkända versionen. Om det finns några skillnader mellan översättningar är det det engelska dokumentet som tar företräde.\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///261\n");

/***/ })

});