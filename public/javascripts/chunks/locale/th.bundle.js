/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:31bdef5b1beb0b3916a3, name:locale/th, filebase:th.bundle.js, query:, file:javascripts/chunks/locale/th.bundle.js */
webpackJsonp([22],{

/***/ 262:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"ไทย\",\n  englishDescription: \"Thai\",\n  translation: {\n    nav: {\n      play: \"เล่น\",\n      blog: \"บล็อก\",\n      forum: \"กระดานสนทนา\",\n      home: \"Home\",\n      contribute: \"สนับสนุน\",\n      legal: \"Legal\",\n      about: \"เกี่ยวกับเรา\",\n      contact: \"ติดต่อเรา\",\n      twitter_follow: \"ติดตามพวกเรา!\"\n    },\n    modal: {\n      close: \"ปิด\",\n      okay: \"ตกลง\"\n    },\n    not_found: {\n      page_not_found: \"ขออภัย ไม่พบหน้าเว็บที่คุณต้องการ\"\n    },\n    diplomat_suggestion: {\n      title: \"ช่วยเหลือการแปล CodeCombat!\",\n      sub_heading: \"พวกเราต้องการทักษะภาษาของคุณ\",\n      pitch_body: \"We develop CodeCombat in English, but we already have players all over the world. Many of them want to play in Thai but don't speak English, so if you can speak both, please consider signing up to be a Diplomat and help translate both the CodeCombat website and all the levels into Thai.\",\n      missing_translations: \"Until we can translate everything into Thai, you'll see English when Thai isn't available.\"\n    },\n    play: {\n      players: \"ผู้เล่น\",\n      confirm: \"ยืนยัน\",\n      next: \"ต่อไป\",\n      buy_gems: \"ซื้อ Gems\"\n    },\n    login: {\n      sign_up: \"ลงทะเบียนใหม่\",\n      log_in: \"ลงชื่อเข้าใช้\",\n      logging_in: \"กำลังเข้าสู่ระบบ\",\n      log_out: \"ลงชื่อออก\",\n      forgot_password: \"ลืมรหัสผ่าน\",\n      sign_in_with_facebook: \"ลงชื่อเข้าใช้ด้วย Facebook\",\n      sign_in_with_gplus: \"ลงชื่อเข้าใช้ด้วย G+\"\n    },\n    signup: {\n      email_announcements: \"รับข่าวสารผ่านทางอีเมลล์\",\n      creating: \"กำลังสร้างบัญชีใหม่...\",\n      sign_up: \"สมัคร\",\n      log_in: \"เข้าสู่ระบบด้วยรหัสผ่าน\"\n    },\n    items: {\n      primary: \"ไอเทมหลัก\",\n      secondary: \"ไอเทมรอง\",\n      armor: \"ชุดเกราะ\",\n      accessories: \"เครื่องประดับ\",\n      misc: \"อื่นๆ\",\n      books: \"หนังสือ\"\n    },\n    common: {\n      loading: \"รอสักครู่...\",\n      saving: \"กำลังบันทึก...\",\n      cancel: \"ยกเลิก\",\n      save: \"บันทึก\",\n      play: \"เล่น\"\n    },\n    general: {\n      name: \"ชื่อ\",\n      date: \"วันที่\",\n      version: \"เวอร์ชั่น\",\n      undo_prefix: \"Undo\",\n      redo_prefix: \"Redo\",\n      or: \"หรือ\",\n      email: \"อีเมล\",\n      password: \"รหัสผ่าน\",\n      score: \"คะแนน\",\n      win: \"ชนะ\",\n      loss: \"แพ้\",\n      tie: \"เสมอ\",\n      easy: \"ง่าย\",\n      medium: \"ปานกลาง\",\n      hard: \"ยาก\",\n      player_level: \"เลเวล\",\n      warrior: \"นักรบ\",\n      wizard: \"พ่อมด\"\n    },\n    units: {\n      second: \"วินาที\",\n      seconds: \"วินาที\",\n      minute: \"นาที\",\n      minutes: \"นาที\",\n      hour: \"ชั่วโมง\",\n      hours: \"ชั่วโมง\",\n      day: \"วัน\",\n      days: \"วัน\",\n      week: \"สัปดาห์\",\n      weeks: \"สัปดาห์\",\n      month: \"เดือน\",\n      months: \"เดือน\",\n      year: \"ปี\",\n      years: \"ปี\"\n    },\n    play_level: {\n      done: \"เสร็จสิ้น\",\n      home: \"หน้าแรก\",\n      skip: \"ข้าม\",\n      game_menu: \"เมนูเกม\",\n      restart: \"เริ่มเล่นใหม่\",\n      goals: \"เป้าหมาย\",\n      success: \"สำเร็จ!\",\n      incomplete: \"ไม่สมบูรณ์\",\n      timed_out: \"หมดเวลา\",\n      victory: \"ชนะ\",\n      victory_title_suffix: \"เสร็จสิ้น\",\n      victory_sign_up: \"สมัครสมาชิกเพื่ออัพเดท\",\n      victory_saving_progress: \"บันทึก\",\n      victory_go_home: \"ไปหน้าแรก\",\n      victory_hour_of_code_done: \"เสร็จหรือยัง?\",\n      victory_new_item: \"ไอเทมใหม่\",\n      tome_submit_button: \"ส่ง\",\n      time_current: \"เวลาตอนนี้:\",\n      infinite_loop_try_again: \"ลองใหม่\",\n      infinite_loop_comment_out: \"เปลี่ยนโค้ดทั้งหมดเป็นคอมเม้นท์\",\n      tip_talk_is_cheap: \"อย่าเสียเวลาพูดเลย ให้ผมดูโมค้ดของคุณดีกว่า - Linus Torvalds\",\n      tip_extrapolation: \"ในโลกนี้มีคนอยู่สองประเภท คือคนที่เดาจากข้อมูลที่ไม่ครบถ้วนได้....\",\n      tip_source_code: \"เราอยากจะเปลี่ยนโลกนี้ แต่เขาไม่ให้ Source Code ผม\",\n      tip_strong_opponents: \"ศัตรูที่แข็งแกร่งที่สุด ก็ยังมีจุดอ่อน - อุจิวะ อิทาจิ\"\n    },\n    game_menu: {\n      save_load_tab: \"เซฟ/โหลด\",\n      multiplayer_tab: \"ผู้เล่นหลายคน\"\n    },\n    leaderboard: {\n      day: \"วันนี้\",\n      week: \"สัปดาห์นี้\",\n      all: \"ตลอดกาล\",\n      difficulty: \"ระดับความยาก\"\n    },\n    buy_gems: {\n      retrying: \"เซิร์ฟเวอร์ไม่ตอบสนอง กำลังลองอีกครั้ง\",\n      prompt_title: \"Gems ไม่พอ\"\n    },\n    choose_hero: {\n      programming_language: \"ภาษาโปรแกรม\",\n      lua_blurb: \"ภาษาเขียนเกม\",\n      weapons: \"อาวุธ\",\n      weapons_warrior: \"ดาบ - ระยะใกล้, ไม่ใช้เวทย์\",\n      weapons_ranger: \"หน้าไม้, ปืน - ระยะไกล, ไม่ใช้เวทย์\",\n      range: \"ระยะ\"\n    },\n    options: {\n      music_label: \"ดนตรี\"\n    },\n    about: {\n      nick_title: \"ผู้ร่วมก่อตั้ง\",\n      matt_title: \"ผู้ร่วมก่อตั้งผู้ร่วมก่อตั้ง\",\n      scott_title: \"ผู้ร่วมก่อตั้ง\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    account_settings: {\n      picture_tab: \"รูปภาพ\",\n      delete_account_tab: \"ลบบัญชีผู้ใช้\",\n      wrong_password: \"รหัสผ่านผิด\",\n      new_password: \"รหัสผ่านใหม่\",\n      email_announcements: \"ประกาศ\",\n      error_saving: \"บันทึกผิดพลาด\",\n      saved: \"เปลี่ยนรหัสผ่าน\",\n      password_mismatch: \"รหัสผ่านไม่ถูกต้อง\",\n      password_repeat: \"จงใส่รหัสผ่านอีกครั้ง\"\n    },\n    keyboard_shortcuts: {\n      space: \"Space\",\n      enter: \"Enter\",\n      press_enter: \"กด enter\",\n      escape: \"Esc\"\n    },\n    clans: {\n      clan: \"แคลน\",\n      clans: \"แคลน\"\n    },\n    contribute: {\n      alert_account_message_intro: \"หวัดดี!\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///262\n");

/***/ })

});