/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:03fdb9753a841c9f7281, name:locale/zh-WUU-HANT, filebase:zh-WUU-HANT.bundle.js, query:, file:javascripts/chunks/locale/zh-WUU-HANT.bundle.js */
webpackJsonp([13],{

/***/ 271:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"吳語\",\n  englishDescription: \"Wuu (Traditional)\",\n  translation: {\n    nav: {\n      play: \"遊戲開來\",\n      blog: \"部落格\",\n      forum: \"論壇\",\n      account: \"賬號\",\n      home: \"首頁\",\n      contribute: \"貢獻\",\n      legal: \"版權聲明\",\n      about: \"相關\",\n      contact: \"搭我裏聯繫\",\n      twitter_follow: \"關注\"\n    },\n    modal: {\n      close: \"關脫\",\n      okay: \"好用\"\n    },\n    not_found: {\n      page_not_found: \"頁面尋弗着\"\n    },\n    diplomat_suggestion: {\n      title: \"幫我裏翻譯 CodeCombat\",\n      sub_heading: \"我裏需要爾個語言能力\",\n      pitch_body: \"我裏開發 CodeCombat 個英文版，不過能界我裏個玩家徠整個世界。無數人英語弗懂弗熟，猴想攪吳語版個遊戲，假使爾吳英文都要得懂險，考虑記加進來搭我裏聚隊翻譯，幫忙畀 CodeCombat 網站搭遊戲關加關都翻成吳語。\",\n      missing_translations: \"嘸翻個字都會用英文寫起。\",\n      learn_more: \"望望湊當翻譯人個說明\",\n      subscribe_as_diplomat: \"提交翻譯人員申請\"\n    },\n    play: {\n      play_as: \"Play As\",\n      spectate: \"望別人攪遊戲\",\n      level_difficulty: \"難度：\",\n      campaign_multiplayer: \"多人競賽場\",\n      campaign_multiplayer_description: \"……徠箇搭爾好搭別人代碼捉跤。\"\n    },\n    login: {\n      sign_up: \"註冊\",\n      log_in: \"登進去\",\n      logging_in: \"徠搭登進\",\n      log_out: \"登出\"\n    },\n    signup: {\n      email_announcements: \"用電子郵箱收通知\",\n      creating: \"徠搭做賬號……\",\n      sign_up: \"註冊\",\n      log_in: \"登進\"\n    },\n    recover: {\n      recover_account_title: \"賬號尋轉\",\n      send_password: \"發轉設鏈接畀我\"\n    },\n    common: {\n      loading: \"徠搭讀取……\",\n      saving: \"徠搭存檔……\",\n      sending: \"徠搭發送……\",\n      send: \"發送\",\n      cancel: \"取消\",\n      save: \"存檔\",\n      publish: \"發佈\",\n      create: \"起造\",\n      fork: \"派生\",\n      play: \"開來\",\n      retry: \"轉試\"\n    },\n    general: {\n      and: \"搭\",\n      name: \"名字\",\n      body: \"正文\",\n      version: \"版本\",\n      commit_msg: \"提交訊息\",\n      version_history: \"版本歷史\",\n      version_history_for: \"版本歷史: \",\n      result: \"結果\",\n      results: \"結果\",\n      description: \"描述\",\n      or: \"要勿\",\n      subject: \"主題目頭\",\n      email: \"郵箱\",\n      password: \"密碼\",\n      message: \"訊息\",\n      code: \"代碼\",\n      ladder: \"升級比賽\",\n      when: \"當\",\n      opponent: \"對手\",\n      rank: \"等級\",\n      score: \"分數\",\n      win: \"贏爻\",\n      loss: \"輸爻\",\n      tie: \"平爻\",\n      easy: \"省力\",\n      medium: \"公道\",\n      hard: \"煩難\",\n      player: \"來個人\"\n    },\n    units: {\n      second: \"秒\",\n      seconds: \"秒\",\n      minute: \"分\",\n      minutes: \"分\",\n      hour: \"鐘頭\",\n      hours: \"鐘頭\"\n    },\n    play_level: {\n      done: \"妝下落\",\n      home: \"主頁\",\n      restart: \"轉來\",\n      goals: \"目標\",\n      reload_title: \"轉讀取全部個代碼？\",\n      reload_really: \"準定轉讀取箇關，回轉到扣起頭？\",\n      reload_confirm: \"轉讀取全部\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \"妝下落\",\n      victory_sign_up: \"存檔進度\",\n      victory_sign_up_poke: \"想存檔爾個代碼？造一個免費賬號起！\",\n      victory_rate_the_level: \"箇關評價：\",\n      victory_return_to_ladder: \"走轉\",\n      victory_go_home: \"轉到主頁\",\n      victory_review: \"搭我裏反應！\",\n      victory_hour_of_code_done: \"爾妝下落爻噃？\",\n      victory_hour_of_code_done_yes: \"正是, 妝下落爻！\",\n      tome_available_spells: \"好用個法術\",\n      skip_tutorial: \"跳過去（Esc）\",\n      time_current: \"瑲朞:\",\n      time_total: \"頂大:\",\n      time_goto: \"轉到:\",\n      infinite_loop_try_again: \"轉試試試相\",\n      infinite_loop_reset_level: \"轉定等級\",\n      infinite_loop_comment_out: \"爲我個代碼加註解\",\n      tip_toggle_play: \"用 Ctrl+P 暫停/繼續\",\n      tip_scrub_shortcut: \"用 Ctrl+[ 搭 Ctrl+] 倒退搭快進。\",\n      tip_guide_exists: \"點頁面上向個指南，望無數有用個訊息。\",\n      tip_open_source: \"CodeCombat 是 百分百 開源個!\",\n      tip_beta_launch: \"CodeCombat 從 2013年10月起。\",\n      tip_think_solution: \"思考解決方法，勿是問題。\",\n      tip_theory_practice: \"來理論研究裏向，理論搭實踐弗分個。不過徠實踐裏頭，渠裏是有分個。 - Yogi Berra\",\n      tip_error_free: \"有兩種方式寫得出嘸錯個程序；不過佩只第三種方式好讓程序達到预期個效果。 - Alan Perlis\",\n      tip_debugging_program: \"空是講調試是清理Bug個過程，箇勿編碼佩是囥Bug個過程。- Edsger W. Dijkstra\",\n      tip_forums: \"到論壇搭我裏講爾有解某忖法！\",\n      tip_baby_coders: \"轉日，佩小人也會當大法師。\",\n      tip_all_species: \"我裏相信學編程個機會對任何種族都是平等個。\",\n      tip_harry: \"巫師, \",\n      tip_great_responsibility: \"越好個編程手法也表示喫越大個調試責任。\",\n      tip_munchkin: \"空是爾弗喫爾個菜，一個矮卵人會搭爾睏去爻趒來尋爾。\",\n      tip_binary: \"箇世界裏佩只 兩 搭人：一搭懂二進制個, 還一搭弗懂二進制個。\",\n      tip_commitment_yoda: \"一個程序員必須有高度個責任感搭一個正功直日個心。~ 尤達大師\",\n      tip_no_try: \"要勿做。要勿弗做。箇世界嘸有'試試相'箇樣物事。- 尤達大師\",\n      tip_patience: \"爾必須要耐心膛，後生学生細。 - 尤達大師\",\n      tip_documented_bug: \"一個寫徠文檔裏個漏洞弗算漏洞，渠是功能。\",\n      tip_impossible: \"事幹還朆下落之前，一切都扣搭嘸道理相。- 納爾遜·曼德拉\",\n      tip_talk_is_cheap: \"甮七講八講，代碼摜出望爻。- 林納斯·托華兹\",\n      tip_first_language: \"爾經歷着最䁨嗰事幹是爾個頭一門編程語言。 - Alan Kay\"\n    },\n    game_menu: {\n      multiplayer_tab: \"多人遊戲\"\n    },\n    options: {\n      editor_config_title: \"編寫器設定\",\n      editor_config_invisibles_label: \"顯示囥起個\",\n      editor_config_invisibles_description: \"顯示像空格搭TAB許鍵。\",\n      editor_config_indentguides_label: \"顯示縮進提醒\",\n      editor_config_indentguides_description: \"顯示一條豎線讓縮進顯眼。\",\n      editor_config_behaviors_description: \"自動完成括號，大括號搭引號。\"\n    },\n    versions: {\n      save_version_title: \"存新版本\",\n      new_major_version: \"新個重要版本\",\n      cla_prefix: \"想畀修改存起來，先頭要同意我裏個\",\n      cla_url: \"貢獻者許可協議\",\n      cla_suffix: \"。\",\n      cla_agree: \"我同意\"\n    },\n    contact: {\n      contact_us: \"搭我裏聯繫\",\n      welcome: \"我裏歡迎收到爾個信！用箇個表單寄信畀我裏。 \",\n      forum_prefix: \"假使爾想發佈弗管何物開放個物事, 好試試相\",\n      forum_page: \"我裏個論壇\",\n      forum_suffix: \"\",\n      send: \"提出意見\"\n    },\n    account_settings: {\n      title: \"賬號設定\",\n      not_logged_in: \"登進要勿造一個賬號來改設定。\",\n      me_tab: \"我\",\n      picture_tab: \"圖片\",\n      emails_tab: \"電子信\",\n      admin: \"管理\",\n      new_password: \"新密碼\",\n      new_password_verify: \"覈實\",\n      email_subscriptions: \"郵箱校對\",\n      email_announcements: \"通知\",\n      email_announcements_description: \"收 有關 CodeCombat 個電子信。\",\n      email_notifications: \"通知\",\n      contributor_emails: \"貢獻人個通知\",\n      contribute_prefix: \"我裏徠搭尋志同道合個人！請去到\",\n      contribute_page: \"貢獻頁面\",\n      contribute_suffix: \"望還多個訊息。\",\n      email_toggle: \"切換全部\",\n      error_saving: \"保存時出錯\",\n      saved: \"保存起來哉\",\n      password_mismatch: \"密碼弗合。\"\n    },\n    classes: {\n      archmage_title: \"大法師\",\n      archmage_title_description: \"(寫代碼個人)\",\n      artisan_title: \"泥水\",\n      artisan_title_description: \"(做關造關人)\",\n      adventurer_title: \"冒險家\",\n      adventurer_title_description: \"(闖關測試人)\",\n      scribe_title: \"文書\",\n      scribe_title_description: \"(提醒編寫人)\",\n      diplomat_title: \"外交官\",\n      diplomat_title_description: \"(語言翻譯人)\",\n      ambassador_title: \"使節\",\n      ambassador_title_description: \"(用戶支持人)\"\n    },\n    editor: {\n      main_title: \"CodeCombat 編寫器\",\n      article_title: \"提醒編寫器\",\n      thang_title: \"物事編寫器\",\n      level_title: \"關編寫器\",\n      back: \"倒退\",\n      revert: \"還原\",\n      revert_models: \"還原模式\",\n      fork_title: \"派生新版本\",\n      fork_creating: \"徠搭執行派生...\",\n      more: \"無數\",\n      wiki: \"維基\",\n      live_chat: \"上線白嗒\",\n      level_some_options: \"有解某條目？\",\n      level_tab_thangs: \"物事\",\n      level_tab_scripts: \"腳本\",\n      level_tab_components: \"組件\",\n      level_tab_systems: \"系統\",\n      level_tab_thangs_title: \"能界所有物事\",\n      level_tab_thangs_all: \"所有\",\n      level_tab_thangs_conditions: \"發動條件\",\n      level_tab_thangs_add: \"加物事\",\n      \"delete\": \"刪除\",\n      duplicate: \"翻做\",\n      level_component_tab_title: \"能界所有組件\",\n      level_component_btn_new: \"造新個組件\",\n      level_systems_tab_title: \"能界所有系統\",\n      level_systems_btn_new: \"造新系統\",\n      level_systems_btn_add: \"加系統\",\n      level_components_title: \"轉到所有物事主頁\",\n      level_components_type: \"類型\",\n      level_component_edit_title: \"編寫組件\",\n      level_component_config_schema: \"配置模式\",\n      level_system_edit_title: \"改寫系統\",\n      create_system_title: \"造新系統\",\n      new_component_title: \"造新組件\",\n      new_component_field_system: \"系統\",\n      new_article_title: \"造新物事\",\n      new_thang_title: \"造新物事類型\",\n      new_level_title: \"造新關數\",\n      article_search_title: \"徠箇搭尋物事\",\n      thang_search_title: \"徠箇搭尋物事類型\",\n      level_search_title: \"徠箇搭尋關\",\n      read_only_warning2: \"提醒：爾嘸處存編寫，朆登進之故\"\n    },\n    article: {\n      edit_btn_preview: \"試望\",\n      edit_article_title: \"编辑提示\"\n    },\n    contribute: {\n      page_title: \"貢獻\",\n      alert_account_message_intro: \"爾好！\",\n      archmage_introduction: \"做遊戲到，最激動個弗朝佩是拼合無數物事。圖像、音樂、實時網際通信、社交網絡，從底層數據庫管理到服務器運行維護，再到用戶界面個設計搭實現。造遊戲有無數事幹要捉拾，怪得空是爾有編程經驗，箇勿爾應該揀箇個職業。我裏猴高興來造“史上最讚個編程遊戲”條路裏搭爾佐隊。\",\n      class_attributes: \"職業講明\",\n      archmage_attribute_1_pref: \"瞭解\",\n      archmage_attribute_1_suf: \"，要勿想學。我裏個上架代碼都是用渠寫起個。空是爾中意 Ruby 要勿 Python，爾坐可會覺得熟險。渠佩是 JavaScript，不過渠個語法好懂點。\",\n      archmage_attribute_2: \"編程經驗搭做勁。我裏幫得到畀爾帶進正道，不過只䁨嘸多少時間訓練爾。\",\n      how_to_join: \"怎兒加進\",\n      join_desc_1: \"咸爾都好加！先頭望望相我裏個\",\n      join_desc_2: \"，再畀下底個多選框勾起，勾起佩會當勇敢個大法師收得到我裏個電子信。空是爾想搭開發人員白嗒要勿入心參加，好 \",\n      join_desc_3: \" 要勿到我裏個\",\n      join_desc_4: \"，嚇我裏有較慢慢講！\",\n      join_url_email: \"發信畀我裏\",\n      archmage_subscribe_desc: \"用電子郵箱收新個編碼機會搭公告。\",\n      artisan_join_step1: \"獨文檔。\",\n      artisan_join_step2: \"做新關 搭打有個關數。\",\n      artisan_join_step3: \"趒我裏個 Slack 白嗒間來尋幫手。\",\n      artisan_join_step4: \"畀爾個關發論壇讓別人畀爾評評。\",\n      artisan_subscribe_desc: \"用電子郵箱收關編寫器個新消息。\",\n      adventurer_forum_url: \"我裏個論壇\",\n      adventurer_join_suf: \"空是爾值得馨寧個方式得到通知, 箇勿註冊來！\",\n      adventurer_subscribe_desc: \"用電子郵箱收出新關消息。\",\n      scribe_introduction_url_mozilla: \"Mozilla 開發人社區\",\n      contact_us_url: \"聯繫我裏\",\n      scribe_join_description: \"爾自己介紹記, 比方爾個編程經歷搭中意寫個物事，我裏會從搭開始畀爾瞭解！\",\n      scribe_subscribe_desc: \"用電子郵箱收寫新文檔個通知。\",\n      diplomat_introduction_pref: \"空是講我裏從\",\n      diplomat_launch_url: \"十月個發佈\",\n      diplomat_introduction_suf: \"裏向得到解某啓發：佩是全世界個人都對 CodeCombat 興致頭高險。我裏籠來一陣翻譯人，儘話快速畀網站裏個訊息翻譯成各地文字。空是爾對發佈新個內容有興趣，想讓爾個國土裏個人也來攪，快點趒來當外交官。\",\n      diplomat_attribute_1: \"英語順溜，自己個話也熟。編程是猴煩難個事幹，翻譯囉唆個概念，爾也喫得兩種話都內照！\",\n      diplomat_join_pref_github: \"徠\",\n      diplomat_github_url: \" GitHub \",\n      diplomat_join_suf_github: \"尋着爾個語言文件 (吳語是: codecombat/app/locale/zh-WUU-HANT.coffee)，徠線編寫渠，隨底提交一個合併請求。同時，選牢下底箇個多選框關注最新個國際化開發！\",\n      diplomat_subscribe_desc: \"接收國際化開發搭翻譯情況個信\",\n      ambassador_introduction: \"箇是一個起頭個社區，爾也會變成我裏搭世界聯結個點。大家人都好用Olark隨底白嗒、發信、参加個人無數個社交網絡來認識瞭解討論我裏個遊戲。空是爾想幫助大家人快點加進來、攪攪意思、感受CodeCombat個脈搏、搭我裏聚隊，箇勿箇佩適合爾來做。\",\n      ambassador_attribute_1: \"搭人家溝通本事好。識別得出攪個人碰着個問題，幫渠裏解決許問題。同時，搭我裏保持聯繫，及時反映攪個人哪搭中意弗中意、所望有解某！\",\n      ambassador_join_desc: \"自己介紹記：爾解某做過爻？解某中意做？我裏從箇搭開始畀爾瞭解！\",\n      ambassador_subscribe_desc: \"用電子郵箱收 支持系統個情況，搭多人遊戲方面個新情況。\",\n      changes_auto_save: \"多選框勾起之後，改動會自動存檔。\",\n      diligent_scribes: \"我裏勤力個文書:\",\n      powerful_archmages: \"我裏強力個大法師:\",\n      creative_artisans: \"我裏有頭路個泥水人:\",\n      brave_adventurers: \"我裏有本事個冒險家:\",\n      translating_diplomats: \"我裏全世界分佈個外交官:\",\n      helpful_ambassadors: \"我裏親切個使節:\"\n    },\n    ladder: {\n      my_matches: \"我個對手\",\n      simulate: \"演兵\",\n      simulate_games: \"演兵遊戲！\",\n      leaderboard: \"排行榜\",\n      battle_as: \"我要加進箇方 \",\n      summary_your: \"爾 \",\n      summary_matches: \"對手 - \",\n      summary_wins: \" 贏爻， \",\n      summary_losses: \" 失敗\",\n      rank_no_code: \"嘸新代碼好打分\",\n      rank_my_game: \"爲箇次遊戲打分！\",\n      rank_submitting: \"徠搭提交...\",\n      rank_failed: \"打分失敗\",\n      choose_opponent: \"揀一個對手\",\n      tutorial_play: \"攪教程\",\n      tutorial_recommended: \"假使爾從來朆攪過個話，建議爾先畀教程攪攪相\",\n      tutorial_skip: \"跳過教程\",\n      tutorial_not_sure: \"曉弗得怎兒攪攪？\",\n      tutorial_play_first: \"先教程攪遍。\",\n      simple_ai: \"省力腦子\",\n      warmup: \"熱身\"\n    },\n    loading_error: {\n      could_not_load: \"讀取失敗\",\n      connection_failure: \"連接失敗。\",\n      unauthorized: \"爾喫登進嚇好用。是弗是畀 cookies 禁用爻？\",\n      forbidden: \"爾嘸箇權力。\",\n      not_found: \"朆尋着。\",\n      not_allowed: \"方法弗允許。\",\n      timeout: \"服務器超時。\",\n      conflict: \"資源衝撞。\",\n      bad_input: \"吞輸進。\",\n      server_error: \"服務器錯誤。\",\n      unknown: \"弗識錯誤。\"\n    },\n    resources: {\n      level: \"等級\",\n      patches: \"補丁\"\n    },\n    legal: {\n      page_title: \"律法\",\n      opensource_intro: \"CodeCombat 是一個候自發揮，整個開源個項目。\",\n      opensource_description_prefix: \"望 \",\n      github_url: \"我裏個 GitHub\",\n      opensource_description_center: \"做爾想做個改動嘈！CodeCombat 是起徠幾十個開源項目上向，我裏中意渠裏。望\",\n      archmage_wiki_url: \"我裏 大法師個維基頁\",\n      opensource_description_suffix: \" 望望相哪許人讓箇個遊戲有可能。\",\n      practices_title: \"尊重最讚真做\",\n      practices_description: \"箇是我裏對爾個保證，也佩是攪個人，徠法律用語裏向望起扣搭弗足相。\",\n      privacy_title: \"隱私\",\n      security_title: \"安全\",\n      security_description: \"我裏儘話保證爾個個人隱私安全。當開源項目，管感爾都好檢查搭改進我裏自由開放個網站個安全。\",\n      email_title: \"電子郵箱\",\n      email_description_prefix: \"我裏𣍐發垃圾信畀爾個。只要\",\n      email_settings_url: \"設定爾個電子郵箱\",\n      email_description_suffix: \"要勿我裏發畀爾個信裏向有鏈接，爾随低2都好改偏向設定要勿取消訂閱。\",\n      cost_title: \"花銷\",\n      copyrights_title: \"版權搭許可\",\n      contributor_title: \"貢獻者許可協議\",\n      contributor_description_prefix: \"所有對本網站要勿 GitHub 代碼庫個努力都照我裏個\",\n      cla_url: \"貢獻者許可協議（CLA）\",\n      contributor_description_suffix: \"爾徠貢獻之前箇佩應該同意爻個。\",\n      code_title: \"代碼 - MIT\",\n      code_description_prefix: \"所有 CodeCombat 個個要勿囥 codecombat.com 託管個代碼，徠 GitHub 版本庫要勿 codecombat.com 數據庫裏，以上許可協議都照\",\n      mit_license_url: \"MIT 許可證\",\n      code_description_suffix: \"箇包括所有 CodeCombat 公開個做關用個系統搭組件代碼。\",\n      art_title: \"圖畫搭音樂 - Creative Commons\",\n      art_description_prefix: \"所有共通個內容都徠\",\n      art_description_suffix: \"條款下公開。共通內容是講所有 CodeCombat 發佈出用來做關個內容。許包括：\",\n      art_music: \"音樂\",\n      art_sound: \"聲音\",\n      art_artwork: \"圖像\",\n      art_sprites: \"精靈\",\n      art_other: \"所有做關到公開個，弗是代碼個創造性產品。\",\n      art_access: \"目前还嘸省便、通用個下載素材個方法。一般來講，從網站裏用個URL來下載，要勿搭我裏聯繫幫爾。爾也好幫我裏豐富網站，讓許資源下載還要方便。\",\n      art_paragraph_1: \"有關署名，用個邊裏寫明，要勿合适個蕩地有 codecombat.com 個鏈接。比方：\",\n      use_list_1: \"空是囥電影裏要勿各許遊戲裏用，要僵製作人員表裏頭加上 codecombat.com 。\",\n      use_list_2: \"空是徠網站裏用，畀鏈接徠用個蕩地邊裏，比方圖片下底，要勿一個囥各許 Creative Commons 署名搭開源軟件協議個趕清頁面。空是爾個內容裏明文誦着 CodeCombat，箇勿甮另外署名。\",\n      art_paragraph_2: \"空是爾用個內容勿是 CodeCombat 做個，是 codecombat.com 上向各許用戶做個，爾應該爲渠裏署名。空是對應個資源頁面裏有署名提醒爻，爾應當照提醒做。\",\n      rights_title: \"版權所有\",\n      rights_desc: \"所有關數照渠裏自己個版權所有。包括\",\n      rights_scripts: \"腳本\",\n      rights_unit: \"單元配置\",\n      rights_writings: \"作品\",\n      rights_media: \"声音、音樂搭各許專門爲獨關做，弗對別關開放個創造性內容\",\n      rights_clarification: \"講清爽：所有徠關編寫器裏公開用來做關個資源都是徠CC協議下發佈個，用關編輯器做個，要勿徠做關過程當中傳上來個內容勿是徠CC協議下發佈。\",\n      nutshell_title: \"省講佩是\",\n      nutshell_description: \"我裏徠關編寫器裏公開個所有資源，做關到都候爾用，不過我裏保留限制 codecombat.com 上向所造各關傳播個權利，因爲我裏轉日嘸數畀箇許關數收鈔票。\",\n      canonical: \"箇篇講明個英文版是權威版本。空是各許翻譯版本對弗牢，照英文版裏講個算數。\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///271\n");

/***/ })

});