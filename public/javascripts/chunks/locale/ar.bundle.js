/*! hash:ae6a15474fa7d9a1f9f8, chunkhash:ba0e549fe58d79072bb2, name:locale/ar, filebase:ar.bundle.js, query:, file:javascripts/chunks/locale/ar.bundle.js */
webpackJsonp([72],{

/***/ 213:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"العربية\",\n  englishDescription: \"Arabic\",\n  translation: {\n    nav: {\n      play: \"إلعب\",\n      community: \"مجتمع\",\n      blog: \"مدوّنة\",\n      forum: \"منتدى\",\n      account: \"حساب\",\n      profile: \"ملف شخصي\",\n      home: \"رئيسيّة\",\n      contribute: \"مساهة\",\n      legal: \"قانون\",\n      about: \"حول\",\n      contact: \"اتّصال\",\n      twitter_follow: \"متابعة\"\n    },\n    modal: {\n      close: \"إغلاق\",\n      okay: \"حسنا\"\n    },\n    not_found: {\n      page_not_found: \"الصفحة غير موجودة\"\n    },\n    diplomat_suggestion: {\n      title: \"مساعدة في ترجمة CodeCombat!\",\n      sub_heading: \"نحتاج مهاراتك اللّغويّة.\",\n      pitch_body: \"نحن نطوّر CodeCombat باللّغة الإنجليزيّة، ولكن لدينا بالفعل لاعبين في جميع أنحاء العالم. كثير منهم يريدون اللّعب باللّغة العربيّة ولكن لا يتحدثون الإنجليزيّة، حتى إذا كنت أستطيع أن أتكلّم على حد سواء، يرجى النّظر في التوقيع على أن يكون دبلوماسيّا والمساعدة في ترجمة كل من موقع CodeCombat وجميع المستويات إلى العربيّة.\",\n      missing_translations: \"حتى يمكننا ترجمة كلّ شيء إلى اللّغة العربيّة، سترى الإنجليزيّة عندما تكون العربيّة غير متوفر.\",\n      learn_more: \"معرفة المزيد عن كونك دبلوماسي\",\n      subscribe_as_diplomat: \"الاشتراك كدبلوماسي\"\n    },\n    play: {\n      play_as: \"إلعب كـ\",\n      spectate: \"مشاهد\",\n      players: \"لاعبين\",\n      hours_played: \"ساعات اللّعب\",\n      items: \"العناصر\",\n      unlock: \"فتح\",\n      confirm: \"تأكيد\",\n      owned: \"ممتَلَك\",\n      locked: \"مقفل\",\n      available: \"متوفر\",\n      skills_granted: \"مهارات الممنوحة\",\n      heroes: \"الأبطال\",\n      achievements: \"الإنجازات\",\n      settings: \"الإعدادات\",\n      next: \"التالي\",\n      change_hero: \"تغيير البطل\",\n      buy_gems: \"شراء الأحجار الكريمة\",\n      anonymous: \"لاعب مجهول\",\n      level_difficulty: \"الصعوبة:\",\n      awaiting_levels_adventurer_prefix: \"نحن الافراج عن مستويات جديدة كل أسبوع.\",\n      awaiting_levels_adventurer: \"التوقيع على النحو المغامر\",\n      awaiting_levels_adventurer_suffix: \"أن تكون أول للعب مستويات جديدة.\",\n      adjust_volume: \"تعديل الصوت\",\n      campaign_multiplayer: \"ساحات متعددة اللاّعبين\",\n      campaign_multiplayer_description: \"... فيها تبرمج وجه لوجه ضد لاعبين آخرين.\"\n    },\n    share_progress_modal: {\n      blurb: \"كنت تقدما كبيرا! أخبر والديك وكم كنت قد تعلمت مع CodeCombat.\",\n      email_invalid: \"البريد الاكتروني غير صالح.\",\n      form_blurb: \"ادخل بريد اولياء امرك الالكتروني لكي نريهم!\",\n      form_label: \"عنوان البريد الالكتروني\",\n      placeholder: \"عنوان البريد الالكتروني\",\n      title: \"عمل ممتاز, Apprentice\"\n    },\n    login: {\n      sign_up: \"إنشاء حساب\",\n      log_in: \"تسجيل الدخول\",\n      logging_in: \"جاري تسجيل الدخول\",\n      log_out: \"تسجيل الخروج\",\n      forgot_password: \"نسيت رمز الدخول?\",\n      finishing: \"الانتهاء\",\n      sign_in_with_facebook: \"سجل الدخول بواسطة فيسبوك\",\n      sign_in_with_gplus: \"سجل الدخول بواسطة غوغل بلس\",\n      signup_switch: \"تريد انشاء حساب?\"\n    },\n    signup: {\n      email_announcements: \"تلقي الإعلانات عن طريق البريد الإلكتروني\",\n      creating: \"جاري إنساء الحساب...\",\n      sign_up: \"التسجيل\",\n      log_in: \"تسجيل الدّخول بكلمة السرّ\",\n      required: \"تحتاج إلى تسجيل الدخول قبل أن تتمكن من السير في هذا الطريق.\",\n      login_switch: \"لديك حساب بالفعل?\"\n    },\n    recover: {\n      recover_account_title: \"إستعادة حساب\",\n      send_password: \"إرسال كلمة سرّ الإستعادة\",\n      recovery_sent: \"استرداد البريد الالكتروني المرسل.\"\n    },\n    items: {\n      primary: \"الأولي\",\n      secondary: \"ثانوي\",\n      armor: \"درع\",\n      accessories: \"إكسسوارات\",\n      misc: \"متفرقات\",\n      books: \"كتب\"\n    },\n    common: {\n      back: \"الرجوع\",\n      \"continue\": \"امض قدما\",\n      loading: \"تحميل\",\n      saving: \"جاري الحفض\",\n      sending: \"جاري الإرسال\",\n      send: \"أرسل\",\n      cancel: \"ألغي\",\n      save: \"إحفض\",\n      publish: \"أنشر\",\n      create: \"إنشاء\",\n      fork: \"إنسخ\",\n      play: \"إلعب\",\n      retry: \"إعادة\",\n      actions: \"Actions\",\n      info: \"معلومات\",\n      help: \"مساعدة\",\n      watch: \"مشاهدة\",\n      unwatch: \"إنهاء المشاهدة\",\n      submit_patch: \"تقديم التصحيح\",\n      submit_changes: \"تقديم التغييرات\",\n      save_changes: \"حفظ التغيرات\"\n    },\n    general: {\n      and: \"و\",\n      name: \"اسم\",\n      date: \"تأريخ\",\n      body: \"جسد\",\n      version: \"نسخة\",\n      pending: \"ارسال\",\n      accepted: \"مقبول\",\n      rejected: \"مرفوض\",\n      withdrawn: \"متعادل\",\n      submitter: \"المقدم\",\n      submitted: \"تم التقديم\",\n      commit_msg: \"حول رسالة\",\n      version_history: \"تاريخ النسخة\",\n      version_history_for: \"تاريخ النسخة لل: \",\n      select_changes: \"اختر تغيريين.\",\n      undo_prefix: \"فك\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Redo\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"شاهد مقطع فيديو عن المستوى الحالي\",\n      result: \"نتيجة\",\n      results: \"نتائج\",\n      description: \"وصف\",\n      or: \"او\",\n      subject: \"موضوع\",\n      email: \"البريد الالكتروني\",\n      password: \"الرمز السري\",\n      message: \"رسالة\",\n      code: \"رمز\",\n      ladder: \"سلم\",\n      when: \"متى\",\n      opponent: \"المقابل\",\n      rank: \"مرتبة\",\n      score: \"نقاط\",\n      win: \"فوز\",\n      loss: \"خسارة\",\n      tie: \"ربطة عنق\",\n      easy: \"سهل\",\n      medium: \"متوسط\",\n      hard: \"صعب\",\n      player: \"لاعب\",\n      player_level: \"مستوى\",\n      warrior: \"محارب\",\n      ranger: \"مقاتل\",\n      wizard: \"ساحر\"\n    },\n    units: {\n      second: \"ثانيّة\",\n      seconds: \"ثواني\",\n      minute: \"دقيقة\",\n      minutes: \"دقائق\",\n      hour: \"ساعة\",\n      hours: \"ساعات\",\n      day: \"يوم\",\n      days: \"أيّام\",\n      week: \"أسبوع\",\n      weeks: \"أسابيع\",\n      month: \"شهر\",\n      months: \"أشهر\",\n      year: \"سنة\",\n      years: \"سنوات\"\n    },\n    play_level: {\n      done: \"انتهاء\",\n      home: \"Home\",\n      level: \"مستوى\",\n      skip: \"الغاء\",\n      game_menu: \"قائمة اللعبة\",\n      restart: \"اعادة التشغيل\",\n      goals: \"الاهداف\",\n      goal: \"هدف\",\n      running: \"جاري التشغيل...\",\n      success: \"نجاح!\",\n      incomplete: \"غير مكتمل\",\n      timed_out: \"تم انتهاء الوقت\",\n      failing: \"فشل\",\n      reload: \"تحديث\",\n      reload_title: \"تحديث الصفحة كل رمز؟\",\n      reload_really: \"هل أنت متأكد أنك تريد تحميل هذا المستوى مرة أخرى إلى البداية؟\",\n      reload_confirm: \"تحديث جميع\",\n      victory: \"فوز\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" كامل\",\n      victory_sign_up: \"اشترك لإنقاذ التقدم\",\n      victory_sign_up_poke: \"تريد حفظ التعليمات البرمجية الخاصة بك؟ إنشاء حساب مجاني!\",\n      victory_rate_the_level: \"معدل المستوى: \",\n      victory_return_to_ladder: \"العودة إلى سلم\",\n      victory_saving_progress: \"توفير التقدم\",\n      victory_go_home: \"اذهب للمنزل\",\n      victory_review: \"إخبرنا المزيد!\",\n      victory_hour_of_code_done_yes: \"نعم، أنا مع الانتهاء من ساعتي من قانون ™!\",\n      victory_gems_gained: \"الأحجار الكريمة المكتسبة\",\n      victory_new_item: \"عنصر جديد\",\n      victory_viking_code_school: \"يدخن المقدسة، وكان ذلك على مستوى الثابت الذي فاز فقط! إذا لم تكن بالفعل مطور برامج، يجب أن تكون. كنت فقط حصلت على المسار السريع لقبوله مع مدرسة فايكنغ المدونة، حيث يمكنك أن تأخذ المهارات الخاصة بك إلى المستوى التالي وتصبح مطور ويب محترف في 14 أسبوعا.\",\n      victory_become_a_viking: \"تصبح فايكنغ\",\n      tome_cast_button_run: \"Run\",\n      tome_cast_button_running: \"تشغيل\",\n      tome_cast_button_ran: \"ران\"\n    },\n    buy_gems: {\n      few_gems: \" عدد قليل من الأحجار الكريمة\",\n      pile_gems: \"كومة من الأحجار الكريمة\",\n      chest_gems: \"الصدر من الأحجار الكريمة\",\n      purchasing: \"شراء ...\",\n      prompt_button: \"أدخل متجر\",\n      recovered: \"الأحجار الكريمة السابقة أون استردادها. يرجى تحديث الصفحة.\"\n    },\n    choose_hero: {\n      choose_hero: \"اختر بطلك\",\n      programming_language: \"لغة البرمجة\",\n      experimental: \"تجريبي\",\n      python_blurb: \"بسيطة لكنها قوية، بيثون هي لغة برمجة عظيمة للأغراض العامة.\",\n      javascript_blurb: \"لغة الويب. عظيم للكتابة المواقع، تطبيقات الويب، ألعاب HTML5، والخوادم.\",\n      coffeescript_blurb: \"Nicer JavaScript syntax.\",\n      lua_blurb: \"لعبة لغة البرمجة.\",\n      weapons: \"اسلحة\",\n      health: \"الصحة\",\n      speed: \"سرعة\",\n      regeneration: \"تجديد\",\n      skills: \"المهارات\"\n    },\n    versions: {\n      save_version_title: \"إحفض نسخة جديدة\",\n      new_major_version: \"نسخة مهمّة جديدة\",\n      cla_prefix: \"لحفظ التغييرات، أولا يجب أن توافق على \",\n      cla_url: \"اتفاقيّة ترخيص المساهم\",\n      cla_suffix: \".\",\n      cla_agree: \"أوافق\"\n    },\n    contact: {\n      contact_us: \"الاتّصال بـ CodeCombat\",\n      welcome: \"جيد أن نسمع منك! استخدام هذا النموذج لترسل لنا البريد الإلكتروني.\",\n      forum_prefix: \"لأي شيء عام، يرجى المحاولة\",\n      forum_page: \"منتدانا\",\n      forum_suffix: \"بدلا من ذلك.\",\n      faq: \"FAQ\",\n      send: \"إرسال تعليقات\"\n    },\n    account_settings: {\n      title: \"إعدادات الحساب\",\n      not_logged_in: \"تسجيل الدخول أو إنشاء حساب لتغيير الإعدادات الخاصة بك.\",\n      me_tab: \"أنا\",\n      picture_tab: \"صورة\",\n      delete_account_tab: \"حذف حسابك الخاص\",\n      wrong_email: \"Email خاطئ\",\n      wrong_password: \"كلمة مرور خاطئة\",\n      delete_this_account: \"حذف هذا الحساب بشكل دائم\",\n      new_password: \"كلمة سر جديدة\",\n      new_password_verify: \"تحقق من\",\n      type_in_email: \"اكتب في البريد الإلكتروني الخاص بك لتأكيد الحساب الحذف.\",\n      type_in_password: \"أيضا، اكتب كلمة المرور الخاصة بك.\",\n      email_subscriptions: \"الاشتراكات البريد الإلكتروني\"\n    },\n    user: {\n      stats: \"احصائيّات\",\n      singleplayer_title: \"مستويات اللاّعب الواحد\",\n      multiplayer_title: \"مستويات  متعدّدة اللاّعبين\",\n      achievements_title: \"الإنجازات\",\n      last_played: \"آخر ما لعب\",\n      status: \"الحالة\",\n      status_completed: \"تمّت\",\n      status_unfinished: \"غير منتهية\",\n      no_singleplayer: \"لا يوجد مباريات اللاّعب الواحد لعبت حتّى الآن.\",\n      no_multiplayer: \"لا يوجد مباريات متعدّدة اللاّعبين لعبت حتّى الآن\",\n      no_achievements: \"لا توجد انجازات مكتسبة حتّى الآن.\",\n      favorite_prefix: \"لغتك المفضّلة هي \",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      last_earned: \"المكتسبات الأخيرة\",\n      amount_achieved: \"مبلغ\",\n      achievement: \"الإنجاز\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \"في المجموع\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \"اكتسبت\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \"حتّى مستوى \",\n      left_xp_postfix: \"\"\n    },\n    loading_error: {\n      could_not_load: \"خطأ في تحميل من الخادم\",\n      connection_failure: \"فشل الاتصال.\",\n      unauthorized: \"تحتاج إلى أن تكون مسجّل الدخول  هل لديك الكوكيز معطّلة؟\",\n      forbidden: \"ليس لديك الأذونات.\",\n      not_found: \"لم يتم العثور.\",\n      not_allowed: \"طريقة غير مسموح بها.\",\n      timeout: \"انتهت مهلة استجابة الخادم .\",\n      conflict: \"الصراع على الموارد.\",\n      bad_input: \"إدخال سيئ.\",\n      server_error: \"خطأ في الخادم.\",\n      unknown: \"خطأ غير معروف.\"\n    },\n    delta: {\n      added: \"أضيفت\",\n      modified: \"معدّلة\",\n      deleted: \"حذفت\",\n      moved_index: \"فهرس انتقل\",\n      text_diff: \"Text Diff\",\n      merge_conflict_with: \"تدمج الصدام مع\",\n      no_changes: \"No Changes\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbG9jYWxlL2FyLmNvZmZlZT82MjljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0VBQUEsbUJBQW1CLFNBQW5CO0VBQThCLG9CQUFvQixRQUFsRDtFQUE0RCxhQWdFM0U7SUFBQSxLQUVFO01BQUEsTUFBTSxNQUFOO01BQ0EsV0FBVyxPQURYO01BR0EsTUFBTSxRQUhOO01BSUEsT0FBTyxPQUpQO01BS0EsU0FBUyxNQUxUO01BT0EsU0FBUyxVQVBUO01BUUEsTUFBTSxTQVJOO01BU0EsWUFBWSxPQVRaO01BVUEsT0FBTyxPQVZQO01BWUEsT0FBTyxLQVpQO01BYUEsU0FBUyxRQWJUO01BY0EsZ0JBQWdCLFFBZGhCO0tBRkY7SUFxQ0EsT0FDRTtNQUFBLE9BQU8sT0FBUDtNQUNBLE1BQU0sTUFETjtLQXRDRjtJQXlDQSxXQUNFO01BQUEsZ0JBQWdCLG1CQUFoQjtLQTFDRjtJQTRDQSxxQkFDRTtNQUFBLE9BQU8sNkJBQVA7TUFDQSxhQUFhLDBCQURiO01BRUEsWUFBWSwrVEFGWjtNQUdBLHNCQUFzQiwrRkFIdEI7TUFJQSxZQUFZLCtCQUpaO01BS0EsdUJBQXVCLG9CQUx2QjtLQTdDRjtJQW9EQSxNQUNFO01BQUEsU0FBUyxTQUFUO01BSUEsVUFBVSxPQUpWO01BS0EsU0FBUyxRQUxUO01BTUEsY0FBYyxjQU5kO01BT0EsT0FBTyxTQVBQO01BUUEsUUFBUSxLQVJSO01BU0EsU0FBUyxPQVRUO01BVUEsT0FBTyxTQVZQO01BV0EsUUFBUSxNQVhSO01BWUEsV0FBVyxPQVpYO01BYUEsZ0JBQWdCLGlCQWJoQjtNQWNBLFFBQVEsU0FkUjtNQWVBLGNBQWMsV0FmZDtNQWdCQSxVQUFVLFdBaEJWO01Ba0JBLE1BQU0sUUFsQk47TUFtQkEsYUFBYSxhQW5CYjtNQW9CQSxVQUFVLHNCQXBCVjtNQXlCQSxXQUFXLFlBekJYO01BMEJBLGtCQUFrQixVQTFCbEI7TUEyQkEsbUNBQW1DLHdDQTNCbkM7TUE0QkEsNEJBQTRCLDJCQTVCNUI7TUE2QkEsbUNBQW1DLGlDQTdCbkM7TUE4QkEsZUFBZSxhQTlCZjtNQStCQSxzQkFBc0Isd0JBL0J0QjtNQWdDQSxrQ0FBa0MsMENBaENsQztLQXJERjtJQStJQSxzQkFDRTtNQUFBLE9BQU8sOERBQVA7TUFDQSxlQUFlLDRCQURmO01BRUEsWUFBWSw2Q0FGWjtNQUdBLFlBQVkseUJBSFo7TUFJQSxhQUFhLHlCQUpiO01BS0EsT0FBTyx1QkFMUDtLQWhKRjtJQXVKQSxPQUNFO01BQUEsU0FBUyxZQUFUO01BRUEsUUFBUSxjQUZSO01BR0EsWUFBWSxtQkFIWjtNQUlBLFNBQVMsY0FKVDtNQUtBLGlCQUFpQixrQkFMakI7TUFNQSxXQUFXLFVBTlg7TUFPQSx1QkFBdUIsMEJBUHZCO01BUUEsb0JBQW9CLDRCQVJwQjtNQVNBLGVBQWUsa0JBVGY7S0F4SkY7SUFtS0EsUUFLRTtNQUFBLHFCQUFxQiwwQ0FBckI7TUFHQSxVQUFVLHNCQUhWO01BSUEsU0FBUyxTQUpUO01BS0EsUUFBUSwyQkFMUjtNQU1BLFVBQVUsNkRBTlY7TUFPQSxjQUFjLG1CQVBkO0tBeEtGO0lBZ1BBLFNBQ0U7TUFBQSx1QkFBdUIsY0FBdkI7TUFDQSxlQUFlLDBCQURmO01BRUEsZUFBZSxtQ0FGZjtLQWpQRjtJQXFQQSxPQUNFO01BQUEsU0FBUyxRQUFUO01BQ0EsV0FBVyxPQURYO01BRUEsT0FBTyxLQUZQO01BR0EsYUFBYSxXQUhiO01BSUEsTUFBTSxTQUpOO01BS0EsT0FBTyxLQUxQO0tBdFBGO0lBNlBBLFFBQ0U7TUFBQSxNQUFNLFFBQU47TUFFQSxZQUFVLFVBRlY7TUFLQSxTQUFTLE9BTFQ7TUFXQSxRQUFRLFlBWFI7TUFZQSxTQUFTLGNBWlQ7TUFhQSxNQUFNLE1BYk47TUFlQSxRQUFRLE1BZlI7TUFnQkEsTUFBTSxNQWhCTjtNQWlCQSxTQUFTLE1BakJUO01Ba0JBLFFBQVEsT0FsQlI7TUFtQkEsTUFBTSxNQW5CTjtNQW9CQSxNQUFNLE1BcEJOO01BcUJBLE9BQU8sT0FyQlA7TUFzQkEsU0FBUyxTQXRCVDtNQXVCQSxNQUFNLFNBdkJOO01Bd0JBLE1BQU0sUUF4Qk47TUF5QkEsT0FBTyxRQXpCUDtNQTBCQSxTQUFTLGdCQTFCVDtNQTJCQSxjQUFjLGVBM0JkO01BNEJBLGdCQUFnQixpQkE1QmhCO01BNkJBLGNBQWMsY0E3QmQ7S0E5UEY7SUE4UkEsU0FDRTtNQUFBLEtBQUssR0FBTDtNQUNBLE1BQU0sS0FETjtNQUVBLE1BQU0sT0FGTjtNQUdBLE1BQU0sS0FITjtNQUlBLFNBQVMsTUFKVDtNQUtBLFNBQVMsT0FMVDtNQU1BLFVBQVUsT0FOVjtNQU9BLFVBQVUsT0FQVjtNQVFBLFdBQVcsUUFSWDtNQVlBLFdBQVcsUUFaWDtNQWFBLFdBQVcsWUFiWDtNQWNBLFlBQVksV0FkWjtNQWVBLGlCQUFpQixjQWZqQjtNQWdCQSxxQkFBcUIsbUJBaEJyQjtNQWlCQSxnQkFBZ0IsZUFqQmhCO01Ba0JBLGFBQWEsSUFsQmI7TUFtQkEsZUFBZSxVQW5CZjtNQW9CQSxhQUFhLE1BcEJiO01BcUJBLGVBQWUsZ0JBckJmO01Bc0JBLGNBQWMsbUNBdEJkO01BdUJBLFFBQVEsT0F2QlI7TUF3QkEsU0FBUyxPQXhCVDtNQXlCQSxhQUFhLEtBekJiO01BMEJBLElBQUksSUExQko7TUEyQkEsU0FBUyxPQTNCVDtNQTRCQSxPQUFPLG1CQTVCUDtNQTZCQSxVQUFVLGFBN0JWO01BK0JBLFNBQVMsT0EvQlQ7TUFnQ0EsTUFBTSxLQWhDTjtNQWlDQSxRQUFRLEtBakNSO01Ba0NBLE1BQU0sS0FsQ047TUFtQ0EsVUFBVSxTQW5DVjtNQW9DQSxNQUFNLE9BcENOO01BcUNBLE9BQU8sTUFyQ1A7TUFzQ0EsS0FBSyxLQXRDTDtNQXVDQSxNQUFNLE9BdkNOO01Bd0NBLEtBQUssVUF4Q0w7TUF5Q0EsTUFBTSxLQXpDTjtNQTBDQSxRQUFRLE9BMUNSO01BMkNBLE1BQU0sS0EzQ047TUE0Q0EsUUFBUSxNQTVDUjtNQTZDQSxjQUFjLE9BN0NkO01BOENBLFNBQVMsT0E5Q1Q7TUErQ0EsUUFBUSxPQS9DUjtNQWdEQSxRQUFRLE1BaERSO0tBL1JGO0lBMlZBLE9BQ0U7TUFBQSxRQUFRLFFBQVI7TUFDQSxTQUFTLE9BRFQ7TUFHQSxRQUFRLE9BSFI7TUFJQSxTQUFTLE9BSlQ7TUFLQSxNQUFNLE1BTE47TUFNQSxPQUFPLE9BTlA7TUFPQSxLQUFLLEtBUEw7TUFRQSxNQUFNLE9BUk47TUFTQSxNQUFNLE9BVE47TUFVQSxPQUFPLFFBVlA7TUFXQSxPQUFPLEtBWFA7TUFZQSxRQUFRLE1BWlI7TUFhQSxNQUFNLEtBYk47TUFjQSxPQUFPLE9BZFA7S0E1VkY7SUE0V0EsWUFXRTtNQUFBLE1BQU0sUUFBTjtNQW1CQSxNQUFNLE1BbkJOO01Bb0JBLE9BQU8sT0FwQlA7TUFxQkEsTUFBTSxPQXJCTjtNQXNCQSxXQUFXLGNBdEJYO01BdUJBLFNBQVMsZUF2QlQ7TUF3QkEsT0FBTyxTQXhCUDtNQXlCQSxNQUFNLEtBekJOO01BZ0NBLFNBQVMsaUJBaENUO01BaUNBLFNBQVMsT0FqQ1Q7TUFrQ0EsWUFBWSxXQWxDWjtNQW1DQSxXQUFXLGlCQW5DWDtNQW9DQSxTQUFTLEtBcENUO01BcUNBLFFBQVEsT0FyQ1I7TUFzQ0EsY0FBYyxzQkF0Q2Q7TUF1Q0EsZUFBZSwrREF2Q2Y7TUF3Q0EsZ0JBQWdCLFlBeENoQjtNQTBDQSxTQUFTLEtBMUNUO01BMkNBLHNCQUFzQixFQTNDdEI7TUE0Q0Esc0JBQXNCLE9BNUN0QjtNQTZDQSxpQkFBaUIscUJBN0NqQjtNQThDQSxzQkFBc0IsMERBOUN0QjtNQStDQSx3QkFBd0IsZ0JBL0N4QjtNQWdEQSwwQkFBMEIsZ0JBaEQxQjtNQWlEQSx5QkFBeUIsY0FqRHpCO01Ba0RBLGlCQUFpQixhQWxEakI7TUFtREEsZ0JBQWdCLGdCQW5EaEI7TUFzREEsK0JBQStCLDJDQXREL0I7TUF3REEscUJBQXFCLDBCQXhEckI7TUF5REEsa0JBQWtCLFdBekRsQjtNQTJEQSw0QkFBNEIsNFBBM0Q1QjtNQTREQSx5QkFBeUIsYUE1RHpCO01BOERBLHNCQUFzQixLQTlEdEI7TUErREEsMEJBQTBCLE9BL0QxQjtNQWdFQSxzQkFBc0IsS0FoRXRCO0tBdlhGO0lBdW5CQSxVQUNFO01BQUEsVUFBVSw4QkFBVjtNQUNBLFdBQVcseUJBRFg7TUFFQSxZQUFZLDBCQUZaO01BR0EsWUFBWSxVQUhaO01BUUEsZUFBZSxXQVJmO01BU0EsV0FBVywyREFUWDtLQXhuQkY7SUEwdkJBLGFBQ0U7TUFBQSxhQUFhLFdBQWI7TUFDQSxzQkFBc0IsYUFEdEI7TUFJQSxjQUFjLFFBSmQ7TUFLQSxjQUFjLDREQUxkO01BTUEsa0JBQWtCLHdFQU5sQjtNQU9BLG9CQUFvQiwwQkFQcEI7TUFRQSxXQUFXLG1CQVJYO01BV0EsU0FBUyxPQVhUO01BZ0JBLFFBQVEsT0FoQlI7TUFpQkEsT0FBTyxNQWpCUDtNQWtCQSxjQUFjLE9BbEJkO01Bc0JBLFFBQVEsVUF0QlI7S0EzdkJGO0lBcWdDQSxVQUNFO01BQUEsb0JBQW9CLGlCQUFwQjtNQUNBLG1CQUFtQixrQkFEbkI7TUFHQSxZQUFZLHdDQUhaO01BSUEsU0FBUyx3QkFKVDtNQUtBLFlBQVksR0FMWjtNQU1BLFdBQVcsT0FOWDtLQXRnQ0Y7SUErZ0NBLFNBQ0U7TUFBQSxZQUFZLHdCQUFaO01BQ0EsU0FBUyxtRUFEVDtNQUVBLGNBQWMsNEJBRmQ7TUFHQSxZQUFZLFNBSFo7TUFJQSxjQUFjLGNBSmQ7TUFNQSxLQUFLLEtBTkw7TUFhQSxNQUFNLGVBYk47S0FoaENGO0lBK2hDQSxrQkFDRTtNQUFBLE9BQU8sZ0JBQVA7TUFDQSxlQUFlLHdEQURmO01BRUEsUUFBUSxLQUZSO01BR0EsYUFBYSxNQUhiO01BSUEsb0JBQW9CLGlCQUpwQjtNQUtBLGFBQWEsWUFMYjtNQU1BLGdCQUFnQixpQkFOaEI7TUFRQSxxQkFBcUIsMEJBUnJCO01BZUEsY0FBYyxlQWZkO01BZ0JBLHFCQUFxQixTQWhCckI7TUFpQkEsZUFBZSx5REFqQmY7TUFtQkEsa0JBQWtCLG1DQW5CbEI7TUFvQkEscUJBQXFCLDhCQXBCckI7S0FoaUNGO0lBZzhEQSxNQUNFO01BQUEsT0FBTyxXQUFQO01BQ0Esb0JBQW9CLHdCQURwQjtNQUVBLG1CQUFtQiw0QkFGbkI7TUFHQSxvQkFBb0IsV0FIcEI7TUFJQSxhQUFhLFlBSmI7TUFLQSxRQUFRLFFBTFI7TUFNQSxrQkFBa0IsTUFObEI7TUFPQSxtQkFBbUIsWUFQbkI7TUFRQSxpQkFBaUIsZ0RBUmpCO01BU0EsZ0JBQWdCLGtEQVRoQjtNQVVBLGlCQUFpQixtQ0FWakI7TUFXQSxpQkFBaUIsbUJBWGpCO01BWUEsa0JBQWtCLEdBWmxCO0tBajhERjtJQWc5REEsY0FDRTtNQUFBLGFBQWEsbUJBQWI7TUFDQSxpQkFBaUIsTUFEakI7TUFFQSxhQUFhLFNBRmI7TUFHQSxtQkFBbUIsRUFIbkI7TUFJQSxvQkFBb0IsWUFKcEI7TUFLQSxlQUFlLEVBTGY7TUFNQSxnQkFBZ0IsUUFOaEI7TUFPQSxnQkFBZ0IsRUFQaEI7TUFRQSxlQUFlLGFBUmY7TUFTQSxpQkFBaUIsRUFUakI7S0FqOURGO0lBMmhFQSxlQUNFO01BQUEsZ0JBQWdCLHdCQUFoQjtNQUNBLG9CQUFvQixjQURwQjtNQUtBLGNBQWMseURBTGQ7TUFNQSxXQUFXLG9CQU5YO01BUUEsV0FBVyxnQkFSWDtNQVVBLGFBQWEsc0JBVmI7TUFXQSxTQUFTLDZCQVhUO01BWUEsVUFBVSxxQkFaVjtNQWFBLFdBQVcsWUFiWDtNQWNBLGNBQWMsZ0JBZGQ7TUFlQSxTQUFTLGdCQWZUO0tBNWhFRjtJQTZyRUEsT0FDRTtNQUFBLE9BQU8sT0FBUDtNQUNBLFVBQVUsUUFEVjtNQUdBLFNBQVMsTUFIVDtNQUlBLGFBQWEsWUFKYjtNQUtBLFdBQVcsV0FMWDtNQU1BLHFCQUFxQixnQkFOckI7TUFPQSxZQUFZLFlBUFo7S0E5ckVGO0dBaEVlIiwiZmlsZSI6IjIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbmF0aXZlRGVzY3JpcHRpb246IFwi2KfZhNi52LHYqNmK2KlcIiwgZW5nbGlzaERlc2NyaXB0aW9uOiBcIkFyYWJpY1wiLCB0cmFuc2xhdGlvbjpcbiMgIG5ld19ob21lOlxuIyAgICBzbG9nYW46IFwiVGhlIG1vc3QgZW5nYWdpbmcgZ2FtZSBmb3IgbGVhcm5pbmcgcHJvZ3JhbW1pbmcuXCJcbiMgICAgY2xhc3Nyb29tX2VkaXRpb246IFwiQ2xhc3Nyb29tIEVkaXRpb246XCJcbiMgICAgbGVhcm5fdG9fY29kZTogXCJMZWFybiB0byBjb2RlOlwiXG4jICAgIHBsYXlfbm93OiBcIlBsYXkgTm93XCJcbiMgICAgaW1fYV90ZWFjaGVyOiBcIkknbSBhIFRlYWNoZXJcIlxuIyAgICBpbV9hX3N0dWRlbnQ6IFwiSSdtIGEgU3R1ZGVudFwiXG4jICAgIGxlYXJuX21vcmU6IFwiTGVhcm4gbW9yZVwiXG4jICAgIGNsYXNzcm9vbV9pbl9hX2JveDogXCJBIGNsYXNzcm9vbSBpbi1hLWJveCBmb3IgdGVhY2hpbmcgY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICBjb2RlY29tYmF0X2lzOiBcIkNvZGVDb21iYXQgaXMgYSBwbGF0Zm9ybSA8c3Ryb25nPmZvciBzdHVkZW50czwvc3Ryb25nPiB0byBsZWFybiBjb21wdXRlciBzY2llbmNlIHdoaWxlIHBsYXlpbmcgdGhyb3VnaCBhIHJlYWwgZ2FtZS5cIlxuIyAgICBvdXJfY291cnNlczogXCJPdXIgY291cnNlcyBoYXZlIGJlZW4gc3BlY2lmaWNhbGx5IHBsYXl0ZXN0ZWQgPHN0cm9uZz50byBleGNlbCBpbiB0aGUgY2xhc3Nyb29tPC9zdHJvbmc+LCBldmVuIGZvciB0ZWFjaGVycyB3aXRoIGxpdHRsZSB0byBubyBwcmlvciBwcm9ncmFtbWluZyBleHBlcmllbmNlLlwiXG4jICAgIHdhdGNoX2hvdzogXCJXYXRjaCBob3cgQ29kZUNvbWJhdCBpcyB0cmFuc2Zvcm1pbmcgdGhlIHdheSBwZW9wbGUgbGVhcm4gY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICB0b3Bfc2NyZWVuc2hvdHNfaGludDogXCJTdHVkZW50cyB3cml0ZSBjb2RlIGFuZCBzZWUgdGhlaXIgY2hhbmdlcyB1cGRhdGUgaW4gcmVhbC10aW1lXCJcbiMgICAgZGVzaWduZWRfd2l0aDogXCJEZXNpZ25lZCB3aXRoIHRlYWNoZXJzIGluIG1pbmRcIlxuIyAgICByZWFsX2NvZGU6IFwiUmVhbCwgdHlwZWQgY29kZVwiXG4jICAgIGZyb21fdGhlX2ZpcnN0X2xldmVsOiBcImZyb20gdGhlIGZpcnN0IGxldmVsXCJcbiMgICAgZ2V0dGluZ19zdHVkZW50czogXCJHZXR0aW5nIHN0dWRlbnRzIHRvIHR5cGVkIGNvZGUgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSBpcyBjcml0aWNhbCB0byBsZWFybmluZyBwcm9ncmFtbWluZyBzeW50YXggYW5kIHByb3BlciBzdHJ1Y3R1cmUuXCJcbiMgICAgZWR1Y2F0b3JfcmVzb3VyY2VzOiBcIkVkdWNhdG9yIHJlc291cmNlc1wiXG4jICAgIGNvdXJzZV9ndWlkZXM6IFwiYW5kIGNvdXJzZSBndWlkZXNcIlxuIyAgICB0ZWFjaGluZ19jb21wdXRlcl9zY2llbmNlOiBcIlRlYWNoaW5nIGNvbXB1dGVyIHNjaWVuY2UgZG9lcyBub3QgcmVxdWlyZSBhIGNvc3RseSBkZWdyZWUsIGJlY2F1c2Ugd2UgcHJvdmlkZSB0b29scyB0byBzdXBwb3J0IGVkdWNhdG9ycyBvZiBhbGwgYmFja2dyb3VuZHMuXCJcbiMgICAgYWNjZXNzaWJsZV90bzogXCJBY2Nlc3NpYmxlIHRvXCJcbiMgICAgZXZlcnlvbmU6IFwiZXZlcnlvbmVcIlxuIyAgICBkZW1vY3JhdGl6aW5nOiBcIkRlbW9jcmF0aXppbmcgdGhlIHByb2Nlc3Mgb2YgbGVhcm5pbmcgY29kaW5nIGlzIGF0IHRoZSBjb3JlIG9mIG91ciBwaGlsb3NvcGh5LiBFdmVyeW9uZSBzaG91bGQgYmUgYWJsZSB0byBsZWFybiB0byBjb2RlLlwiXG4jICAgIGZvcmdvdF9sZWFybmluZzogXCJJIHRoaW5rIHRoZXkgYWN0dWFsbHkgZm9yZ290IHRoYXQgdGhleSB3ZXJlIGFjdHVhbGx5IGxlYXJuaW5nIHNvbWV0aGluZy5cIlxuIyAgICB3YW50ZWRfdG9fZG86IFwiIENvZGluZyBpcyBzb21ldGhpbmcgSSd2ZSBhbHdheXMgd2FudGVkIHRvIGRvLCBhbmQgSSBuZXZlciB0aG91Z2h0IEkgd291bGQgYmUgYWJsZSB0byBsZWFybiBpdCBpbiBzY2hvb2wuXCJcbiMgICAgd2h5X2dhbWVzOiBcIldoeSBpcyBsZWFybmluZyB0aHJvdWdoIGdhbWVzIGltcG9ydGFudD9cIlxuIyAgICBnYW1lc19yZXdhcmQ6IFwiR2FtZXMgcmV3YXJkIHRoZSBwcm9kdWN0aXZlIHN0cnVnZ2xlLlwiXG4jICAgIGVuY291cmFnZTogXCJHYW1pbmcgaXMgYSBtZWRpdW0gdGhhdCBlbmNvdXJhZ2VzIGludGVyYWN0aW9uLCBkaXNjb3ZlcnksIGFuZCB0cmlhbC1hbmQtZXJyb3IuIEEgZ29vZCBnYW1lIGNoYWxsZW5nZXMgdGhlIHBsYXllciB0byBtYXN0ZXIgc2tpbGxzIG92ZXIgdGltZSwgd2hpY2ggaXMgdGhlIHNhbWUgY3JpdGljYWwgcHJvY2VzcyBzdHVkZW50cyBnbyB0aHJvdWdoIGFzIHRoZXkgbGVhcm4uXCJcbiMgICAgZXhjZWw6IFwiR2FtZXMgZXhjZWwgYXQgcmV3YXJkaW5nXCJcbiMgICAgc3RydWdnbGU6IFwicHJvZHVjdGl2ZSBzdHJ1Z2dsZVwiXG4jICAgIGtpbmRfb2Zfc3RydWdnbGU6IFwidGhlIGtpbmQgb2Ygc3RydWdnbGUgdGhhdCByZXN1bHRzIGluIGxlYXJuaW5nIHRoYXTigJlzIGVuZ2FnaW5nIGFuZFwiXG4jICAgIG1vdGl2YXRpbmc6IFwibW90aXZhdGluZ1wiXG4jICAgIG5vdF90ZWRpb3VzOiBcIm5vdCB0ZWRpb3VzLlwiXG4jICAgIGdhbWluZ19pc19nb29kOiBcIlN0dWRpZXMgc3VnZ2VzdCBnYW1pbmcgaXMgZ29vZCBmb3IgY2hpbGRyZW7igJlzIGJyYWlucy4gKGl04oCZcyB0cnVlISlcIlxuIyAgICBnYW1lX2Jhc2VkOiBcIldoZW4gZ2FtZS1iYXNlZCBsZWFybmluZyBzeXN0ZW1zIGFyZVwiXG4jICAgIGNvbXBhcmVkOiBcImNvbXBhcmVkXCJcbiMgICAgY29udmVudGlvbmFsOiBcImFnYWluc3QgY29udmVudGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kcywgdGhlIGRpZmZlcmVuY2UgaXMgY2xlYXI6IGdhbWVzIGFyZSBiZXR0ZXIgYXQgaGVscGluZyBzdHVkZW50cyByZXRhaW4ga25vd2xlZGdlLCBjb25jZW50cmF0ZSBhbmRcIlxuIyAgICBwZXJmb3JtX2F0X2hpZ2hlcl9sZXZlbDogXCJwZXJmb3JtIGF0IGEgaGlnaGVyIGxldmVsIG9mIGFjaGlldmVtZW50XCJcbiMgICAgZmVlZGJhY2s6IFwiR2FtZXMgYWxzbyBwcm92aWRlIHJlYWwtdGltZSBmZWVkYmFjayB0aGF0IGFsbG93cyBzdHVkZW50cyB0byBhZGp1c3QgdGhlaXIgc29sdXRpb24gcGF0aCBhbmQgdW5kZXJzdGFuZCBjb25jZXB0cyBtb3JlIGhvbGlzdGljYWxseSwgaW5zdGVhZCBvZiBiZWluZyBsaW1pdGVkIHRvIGp1c3Qg4oCcY29ycmVjdOKAnSBvciDigJxpbmNvcnJlY3TigJ0gYW5zd2Vycy5cIlxuIyAgICByZWFsX2dhbWU6IFwiQSByZWFsIGdhbWUsIHBsYXllZCB3aXRoIHJlYWwgY29kaW5nLlwiXG4jICAgIGdyZWF0X2dhbWU6IFwiQSBncmVhdCBnYW1lIGlzIG1vcmUgdGhhbiBqdXN0IGJhZGdlcyBhbmQgYWNoaWV2ZW1lbnRzIC0gaXTigJlzIGFib3V0IGEgcGxheWVy4oCZcyBqb3VybmV5LCB3ZWxsLWRlc2lnbmVkIHB1enpsZXMsIGFuZCB0aGUgYWJpbGl0eSB0byB0YWNrbGUgY2hhbGxlbmdlcyB3aXRoIGFnZW5jeSBhbmQgY29uZmlkZW5jZS5cIlxuIyAgICBhZ2VuY3k6IFwiQ29kZUNvbWJhdCBpcyBhIGdhbWUgdGhhdCBnaXZlcyBwbGF5ZXJzIHRoYXQgYWdlbmN5IGFuZCBjb25maWRlbmNlIHdpdGggb3VyIHJvYnVzdCB0eXBlZCBjb2RlIGVuZ2luZSwgd2hpY2ggaGVscHMgYmVnaW5uZXIgYW5kIGFkdmFuY2VkIHN0dWRlbnRzIGFsaWtlIHdyaXRlIHByb3BlciwgdmFsaWQgY29kZS5cIlxuIyAgICByZXF1ZXN0X2RlbW9fdGl0bGU6IFwiR2V0IHlvdXIgc3R1ZGVudHMgc3RhcnRlZCB0b2RheSFcIlxuIyAgICByZXF1ZXN0X2RlbW9fc3VidGl0bGU6IFwiUmVxdWVzdCBhIGRlbW8gYW5kIGdldCB5b3VyIHN0dWRlbnRzIHN0YXJ0ZWQgaW4gbGVzcyB0aGFuIGFuIGhvdXIuXCJcbiMgICAgZ2V0X3N0YXJ0ZWRfdGl0bGU6IFwiU2V0IHVwIHlvdXIgY2xhc3MgdG9kYXlcIlxuIyAgICBnZXRfc3RhcnRlZF9zdWJ0aXRsZTogXCJTZXQgdXAgYSBjbGFzcywgYWRkIHlvdXIgc3R1ZGVudHMsIGFuZCBtb25pdG9yIHRoZWlyIHByb2dyZXNzIGFzIHRoZXkgbGVhcm4gY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICByZXF1ZXN0X2RlbW86IFwiUmVxdWVzdCBhIERlbW9cIlxuIyAgICBzZXR1cF9hX2NsYXNzOiBcIlNldCBVcCBhIENsYXNzXCJcbiMgICAgaGF2ZV9hbl9hY2NvdW50OiBcIkhhdmUgYW4gYWNjb3VudD9cIlxuIyAgICBsb2dnZWRfaW5fYXM6IFwiWW91IGFyZSBjdXJyZW50bHkgbG9nZ2VkIGluIGFzXCJcbiMgICAgY29tcHV0ZXJfc2NpZW5jZTogXCJPdXIgc2VsZi1wYWNlZCBjb3Vyc2VzIGNvdmVyIGJhc2ljIHN5bnRheCB0byBhZHZhbmNlZCBjb25jZXB0c1wiXG4jICAgIGZmYTogXCJGcmVlIGZvciBhbGwgc3R1ZGVudHNcIlxuIyAgICBjb21pbmdfc29vbjogXCJNb3JlIGNvbWluZyBzb29uIVwiXG4jICAgIGNvdXJzZXNfYXZhaWxhYmxlX2luOiBcIkNvdXJzZXMgYXJlIGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0IGFuZCBQeXRob24uIFdlYiBEZXZlbG9wbWVudCBjb3Vyc2VzIHV0aWxpemUgSFRNTCwgQ1NTLCBhbmQgalF1ZXJ5LlwiXG4jICAgIGJvYXN0OiBcIkJvYXN0cyByaWRkbGVzIHRoYXQgYXJlIGNvbXBsZXggZW5vdWdoIHRvIGZhc2NpbmF0ZSBnYW1lcnMgYW5kIGNvZGVycyBhbGlrZS5cIlxuIyAgICB3aW5uaW5nOiBcIkEgd2lubmluZyBjb21iaW5hdGlvbiBvZiBSUEcgZ2FtZXBsYXkgYW5kIHByb2dyYW1taW5nIGhvbWV3b3JrIHRoYXQgcHVsbHMgb2ZmIG1ha2luZyBraWQtZnJpZW5kbHkgZWR1Y2F0aW9uIGxlZ2l0aW1hdGVseSBlbmpveWFibGUuXCJcbiMgICAgcnVuX2NsYXNzOiBcIkV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gcnVuIGEgY29tcHV0ZXIgc2NpZW5jZSBjbGFzcyBpbiB5b3VyIHNjaG9vbCB0b2RheSwgbm8gQ1MgYmFja2dyb3VuZCByZXF1aXJlZC5cIlxuIyAgICBnb3RvX2NsYXNzZXM6IFwiR28gdG8gTXkgQ2xhc3Nlc1wiXG4jICAgIHZpZXdfcHJvZmlsZTogXCJWaWV3IE15IFByb2ZpbGVcIlxuIyAgICB2aWV3X3Byb2dyZXNzOiBcIlZpZXcgUHJvZ3Jlc3NcIlxuIyAgICBnb190b19jb3Vyc2VzOiBcIkdvIHRvIE15IENvdXJzZXNcIlxuIyAgICB3YW50X2NvY286IFwiV2FudCBDb2RlQ29tYmF0IGF0IHlvdXIgc2Nob29sP1wiXG5cbiAgbmF2OlxuIyAgICBtYXA6IFwiTWFwXCJcbiAgICBwbGF5OiBcItil2YTYudioXCIgIyBUaGUgdG9wIG5hdiBiYXIgZW50cnkgd2hlcmUgcGxheWVycyBjaG9vc2Ugd2hpY2ggbGV2ZWxzIHRvIHBsYXlcbiAgICBjb21tdW5pdHk6IFwi2YXYrNiq2YXYuVwiXG4jICAgIGNvdXJzZXM6IFwiQ291cnNlc1wiXG4gICAgYmxvZzogXCLZhdiv2YjZkdmG2KlcIlxuICAgIGZvcnVtOiBcItmF2YbYqtiv2YlcIlxuICAgIGFjY291bnQ6IFwi2K3Ys9in2KhcIlxuIyAgICBteV9hY2NvdW50OiBcIk15IEFjY291bnRcIlxuICAgIHByb2ZpbGU6IFwi2YXZhNmBINi02K7YtdmKXCJcbiAgICBob21lOiBcItix2KbZitiz2YrZkdipXCJcbiAgICBjb250cmlidXRlOiBcItmF2LPYp9mH2KlcIlxuICAgIGxlZ2FsOiBcItmC2KfZhtmI2YZcIlxuIyAgICBwcml2YWN5OiBcIlByaXZhY3lcIlxuICAgIGFib3V0OiBcItit2YjZhFwiXG4gICAgY29udGFjdDogXCLYp9iq2ZHYtdin2YRcIlxuICAgIHR3aXR0ZXJfZm9sbG93OiBcItmF2KrYp9io2LnYqVwiXG4jICAgIG15X2NsYXNzcm9vbXM6IFwiTXkgQ2xhc3Nlc1wiXG4jICAgIG15X2NvdXJzZXM6IFwiTXkgQ291cnNlc1wiXG4jICAgIGNhcmVlcnM6IFwiQ2FyZWVyc1wiXG4jICAgIGZhY2Vib29rOiBcIkZhY2Vib29rXCJcbiMgICAgdHdpdHRlcjogXCJUd2l0dGVyXCJcbiMgICAgY3JlYXRlX2FfY2xhc3M6IFwiQ3JlYXRlIGEgQ2xhc3NcIlxuIyAgICBvdGhlcjogXCJPdGhlclwiXG4jICAgIGxlYXJuX3RvX2NvZGU6IFwiTGVhcm4gdG8gQ29kZSFcIlxuIyAgICB0b2dnbGVfbmF2OiBcIlRvZ2dsZSBuYXZpZ2F0aW9uXCJcbiMgICAgc2Nob29sczogXCJTY2hvb2xzXCJcbiMgICAgZ2V0X2ludm9sdmVkOiBcIkdldCBJbnZvbHZlZFwiXG4jICAgIG9wZW5fc291cmNlOiBcIk9wZW4gc291cmNlIChHaXRIdWIpXCJcbiMgICAgc3VwcG9ydDogXCJTdXBwb3J0XCJcbiMgICAgZmFxczogXCJGQVFzXCJcbiMgICAgY29weXJpZ2h0X3ByZWZpeDogXCJDb3B5cmlnaHRcIlxuIyAgICBjb3B5cmlnaHRfc3VmZml4OiBcIkFsbCBSaWdodHMgUmVzZXJ2ZWQuXCJcbiMgICAgaGVscF9wcmVmOiBcIk5lZWQgaGVscD8gRW1haWxcIlxuIyAgICBoZWxwX3N1ZmY6IFwiYW5kIHdlJ2xsIGdldCBpbiB0b3VjaCFcIlxuIyAgICByZXNvdXJjZV9odWI6IFwiUmVzb3VyY2UgSHViXCJcblxuICBtb2RhbDpcbiAgICBjbG9zZTogXCLYpdi62YTYp9mCXCJcbiAgICBva2F5OiBcItit2LPZhtinXCJcblxuICBub3RfZm91bmQ6XG4gICAgcGFnZV9ub3RfZm91bmQ6IFwi2KfZhNi12YHYrdipINi62YrYsSDZhdmI2KzZiNiv2KlcIlxuXG4gIGRpcGxvbWF0X3N1Z2dlc3Rpb246XG4gICAgdGl0bGU6IFwi2YXYs9in2LnYr9ipINmB2Yog2KrYsdis2YXYqSBDb2RlQ29tYmF0IVwiICMgVGhpcyBzaG93cyB1cCB3aGVuIGEgcGxheWVyIHN3aXRjaGVzIHRvIGEgbm9uLUVuZ2xpc2ggbGFuZ3VhZ2UgdXNpbmcgdGhlIGxhbmd1YWdlIHNlbGVjdG9yLlxuICAgIHN1Yl9oZWFkaW5nOiBcItmG2K3Yqtin2Kwg2YXZh9in2LHYp9iq2YMg2KfZhNmE2ZHYutmI2YrZkdipLlwiXG4gICAgcGl0Y2hfYm9keTogXCLZhtit2YYg2YbYt9mI2ZHYsSBDb2RlQ29tYmF0INio2KfZhNmE2ZHYutipINin2YTYpdmG2KzZhNmK2LLZitmR2KnYjCDZiNmE2YPZhiDZhNiv2YrZhtinINio2KfZhNmB2LnZhCDZhNin2LnYqNmK2YYg2YHZiiDYrNmF2YrYuSDYo9mG2K3Yp9ihINin2YTYudin2YTZhS4g2YPYq9mK2LEg2YXZhtmH2YUg2YrYsdmK2K/ZiNmGINin2YTZhNmR2LnYqCDYqNin2YTZhNmR2LrYqSDYp9mE2LnYsdio2YrZkdipINmI2YTZg9mGINmE2Kcg2YrYqtit2K/Yq9mI2YYg2KfZhNil2YbYrNmE2YrYstmK2ZHYqdiMINit2KrZiSDYpdiw2Kcg2YPZhtiqINij2LPYqti32YrYuSDYo9mGINij2KrZg9mE2ZHZhSDYudmE2Ykg2K3YryDYs9mI2KfYodiMINmK2LHYrNmJINin2YTZhtmR2LjYsSDZgdmKINin2YTYqtmI2YLZiti5INi52YTZiSDYo9mGINmK2YPZiNmGINiv2KjZhNmI2YXYp9iz2YrZkdinINmI2KfZhNmF2LPYp9i52K/YqSDZgdmKINiq2LHYrNmF2Kkg2YPZhCDZhdmGINmF2YjZgti5IENvZGVDb21iYXQg2YjYrNmF2YrYuSDYp9mE2YXYs9iq2YjZitin2Kog2KXZhNmJINin2YTYudix2KjZitmR2KkuXCJcbiAgICBtaXNzaW5nX3RyYW5zbGF0aW9uczogXCLYrdiq2Ykg2YrZhdmD2YbZhtinINiq2LHYrNmF2Kkg2YPZhNmRINi02YrYoSDYpdmE2Ykg2KfZhNmE2ZHYutipINin2YTYudix2KjZitmR2KnYjCDYs9iq2LHZiSDYp9mE2KXZhtis2YTZitiy2YrZkdipINi52YbYr9mF2Kcg2KrZg9mI2YYg2KfZhNi52LHYqNmK2ZHYqSDYutmK2LEg2YXYqtmI2YHYsS5cIlxuICAgIGxlYXJuX21vcmU6IFwi2YXYudix2YHYqSDYp9mE2YXYstmK2K8g2LnZhiDZg9mI2YbZgyDYr9io2YTZiNmF2KfYs9mKXCJcbiAgICBzdWJzY3JpYmVfYXNfZGlwbG9tYXQ6IFwi2KfZhNin2LTYqtix2KfZgyDZg9iv2KjZhNmI2YXYp9iz2YpcIlxuXG4gIHBsYXk6XG4gICAgcGxheV9hczogXCLYpdmE2LnYqCDZg9mAXCIgIyBMYWRkZXIgcGFnZVxuIyAgICBnZXRfY291cnNlX2Zvcl9jbGFzczogXCJBc3NpZ24gR2FtZSBEZXZlbG9wbWVudCBhbmQgbW9yZSB0byB5b3VyIGNsYXNzZXMhXCJcbiMgICAgcmVxdWVzdF9saWNlbnNlczogXCJDb250YWN0IG91ciBzY2hvb2wgc3BlY2lhbGlzdHMgZm9yIGRldGFpbHMuXCJcbiMgICAgY29tcGV0ZTogXCJDb21wZXRlIVwiICMgQ291cnNlIGRldGFpbHMgcGFnZVxuICAgIHNwZWN0YXRlOiBcItmF2LTYp9mH2K9cIiAjIExhZGRlciBwYWdlXG4gICAgcGxheWVyczogXCLZhNin2LnYqNmK2YZcIiAjIEhvdmVyIG92ZXIgYSBsZXZlbCBvbiAvcGxheVxuICAgIGhvdXJzX3BsYXllZDogXCLYs9in2LnYp9iqINin2YTZhNmR2LnYqFwiICMgSG92ZXIgb3ZlciBhIGxldmVsIG9uIC9wbGF5XG4gICAgaXRlbXM6IFwi2KfZhNi52YbYp9i12LFcIiAjIFRvb2x0aXAgb24gaXRlbSBzaG9wIGJ1dHRvbiBmcm9tIC9wbGF5XG4gICAgdW5sb2NrOiBcItmB2KrYrVwiICMgRm9yIHB1cmNoYXNpbmcgaXRlbXMgYW5kIGhlcm9lc1xuICAgIGNvbmZpcm06IFwi2KrYo9mD2YrYr1wiXG4gICAgb3duZWQ6IFwi2YXZhdiq2Y7ZhNmO2YNcIiAjIEZvciBpdGVtcyB5b3Ugb3duXG4gICAgbG9ja2VkOiBcItmF2YLZgdmEXCJcbiAgICBhdmFpbGFibGU6IFwi2YXYqtmI2YHYsVwiXG4gICAgc2tpbGxzX2dyYW50ZWQ6IFwi2YXZh9in2LHYp9iqINin2YTZhdmF2YbZiNit2KlcIiAjIFByb3BlcnR5IGRvY3VtZW50YXRpb24gZGV0YWlsc1xuICAgIGhlcm9lczogXCLYp9mE2KPYqNi32KfZhFwiICMgVG9vbHRpcCBvbiBoZXJvIHNob3AgYnV0dG9uIGZyb20gL3BsYXlcbiAgICBhY2hpZXZlbWVudHM6IFwi2KfZhNil2YbYrNin2LLYp9iqXCIgIyBUb29sdGlwIG9uIGFjaGlldmVtZW50IGxpc3QgYnV0dG9uIGZyb20gL3BsYXlcbiAgICBzZXR0aW5nczogXCLYp9mE2KXYudiv2KfYr9in2KpcIiAjIFRvb2x0aXAgb24gc2V0dGluZ3MgYnV0dG9uIGZyb20gL3BsYXlcbiMgICAgcG9sbDogXCJQb2xsXCIgIyBUb29sdGlwIG9uIHBvbGwgYnV0dG9uIGZyb20gL3BsYXlcbiAgICBuZXh0OiBcItin2YTYqtin2YTZilwiICMgR28gZnJvbSBjaG9vc2UgaGVybyB0byBjaG9vc2UgaW52ZW50b3J5IGJlZm9yZSBwbGF5aW5nIGEgbGV2ZWxcbiAgICBjaGFuZ2VfaGVybzogXCLYqti62YrZitixINin2YTYqNi32YRcIiAjIEdvIGJhY2sgZnJvbSBjaG9vc2UgaW52ZW50b3J5IHRvIGNob29zZSBoZXJvXG4gICAgYnV5X2dlbXM6IFwi2LTYsdin2KEg2KfZhNij2K3YrNin2LEg2KfZhNmD2LHZitmF2KlcIlxuIyAgICBzdWJzY3JpYmVyc19vbmx5OiBcIlN1YnNjcmliZXJzIE9ubHkhXCJcbiMgICAgc3Vic2NyaWJlX3VubG9jazogXCJTdWJzY3JpYmUgdG8gVW5sb2NrIVwiXG4jICAgIHN1YnNjcmliZXJfaGVyb2VzOiBcIlN1YnNjcmliZSB0b2RheSB0byBpbW1lZGlhdGVseSB1bmxvY2sgQW1hcmEsIEh1c2hiYXVtLCBhbmQgSGF0dG9yaSFcIlxuIyAgICBzdWJzY3JpYmVyX2dlbXM6IFwiU3Vic2NyaWJlIHRvZGF5IHRvIHB1cmNoYXNlIHRoaXMgaGVybyB3aXRoIGdlbXMhXCJcbiAgICBhbm9ueW1vdXM6IFwi2YTYp9i52Kgg2YXYrNmH2YjZhFwiXG4gICAgbGV2ZWxfZGlmZmljdWx0eTogXCLYp9mE2LXYudmI2KjYqTpcIlxuICAgIGF3YWl0aW5nX2xldmVsc19hZHZlbnR1cmVyX3ByZWZpeDogXCLZhtit2YYg2KfZhNin2YHYsdin2Kwg2LnZhiDZhdiz2KrZiNmK2KfYqiDYrNiv2YrYr9ipINmD2YQg2KPYs9io2YjYuS5cIlxuICAgIGF3YWl0aW5nX2xldmVsc19hZHZlbnR1cmVyOiBcItin2YTYqtmI2YLZiti5INi52YTZiSDYp9mE2YbYrdmIINin2YTZhdi62KfZhdixXCJcbiAgICBhd2FpdGluZ19sZXZlbHNfYWR2ZW50dXJlcl9zdWZmaXg6IFwi2KPZhiDYqtmD2YjZhiDYo9mI2YQg2YTZhNi52Kgg2YXYs9iq2YjZitin2Kog2KzYr9mK2K/YqS5cIlxuICAgIGFkanVzdF92b2x1bWU6IFwi2KrYudiv2YrZhCDYp9mE2LXZiNiqXCJcbiAgICBjYW1wYWlnbl9tdWx0aXBsYXllcjogXCLYs9in2K3Yp9iqINmF2KrYudiv2K/YqSDYp9mE2YTYp9mR2LnYqNmK2YZcIlxuICAgIGNhbXBhaWduX211bHRpcGxheWVyX2Rlc2NyaXB0aW9uOiBcIi4uLiDZgdmK2YfYpyDYqtio2LHZhdisINmI2KzZhyDZhNmI2KzZhyDYttivINmE2KfYudio2YrZhiDYotiu2LHZitmGLlwiXG4jICAgIGJyYWluX3BvcF9kb25lOiBcIllvdeKAmXZlIGRlZmVhdGVkIHRoZSBPZ3JlcyB3aXRoIGNvZGUhIFlvdSB3aW4hXCJcbiMgICAgYnJhaW5fcG9wX2NoYWxsZW5nZTogXCJDaGFsbGVuZ2UgeW91cnNlbGYgdG8gcGxheSBhZ2FpbiB1c2luZyBhIGRpZmZlcmVudCBwcm9ncmFtbWluZyBsYW5ndWFnZSFcIlxuIyAgICByZXBsYXk6IFwiUmVwbGF5XCJcbiMgICAgYmFja190b19jbGFzc3Jvb206IFwiQmFjayB0byBDbGFzc3Jvb21cIlxuIyAgICB0ZWFjaGVyX2J1dHRvbjogXCJGb3IgVGVhY2hlcnNcIlxuIyAgICBnZXRfbW9yZV9jb2RlY29tYmF0OiBcIkdldCBNb3JlIENvZGVDb21iYXRcIlxuXG4jICBjb2RlOlxuIyAgICBpZjogXCJpZlwiICMgS2V5d29yZHMtLXRoZXNlIHRyYW5zbGF0aW9ucyBzaG93IHVwIG9uIGhvdmVyLCBzbyBwbGVhc2UgdHJhbnNsYXRlIHRoZW0gYWxsLCBldmVuIGlmIGl0J3Mga2luZCBvZiBsb25nLiAoSW4gdGhlIGNvZGUgZWRpdG9yLCB0aGV5IHdpbGwgc3RpbGwgYmUgaW4gRW5nbGlzaC4pXG4jICAgIGVsc2U6IFwiZWxzZVwiXG4jICAgIGVsaWY6IFwiZWxzZSBpZlwiXG4jICAgIHdoaWxlOiBcIndoaWxlXCJcbiMgICAgbG9vcDogXCJsb29wXCJcbiMgICAgZm9yOiBcImZvclwiXG4jICAgIGJyZWFrOiBcImJyZWFrXCJcbiMgICAgY29udGludWU6IFwiY29udGludWVcIlxuIyAgICBwYXNzOiBcInBhc3NcIlxuIyAgICByZXR1cm46IFwicmV0dXJuXCJcbiMgICAgdGhlbjogXCJ0aGVuXCJcbiMgICAgZG86IFwiZG9cIlxuIyAgICBlbmQ6IFwiZW5kXCJcbiMgICAgZnVuY3Rpb246IFwiZnVuY3Rpb25cIlxuIyAgICBkZWY6IFwiZGVmaW5lXCJcbiMgICAgdmFyOiBcInZhcmlhYmxlXCJcbiMgICAgc2VsZjogXCJzZWxmXCJcbiMgICAgaGVybzogXCJoZXJvXCJcbiMgICAgdGhpczogXCJ0aGlzXCJcbiMgICAgb3I6IFwib3JcIlxuIyAgICBcInx8XCI6IFwib3JcIlxuIyAgICBhbmQ6IFwiYW5kXCJcbiMgICAgXCImJlwiOiBcImFuZFwiXG4jICAgIG5vdDogXCJub3RcIlxuIyAgICBcIiFcIjogXCJub3RcIlxuIyAgICBcIj1cIjogXCJhc3NpZ25cIlxuIyAgICBcIj09XCI6IFwiZXF1YWxzXCJcbiMgICAgXCI9PT1cIjogXCJzdHJpY3RseSBlcXVhbHNcIlxuIyAgICBcIiE9XCI6IFwiZG9lcyBub3QgZXF1YWxcIlxuIyAgICBcIiE9PVwiOiBcImRvZXMgbm90IHN0cmljdGx5IGVxdWFsXCJcbiMgICAgXCI+XCI6IFwiaXMgZ3JlYXRlciB0aGFuXCJcbiMgICAgXCI+PVwiOiBcImlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbFwiXG4jICAgIFwiPFwiOiBcImlzIGxlc3MgdGhhblwiXG4jICAgIFwiPD1cIjogXCJpcyBsZXNzIHRoYW4gb3IgZXF1YWxcIlxuIyAgICBcIipcIjogXCJtdWx0aXBsaWVkIGJ5XCJcbiMgICAgXCIvXCI6IFwiZGl2aWRlZCBieVwiXG4jICAgIFwiK1wiOiBcInBsdXNcIlxuIyAgICBcIi1cIjogXCJtaW51c1wiXG4jICAgIFwiKz1cIjogXCJhZGQgYW5kIGFzc2lnblwiXG4jICAgIFwiLT1cIjogXCJzdWJ0cmFjdCBhbmQgYXNzaWduXCJcbiMgICAgVHJ1ZTogXCJUcnVlXCJcbiMgICAgdHJ1ZTogXCJ0cnVlXCJcbiMgICAgRmFsc2U6IFwiRmFsc2VcIlxuIyAgICBmYWxzZTogXCJmYWxzZVwiXG4jICAgIHVuZGVmaW5lZDogXCJ1bmRlZmluZWRcIlxuIyAgICBudWxsOiBcIm51bGxcIlxuIyAgICBuaWw6IFwibmlsXCJcbiMgICAgTm9uZTogXCJOb25lXCJcblxuICBzaGFyZV9wcm9ncmVzc19tb2RhbDpcbiAgICBibHVyYjogXCLZg9mG2Kog2KrZgtiv2YXYpyDZg9io2YrYsdinISDYo9iu2KjYsSDZiNin2YTYr9mK2YMg2YjZg9mFINmD2YbYqiDZgtivINiq2LnZhNmF2Kog2YXYuSBDb2RlQ29tYmF0LlwiXG4gICAgZW1haWxfaW52YWxpZDogXCLYp9mE2KjYsdmK2K8g2KfZhNin2YPYqtix2YjZhtmKINi62YrYsSDYtdin2YTYrS5cIlxuICAgIGZvcm1fYmx1cmI6IFwi2KfYr9iu2YQg2KjYsdmK2K8g2KfZiNmE2YrYp9ihINin2YXYsdmDINin2YTYp9mE2YPYqtix2YjZhtmKINmE2YPZiiDZhtix2YrZh9mFIVwiXG4gICAgZm9ybV9sYWJlbDogXCLYudmG2YjYp9mGINin2YTYqNix2YrYryDYp9mE2KfZhNmD2KrYsdmI2YbZilwiXG4gICAgcGxhY2Vob2xkZXI6IFwi2LnZhtmI2KfZhiDYp9mE2KjYsdmK2K8g2KfZhNin2YTZg9iq2LHZiNmG2YpcIlxuICAgIHRpdGxlOiBcIti52YXZhCDZhdmF2KrYp9iyLCBBcHByZW50aWNlXCJcblxuICBsb2dpbjpcbiAgICBzaWduX3VwOiBcItil2YbYtNin2KEg2K3Ys9in2KhcIlxuIyAgICBlbWFpbF9vcl91c2VybmFtZTogXCJFbWFpbCBvciB1c2VybmFtZVwiXG4gICAgbG9nX2luOiBcItiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEXCJcbiAgICBsb2dnaW5nX2luOiBcItis2KfYsdmKINiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEXCJcbiAgICBsb2dfb3V0OiBcItiq2LPYrNmK2YQg2KfZhNiu2LHZiNisXCJcbiAgICBmb3Jnb3RfcGFzc3dvcmQ6IFwi2YbYs9mK2Kog2LHZhdiyINin2YTYr9iu2YjZhD9cIlxuICAgIGZpbmlzaGluZzogXCLYp9mE2KfZhtiq2YfYp9ihXCJcbiAgICBzaWduX2luX3dpdGhfZmFjZWJvb2s6IFwi2LPYrNmEINin2YTYr9iu2YjZhCDYqNmI2KfYs9i32Kkg2YHZitiz2KjZiNmDXCJcbiAgICBzaWduX2luX3dpdGhfZ3BsdXM6IFwi2LPYrNmEINin2YTYr9iu2YjZhCDYqNmI2KfYs9i32Kkg2LrZiNi62YQg2KjZhNizXCJcbiAgICBzaWdudXBfc3dpdGNoOiBcItiq2LHZitivINin2YbYtNin2KEg2K3Ys9in2Kg/XCJcblxuICBzaWdudXA6XG4jICAgIGNvbXBsZXRlX3N1YnNjcmlwdGlvbjogXCJDb21wbGV0ZSBTdWJzY3JpcHRpb25cIlxuIyAgICBjcmVhdGVfc3R1ZGVudF9oZWFkZXI6IFwiQ3JlYXRlIFN0dWRlbnQgQWNjb3VudFwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2hlYWRlcjogXCJDcmVhdGUgVGVhY2hlciBBY2NvdW50XCJcbiMgICAgY3JlYXRlX2luZGl2aWR1YWxfaGVhZGVyOiBcIkNyZWF0ZSBJbmRpdmlkdWFsIEFjY291bnRcIlxuICAgIGVtYWlsX2Fubm91bmNlbWVudHM6IFwi2KrZhNmC2Yog2KfZhNil2LnZhNin2YbYp9iqINi52YYg2LfYsdmK2YIg2KfZhNio2LHZitivINin2YTYpdmE2YPYqtix2YjZhtmKXCJcbiMgICAgc2lnbl9pbl90b19jb250aW51ZTogXCJTaWduIGluIG9yIGNyZWF0ZSBhbiBhY2NvdW50IHRvIGNvbnRpbnVlXCJcbiMgICAgdGVhY2hlcl9lbWFpbF9hbm5vdW5jZW1lbnRzOiBcIktlZXAgbWUgdXBkYXRlZCBvbiBuZXcgdGVhY2hlciByZXNvdXJjZXMsIGN1cnJpY3VsdW0sIGFuZCBjb3Vyc2VzIVwiXG4gICAgY3JlYXRpbmc6IFwi2KzYp9ix2Yog2KXZhtiz2KfYoSDYp9mE2K3Ys9in2KguLi5cIlxuICAgIHNpZ25fdXA6IFwi2KfZhNiq2LPYrNmK2YRcIlxuICAgIGxvZ19pbjogXCLYqtiz2KzZitmEINin2YTYr9mR2K7ZiNmEINio2YPZhNmF2Kkg2KfZhNiz2LHZkVwiXG4gICAgcmVxdWlyZWQ6IFwi2KrYrdiq2KfYrCDYpdmE2Ykg2KrYs9is2YrZhCDYp9mE2K/YrtmI2YQg2YLYqNmEINij2YYg2KrYqtmF2YPZhiDZhdmGINin2YTYs9mK2LEg2YHZiiDZh9iw2Kcg2KfZhNi32LHZitmCLlwiXG4gICAgbG9naW5fc3dpdGNoOiBcItmE2K/ZitmDINit2LPYp9ioINio2KfZhNmB2LnZhD9cIlxuIyAgICBvcHRpb25hbDogXCJvcHRpb25hbFwiXG4jICAgIGNvbm5lY3RlZF9ncGx1c19oZWFkZXI6IFwiWW91J3ZlIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgd2l0aCBHb29nbGUrIVwiXG4jICAgIGNvbm5lY3RlZF9ncGx1c19wOiBcIkZpbmlzaCBzaWduaW5nIHVwIHNvIHlvdSBjYW4gbG9nIGluIHdpdGggeW91ciBHb29nbGUrIGFjY291bnQuXCJcbiMgICAgY29ubmVjdGVkX2ZhY2Vib29rX2hlYWRlcjogXCJZb3UndmUgc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB3aXRoIEZhY2Vib29rIVwiXG4jICAgIGNvbm5lY3RlZF9mYWNlYm9va19wOiBcIkZpbmlzaCBzaWduaW5nIHVwIHNvIHlvdSBjYW4gbG9nIGluIHdpdGggeW91ciBGYWNlYm9vayBhY2NvdW50LlwiXG4jICAgIGhleV9zdHVkZW50czogXCJTdHVkZW50cywgZW50ZXIgdGhlIGNsYXNzIGNvZGUgZnJvbSB5b3VyIHRlYWNoZXIuXCJcbiMgICAgYmlydGhkYXk6IFwiQmlydGhkYXlcIlxuIyAgICBwYXJlbnRfZW1haWxfYmx1cmI6IFwiV2Uga25vdyB5b3UgY2FuJ3Qgd2FpdCB0byBsZWFybiBwcm9ncmFtbWluZyAmbWRhc2g7IHdlJ3JlIGV4Y2l0ZWQgdG9vISBZb3VyIHBhcmVudHMgd2lsbCByZWNlaXZlIGFuIGVtYWlsIHdpdGggZnVydGhlciBpbnN0cnVjdGlvbnMgb24gaG93IHRvIGNyZWF0ZSBhbiBhY2NvdW50IGZvciB5b3UuIEVtYWlsIHt7ZW1haWxfbGlua319IGlmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMuXCJcbiMgICAgY2xhc3Nyb29tX25vdF9mb3VuZDogXCJObyBjbGFzc2VzIGV4aXN0IHdpdGggdGhpcyBDbGFzcyBDb2RlLiBDaGVjayB5b3VyIHNwZWxsaW5nIG9yIGFzayB5b3VyIHRlYWNoZXIgZm9yIGhlbHAuXCJcbiMgICAgY2hlY2tpbmc6IFwiQ2hlY2tpbmcuLi5cIlxuIyAgICBhY2NvdW50X2V4aXN0czogXCJUaGlzIGVtYWlsIGlzIGFscmVhZHkgaW4gdXNlOlwiXG4jICAgIHNpZ25faW46IFwiU2lnbiBpblwiXG4jICAgIGVtYWlsX2dvb2Q6IFwiRW1haWwgbG9va3MgZ29vZCFcIlxuIyAgICBuYW1lX3Rha2VuOiBcIlVzZXJuYW1lIGFscmVhZHkgdGFrZW4hIFRyeSB7e3N1Z2dlc3RlZE5hbWV9fT9cIlxuIyAgICBuYW1lX2F2YWlsYWJsZTogXCJVc2VybmFtZSBhdmFpbGFibGUhXCJcbiMgICAgbmFtZV9pc19lbWFpbDogXCJVc2VybmFtZSBtYXkgbm90IGJlIGFuIGVtYWlsXCJcbiMgICAgY2hvb3NlX3R5cGU6IFwiQ2hvb3NlIHlvdXIgYWNjb3VudCB0eXBlOlwiXG4jICAgIHRlYWNoZXJfdHlwZV8xOiBcIlRlYWNoIHByb2dyYW1taW5nIHVzaW5nIENvZGVDb21iYXQhXCJcbiMgICAgdGVhY2hlcl90eXBlXzI6IFwiU2V0IHVwIHlvdXIgY2xhc3NcIlxuIyAgICB0ZWFjaGVyX3R5cGVfMzogXCJBY2Nlc3MgQ291cnNlIEd1aWRlc1wiXG4jICAgIHRlYWNoZXJfdHlwZV80OiBcIlZpZXcgc3R1ZGVudCBwcm9ncmVzc1wiXG4jICAgIHNpZ251cF9hc190ZWFjaGVyOiBcIlNpZ24gdXAgYXMgYSBUZWFjaGVyXCJcbiMgICAgc3R1ZGVudF90eXBlXzE6IFwiTGVhcm4gdG8gcHJvZ3JhbSB3aGlsZSBwbGF5aW5nIGFuIGVuZ2FnaW5nIGdhbWUhXCJcbiMgICAgc3R1ZGVudF90eXBlXzI6IFwiUGxheSB3aXRoIHlvdXIgY2xhc3NcIlxuIyAgICBzdHVkZW50X3R5cGVfMzogXCJDb21wZXRlIGluIGFyZW5hc1wiXG4jICAgIHN0dWRlbnRfdHlwZV80OiBcIkNob29zZSB5b3VyIGhlcm8hXCJcbiMgICAgc3R1ZGVudF90eXBlXzU6IFwiSGF2ZSB5b3VyIENsYXNzIENvZGUgcmVhZHkhXCJcbiMgICAgc2lnbnVwX2FzX3N0dWRlbnQ6IFwiU2lnbiB1cCBhcyBhIFN0dWRlbnRcIlxuIyAgICBpbmRpdmlkdWFsc19vcl9wYXJlbnRzOiBcIkluZGl2aWR1YWxzICYgUGFyZW50c1wiXG4jICAgIGluZGl2aWR1YWxfdHlwZTogXCJGb3IgcGxheWVycyBsZWFybmluZyB0byBjb2RlIG91dHNpZGUgb2YgYSBjbGFzcy4gUGFyZW50cyBzaG91bGQgc2lnbiB1cCBmb3IgYW4gYWNjb3VudCBoZXJlLlwiXG4jICAgIHNpZ251cF9hc19pbmRpdmlkdWFsOiBcIlNpZ24gdXAgYXMgYW4gSW5kaXZpZHVhbFwiXG4jICAgIGVudGVyX2NsYXNzX2NvZGU6IFwiRW50ZXIgeW91ciBDbGFzcyBDb2RlXCJcbiMgICAgZW50ZXJfYmlydGhkYXRlOiBcIkVudGVyIHlvdXIgYmlydGhkYXRlOlwiXG4jICAgIHBhcmVudF91c2VfYmlydGhkYXRlOiBcIlBhcmVudHMsIHVzZSB5b3VyIG93biBiaXJ0aGRhdGUuXCJcbiMgICAgYXNrX3RlYWNoZXJfMTogXCJBc2sgeW91ciB0ZWFjaGVyIGZvciB5b3VyIENsYXNzIENvZGUuXCJcbiMgICAgYXNrX3RlYWNoZXJfMjogXCJOb3QgcGFydCBvZiBhIGNsYXNzPyBDcmVhdGUgYW4gXCJcbiMgICAgYXNrX3RlYWNoZXJfMzogXCJJbmRpdmlkdWFsIEFjY291bnRcIlxuIyAgICBhc2tfdGVhY2hlcl80OiBcIiBpbnN0ZWFkLlwiXG4jICAgIGFib3V0X3RvX2pvaW46IFwiWW91J3JlIGFib3V0IHRvIGpvaW46XCJcbiMgICAgZW50ZXJfcGFyZW50X2VtYWlsOiBcIkVudGVyIHlvdXIgcGFyZW504oCZcyBlbWFpbCBhZGRyZXNzOlwiXG4jICAgIHBhcmVudF9lbWFpbF9lcnJvcjogXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHRyeWluZyB0byBzZW5kIHRoZSBlbWFpbC4gQ2hlY2sgdGhlIGVtYWlsIGFkZHJlc3MgYW5kIHRyeSBhZ2Fpbi5cIlxuIyAgICBwYXJlbnRfZW1haWxfc2VudDogXCJXZeKAmXZlIHNlbnQgYW4gZW1haWwgd2l0aCBmdXJ0aGVyIGluc3RydWN0aW9ucyBvbiBob3cgdG8gY3JlYXRlIGFuIGFjY291bnQuIEFzayB5b3VyIHBhcmVudCB0byBjaGVjayB0aGVpciBpbmJveC5cIlxuIyAgICBhY2NvdW50X2NyZWF0ZWQ6IFwiQWNjb3VudCBDcmVhdGVkIVwiXG4jICAgIGNvbmZpcm1fc3R1ZGVudF9ibHVyYjogXCJXcml0ZSBkb3duIHlvdXIgaW5mb3JtYXRpb24gc28gdGhhdCB5b3UgZG9uJ3QgZm9yZ2V0IGl0LiBZb3VyIHRlYWNoZXIgY2FuIGFsc28gaGVscCB5b3UgcmVzZXQgeW91ciBwYXNzd29yZCBhdCBhbnkgdGltZS5cIlxuIyAgICBjb25maXJtX2luZGl2aWR1YWxfYmx1cmI6IFwiV3JpdGUgZG93biB5b3VyIGxvZ2luIGluZm9ybWF0aW9uIGluIGNhc2UgeW91IG5lZWQgaXQgbGF0ZXIuIFZlcmlmeSB5b3VyIGVtYWlsIHNvIHlvdSBjYW4gcmVjb3ZlciB5b3VyIGFjY291bnQgaWYgeW91IGV2ZXIgZm9yZ2V0IHlvdXIgcGFzc3dvcmQgLSBjaGVjayB5b3VyIGluYm94IVwiXG4jICAgIHdyaXRlX3RoaXNfZG93bjogXCJXcml0ZSB0aGlzIGRvd246XCJcbiMgICAgc3RhcnRfcGxheWluZzogXCJTdGFydCBQbGF5aW5nIVwiXG4jICAgIHNzb19jb25uZWN0ZWQ6IFwiU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB3aXRoOlwiXG4jICAgIHNlbGVjdF95b3VyX3N0YXJ0aW5nX2hlcm86IFwiU2VsZWN0IFlvdXIgU3RhcnRpbmcgSGVybzpcIlxuIyAgICB5b3VfY2FuX2Fsd2F5c19jaGFuZ2VfeW91cl9oZXJvX2xhdGVyOiBcIllvdSBjYW4gYWx3YXlzIGNoYW5nZSB5b3VyIGhlcm8gbGF0ZXIuXCJcbiMgICAgZmluaXNoOiBcIkZpbmlzaFwiXG4jICAgIHRlYWNoZXJfcmVhZHlfdG9fY3JlYXRlX2NsYXNzOiBcIllvdSdyZSByZWFkeSB0byBjcmVhdGUgeW91ciBmaXJzdCBjbGFzcyFcIlxuIyAgICB0ZWFjaGVyX3N0dWRlbnRzX2Nhbl9zdGFydF9ub3c6IFwiWW91ciBzdHVkZW50cyB3aWxsIGJlIGFibGUgdG8gc3RhcnQgcGxheWluZyB0aGUgZmlyc3QgY291cnNlLCBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSwgaW1tZWRpYXRlbHkuXCJcbiMgICAgdGVhY2hlcl9saXN0X2NyZWF0ZV9jbGFzczogXCJPbiB0aGUgbmV4dCBzY3JlZW4geW91IHdpbGwgYmUgYWJsZSB0byBjcmVhdGUgYSBuZXcgY2xhc3MuXCJcbiMgICAgdGVhY2hlcl9saXN0X2FkZF9zdHVkZW50czogXCJBZGQgc3R1ZGVudHMgdG8gdGhlIGNsYXNzIGJ5IGNsaWNraW5nIHRoZSBWaWV3IENsYXNzIGxpbmssIHRoZW4gc2VuZGluZyB5b3VyIHN0dWRlbnRzIHRoZSBDbGFzcyBDb2RlIG9yIFVSTC4gWW91IGNhbiBhbHNvIGludml0ZSB0aGVtIHZpYSBlbWFpbCBpZiB0aGV5IGhhdmUgZW1haWwgYWRkcmVzc2VzLlwiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfMTogXCJDaGVjayBvdXQgdGhlXCJcbiMgICAgdGVhY2hlcl9saXN0X3Jlc291cmNlX2h1Yl8yOiBcIkNvdXJzZSBHdWlkZXNcIlxuIyAgICB0ZWFjaGVyX2xpc3RfcmVzb3VyY2VfaHViXzM6IFwiZm9yIHNvbHV0aW9ucyB0byBldmVyeSBsZXZlbCwgYW5kIHRoZVwiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfNDogXCJSZXNvdXJjZSBIdWJcIlxuIyAgICB0ZWFjaGVyX2xpc3RfcmVzb3VyY2VfaHViXzU6IFwiZm9yIGN1cnJpY3VsdW0gZ3VpZGVzLCBhY3Rpdml0aWVzLCBhbmQgbW9yZSFcIlxuIyAgICB0ZWFjaGVyX2FkZGl0aW9uYWxfcXVlc3Rpb25zOiBcIlRoYXTigJlzIGl0ISBJZiB5b3UgbmVlZCBhZGRpdGlvbmFsIGhlbHAgb3IgaGF2ZSBxdWVzdGlvbnMsIHJlYWNoIG91dCB0byBfX3N1cHBvcnRFbWFpbF9fLlwiXG4jICAgIGRvbnRfdXNlX291cl9lbWFpbF9zaWxseTogXCJEb24ndCBwdXQgb3VyIGVtYWlsIGhlcmUhIFB1dCB5b3VyIHBhcmVudCdzIGVtYWlsLlwiXG4jICAgIHdhbnRfY29kZWNvbWJhdF9pbl9zY2hvb2w6IFwiV2FudCB0byBwbGF5IENvZGVDb21iYXQgYWxsIHRoZSB0aW1lP1wiXG5cbiAgcmVjb3ZlcjpcbiAgICByZWNvdmVyX2FjY291bnRfdGl0bGU6IFwi2KXYs9iq2LnYp9iv2Kkg2K3Ys9in2KhcIlxuICAgIHNlbmRfcGFzc3dvcmQ6IFwi2KXYsdiz2KfZhCDZg9mE2YXYqSDYs9ix2ZEg2KfZhNil2LPYqti52KfYr9ipXCJcbiAgICByZWNvdmVyeV9zZW50OiBcItin2LPYqtix2K/Yp9ivINin2YTYqNix2YrYryDYp9mE2KfZhNmD2KrYsdmI2YbZiiDYp9mE2YXYsdiz2YQuXCJcblxuICBpdGVtczpcbiAgICBwcmltYXJ5OiBcItin2YTYo9mI2YTZilwiXG4gICAgc2Vjb25kYXJ5OiBcItir2KfZhtmI2YpcIlxuICAgIGFybW9yOiBcItiv2LHYuVwiXG4gICAgYWNjZXNzb3JpZXM6IFwi2KXZg9iz2LPZiNin2LHYp9iqXCJcbiAgICBtaXNjOiBcItmF2KrZgdix2YLYp9iqXCJcbiAgICBib29rczogXCLZg9iq2KhcIlxuXG4gIGNvbW1vbjpcbiAgICBiYWNrOiBcItin2YTYsdis2YjYuVwiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiTmF2aWdhdGUgYmFja3dhcmRcIlxuIyAgICBjb21pbmdfc29vbjogXCJDb21pbmcgc29vbiFcIlxuICAgIGNvbnRpbnVlOiBcItin2YXYtiDZgtiv2YXYp1wiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiQ29udGludWUgZm9yd2FyZFwiXG4jICAgIG5leHQ6IFwiTmV4dFwiXG4jICAgIGRlZmF1bHRfY29kZTogXCJEZWZhdWx0IENvZGVcIlxuICAgIGxvYWRpbmc6IFwi2KrYrdmF2YrZhFwiXG4jICAgIG92ZXJ2aWV3OiBcIk92ZXJ2aWV3XCJcbiMgICAgcHJvY2Vzc2luZzogXCJQcm9jZXNzaW5nLi4uXCJcbiMgICAgc29sdXRpb246IFwiU29sdXRpb25cIlxuIyAgICB0YWJsZV9vZl9jb250ZW50czogXCJUYWJsZSBvZiBDb250ZW50c1wiXG4jICAgIGludHJvOiBcIkludHJvXCJcbiAgICBzYXZpbmc6IFwi2KzYp9ix2Yog2KfZhNit2YHYtlwiXG4gICAgc2VuZGluZzogXCLYrNin2LHZiiDYp9mE2KXYsdiz2KfZhFwiXG4gICAgc2VuZDogXCLYo9ix2LPZhFwiXG4jICAgIHNlbnQ6IFwiU2VudFwiXG4gICAgY2FuY2VsOiBcItij2YTYutmKXCJcbiAgICBzYXZlOiBcItil2K3Zgdi2XCJcbiAgICBwdWJsaXNoOiBcItij2YbYtNixXCJcbiAgICBjcmVhdGU6IFwi2KXZhti02KfYoVwiXG4gICAgZm9yazogXCLYpdmG2LPYrlwiXG4gICAgcGxheTogXCLYpdmE2LnYqFwiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiUGxheSBuZXh0IGxldmVsXCJcbiAgICByZXRyeTogXCLYpdi52KfYr9ipXCJcbiAgICBhY3Rpb25zOiBcIkFjdGlvbnNcIlxuICAgIGluZm86IFwi2YXYudmE2YjZhdin2KpcIlxuICAgIGhlbHA6IFwi2YXYs9in2LnYr9ipXCJcbiAgICB3YXRjaDogXCLZhdi02KfZh9iv2KlcIlxuICAgIHVud2F0Y2g6IFwi2KXZhtmH2KfYoSDYp9mE2YXYtNin2YfYr9ipXCJcbiAgICBzdWJtaXRfcGF0Y2g6IFwi2KrZgtiv2YrZhSDYp9mE2KrYtdit2YrYrVwiXG4gICAgc3VibWl0X2NoYW5nZXM6IFwi2KrZgtiv2YrZhSDYp9mE2KrYutmK2YrYsdin2KpcIlxuICAgIHNhdmVfY2hhbmdlczogXCLYrdmB2Lgg2KfZhNiq2LrZitix2KfYqlwiXG4jICAgIHJlcXVpcmVkX2ZpZWxkOiBcInJlcXVpcmVkXCJcblxuICBnZW5lcmFsOlxuICAgIGFuZDogXCLZiFwiXG4gICAgbmFtZTogXCLYp9iz2YVcIlxuICAgIGRhdGU6IFwi2KrYo9ix2YrYrlwiXG4gICAgYm9keTogXCLYrNiz2K9cIlxuICAgIHZlcnNpb246IFwi2YbYs9iu2KlcIlxuICAgIHBlbmRpbmc6IFwi2KfYsdiz2KfZhFwiXG4gICAgYWNjZXB0ZWQ6IFwi2YXZgtio2YjZhFwiXG4gICAgcmVqZWN0ZWQ6IFwi2YXYsdmB2YjYtlwiXG4gICAgd2l0aGRyYXduOiBcItmF2KrYudin2K/ZhFwiXG4jICAgIGFjY2VwdDogXCJBY2NlcHRcIlxuIyAgICByZWplY3Q6IFwiUmVqZWN0XCJcbiMgICAgd2l0aGRyYXc6IFwiV2l0aGRyYXdcIlxuICAgIHN1Ym1pdHRlcjogXCLYp9mE2YXZgtiv2YVcIlxuICAgIHN1Ym1pdHRlZDogXCLYqtmFINin2YTYqtmC2K/ZitmFXCJcbiAgICBjb21taXRfbXNnOiBcItit2YjZhCDYsdiz2KfZhNipXCJcbiAgICB2ZXJzaW9uX2hpc3Rvcnk6IFwi2KrYp9ix2YrYriDYp9mE2YbYs9iu2KlcIlxuICAgIHZlcnNpb25faGlzdG9yeV9mb3I6IFwi2KrYp9ix2YrYriDYp9mE2YbYs9iu2Kkg2YTZhDogXCJcbiAgICBzZWxlY3RfY2hhbmdlczogXCLYp9iu2KrYsSDYqti62YrYsdmK2YrZhi5cIlxuICAgIHVuZG9fcHJlZml4OiBcItmB2YNcIlxuICAgIHVuZG9fc2hvcnRjdXQ6IFwiKEN0cmwrWilcIlxuICAgIHJlZG9fcHJlZml4OiBcIlJlZG9cIlxuICAgIHJlZG9fc2hvcnRjdXQ6IFwiKEN0cmwrU2hpZnQrWilcIlxuICAgIHBsYXlfcHJldmlldzogXCLYtNin2YfYryDZhdmC2LfYuSDZgdmK2K/ZitmIINi52YYg2KfZhNmF2LPYqtmI2Ykg2KfZhNit2KfZhNmKXCJcbiAgICByZXN1bHQ6IFwi2YbYqtmK2KzYqVwiXG4gICAgcmVzdWx0czogXCLZhtiq2KfYptisXCJcbiAgICBkZXNjcmlwdGlvbjogXCLZiNi12YFcIlxuICAgIG9yOiBcItin2YhcIlxuICAgIHN1YmplY3Q6IFwi2YXZiNi22YjYuVwiXG4gICAgZW1haWw6IFwi2KfZhNio2LHZitivINin2YTYp9mE2YPYqtix2YjZhtmKXCJcbiAgICBwYXNzd29yZDogXCLYp9mE2LHZhdiyINin2YTYs9ix2YpcIlxuIyAgICBjb25maXJtX3Bhc3N3b3JkOiBcIkNvbmZpcm0gUGFzc3dvcmRcIlxuICAgIG1lc3NhZ2U6IFwi2LHYs9in2YTYqVwiXG4gICAgY29kZTogXCLYsdmF2LJcIlxuICAgIGxhZGRlcjogXCLYs9mE2YVcIlxuICAgIHdoZW46IFwi2YXYqtmJXCJcbiAgICBvcHBvbmVudDogXCLYp9mE2YXZgtin2KjZhFwiXG4gICAgcmFuazogXCLZhdix2KrYqNipXCJcbiAgICBzY29yZTogXCLZhtmC2KfYt1wiXG4gICAgd2luOiBcItmB2YjYslwiXG4gICAgbG9zczogXCLYrtiz2KfYsdipXCJcbiAgICB0aWU6IFwi2LHYqNi32Kkg2LnZhtmCXCJcbiAgICBlYXN5OiBcItiz2YfZhFwiXG4gICAgbWVkaXVtOiBcItmF2KrZiNiz2LdcIlxuICAgIGhhcmQ6IFwi2LXYudioXCJcbiAgICBwbGF5ZXI6IFwi2YTYp9i52KhcIlxuICAgIHBsYXllcl9sZXZlbDogXCLZhdiz2KrZiNmJXCIgIyBMaWtlIHBsYXllciBsZXZlbCA1LCBub3QgbGlrZSBsZXZlbDogRHVuZ2VvbnMgb2YgS2l0aGdhcmRcbiAgICB3YXJyaW9yOiBcItmF2K3Yp9ix2KhcIlxuICAgIHJhbmdlcjogXCLZhdmC2KfYqtmEXCJcbiAgICB3aXphcmQ6IFwi2LPYp9it2LFcIlxuIyAgICBmaXJzdF9uYW1lOiBcIkZpcnN0IE5hbWVcIlxuIyAgICBsYXN0X25hbWU6IFwiTGFzdCBOYW1lXCJcbiMgICAgbGFzdF9pbml0aWFsOiBcIkxhc3QgSW5pdGlhbFwiXG4jICAgIHVzZXJuYW1lOiBcIlVzZXJuYW1lXCJcbiMgICAgY29udGFjdF91czogXCJDb250YWN0IFVzXCJcbiMgICAgY2xvc2Vfd2luZG93OiBcIkNsb3NlIFdpbmRvd1wiXG4jICAgIGxlYXJuX21vcmU6IFwiTGVhcm4gTW9yZVwiXG4jICAgIG1vcmU6IFwiTW9yZVwiXG4jICAgIGZld2VyOiBcIkZld2VyXCJcbiMgICAgd2l0aDogXCJ3aXRoXCJcblxuICB1bml0czpcbiAgICBzZWNvbmQ6IFwi2KvYp9mG2YrZkdipXCJcbiAgICBzZWNvbmRzOiBcItir2YjYp9mG2YpcIlxuIyAgICBzZWM6IFwic2VjXCJcbiAgICBtaW51dGU6IFwi2K/ZgtmK2YLYqVwiXG4gICAgbWludXRlczogXCLYr9mC2KfYptmCXCJcbiAgICBob3VyOiBcItiz2KfYudipXCJcbiAgICBob3VyczogXCLYs9in2LnYp9iqXCJcbiAgICBkYXk6IFwi2YrZiNmFXCJcbiAgICBkYXlzOiBcItij2YrZkdin2YVcIlxuICAgIHdlZWs6IFwi2KPYs9io2YjYuVwiXG4gICAgd2Vla3M6IFwi2KPYs9in2KjZiti5XCJcbiAgICBtb250aDogXCLYtNmH2LFcIlxuICAgIG1vbnRoczogXCLYo9i02YfYsVwiXG4gICAgeWVhcjogXCLYs9mG2KlcIlxuICAgIHllYXJzOiBcItiz2YbZiNin2KpcIlxuXG4gIHBsYXlfbGV2ZWw6XG4jICAgIGJhY2tfdG9fbWFwOiBcIkJhY2sgdG8gTWFwXCJcbiMgICAgZGlyZWN0aW9uczogXCJEaXJlY3Rpb25zXCJcbiMgICAgZWRpdF9sZXZlbDogXCJFZGl0IExldmVsXCJcbiMgICAga2VlcF9sZWFybmluZzogXCJLZWVwIExlYXJuaW5nXCJcbiMgICAgZXhwbG9yZV9jb2RlY29tYmF0OiBcIkV4cGxvcmUgQ29kZUNvbWJhdFwiXG4jICAgIGZpbmlzaGVkX2hvYzogXCJJJ20gZmluaXNoZWQgd2l0aCBteSBIb3VyIG9mIENvZGVcIlxuIyAgICBnZXRfY2VydGlmaWNhdGU6IFwiR2V0IHlvdXIgY2VydGlmaWNhdGUhXCJcbiMgICAgbGV2ZWxfY29tcGxldGU6IFwiTGV2ZWwgQ29tcGxldGVcIlxuIyAgICBjb21wbGV0ZWRfbGV2ZWw6IFwiQ29tcGxldGVkIExldmVsOlwiXG4jICAgIGNvdXJzZTogXCJDb3Vyc2U6XCJcbiAgICBkb25lOiBcItin2YbYqtmH2KfYoVwiXG4jICAgIG5leHRfbGV2ZWw6IFwiTmV4dCBMZXZlbFwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZTogXCJDb21ibyBDaGFsbGVuZ2VcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZTogXCJDb25jZXB0IENoYWxsZW5nZVwiXG4jICAgIGNoYWxsZW5nZV91bmxvY2tlZDogXCJDaGFsbGVuZ2UgVW5sb2NrZWRcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfdW5sb2NrZWQ6IFwiQ29tYm8gQ2hhbGxlbmdlIFVubG9ja2VkXCJcbiMgICAgY29uY2VwdF9jaGFsbGVuZ2VfdW5sb2NrZWQ6IFwiQ29uY2VwdCBDaGFsbGVuZ2UgVW5sb2NrZWRcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZV9jb21wbGV0ZTogXCJDb25jZXB0IENoYWxsZW5nZSBDb21wbGV0ZSFcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfY29tcGxldGU6IFwiQ29tYm8gQ2hhbGxlbmdlIENvbXBsZXRlIVwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV9jb21wbGV0ZV9ib2R5OiBcIkdyZWF0IGpvYiwgaXQgbG9va3MgbGlrZSB5b3UncmUgd2VsbCBvbiB5b3VyIHdheSB0byB1bmRlcnN0YW5kaW5nIF9fY29uY2VwdF9fIVwiXG4jICAgIHJlcGxheV9sZXZlbDogXCJSZXBsYXkgTGV2ZWxcIlxuIyAgICBjb21ib19jb25jZXB0c191c2VkOiBcIl9fY29tcGxldGVfXy9fX3RvdGFsX18gQ29uY2VwdHMgVXNlZFwiXG4jICAgIGNvbWJvX2FsbF9jb25jZXB0c191c2VkOiBcIllvdSB1c2VkIGFsbCBjb25jZXB0cyBwb3NzaWJsZSB0byBzb2x2ZSB0aGUgY2hhbGxlbmdlLiBHcmVhdCBqb2IhXCJcbiMgICAgY29tYm9fbm90X2FsbF9jb25jZXB0c191c2VkOiBcIllvdSB1c2VkIF9fY29tcGxldGVfXyBvdXQgb2YgdGhlIF9fdG90YWxfXyBjb25jZXB0cyBwb3NzaWJsZSB0byBzb2x2ZSB0aGUgY2hhbGxlbmdlLiBUcnkgdG8gZ2V0IGFsbCBfX3RvdGFsX18gY29uY2VwdHMgbmV4dCB0aW1lIVwiXG4jICAgIHN0YXJ0X2NoYWxsZW5nZTogXCJTdGFydCBDaGFsbGVuZ2VcIlxuIyAgICBuZXh0X2dhbWU6IFwiTmV4dCBnYW1lXCJcbiMgICAgbGFuZ3VhZ2VzOiBcIkxhbmd1YWdlc1wiXG4jICAgIHByb2dyYW1taW5nX2xhbmd1YWdlOiBcIlByb2dyYW1taW5nIGxhbmd1YWdlXCJcbiMgICAgc2hvd19tZW51OiBcIlNob3cgZ2FtZSBtZW51XCJcbiAgICBob21lOiBcIkhvbWVcIiAjIE5vdCB1c2VkIGFueSBtb3JlLCB3aWxsIGJlIHJlbW92ZWQgc29vbi5cbiAgICBsZXZlbDogXCLZhdiz2KrZiNmJXCIgIyBMaWtlIFwiTGV2ZWw6IER1bmdlb25zIG9mIEtpdGhnYXJkXCJcbiAgICBza2lwOiBcItin2YTYutin2KFcIlxuICAgIGdhbWVfbWVudTogXCLZgtin2KbZhdipINin2YTZhNi52KjYqVwiXG4gICAgcmVzdGFydDogXCLYp9i52KfYr9ipINin2YTYqti02LrZitmEXCJcbiAgICBnb2FsczogXCLYp9mE2KfZh9iv2KfZgVwiXG4gICAgZ29hbDogXCLZh9iv2YFcIlxuIyAgICBjaGFsbGVuZ2VfbGV2ZWxfZ29hbHM6IFwiQ2hhbGxlbmdlIExldmVsIEdvYWxzXCJcbiMgICAgY2hhbGxlbmdlX2xldmVsX2dvYWw6IFwiQ2hhbGxlbmdlIExldmVsIEdvYWxcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZV9nb2FsczogXCJDb25jZXB0IENoYWxsZW5nZSBHb2Fsc1wiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV9nb2FsczogXCJDaGFsbGVuZ2UgTGV2ZWwgR29hbHNcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZV9nb2FsOiBcIkNvbmNlcHQgQ2hhbGxlbmdlIEdvYWxcIlxuIyAgICBjb21ib19jaGFsbGVuZ2VfZ29hbDogXCJDaGFsbGVuZ2UgTGV2ZWwgR29hbFwiXG4gICAgcnVubmluZzogXCLYrNin2LHZiiDYp9mE2KrYtNi62YrZhC4uLlwiXG4gICAgc3VjY2VzczogXCLZhtis2KfYrSFcIlxuICAgIGluY29tcGxldGU6IFwi2LrZitixINmF2YPYqtmF2YRcIlxuICAgIHRpbWVkX291dDogXCLYqtmFINin2YbYqtmH2KfYoSDYp9mE2YjZgtiqXCJcbiAgICBmYWlsaW5nOiBcItmB2LTZhFwiXG4gICAgcmVsb2FkOiBcItiq2K3Yr9mK2KtcIlxuICAgIHJlbG9hZF90aXRsZTogXCLYqtit2K/ZitirINin2YTYtdmB2K3YqSDZg9mEINix2YXYstifXCJcbiAgICByZWxvYWRfcmVhbGx5OiBcItmH2YQg2KPZhtiqINmF2KrYo9mD2K8g2KPZhtmDINiq2LHZitivINiq2K3ZhdmK2YQg2YfYsNinINin2YTZhdiz2KrZiNmJINmF2LHYqSDYo9iu2LHZiSDYpdmE2Ykg2KfZhNio2K/Yp9mK2KnYn1wiXG4gICAgcmVsb2FkX2NvbmZpcm06IFwi2KrYrdiv2YrYqyDYrNmF2YrYuVwiXG4jICAgIHRlc3RfbGV2ZWw6IFwiVGVzdCBMZXZlbFwiXG4gICAgdmljdG9yeTogXCLZgdmI2LJcIlxuICAgIHZpY3RvcnlfdGl0bGVfcHJlZml4OiBcIlwiXG4gICAgdmljdG9yeV90aXRsZV9zdWZmaXg6IFwiINmD2KfZhdmEXCJcbiAgICB2aWN0b3J5X3NpZ25fdXA6IFwi2KfYtNiq2LHZgyDZhNil2YbZgtin2LAg2KfZhNiq2YLYr9mFXCJcbiAgICB2aWN0b3J5X3NpZ25fdXBfcG9rZTogXCLYqtix2YrYryDYrdmB2Lgg2KfZhNiq2LnZhNmK2YXYp9iqINin2YTYqNix2YXYrNmK2Kkg2KfZhNiu2KfYtdipINio2YPYnyDYpdmG2LTYp9ihINit2LPYp9ioINmF2KzYp9mG2YohXCJcbiAgICB2aWN0b3J5X3JhdGVfdGhlX2xldmVsOiBcItmF2LnYr9mEINin2YTZhdiz2KrZiNmJOiBcIiAjIHtjaGFuZ2V9XG4gICAgdmljdG9yeV9yZXR1cm5fdG9fbGFkZGVyOiBcItin2YTYudmI2K/YqSDYpdmE2Ykg2LPZhNmFXCJcbiAgICB2aWN0b3J5X3NhdmluZ19wcm9ncmVzczogXCLYqtmI2YHZitixINin2YTYqtmC2K/ZhVwiXG4gICAgdmljdG9yeV9nb19ob21lOiBcItin2LDZh9ioINmE2YTZhdmG2LLZhFwiXG4gICAgdmljdG9yeV9yZXZpZXc6IFwi2KXYrtio2LHZhtinINin2YTZhdiy2YrYryFcIlxuIyAgICB2aWN0b3J5X3Jldmlld19wbGFjZWhvbGRlcjogXCJIb3cgd2FzIHRoZSBsZXZlbD9cIlxuIyAgICB2aWN0b3J5X2hvdXJfb2ZfY29kZV9kb25lOiBcIkFyZSBZb3UgRG9uZT9cIlxuICAgIHZpY3RvcnlfaG91cl9vZl9jb2RlX2RvbmVfeWVzOiBcItmG2LnZhdiMINij2YbYpyDZhdi5INin2YTYp9mG2KrZh9in2KEg2YXZhiDYs9in2LnYqtmKINmF2YYg2YLYp9mG2YjZhiDihKIhXCJcbiMgICAgdmljdG9yeV9leHBlcmllbmNlX2dhaW5lZDogXCJYUCBHYWluZWRcIlxuICAgIHZpY3RvcnlfZ2Vtc19nYWluZWQ6IFwi2KfZhNij2K3YrNin2LEg2KfZhNmD2LHZitmF2Kkg2KfZhNmF2YPYqtiz2KjYqVwiXG4gICAgdmljdG9yeV9uZXdfaXRlbTogXCLYudmG2LXYsSDYrNiv2YrYr1wiXG4jICAgIHZpY3RvcnlfbmV3X2hlcm86IFwiTmV3IEhlcm9cIlxuICAgIHZpY3RvcnlfdmlraW5nX2NvZGVfc2Nob29sOiBcItmK2K/YrtmGINin2YTZhdmC2K/Ys9ip2Iwg2YjZg9in2YYg2LDZhNmDINi52YTZiSDZhdiz2KrZiNmJINin2YTYq9in2KjYqiDYp9mE2LDZiiDZgdin2LIg2YHZgti3ISDYpdiw2Kcg2YTZhSDYqtmD2YYg2KjYp9mE2YHYudmEINmF2LfZiNixINio2LHYp9mF2KzYjCDZitis2Kgg2KPZhiDYqtmD2YjZhi4g2YPZhtiqINmB2YLYtyDYrdi12YTYqiDYudmE2Ykg2KfZhNmF2LPYp9ixINin2YTYs9ix2YrYuSDZhNmC2KjZiNmE2Ycg2YXYuSDZhdiv2LHYs9ipINmB2KfZitmD2YbYuiDYp9mE2YXYr9mI2YbYqdiMINit2YrYqyDZitmF2YPZhtmDINij2YYg2KrYo9iu2LAg2KfZhNmF2YfYp9ix2KfYqiDYp9mE2K7Yp9i12Kkg2KjZgyDYpdmE2Ykg2KfZhNmF2LPYqtmI2Ykg2KfZhNiq2KfZhNmKINmI2KrYtdio2K0g2YXYt9mI2LEg2YjZitioINmF2K3Yqtix2YEg2YHZiiAxNCDYo9iz2KjZiNi52KcuXCJcbiAgICB2aWN0b3J5X2JlY29tZV9hX3Zpa2luZzogXCLYqti12KjYrSDZgdin2YrZg9mG2LpcIlxuIyAgICB2aWN0b3J5X25vX3Byb2dyZXNzX2Zvcl90ZWFjaGVyczogXCJQcm9ncmVzcyBpcyBub3Qgc2F2ZWQgZm9yIHRlYWNoZXJzLiBCdXQsIHlvdSBjYW4gYWRkIGEgc3R1ZGVudCBhY2NvdW50IHRvIHlvdXIgY2xhc3Nyb29tIGZvciB5b3Vyc2VsZi5cIlxuICAgIHRvbWVfY2FzdF9idXR0b25fcnVuOiBcIlJ1blwiXG4gICAgdG9tZV9jYXN0X2J1dHRvbl9ydW5uaW5nOiBcItiq2LTYutmK2YRcIlxuICAgIHRvbWVfY2FzdF9idXR0b25fcmFuOiBcItix2KfZhlwiXG4jICAgIHRvbWVfc3VibWl0X2J1dHRvbjogXCJTdWJtaXRcIlxuIyAgICB0b21lX3JlbG9hZF9tZXRob2Q6IFwiUmVsb2FkIG9yaWdpbmFsIGNvZGUgdG8gcmVzdGFydCB0aGUgbGV2ZWxcIlxuIyAgICB0b21lX2F2YWlsYWJsZV9zcGVsbHM6IFwiQXZhaWxhYmxlIFNwZWxsc1wiXG4jICAgIHRvbWVfeW91cl9za2lsbHM6IFwiWW91ciBTa2lsbHNcIlxuIyAgICBoaW50czogXCJIaW50c1wiXG4jICAgIGhpbnRzX3RpdGxlOiBcIkhpbnQge3tudW1iZXJ9fVwiXG4jICAgIGNvZGVfc2F2ZWQ6IFwiQ29kZSBTYXZlZFwiXG4jICAgIHNraXBfdHV0b3JpYWw6IFwiU2tpcCAoZXNjKVwiXG4jICAgIGtleWJvYXJkX3Nob3J0Y3V0czogXCJLZXkgU2hvcnRjdXRzXCJcbiMgICAgbG9hZGluZ19zdGFydDogXCJTdGFydCBMZXZlbFwiXG4jICAgIGxvYWRpbmdfc3RhcnRfY29tYm86IFwiU3RhcnQgQ29tYm8gQ2hhbGxlbmdlXCJcbiMgICAgbG9hZGluZ19zdGFydF9jb25jZXB0OiBcIlN0YXJ0IENvbmNlcHQgQ2hhbGxlbmdlXCJcbiMgICAgcHJvYmxlbV9hbGVydF90aXRsZTogXCJGaXggWW91ciBDb2RlXCJcbiMgICAgdGltZV9jdXJyZW50OiBcIk5vdzpcIlxuIyAgICB0aW1lX3RvdGFsOiBcIk1heDpcIlxuIyAgICB0aW1lX2dvdG86IFwiR28gdG86XCJcbiMgICAgbm9uX3VzZXJfY29kZV9wcm9ibGVtX3RpdGxlOiBcIlVuYWJsZSB0byBMb2FkIExldmVsXCJcbiMgICAgaW5maW5pdGVfbG9vcF90aXRsZTogXCJJbmZpbml0ZSBMb29wIERldGVjdGVkXCJcbiMgICAgaW5maW5pdGVfbG9vcF9kZXNjcmlwdGlvbjogXCJUaGUgaW5pdGlhbCBjb2RlIHRvIGJ1aWxkIHRoZSB3b3JsZCBuZXZlciBmaW5pc2hlZCBydW5uaW5nLiBJdCdzIHByb2JhYmx5IGVpdGhlciByZWFsbHkgc2xvdyBvciBoYXMgYW4gaW5maW5pdGUgbG9vcC4gT3IgdGhlcmUgbWlnaHQgYmUgYSBidWcuIFlvdSBjYW4gZWl0aGVyIHRyeSBydW5uaW5nIHRoaXMgY29kZSBhZ2FpbiBvciByZXNldCB0aGUgY29kZSB0byB0aGUgZGVmYXVsdCBzdGF0ZS4gSWYgdGhhdCBkb2Vzbid0IGZpeCBpdCwgcGxlYXNlIGxldCB1cyBrbm93LlwiXG4jICAgIGNoZWNrX2Rldl9jb25zb2xlOiBcIllvdSBjYW4gYWxzbyBvcGVuIHRoZSBkZXZlbG9wZXIgY29uc29sZSB0byBzZWUgd2hhdCBtaWdodCBiZSBnb2luZyB3cm9uZy5cIlxuIyAgICBjaGVja19kZXZfY29uc29sZV9saW5rOiBcIihpbnN0cnVjdGlvbnMpXCJcbiMgICAgaW5maW5pdGVfbG9vcF90cnlfYWdhaW46IFwiVHJ5IEFnYWluXCJcbiMgICAgaW5maW5pdGVfbG9vcF9yZXNldF9sZXZlbDogXCJSZXNldCBMZXZlbFwiXG4jICAgIGluZmluaXRlX2xvb3BfY29tbWVudF9vdXQ6IFwiQ29tbWVudCBPdXQgTXkgQ29kZVwiXG4jICAgIHRpcF90b2dnbGVfcGxheTogXCJUb2dnbGUgcGxheS9wYXVzZWQgd2l0aCBDdHJsK1AuXCJcbiMgICAgdGlwX3NjcnViX3Nob3J0Y3V0OiBcIlVzZSBDdHJsK1sgYW5kIEN0cmwrXSB0byByZXdpbmQgYW5kIGZhc3QtZm9yd2FyZC5cIlxuIyAgICB0aXBfZ3VpZGVfZXhpc3RzOiBcIkNsaWNrIHRoZSBndWlkZSwgaW5zaWRlIGdhbWUgbWVudSAoYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSksIGZvciB1c2VmdWwgaW5mby5cIlxuIyAgICB0aXBfb3Blbl9zb3VyY2U6IFwiQ29kZUNvbWJhdCBpcyAxMDAlIG9wZW4gc291cmNlIVwiXG4jICAgIHRpcF90ZWxsX2ZyaWVuZHM6IFwiRW5qb3lpbmcgQ29kZUNvbWJhdD8gVGVsbCB5b3VyIGZyaWVuZHMgYWJvdXQgdXMhXCJcbiMgICAgdGlwX2JldGFfbGF1bmNoOiBcIkNvZGVDb21iYXQgbGF1bmNoZWQgaXRzIGJldGEgaW4gT2N0b2JlciwgMjAxMy5cIlxuIyAgICB0aXBfdGhpbmtfc29sdXRpb246IFwiVGhpbmsgb2YgdGhlIHNvbHV0aW9uLCBub3QgdGhlIHByb2JsZW0uXCJcbiMgICAgdGlwX3RoZW9yeV9wcmFjdGljZTogXCJJbiB0aGVvcnksIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVvcnkgYW5kIHByYWN0aWNlLiBCdXQgaW4gcHJhY3RpY2UsIHRoZXJlIGlzLiAtIFlvZ2kgQmVycmFcIlxuIyAgICB0aXBfZXJyb3JfZnJlZTogXCJUaGVyZSBhcmUgdHdvIHdheXMgdG8gd3JpdGUgZXJyb3ItZnJlZSBwcm9ncmFtczsgb25seSB0aGUgdGhpcmQgb25lIHdvcmtzLiAtIEFsYW4gUGVybGlzXCJcbiMgICAgdGlwX2RlYnVnZ2luZ19wcm9ncmFtOiBcIklmIGRlYnVnZ2luZyBpcyB0aGUgcHJvY2VzcyBvZiByZW1vdmluZyBidWdzLCB0aGVuIHByb2dyYW1taW5nIG11c3QgYmUgdGhlIHByb2Nlc3Mgb2YgcHV0dGluZyB0aGVtIGluLiAtIEVkc2dlciBXLiBEaWprc3RyYVwiXG4jICAgIHRpcF9mb3J1bXM6IFwiSGVhZCBvdmVyIHRvIHRoZSBmb3J1bXMgYW5kIHRlbGwgdXMgd2hhdCB5b3UgdGhpbmshXCJcbiMgICAgdGlwX2JhYnlfY29kZXJzOiBcIkluIHRoZSBmdXR1cmUsIGV2ZW4gYmFiaWVzIHdpbGwgYmUgQXJjaG1hZ2VzLlwiXG4jICAgIHRpcF9tb3JhbGVfaW1wcm92ZXM6IFwiTG9hZGluZyB3aWxsIGNvbnRpbnVlIHVudGlsIG1vcmFsZSBpbXByb3Zlcy5cIlxuIyAgICB0aXBfYWxsX3NwZWNpZXM6IFwiV2UgYmVsaWV2ZSBpbiBlcXVhbCBvcHBvcnR1bml0aWVzIHRvIGxlYXJuIHByb2dyYW1taW5nIGZvciBhbGwgc3BlY2llcy5cIlxuIyAgICB0aXBfcmV0aWN1bGF0aW5nOiBcIlJldGljdWxhdGluZyBzcGluZXMuXCJcbiMgICAgdGlwX2hhcnJ5OiBcIlllciBhIFdpemFyZCwgXCJcbiMgICAgdGlwX2dyZWF0X3Jlc3BvbnNpYmlsaXR5OiBcIldpdGggZ3JlYXQgY29kaW5nIHNraWxsIGNvbWVzIGdyZWF0IGRlYnVnIHJlc3BvbnNpYmlsaXR5LlwiXG4jICAgIHRpcF9tdW5jaGtpbjogXCJJZiB5b3UgZG9uJ3QgZWF0IHlvdXIgdmVnZXRhYmxlcywgYSBtdW5jaGtpbiB3aWxsIGNvbWUgYWZ0ZXIgeW91IHdoaWxlIHlvdSdyZSBhc2xlZXAuXCJcbiMgICAgdGlwX2JpbmFyeTogXCJUaGVyZSBhcmUgb25seSAxMCB0eXBlcyBvZiBwZW9wbGUgaW4gdGhlIHdvcmxkOiB0aG9zZSB3aG8gdW5kZXJzdGFuZCBiaW5hcnksIGFuZCB0aG9zZSB3aG8gZG9uJ3QuXCJcbiMgICAgdGlwX2NvbW1pdG1lbnRfeW9kYTogXCJBIHByb2dyYW1tZXIgbXVzdCBoYXZlIHRoZSBkZWVwZXN0IGNvbW1pdG1lbnQsIHRoZSBtb3N0IHNlcmlvdXMgbWluZC4gfiBZb2RhXCJcbiMgICAgdGlwX25vX3RyeTogXCJEby4gT3IgZG8gbm90LiBUaGVyZSBpcyBubyB0cnkuIC0gWW9kYVwiXG4jICAgIHRpcF9wYXRpZW5jZTogXCJQYXRpZW5jZSB5b3UgbXVzdCBoYXZlLCB5b3VuZyBQYWRhd2FuLiAtIFlvZGFcIlxuIyAgICB0aXBfZG9jdW1lbnRlZF9idWc6IFwiQSBkb2N1bWVudGVkIGJ1ZyBpcyBub3QgYSBidWc7IGl0IGlzIGEgZmVhdHVyZS5cIlxuIyAgICB0aXBfaW1wb3NzaWJsZTogXCJJdCBhbHdheXMgc2VlbXMgaW1wb3NzaWJsZSB1bnRpbCBpdCdzIGRvbmUuIC0gTmVsc29uIE1hbmRlbGFcIlxuIyAgICB0aXBfdGFsa19pc19jaGVhcDogXCJUYWxrIGlzIGNoZWFwLiBTaG93IG1lIHRoZSBjb2RlLiAtIExpbnVzIFRvcnZhbGRzXCJcbiMgICAgdGlwX2ZpcnN0X2xhbmd1YWdlOiBcIlRoZSBtb3N0IGRpc2FzdHJvdXMgdGhpbmcgdGhhdCB5b3UgY2FuIGV2ZXIgbGVhcm4gaXMgeW91ciBmaXJzdCBwcm9ncmFtbWluZyBsYW5ndWFnZS4gLSBBbGFuIEtheVwiXG4jICAgIHRpcF9oYXJkd2FyZV9wcm9ibGVtOiBcIlE6IEhvdyBtYW55IHByb2dyYW1tZXJzIGRvZXMgaXQgdGFrZSB0byBjaGFuZ2UgYSBsaWdodCBidWxiPyAgQTogTm9uZSwgaXQncyBhIGhhcmR3YXJlIHByb2JsZW0uXCJcbiMgICAgdGlwX2hvZnN0YWR0ZXJzX2xhdzogXCJIb2ZzdGFkdGVyJ3MgTGF3OiBJdCBhbHdheXMgdGFrZXMgbG9uZ2VyIHRoYW4geW91IGV4cGVjdCwgZXZlbiB3aGVuIHlvdSB0YWtlIGludG8gYWNjb3VudCBIb2ZzdGFkdGVyJ3MgTGF3LlwiXG4jICAgIHRpcF9wcmVtYXR1cmVfb3B0aW1pemF0aW9uOiBcIlByZW1hdHVyZSBvcHRpbWl6YXRpb24gaXMgdGhlIHJvb3Qgb2YgYWxsIGV2aWwuIC0gRG9uYWxkIEtudXRoXCJcbiMgICAgdGlwX2JydXRlX2ZvcmNlOiBcIldoZW4gaW4gZG91YnQsIHVzZSBicnV0ZSBmb3JjZS4gLSBLZW4gVGhvbXBzb25cIlxuIyAgICB0aXBfZXh0cmFwb2xhdGlvbjogXCJUaGVyZSBhcmUgb25seSB0d28ga2luZHMgb2YgcGVvcGxlOiB0aG9zZSB0aGF0IGNhbiBleHRyYXBvbGF0ZSBmcm9tIGluY29tcGxldGUgZGF0YS4uLlwiXG4jICAgIHRpcF9zdXBlcnBvd2VyOiBcIkNvZGluZyBpcyB0aGUgY2xvc2VzdCB0aGluZyB3ZSBoYXZlIHRvIGEgc3VwZXJwb3dlci5cIlxuIyAgICB0aXBfY29udHJvbF9kZXN0aW55OiBcIkluIHJlYWwgb3BlbiBzb3VyY2UsIHlvdSBoYXZlIHRoZSByaWdodCB0byBjb250cm9sIHlvdXIgb3duIGRlc3RpbnkuIC0gTGludXMgVG9ydmFsZHNcIlxuIyAgICB0aXBfbm9fY29kZTogXCJObyBjb2RlIGlzIGZhc3RlciB0aGFuIG5vIGNvZGUuXCJcbiMgICAgdGlwX2NvZGVfbmV2ZXJfbGllczogXCJDb2RlIG5ldmVyIGxpZXMsIGNvbW1lbnRzIHNvbWV0aW1lcyBkby4g4oCUIFJvbiBKZWZmcmllc1wiXG4jICAgIHRpcF9yZXVzYWJsZV9zb2Z0d2FyZTogXCJCZWZvcmUgc29mdHdhcmUgY2FuIGJlIHJldXNhYmxlIGl0IGZpcnN0IGhhcyB0byBiZSB1c2FibGUuXCJcbiMgICAgdGlwX29wdGltaXphdGlvbl9vcGVyYXRvcjogXCJFdmVyeSBsYW5ndWFnZSBoYXMgYW4gb3B0aW1pemF0aW9uIG9wZXJhdG9yLiBJbiBtb3N0IGxhbmd1YWdlcyB0aGF0IG9wZXJhdG9yIGlzIOKAmC8v4oCZXCJcbiMgICAgdGlwX2xpbmVzX29mX2NvZGU6IFwiTWVhc3VyaW5nIHByb2dyYW1taW5nIHByb2dyZXNzIGJ5IGxpbmVzIG9mIGNvZGUgaXMgbGlrZSBtZWFzdXJpbmcgYWlyY3JhZnQgYnVpbGRpbmcgcHJvZ3Jlc3MgYnkgd2VpZ2h0LiDigJQgQmlsbCBHYXRlc1wiXG4jICAgIHRpcF9zb3VyY2VfY29kZTogXCJJIHdhbnQgdG8gY2hhbmdlIHRoZSB3b3JsZCBidXQgdGhleSB3b3VsZCBub3QgZ2l2ZSBtZSB0aGUgc291cmNlIGNvZGUuXCJcbiMgICAgdGlwX2phdmFzY3JpcHRfamF2YTogXCJKYXZhIGlzIHRvIEphdmFTY3JpcHQgd2hhdCBDYXIgaXMgdG8gQ2FycGV0LiAtIENocmlzIEhlaWxtYW5uXCJcbiMgICAgdGlwX21vdmVfZm9yd2FyZDogXCJXaGF0ZXZlciB5b3UgZG8sIGtlZXAgbW92aW5nIGZvcndhcmQuIC0gTWFydGluIEx1dGhlciBLaW5nIEpyLlwiXG4jICAgIHRpcF9nb29nbGU6IFwiSGF2ZSBhIHByb2JsZW0geW91IGNhbid0IHNvbHZlPyBHb29nbGUgaXQhXCJcbiMgICAgdGlwX2FkZGluZ19ldmlsOiBcIkFkZGluZyBhIHBpbmNoIG9mIGV2aWwuXCJcbiMgICAgdGlwX2hhdGVfY29tcHV0ZXJzOiBcIlRoYXQncyB0aGUgdGhpbmcgYWJvdXQgcGVvcGxlIHdobyB0aGluayB0aGV5IGhhdGUgY29tcHV0ZXJzLiBXaGF0IHRoZXkgcmVhbGx5IGhhdGUgaXMgbG91c3kgcHJvZ3JhbW1lcnMuIC0gTGFycnkgTml2ZW5cIlxuIyAgICB0aXBfb3Blbl9zb3VyY2VfY29udHJpYnV0ZTogXCJZb3UgY2FuIGhlbHAgQ29kZUNvbWJhdCBpbXByb3ZlIVwiXG4jICAgIHRpcF9yZWN1cnNlOiBcIlRvIGl0ZXJhdGUgaXMgaHVtYW4sIHRvIHJlY3Vyc2UgZGl2aW5lLiAtIEwuIFBldGVyIERldXRzY2hcIlxuIyAgICB0aXBfZnJlZV95b3VyX21pbmQ6IFwiWW91IGhhdmUgdG8gbGV0IGl0IGFsbCBnbywgTmVvLiBGZWFyLCBkb3VidCwgYW5kIGRpc2JlbGllZi4gRnJlZSB5b3VyIG1pbmQuIC0gTW9ycGhldXNcIlxuIyAgICB0aXBfc3Ryb25nX29wcG9uZW50czogXCJFdmVuIHRoZSBzdHJvbmdlc3Qgb2Ygb3Bwb25lbnRzIGFsd2F5cyBoYXMgYSB3ZWFrbmVzcy4gLSBJdGFjaGkgVWNoaWhhXCJcbiMgICAgdGlwX3BhcGVyX2FuZF9wZW46IFwiQmVmb3JlIHlvdSBzdGFydCBjb2RpbmcsIHlvdSBjYW4gYWx3YXlzIHBsYW4gd2l0aCBhIHNoZWV0IG9mIHBhcGVyIGFuZCBhIHBlbi5cIlxuIyAgICB0aXBfc29sdmVfdGhlbl93cml0ZTogXCJGaXJzdCwgc29sdmUgdGhlIHByb2JsZW0uIFRoZW4sIHdyaXRlIHRoZSBjb2RlLiAtIEpvaG4gSm9obnNvblwiXG4jICAgIHRpcF9jb21waWxlcl9pZ25vcmVzX2NvbW1lbnRzOiBcIlNvbWV0aW1lcyBJIHRoaW5rIHRoYXQgdGhlIGNvbXBpbGVyIGlnbm9yZXMgbXkgY29tbWVudHMuXCJcbiMgICAgdGlwX3VuZGVyc3RhbmRfcmVjdXJzaW9uOiBcIlRoZSBvbmx5IHdheSB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbiBpcyB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbi5cIlxuIyAgICB0aXBfbGlmZV9hbmRfcG9seW1vcnBoaXNtOiBcIk9wZW4gU291cmNlIGlzIGxpa2UgYSB0b3RhbGx5IHBvbHltb3JwaGljIGhldGVyb2dlbmVvdXMgc3RydWN0dXJlOiBBbGwgdHlwZXMgYXJlIHdlbGNvbWUuXCJcbiMgICAgdGlwX21pc3Rha2VzX3Byb29mX29mX3RyeWluZzogXCJNaXN0YWtlcyBpbiB5b3VyIGNvZGUgYXJlIGp1c3QgcHJvb2YgdGhhdCB5b3UgYXJlIHRyeWluZy5cIlxuIyAgICB0aXBfYWRkaW5nX29yZ3JlczogXCJSb3VuZGluZyB1cCBvZ3Jlcy5cIlxuIyAgICB0aXBfc2hhcnBlbmluZ19zd29yZHM6IFwiU2hhcnBlbmluZyB0aGUgc3dvcmRzLlwiXG4jICAgIHRpcF9yYXRhdG91aWxsZTogXCJZb3UgbXVzdCBub3QgbGV0IGFueW9uZSBkZWZpbmUgeW91ciBsaW1pdHMgYmVjYXVzZSBvZiB3aGVyZSB5b3UgY29tZSBmcm9tLiBZb3VyIG9ubHkgbGltaXQgaXMgeW91ciBzb3VsLiAtIEd1c3RlYXUsIFJhdGF0b3VpbGxlXCJcbiMgICAgdGlwX25lbW86IFwiV2hlbiBsaWZlIGdldHMgeW91IGRvd24sIHdhbnQgdG8ga25vdyB3aGF0IHlvdSd2ZSBnb3R0YSBkbz8gSnVzdCBrZWVwIHN3aW1taW5nLCBqdXN0IGtlZXAgc3dpbW1pbmcuIC0gRG9yeSwgRmluZGluZyBOZW1vXCJcbiMgICAgdGlwX2ludGVybmV0X3dlYXRoZXI6IFwiSnVzdCBtb3ZlIHRvIHRoZSBpbnRlcm5ldCwgaXQncyBncmVhdCBoZXJlLiBXZSBnZXQgdG8gbGl2ZSBpbnNpZGUgd2hlcmUgdGhlIHdlYXRoZXIgaXMgYWx3YXlzIGF3ZXNvbWUuIC0gSm9obiBHcmVlblwiXG4jICAgIHRpcF9uZXJkczogXCJOZXJkcyBhcmUgYWxsb3dlZCB0byBsb3ZlIHN0dWZmLCBsaWtlIGp1bXAtdXAtYW5kLWRvd24taW4tdGhlLWNoYWlyLWNhbid0LWNvbnRyb2wteW91cnNlbGYgbG92ZSBpdC4gLSBKb2huIEdyZWVuXCJcbiMgICAgdGlwX3NlbGZfdGF1Z2h0OiBcIkkgdGF1Z2h0IG15c2VsZiA5MCUgb2Ygd2hhdCBJJ3ZlIGxlYXJuZWQuIEFuZCB0aGF0J3Mgbm9ybWFsISAtIEhhbmsgR3JlZW5cIlxuIyAgICB0aXBfbHVuYV9sb3ZlZ29vZDogXCJEb24ndCB3b3JyeSwgeW91J3JlIGp1c3QgYXMgc2FuZSBhcyBJIGFtLiAtIEx1bmEgTG92ZWdvb2RcIlxuIyAgICB0aXBfZ29vZF9pZGVhOiBcIlRoZSBiZXN0IHdheSB0byBoYXZlIGEgZ29vZCBpZGVhIGlzIHRvIGhhdmUgYSBsb3Qgb2YgaWRlYXMuIC0gTGludXMgUGF1bGluZ1wiXG4jICAgIHRpcF9wcm9ncmFtbWluZ19ub3RfYWJvdXRfY29tcHV0ZXJzOiBcIkNvbXB1dGVyIFNjaWVuY2UgaXMgbm8gbW9yZSBhYm91dCBjb21wdXRlcnMgdGhhbiBhc3Ryb25vbXkgaXMgYWJvdXQgdGVsZXNjb3Blcy4gLSBFZHNnZXIgRGlqa3N0cmFcIlxuIyAgICB0aXBfbXVsYW46IFwiQmVsaWV2ZSB5b3UgY2FuLCB0aGVuIHlvdSB3aWxsLiAtIE11bGFuXCJcbiMgICAgcHJvamVjdF9jb21wbGV0ZTogXCJQcm9qZWN0IENvbXBsZXRlIVwiXG4jICAgIHNoYXJlX3RoaXNfcHJvamVjdDogXCJTaGFyZSB0aGlzIHByb2plY3Qgd2l0aCBmcmllbmRzIG9yIGZhbWlseTpcIlxuIyAgICByZWFkeV90b19zaGFyZTogXCJSZWFkeSB0byBwdWJsaXNoIHlvdXIgcHJvamVjdD9cIlxuIyAgICBjbGlja19wdWJsaXNoOiBcIkNsaWNrIFxcXCJQdWJsaXNoXFxcIiB0byBtYWtlIGl0IGFwcGVhciBpbiB0aGUgY2xhc3MgZ2FsbGVyeSwgdGhlbiBjaGVjayBvdXQgd2hhdCB5b3VyIGNsYXNzbWF0ZXMgYnVpbHQhIFlvdSBjYW4gY29tZSBiYWNrIGFuZCBjb250aW51ZSB0byB3b3JrIG9uIHRoaXMgcHJvamVjdC4gQW55IGZ1cnRoZXIgY2hhbmdlcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2F2ZWQgYW5kIHNoYXJlZCB3aXRoIHlvdXIgY2xhc3NtYXRlcy5cIlxuIyAgICBhbHJlYWR5X3B1Ymxpc2hlZF9wcmVmaXg6IFwiWW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBwdWJsaXNoZWQgdG8gdGhlIGNsYXNzIGdhbGxlcnkuXCJcbiMgICAgYWxyZWFkeV9wdWJsaXNoZWRfc3VmZml4OiBcIktlZXAgZXhwZXJpbWVudGluZyBhbmQgbWFraW5nIHRoaXMgcHJvamVjdCBldmVuIGJldHRlciwgb3Igc2VlIHdoYXQgdGhlIHJlc3Qgb2YgeW91ciBjbGFzcyBoYXMgYnVpbHQhIFlvdXIgY2hhbmdlcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2F2ZWQgYW5kIHNoYXJlZCB3aXRoIHlvdXIgY2xhc3NtYXRlcy5cIlxuIyAgICB2aWV3X2dhbGxlcnk6IFwiVmlldyBHYWxsZXJ5XCJcbiMgICAgcHJvamVjdF9wdWJsaXNoZWRfbm90eTogXCJZb3VyIGxldmVsIGhhcyBiZWVuIHB1Ymxpc2hlZCFcIlxuIyAgICBrZWVwX2VkaXRpbmc6IFwiS2VlcCBFZGl0aW5nXCJcblxuIyAgYXBpczpcbiMgICAgbWV0aG9kczogXCJNZXRob2RzXCJcbiMgICAgZXZlbnRzOiBcIkV2ZW50c1wiXG4jICAgIHNwYXduYWJsZTogXCJTcGF3bmFibGVcIlxuIyAgICBodG1sOiBcIkhUTUxcIlxuIyAgICBtYXRoOiBcIk1hdGhcIlxuIyAgICBhcnJheTogXCJBcnJheVwiXG4jICAgIG9iamVjdDogXCJPYmplY3RcIlxuIyAgICBzdHJpbmc6IFwiU3RyaW5nXCJcbiMgICAgZnVuY3Rpb246IFwiRnVuY3Rpb25cIlxuIyAgICB2ZWN0b3I6IFwiVmVjdG9yXCJcbiMgICAgZGF0ZTogXCJEYXRlXCJcbiMgICAganF1ZXJ5OiBcImpRdWVyeVwiXG4jICAgIGpzb246IFwiSlNPTlwiXG4jICAgIG51bWJlcjogXCJOdW1iZXJcIlxuIyAgICB3ZWJqYXZhc2NyaXB0OiBcIkphdmFTY3JpcHRcIlxuXG4jICBhbWF6b25faG9jOlxuIyAgICB0aXRsZTogXCJLZWVwIExlYXJuaW5nIHdpdGggQW1hem9uIVwiXG4jICAgIGNvbmdyYXRzOiBcIkNvbmdyYXR1bGF0aW9ucyBvbiBjb25xdWVyaW5nIHRoYXQgY2hhbGxlbmdpbmcgSG91ciBvZiBDb2RlIVwiXG4jICAgIGVkdWNhdGVfMTogXCJOb3csIGtlZXAgbGVhcm5pbmcgYWJvdXQgY29kaW5nIGFuZCBjbG91ZCBjb21wdXRpbmcgd2l0aCBBV1MgRWR1Y2F0ZSwgYW4gZXhjaXRpbmcsIGZyZWUgcHJvZ3JhbSBmcm9tIEFtYXpvbiBmb3IgYm90aCBzdHVkZW50cyBhbmQgdGVhY2hlcnMuIFdpdGggQVdTIEVkdWNhdGUsIHlvdSBjYW4gZWFybiBjb29sIGJhZGdlcyBhcyB5b3UgbGVhcm4gYWJvdXQgdGhlIGJhc2ljcyBvZiB0aGUgY2xvdWQgYW5kIGN1dHRpbmctZWRnZSB0ZWNobm9sb2dpZXMgc3VjaCBhcyBnYW1pbmcsIHZpcnR1YWwgcmVhbGl0eSwgYW5kIEFsZXhhLlwiXG4jICAgIGVkdWNhdGVfMjogXCJMZWFybiBtb3JlIGFuZCBzaWduIHVwIGhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzE6IFwiWW91IGNhbiBhbHNvIHRyeSB0byBidWlsZCB5b3VyIG93biBzY2hvb2wgZmFjdHMgc2tpbGwgZm9yIEFsZXhhXCJcbiMgICAgZnV0dXJlX2VuZ18yOiBcImhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzM6IFwiKGRldmljZSBpcyBub3QgcmVxdWlyZWQpLiBUaGlzIEFsZXhhIGFjdGl2aXR5IGlzIGJyb3VnaHQgdG8geW91IGJ5IHRoZVwiXG4jICAgIGZ1dHVyZV9lbmdfNDogXCJBbWF6b24gRnV0dXJlIEVuZ2luZWVyXCJcbiMgICAgZnV0dXJlX2VuZ181OiBcInByb2dyYW0gd2hpY2ggY3JlYXRlcyBsZWFybmluZyBhbmQgd29yayBvcHBvcnR1bml0aWVzIGZvciBhbGwgSy0xMiBzdHVkZW50cyBpbiB0aGUgVW5pdGVkIFN0YXRlcyB3aG8gd2lzaCB0byBwdXJzdWUgY29tcHV0ZXIgc2NpZW5jZS5cIlxuXG4jICBwbGF5X2dhbWVfZGV2X2xldmVsOlxuIyAgICBjcmVhdGVkX2J5OiBcIkNyZWF0ZWQgYnkge3tuYW1lfX1cIlxuIyAgICBjcmVhdGVkX2R1cmluZ19ob2M6IFwiQ3JlYXRlZCBkdXJpbmcgSG91ciBvZiBDb2RlXCJcbiMgICAgcmVzdGFydDogXCJSZXN0YXJ0IExldmVsXCJcbiMgICAgcGxheTogXCJQbGF5IExldmVsXCJcbiMgICAgcGxheV9tb3JlX2NvZGVjb21iYXQ6IFwiUGxheSBNb3JlIENvZGVDb21iYXRcIlxuIyAgICBkZWZhdWx0X3N0dWRlbnRfaW5zdHJ1Y3Rpb25zOiBcIkNsaWNrIHRvIGNvbnRyb2wgeW91ciBoZXJvIGFuZCB3aW4geW91ciBnYW1lIVwiXG4jICAgIGdvYWxfc3Vydml2ZTogXCJTdXJ2aXZlLlwiXG4jICAgIGdvYWxfc3Vydml2ZV90aW1lOiBcIlN1cnZpdmUgZm9yIF9fc2Vjb25kc19fIHNlY29uZHMuXCJcbiMgICAgZ29hbF9kZWZlYXQ6IFwiRGVmZWF0IGFsbCBlbmVtaWVzLlwiXG4jICAgIGdvYWxfZGVmZWF0X2Ftb3VudDogXCJEZWZlYXQgX19hbW91bnRfXyBlbmVtaWVzLlwiXG4jICAgIGdvYWxfbW92ZTogXCJNb3ZlIHRvIGFsbCB0aGUgcmVkIFggbWFya3MuXCJcbiMgICAgZ29hbF9jb2xsZWN0OiBcIkNvbGxlY3QgYWxsIHRoZSBpdGVtcy5cIlxuIyAgICBnb2FsX2NvbGxlY3RfYW1vdW50OiBcIkNvbGxlY3QgX19hbW91bnRfXyBpdGVtcy5cIlxuXG4jICBnYW1lX21lbnU6XG4jICAgIGludmVudG9yeV90YWI6IFwiSW52ZW50b3J5XCJcbiMgICAgc2F2ZV9sb2FkX3RhYjogXCJTYXZlL0xvYWRcIlxuIyAgICBvcHRpb25zX3RhYjogXCJPcHRpb25zXCJcbiMgICAgZ3VpZGVfdGFiOiBcIkd1aWRlXCJcbiMgICAgZ3VpZGVfdmlkZW9fdHV0b3JpYWw6IFwiVmlkZW8gVHV0b3JpYWxcIlxuIyAgICBndWlkZV90aXBzOiBcIlRpcHNcIlxuIyAgICBtdWx0aXBsYXllcl90YWI6IFwiTXVsdGlwbGF5ZXJcIlxuIyAgICBhdXRoX3RhYjogXCJTaWduIFVwXCJcbiMgICAgaW52ZW50b3J5X2NhcHRpb246IFwiRXF1aXAgeW91ciBoZXJvXCJcbiMgICAgY2hvb3NlX2hlcm9fY2FwdGlvbjogXCJDaG9vc2UgaGVybywgbGFuZ3VhZ2VcIlxuIyAgICBvcHRpb25zX2NhcHRpb246IFwiQ29uZmlndXJlIHNldHRpbmdzXCJcbiMgICAgZ3VpZGVfY2FwdGlvbjogXCJEb2NzIGFuZCB0aXBzXCJcbiMgICAgbXVsdGlwbGF5ZXJfY2FwdGlvbjogXCJQbGF5IHdpdGggZnJpZW5kcyFcIlxuIyAgICBhdXRoX2NhcHRpb246IFwiU2F2ZSB5b3VyIHByb2dyZXNzLlwiXG5cbiMgIGxlYWRlcmJvYXJkOlxuIyAgICB2aWV3X290aGVyX3NvbHV0aW9uczogXCJWaWV3IExlYWRlcmJvYXJkc1wiXG4jICAgIHNjb3JlczogXCJTY29yZXNcIlxuIyAgICB0b3BfcGxheWVyczogXCJUb3AgUGxheWVycyBieVwiXG4jICAgIGRheTogXCJUb2RheVwiXG4jICAgIHdlZWs6IFwiVGhpcyBXZWVrXCJcbiMgICAgYWxsOiBcIkFsbC1UaW1lXCJcbiMgICAgbGF0ZXN0OiBcIkxhdGVzdFwiXG4jICAgIHRpbWU6IFwiV2luIFRpbWVcIlxuIyAgICBkYW1hZ2VfdGFrZW46IFwiRGFtYWdlIFRha2VuXCJcbiMgICAgZGFtYWdlX2RlYWx0OiBcIkRhbWFnZSBEZWFsdFwiXG4jICAgIGRpZmZpY3VsdHk6IFwiRGlmZmljdWx0eVwiXG4jICAgIGdvbGRfY29sbGVjdGVkOiBcIkdvbGQgQ29sbGVjdGVkXCJcbiMgICAgc3Vydml2YWxfdGltZTogXCJTdXJ2aXZlZFwiXG4jICAgIGRlZmVhdGVkOiBcIkVuZW1pZXMgRGVmZWF0ZWRcIlxuIyAgICBjb2RlX2xlbmd0aDogXCJMaW5lcyBvZiBDb2RlXCJcbiMgICAgc2NvcmVfZGlzcGxheTogXCJfX3Njb3JlVHlwZV9fOiBfX3Njb3JlX19cIlxuXG4jICBpbnZlbnRvcnk6XG4jICAgIGVxdWlwcGVkX2l0ZW06IFwiRXF1aXBwZWRcIlxuIyAgICByZXF1aXJlZF9wdXJjaGFzZV90aXRsZTogXCJSZXF1aXJlZFwiXG4jICAgIGF2YWlsYWJsZV9pdGVtOiBcIkF2YWlsYWJsZVwiXG4jICAgIHJlc3RyaWN0ZWRfdGl0bGU6IFwiUmVzdHJpY3RlZFwiXG4jICAgIHNob3VsZF9lcXVpcDogXCIoZG91YmxlLWNsaWNrIHRvIGVxdWlwKVwiXG4jICAgIGVxdWlwcGVkOiBcIihlcXVpcHBlZClcIlxuIyAgICBsb2NrZWQ6IFwiKGxvY2tlZClcIlxuIyAgICByZXN0cmljdGVkOiBcIihyZXN0cmljdGVkIGluIHRoaXMgbGV2ZWwpXCJcbiMgICAgZXF1aXA6IFwiRXF1aXBcIlxuIyAgICB1bmVxdWlwOiBcIlVuZXF1aXBcIlxuIyAgICB3YXJyaW9yX29ubHk6IFwiV2FycmlvciBPbmx5XCJcbiMgICAgcmFuZ2VyX29ubHk6IFwiUmFuZ2VyIE9ubHlcIlxuIyAgICB3aXphcmRfb25seTogXCJXaXphcmQgT25seVwiXG5cbiAgYnV5X2dlbXM6XG4gICAgZmV3X2dlbXM6IFwiINi52K/YryDZgtmE2YrZhCDZhdmGINin2YTYo9it2KzYp9ixINin2YTZg9ix2YrZhdipXCJcbiAgICBwaWxlX2dlbXM6IFwi2YPZiNmF2Kkg2YXZhiDYp9mE2KPYrdis2KfYsSDYp9mE2YPYsdmK2YXYqVwiXG4gICAgY2hlc3RfZ2VtczogXCLYp9mE2LXYr9ixINmF2YYg2KfZhNij2K3YrNin2LEg2KfZhNmD2LHZitmF2KlcIlxuICAgIHB1cmNoYXNpbmc6IFwi2LTYsdin2KEgLi4uXCJcbiMgICAgZGVjbGluZWQ6IFwiWW91ciBjYXJkIHdhcyBkZWNsaW5lZFwiXG4jICAgIHJldHJ5aW5nOiBcIlNlcnZlciBlcnJvciwgcmV0cnlpbmcuXCJcbiMgICAgcHJvbXB0X3RpdGxlOiBcIk5vdCBFbm91Z2ggR2Vtc1wiXG4jICAgIHByb21wdF9ib2R5OiBcIkRvIHlvdSB3YW50IHRvIGdldCBtb3JlP1wiXG4gICAgcHJvbXB0X2J1dHRvbjogXCLYo9iv2K7ZhCDZhdiq2KzYsVwiXG4gICAgcmVjb3ZlcmVkOiBcItin2YTYo9it2KzYp9ixINin2YTZg9ix2YrZhdipINin2YTYs9in2KjZgtipINij2YjZhiDYp9iz2KrYsdiv2KfYr9mH2KcuINmK2LHYrNmJINiq2K3Yr9mK2Ksg2KfZhNi12YHYrdipLlwiXG4jICAgIHByaWNlOiBcInh7e2dlbXN9fSAvIG1vXCJcbiMgICAgYnV5X3ByZW1pdW06IFwiQnV5IFByZW1pdW1cIlxuIyAgICBwdXJjaGFzZTogXCJQdXJjaGFzZVwiXG4jICAgIHB1cmNoYXNlZDogXCJQdXJjaGFzZWRcIlxuXG4jICBlYXJuX2dlbXM6XG4jICAgIHByb21wdF90aXRsZTogXCJOb3QgRW5vdWdoIEdlbXNcIlxuIyAgICBwcm9tcHRfYm9keTogXCJLZWVwIHBsYXlpbmcgdG8gZWFybiBtb3JlIVwiXG5cbiMgIHN1YnNjcmliZTpcbiMgICAgYmVzdF9kZWFsOiBcIkJlc3QgRGVhbCFcIlxuIyAgICBjb25maXJtYXRpb246IFwiQ29uZ3JhdHVsYXRpb25zISBZb3Ugbm93IGhhdmUgYSBDb2RlQ29tYmF0IFByZW1pdW0gU3Vic2NyaXB0aW9uIVwiXG4jICAgIHByZW1pdW1fYWxyZWFkeV9zdWJzY3JpYmVkOiBcIllvdSdyZSBhbHJlYWR5IHN1YnNjcmliZWQgdG8gUHJlbWl1bSFcIlxuIyAgICBzdWJzY3JpYmVfbW9kYWxfdGl0bGU6IFwiQ29kZUNvbWJhdCBQcmVtaXVtXCJcbiMgICAgY29tcGFyaXNvbl9ibHVyYjogXCJCZWNvbWUgYSBNYXN0ZXIgQ29kZXIgLSBzdWJzY3JpYmUgdG8gPGI+UHJlbWl1bTwvYj4gdG9kYXkhXCJcbiMgICAgbXVzdF9iZV9sb2dnZWQ6IFwiWW91IG11c3QgYmUgbG9nZ2VkIGluIGZpcnN0LiBQbGVhc2UgY3JlYXRlIGFuIGFjY291bnQgb3IgbG9nIGluIGZyb20gdGhlIG1lbnUgYWJvdmUuXCJcbiMgICAgc3Vic2NyaWJlX3RpdGxlOiBcIlN1YnNjcmliZVwiICMgQWN0dWFsbHkgdXNlZCBpbiBzdWJzY3JpYmUgYnV0dG9ucywgdG9vXG4jICAgIHVuc3Vic2NyaWJlOiBcIlVuc3Vic2NyaWJlXCJcbiMgICAgY29uZmlybV91bnN1YnNjcmliZTogXCJDb25maXJtIFVuc3Vic2NyaWJlXCJcbiMgICAgbmV2ZXJfbWluZDogXCJOZXZlciBNaW5kLCBJIFN0aWxsIExvdmUgWW91XCJcbiMgICAgdGhhbmtfeW91X21vbnRoc19wcmVmaXg6IFwiVGhhbmsgeW91IGZvciBzdXBwb3J0aW5nIHVzIHRoZXNlIGxhc3RcIlxuIyAgICB0aGFua195b3VfbW9udGhzX3N1ZmZpeDogXCJtb250aHMuXCJcbiMgICAgdGhhbmtfeW91OiBcIlRoYW5rIHlvdSBmb3Igc3VwcG9ydGluZyBDb2RlQ29tYmF0LlwiXG4jICAgIHNvcnJ5X3RvX3NlZV95b3VfZ286IFwiU29ycnkgdG8gc2VlIHlvdSBnbyEgUGxlYXNlIGxldCB1cyBrbm93IHdoYXQgd2UgY291bGQgaGF2ZSBkb25lIGJldHRlci5cIlxuIyAgICB1bnN1YnNjcmliZV9mZWVkYmFja19wbGFjZWhvbGRlcjogXCJPLCB3aGF0IGhhdmUgd2UgZG9uZT9cIlxuIyAgICBzdHJpcGVfZGVzY3JpcHRpb246IFwiTW9udGhseSBTdWJzY3JpcHRpb25cIlxuIyAgICBidXlfbm93OiBcIkJ1eSBOb3dcIlxuIyAgICBzdWJzY3JpcHRpb25fcmVxdWlyZWRfdG9fcGxheTogXCJZb3UnbGwgbmVlZCBhIHN1YnNjcmlwdGlvbiB0byBwbGF5IHRoaXMgbGV2ZWwuXCJcbiMgICAgdW5sb2NrX2hlbHBfdmlkZW9zOiBcIlN1YnNjcmliZSB0byB1bmxvY2sgYWxsIHZpZGVvIHR1dG9yaWFscy5cIlxuIyAgICBwZXJzb25hbF9zdWI6IFwiUGVyc29uYWwgU3Vic2NyaXB0aW9uXCIgIyBBY2NvdW50cyBTdWJzY3JpcHRpb24gVmlldyBiZWxvd1xuIyAgICBsb2FkaW5nX2luZm86IFwiTG9hZGluZyBzdWJzY3JpcHRpb24gaW5mb3JtYXRpb24uLi5cIlxuIyAgICBtYW5hZ2VkX2J5OiBcIk1hbmFnZWQgYnlcIlxuIyAgICB3aWxsX2JlX2NhbmNlbGxlZDogXCJXaWxsIGJlIGNhbmNlbGxlZCBvblwiXG4jICAgIGN1cnJlbnRseV9mcmVlOiBcIllvdSBjdXJyZW50bHkgaGF2ZSBhIGZyZWUgc3Vic2NyaXB0aW9uXCJcbiMgICAgY3VycmVudGx5X2ZyZWVfdW50aWw6IFwiWW91IGN1cnJlbnRseSBoYXZlIGEgc3Vic2NyaXB0aW9uIHVudGlsXCJcbiMgICAgZnJlZV9zdWJzY3JpcHRpb246IFwiRnJlZSBzdWJzY3JpcHRpb25cIlxuIyAgICB3YXNfZnJlZV91bnRpbDogXCJZb3UgaGFkIGEgZnJlZSBzdWJzY3JpcHRpb24gdW50aWxcIlxuIyAgICBtYW5hZ2VkX3N1YnM6IFwiTWFuYWdlZCBTdWJzY3JpcHRpb25zXCJcbiMgICAgc3Vic2NyaWJpbmc6IFwiU3Vic2NyaWJpbmcuLi5cIlxuIyAgICBjdXJyZW50X3JlY2lwaWVudHM6IFwiQ3VycmVudCBSZWNpcGllbnRzXCJcbiMgICAgdW5zdWJzY3JpYmluZzogXCJVbnN1YnNjcmliaW5nXCJcbiMgICAgc3Vic2NyaWJlX3ByZXBhaWQ6IFwiQ2xpY2sgU3Vic2NyaWJlIHRvIHVzZSBwcmVwYWlkIGNvZGVcIlxuIyAgICB1c2luZ19wcmVwYWlkOiBcIlVzaW5nIHByZXBhaWQgY29kZSBmb3IgbW9udGhseSBzdWJzY3JpcHRpb25cIlxuIyAgICBmZWF0dXJlX2xldmVsX2FjY2VzczogXCJBY2Nlc3MgMzAwKyBsZXZlbHMgYXZhaWxhYmxlXCJcbiMgICAgZmVhdHVyZV9oZXJvZXM6IFwiVW5sb2NrIGV4Y2x1c2l2ZSBoZXJvZXMgYW5kIHBldHNcIlxuIyAgICBmZWF0dXJlX2xlYXJuOiBcIkxlYXJuIHRvIG1ha2UgZ2FtZXMgYW5kIHdlYnNpdGVzXCJcbiMgICAgbW9udGhfcHJpY2U6IFwiJF9fcHJpY2VfX1wiXG4jICAgIGZpcnN0X21vbnRoX3ByaWNlOiBcIk9ubHkgJF9fcHJpY2VfXyBmb3IgeW91ciBmaXJzdCBtb250aCFcIlxuIyAgICBsaWZldGltZTogXCJMaWZldGltZSBBY2Nlc3NcIlxuIyAgICBsaWZldGltZV9wcmljZTogXCIkX19wcmljZV9fXCJcbiMgICAgeWVhcl9zdWJzY3JpcHRpb246IFwiWWVhcmx5IFN1YnNjcmlwdGlvblwiXG4jICAgIHllYXJfcHJpY2U6IFwiJF9fcHJpY2VfXy95ZWFyXCJcbiMgICAgc3VwcG9ydF9wYXJ0MTogXCJOZWVkIGhlbHAgd2l0aCBwYXltZW50IG9yIHByZWZlciBQYXlQYWw/IEVtYWlsXCJcbiMgICAgc3VwcG9ydF9wYXJ0MjogXCJzdXBwb3J0QGNvZGVjb21iYXQuY29tXCJcblxuIyAgYW5ub3VuY2VtZW50OlxuIyAgICBub3dfYXZhaWxhYmxlOiBcIk5vdyBhdmFpbGFibGUgZm9yIHN1YnNjcmliZXJzIVwiXG4jICAgIHN1YnNjcmliZXI6IFwic3Vic2NyaWJlclwiXG4jICAgIGN1ZGRseV9jb21wYW5pb25zOiBcIkN1ZGRseSBDb21wYW5pb25zIVwiICMgUGV0IEFubm91bmNlbWVudCBNb2RhbFxuIyAgICBraW5kbGluZ19uYW1lOiBcIktpbmRsaW5nIEVsZW1lbnRhbFwiXG4jICAgIGtpbmRsaW5nX2Rlc2NyaXB0aW9uOiBcIktpbmRsaW5nIEVsZW1lbnRhbHMganVzdCB3YW50IHRvIGtlZXAgeW91IHdhcm0gYXQgbmlnaHQuIEFuZCBkdXJpbmcgdGhlIGRheS4gQWxsIHRoZSB0aW1lLCByZWFsbHkuXCJcbiMgICAgZ3JpZmZpbl9uYW1lOiBcIkJhYnkgR3JpZmZpblwiXG4jICAgIGdyaWZmaW5fZGVzY3JpcHRpb246IFwiR3JpZmZpbnMgYXJlIGhhbGYgZWFnbGUsIGhhbGYgbGlvbiwgYWxsIGFkb3JhYmxlLlwiXG4jICAgIHJhdmVuX25hbWU6IFwiUmF2ZW5cIlxuIyAgICByYXZlbl9kZXNjcmlwdGlvbjogXCJSYXZlbnMgYXJlIGV4Y2VsbGVudCBhdCBnYXRoZXJpbmcgc2hpbnkgYm90dGxlcyBmdWxsIG9mIGhlYWx0aCBmb3IgeW91LlwiXG4jICAgIG1pbWljX25hbWU6IFwiTWltaWNcIlxuIyAgICBtaW1pY19kZXNjcmlwdGlvbjogXCJNaW1pY3MgY2FuIHBpY2sgdXAgY29pbnMgZm9yIHlvdS4gTW92ZSB0aGVtIG9uIHRvcCBvZiBjb2lucyB0byBpbmNyZWFzZSB5b3VyIGdvbGQgc3VwcGx5LlwiXG4jICAgIGNvdWdhcl9uYW1lOiBcIkNvdWdhclwiXG4jICAgIGNvdWdhcl9kZXNjcmlwdGlvbjogXCJDb3VnYXJzIGxpa2UgdG8gZWFybiBhIFBoRCBieSBQdXJyaW5nIEhhcHBpbHkgRGFpbHkuXCJcbiMgICAgZm94X25hbWU6IFwiQmx1ZSBGb3hcIlxuIyAgICBmb3hfZGVzY3JpcHRpb246IFwiQmx1ZSBmb3hlcyBhcmUgdmVyeSBjbGV2ZXIgYW5kIGxvdmUgZGlnZ2luZyBpbiB0aGUgZGlydCBhbmQgc25vdyFcIlxuIyAgICBwdWdpY29ybl9uYW1lOiBcIlB1Z2ljb3JuXCJcbiMgICAgcHVnaWNvcm5fZGVzY3JpcHRpb246IFwiUHVnaWNvcm5zIGFyZSBzb21lIG9mIHRoZSByYXJlc3QgY3JlYXR1cmVzIGFuZCBjYW4gY2FzdCBzcGVsbHMhXCJcbiMgICAgd29sZl9uYW1lOiBcIldvbGYgUHVwXCJcbiMgICAgd29sZl9kZXNjcmlwdGlvbjogXCJXb2xmIHB1cHMgZXhjZWwgaW4gaHVudGluZywgZ2F0aGVyaW5nLCBhbmQgcGxheWluZyBhIG1lYW4gZ2FtZSBvZiBoaWRlLWFuZC1zZWVrIVwiXG4jICAgIGJhbGxfbmFtZTogXCJSZWQgU3F1ZWFreSBCYWxsXCJcbiMgICAgYmFsbF9kZXNjcmlwdGlvbjogXCJiYWxsLnNxdWVhaygpXCJcbiMgICAgY29sbGVjdF9wZXRzOiBcIkNvbGxlY3QgcGV0cyBmb3IgeW91ciBoZXJvZXMhXCJcbiMgICAgZWFjaF9wZXQ6IFwiRWFjaCBwZXQgaGFzIGEgdW5pcXVlIGhlbHBlciBhYmlsaXR5IVwiXG4jICAgIHVwZ3JhZGVfdG9fcHJlbWl1bTogXCJCZWNvbWUgYSB7e3N1YnNjcmliZXJ9fSB0byBlcXVpcCBwZXRzLlwiXG4jICAgIHBsYXlfc2Vjb25kX2tpdGhtYXplOiBcIlBsYXkge3t0aGVfc2Vjb25kX2tpdGhtYXplfX0gdG8gdW5sb2NrIHRoZSBXb2xmIFB1cCFcIlxuIyAgICB0aGVfc2Vjb25kX2tpdGhtYXplOiBcIlRoZSBTZWNvbmQgS2l0aG1hemVcIlxuIyAgICBrZWVwX3BsYXlpbmc6IFwiS2VlcCBwbGF5aW5nIHRvIGRpc2NvdmVyIHRoZSBmaXJzdCBwZXQhXCJcbiMgICAgY29taW5nX3Nvb246IFwiQ29taW5nIHNvb25cIlxuIyAgICByaXRpYzogXCJSaXRpYyB0aGUgQ29sZFwiICMgUml0aWMgQW5ub3VuY2VtZW50IE1vZGFsXG4jICAgIHJpdGljX2Rlc2NyaXB0aW9uOiBcIlJpdGljIHRoZSBDb2xkLiBUcmFwcGVkIGluIEtlbHZpbnRhcGggR2xhY2llciBmb3IgY291bnRsZXNzIGFnZXMsIGZpbmFsbHkgZnJlZSBhbmQgcmVhZHkgdG8gdGVuZCB0byB0aGUgb2dyZXMgdGhhdCBpbXByaXNvbmVkIGhpbS5cIlxuIyAgICBpY2VfYmxvY2s6IFwiQSBibG9jayBvZiBpY2VcIlxuIyAgICBpY2VfZGVzY3JpcHRpb246IFwiVGhlcmUgYXBwZWFycyB0byBiZSBzb21ldGhpbmcgdHJhcHBlZCBpbnNpZGUuLi5cIlxuIyAgICBibGlua19uYW1lOiBcIkJsaW5rXCJcbiMgICAgYmxpbmtfZGVzY3JpcHRpb246IFwiUml0aWMgZGlzYXBwZWFycyBhbmQgcmVhcHBlYXJzIGluIGEgYmxpbmsgb2YgYW4gZXllLCBsZWF2aW5nIG5vdGhpbmcgYnV0IGEgc2hhZG93LlwiXG4jICAgIHNoYWRvd1N0ZXBfbmFtZTogXCJTaGFkb3dzdGVwXCJcbiMgICAgc2hhZG93U3RlcF9kZXNjcmlwdGlvbjogXCJBIG1hc3RlciBhc3Nhc3NpbiBrbm93cyBob3cgdG8gd2FsayBiZXR3ZWVuIHRoZSBzaGFkb3dzLlwiXG4jICAgIHRvcm5hZG9fbmFtZTogXCJUb3JuYWRvXCJcbiMgICAgdG9ybmFkb19kZXNjcmlwdGlvbjogXCJJdCBpcyBnb29kIHRvIGhhdmUgYSByZXNldCBidXR0b24gd2hlbiBvbmUncyBjb3ZlciBpcyBibG93bi5cIlxuIyAgICB3YWxsT2ZEYXJrbmVzc19uYW1lOiBcIldhbGwgb2YgRGFya25lc3NcIlxuIyAgICB3YWxsT2ZEYXJrbmVzc19kZXNjcmlwdGlvbjogXCJIaWRlIGJlaGluZCBhIHdhbGwgb2Ygc2hhZG93cyB0byBwcmV2ZW50IHRoZSBnYXplIG9mIHByeWluZyBleWVzLlwiXG5cbiMgIHByZW1pdW1fZmVhdHVyZXM6XG4jICAgIGdldF9wcmVtaXVtOiBcIkdldDxicj5Db2RlQ29tYmF0PGJyPlByZW1pdW1cIiAjIEZpdCBpbnRvIHRoZSBiYW5uZXIgb24gdGhlIC9mZWF0dXJlcyBwYWdlXG4jICAgIG1hc3Rlcl9jb2RlcjogXCJCZWNvbWUgYSBNYXN0ZXIgQ29kZXIgYnkgc3Vic2NyaWJpbmcgdG9kYXkhXCJcbiMgICAgcGF5cGFsX3JlZGlyZWN0OiBcIllvdSB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gUGF5UGFsIHRvIGNvbXBsZXRlIHRoZSBzdWJzY3JpcHRpb24gcHJvY2Vzcy5cIlxuIyAgICBzdWJzY3JpYmVfbm93OiBcIlN1YnNjcmliZSBOb3dcIlxuIyAgICBoZXJvX2JsdXJiXzE6IFwiR2V0IGFjY2VzcyB0byBfX3ByZW1pdW1IZXJvZXNDb3VudF9fIHN1cGVyLWNoYXJnZWQgc3Vic2NyaWJlci1vbmx5IGhlcm9lcyEgSGFybmVzcyB0aGUgdW5zdG9wcGFibGUgcG93ZXIgb2YgT2thciBTdG9tcGZvb3QsIHRoZSBkZWFkbHkgcHJlY2lzaW9uIG9mIE5hcmlhIG9mIHRoZSBMZWFmLCBvciBzdW1tb24gXFxcImFkb3JhYmxlXFxcIiBza2VsZXRvbnMgd2l0aCBOYWxmYXIgQ3J5cHRvci5cIlxuIyAgICBoZXJvX2JsdXJiXzI6IFwiUHJlbWl1bSBXYXJyaW9ycyB1bmxvY2sgc3R1bm5pbmcgbWFydGlhbCBza2lsbHMgbGlrZSBXYXJjcnksIFN0b21wLCBhbmQgSHVybCBFbmVteS4gT3IsIHBsYXkgYXMgYSBSYW5nZXIsIHVzaW5nIHN0ZWFsdGggYW5kIGJvd3MsIHRocm93aW5nIGtuaXZlcywgdHJhcHMhIFRyeSB5b3VyIHNraWxsIGFzIGEgdHJ1ZSBjb2RpbmcgV2l6YXJkLCBhbmQgdW5sZWFzaCBhIHBvd2VyZnVsIGFycmF5IG9mIFByaW1vcmRpYWwsIE5lY3JvbWFudGljIG9yIEVsZW1lbnRhbCBtYWdpYyFcIlxuIyAgICBoZXJvX2NhcHRpb246IFwiRXhjaXRpbmcgbmV3IGhlcm9lcyFcIlxuIyAgICBwZXRfYmx1cmJfMTogXCJQZXRzIGFyZW4ndCBqdXN0IGFkb3JhYmxlIGNvbXBhbmlvbnMsIHRoZXkgYWxzbyBwcm92aWRlIHVuaXF1ZSBmdW5jdGlvbmFsaXR5IGFuZCBtZXRob2RzLiBUaGUgQmFieSBHcmlmZm9uIGNhbiBjYXJyeSB1bml0cyB0aHJvdWdoIHRoZSBhaXIsIHRoZSBXb2xmIFB1cCBwbGF5cyBjYXRjaCB3aXRoIGVuZW15IGFycm93cywgdGhlIENvdWdhciBpcyBmb25kIG9mIGNoYXNpbmcgb2dyZXMgYXJvdW5kLCBhbmQgdGhlIE1pbWljIGF0dHJhY3RzIGNvaW5zIGxpa2UgYSBtYWduZXQhXCJcbiMgICAgcGV0X2JsdXJiXzI6IFwiQ29sbGVjdCBhbGwgdGhlIHBldHMgdG8gZGlzY292ZXIgdGhlaXIgdW5pcXVlIGFiaWxpdGllcyFcIlxuIyAgICBwZXRfY2FwdGlvbjogXCJBZG9wdCBwZXRzIHRvIGFjY29tcGFueSB5b3VyIGhlcm8hXCJcbiMgICAgZ2FtZV9kZXZfYmx1cmI6IFwiTGVhcm4gZ2FtZSBzY3JpcHRpbmcgYW5kIGJ1aWxkIG5ldyBsZXZlbHMgdG8gc2hhcmUgd2l0aCB5b3VyIGZyaWVuZHMhIFBsYWNlIHRoZSBpdGVtcyB5b3Ugd2FudCwgd3JpdGUgY29kZSBmb3IgdW5pdCBsb2dpYyBhbmQgYmVoYXZpb3IsIGFuZCBzZWUgaWYgeW91ciBmcmllbmRzIGNhbiBiZWF0IHRoZSBsZXZlbCFcIlxuIyAgICBnYW1lX2Rldl9jYXB0aW9uOiBcIkRlc2lnbiB5b3VyIG93biBnYW1lcyB0byBjaGFsbGVuZ2UgeW91ciBmcmllbmRzIVwiXG4jICAgIGV2ZXJ5dGhpbmdfaW5fcHJlbWl1bTogXCJFdmVyeXRoaW5nIHlvdSBnZXQgaW4gQ29kZUNvbWJhdCBQcmVtaXVtOlwiXG4jICAgIGxpc3RfZ2VtczogXCJSZWNlaXZlIGJvbnVzIGdlbXMgdG8gYnV5IGdlYXIsIHBldHMsIGFuZCBoZXJvZXNcIlxuIyAgICBsaXN0X2xldmVsczogXCJHYWluIGFjY2VzcyB0byBfX3ByZW1pdW1MZXZlbHNDb3VudF9fIG1vcmUgbGV2ZWxzXCJcbiMgICAgbGlzdF9oZXJvZXM6IFwiVW5sb2NrIGV4Y2x1c2l2ZSBoZXJvZXMsIGluY2x1ZGUgUmFuZ2VyIGFuZCBXaXphcmQgY2xhc3Nlc1wiXG4jICAgIGxpc3RfZ2FtZV9kZXY6IFwiTWFrZSBhbmQgc2hhcmUgZ2FtZXMgd2l0aCBmcmllbmRzXCJcbiMgICAgbGlzdF93ZWJfZGV2OiBcIkJ1aWxkIHdlYnNpdGVzIGFuZCBpbnRlcmFjdGl2ZSBhcHBzXCJcbiMgICAgbGlzdF9pdGVtczogXCJFcXVpcCBQcmVtaXVtLW9ubHkgaXRlbXMgbGlrZSBwZXRzXCJcbiMgICAgbGlzdF9zdXBwb3J0OiBcIkdldCBQcmVtaXVtIHN1cHBvcnQgdG8gaGVscCB5b3UgZGVidWcgdHJpY2t5IGNvZGVcIlxuIyAgICBsaXN0X2NsYW5zOiBcIkNyZWF0ZSBwcml2YXRlIGNsYW5zIHRvIGludml0ZSB5b3VyIGZyaWVuZHMgYW5kIGNvbXBldGUgb24gYSBncm91cCBsZWFkZXJib2FyZFwiXG5cbiAgY2hvb3NlX2hlcm86XG4gICAgY2hvb3NlX2hlcm86IFwi2KfYrtiq2LEg2KjYt9mE2YNcIlxuICAgIHByb2dyYW1taW5nX2xhbmd1YWdlOiBcItmE2LrYqSDYp9mE2KjYsdmF2KzYqVwiXG4jICAgIHByb2dyYW1taW5nX2xhbmd1YWdlX2Rlc2NyaXB0aW9uOiBcIldoaWNoIHByb2dyYW1taW5nIGxhbmd1YWdlIGRvIHlvdSB3YW50IHRvIHVzZT9cIlxuIyAgICBkZWZhdWx0OiBcIkRlZmF1bHRcIlxuICAgIGV4cGVyaW1lbnRhbDogXCLYqtis2LHZitio2YpcIlxuICAgIHB5dGhvbl9ibHVyYjogXCLYqNiz2YrYt9ipINmE2YPZhtmH2Kcg2YLZiNmK2KnYjCDYqNmK2KvZiNmGINmH2Yog2YTYutipINio2LHZhdis2Kkg2LnYuNmK2YXYqSDZhNmE2KPYutix2KfYtiDYp9mE2LnYp9mF2KkuXCJcbiAgICBqYXZhc2NyaXB0X2JsdXJiOiBcItmE2LrYqSDYp9mE2YjZitioLiDYudi42YrZhSDZhNmE2YPYqtin2KjYqSDYp9mE2YXZiNin2YLYudiMINiq2LfYqNmK2YLYp9iqINin2YTZiNmK2KjYjCDYo9mE2LnYp9ioIEhUTUw12Iwg2YjYp9mE2K7ZiNin2K/ZhS5cIlxuICAgIGNvZmZlZXNjcmlwdF9ibHVyYjogXCJOaWNlciBKYXZhU2NyaXB0IHN5bnRheC5cIlxuICAgIGx1YV9ibHVyYjogXCLZhNi52KjYqSDZhNi62Kkg2KfZhNio2LHZhdis2KkuXCJcbiMgICAgamF2YV9ibHVyYjogXCIoU3Vic2NyaWJlciBPbmx5KSBBbmRyb2lkIGFuZCBlbnRlcnByaXNlLlwiXG4jICAgIHN0YXR1czogXCJTdGF0dXNcIlxuICAgIHdlYXBvbnM6IFwi2KfYs9mE2K3YqVwiXG4jICAgIHdlYXBvbnNfd2FycmlvcjogXCJTd29yZHMgLSBTaG9ydCBSYW5nZSwgTm8gTWFnaWNcIlxuIyAgICB3ZWFwb25zX3JhbmdlcjogXCJDcm9zc2Jvd3MsIEd1bnMgLSBMb25nIFJhbmdlLCBObyBNYWdpY1wiXG4jICAgIHdlYXBvbnNfd2l6YXJkOiBcIldhbmRzLCBTdGFmZnMgLSBMb25nIFJhbmdlLCBNYWdpY1wiXG4jICAgIGF0dGFjazogXCJEYW1hZ2VcIiAjIENhbiBhbHNvIHRyYW5zbGF0ZSBhcyBcIkF0dGFja1wiXG4gICAgaGVhbHRoOiBcItin2YTYtdit2KlcIlxuICAgIHNwZWVkOiBcItiz2LHYudipXCJcbiAgICByZWdlbmVyYXRpb246IFwi2KrYrNiv2YrYr1wiXG4jICAgIHJhbmdlOiBcIlJhbmdlXCIgIyBBcyBpbiBcImF0dGFjayBvciB2aXN1YWwgcmFuZ2VcIlxuIyAgICBibG9ja3M6IFwiQmxvY2tzXCIgIyBBcyBpbiBcInRoaXMgc2hpZWxkIGJsb2NrcyB0aGlzIG11Y2ggZGFtYWdlXCJcbiMgICAgYmFja3N0YWI6IFwiQmFja3N0YWJcIiAjIEFzIGluIFwidGhpcyBkYWdnZXIgZG9lcyB0aGlzIG11Y2ggYmFja3N0YWIgZGFtYWdlXCJcbiAgICBza2lsbHM6IFwi2KfZhNmF2YfYp9ix2KfYqlwiXG4jICAgIGF0dGFja18xOiBcIkRlYWxzXCJcbiMgICAgYXR0YWNrXzI6IFwib2YgbGlzdGVkXCJcbiMgICAgYXR0YWNrXzM6IFwid2VhcG9uIGRhbWFnZS5cIlxuIyAgICBoZWFsdGhfMTogXCJHYWluc1wiXG4jICAgIGhlYWx0aF8yOiBcIm9mIGxpc3RlZFwiXG4jICAgIGhlYWx0aF8zOiBcImFybW9yIGhlYWx0aC5cIlxuIyAgICBzcGVlZF8xOiBcIk1vdmVzIGF0XCJcbiMgICAgc3BlZWRfMjogXCJtZXRlcnMgcGVyIHNlY29uZC5cIlxuIyAgICBhdmFpbGFibGVfZm9yX3B1cmNoYXNlOiBcIkF2YWlsYWJsZSBmb3IgUHVyY2hhc2VcIiAjIFNob3dzIHVwIHdoZW4geW91IGhhdmUgdW5sb2NrZWQsIGJ1dCBub3QgcHVyY2hhc2VkLCBhIGhlcm8gaW4gdGhlIGhlcm8gc3RvcmVcbiMgICAgbGV2ZWxfdG9fdW5sb2NrOiBcIkxldmVsIHRvIHVubG9jazpcIiAjIExhYmVsIGZvciB3aGljaCBsZXZlbCB5b3UgaGF2ZSB0byBiZWF0IHRvIHVubG9jayBhIHBhcnRpY3VsYXIgaGVybyAoY2xpY2sgYSBsb2NrZWQgaGVybyBpbiB0aGUgc3RvcmUgdG8gc2VlKVxuIyAgICByZXN0cmljdGVkX3RvX2NlcnRhaW5faGVyb2VzOiBcIk9ubHkgY2VydGFpbiBoZXJvZXMgY2FuIHBsYXkgdGhpcyBsZXZlbC5cIlxuXG4jICBza2lsbF9kb2NzOlxuIyAgICBmdW5jdGlvbjogXCJmdW5jdGlvblwiICMgc2tpbGwgdHlwZXNcbiMgICAgbWV0aG9kOiBcIm1ldGhvZFwiXG4jICAgIHNuaXBwZXQ6IFwic25pcHBldFwiXG4jICAgIG51bWJlcjogXCJudW1iZXJcIlxuIyAgICBhcnJheTogXCJhcnJheVwiXG4jICAgIG9iamVjdDogXCJvYmplY3RcIlxuIyAgICBzdHJpbmc6IFwic3RyaW5nXCJcbiMgICAgd3JpdGFibGU6IFwid3JpdGFibGVcIiAjIEhvdmVyIG92ZXIgXCJhdHRhY2tcIiBpbiBZb3VyIFNraWxscyB3aGlsZSBwbGF5aW5nIGEgbGV2ZWwgdG8gc2VlIG1vc3Qgb2YgdGhpc1xuIyAgICByZWFkX29ubHk6IFwicmVhZC1vbmx5XCJcbiMgICAgYWN0aW9uOiBcIkFjdGlvblwiXG4jICAgIHNwZWxsOiBcIlNwZWxsXCJcbiMgICAgYWN0aW9uX25hbWU6IFwibmFtZVwiXG4jICAgIGFjdGlvbl9jb29sZG93bjogXCJUYWtlc1wiXG4jICAgIGFjdGlvbl9zcGVjaWZpY19jb29sZG93bjogXCJDb29sZG93blwiXG4jICAgIGFjdGlvbl9kYW1hZ2U6IFwiRGFtYWdlXCJcbiMgICAgYWN0aW9uX3JhbmdlOiBcIlJhbmdlXCJcbiMgICAgYWN0aW9uX3JhZGl1czogXCJSYWRpdXNcIlxuIyAgICBhY3Rpb25fZHVyYXRpb246IFwiRHVyYXRpb25cIlxuIyAgICBleGFtcGxlOiBcIkV4YW1wbGVcIlxuIyAgICBleDogXCJleFwiICMgQWJicmV2aWF0aW9uIG9mIFwiZXhhbXBsZVwiXG4jICAgIGN1cnJlbnRfdmFsdWU6IFwiQ3VycmVudCBWYWx1ZVwiXG4jICAgIGRlZmF1bHRfdmFsdWU6IFwiRGVmYXVsdCB2YWx1ZVwiXG4jICAgIHBhcmFtZXRlcnM6IFwiUGFyYW1ldGVyc1wiXG4jICAgIHJlcXVpcmVkX3BhcmFtZXRlcnM6IFwiUmVxdWlyZWQgUGFyYW1ldGVyc1wiXG4jICAgIG9wdGlvbmFsX3BhcmFtZXRlcnM6IFwiT3B0aW9uYWwgUGFyYW1ldGVyc1wiXG4jICAgIHJldHVybnM6IFwiUmV0dXJuc1wiXG4jICAgIGdyYW50ZWRfYnk6IFwiR3JhbnRlZCBieVwiXG5cbiMgIHNhdmVfbG9hZDpcbiMgICAgZ3JhbnVsYXJpdHlfc2F2ZWRfZ2FtZXM6IFwiU2F2ZWRcIlxuIyAgICBncmFudWxhcml0eV9jaGFuZ2VfaGlzdG9yeTogXCJIaXN0b3J5XCJcblxuIyAgb3B0aW9uczpcbiMgICAgZ2VuZXJhbF9vcHRpb25zOiBcIkdlbmVyYWwgT3B0aW9uc1wiICMgQ2hlY2sgb3V0IHRoZSBPcHRpb25zIHRhYiBpbiB0aGUgR2FtZSBNZW51IHdoaWxlIHBsYXlpbmcgYSBsZXZlbFxuIyAgICB2b2x1bWVfbGFiZWw6IFwiVm9sdW1lXCJcbiMgICAgbXVzaWNfbGFiZWw6IFwiTXVzaWNcIlxuIyAgICBtdXNpY19kZXNjcmlwdGlvbjogXCJUdXJuIGJhY2tncm91bmQgbXVzaWMgb24vb2ZmLlwiXG4jICAgIGVkaXRvcl9jb25maWdfdGl0bGU6IFwiRWRpdG9yIENvbmZpZ3VyYXRpb25cIlxuIyAgICBlZGl0b3JfY29uZmlnX2xpdmVjb21wbGV0aW9uX2xhYmVsOiBcIkxpdmUgQXV0b2NvbXBsZXRpb25cIlxuIyAgICBlZGl0b3JfY29uZmlnX2xpdmVjb21wbGV0aW9uX2Rlc2NyaXB0aW9uOiBcIkRpc3BsYXlzIGF1dG9jb21wbGV0ZSBzdWdnZXN0aW9ucyB3aGlsZSB0eXBpbmcuXCJcbiMgICAgZWRpdG9yX2NvbmZpZ19pbnZpc2libGVzX2xhYmVsOiBcIlNob3cgSW52aXNpYmxlc1wiXG4jICAgIGVkaXRvcl9jb25maWdfaW52aXNpYmxlc19kZXNjcmlwdGlvbjogXCJEaXNwbGF5cyBpbnZpc2libGVzIHN1Y2ggYXMgc3BhY2VzIG9yIHRhYnMuXCJcbiMgICAgZWRpdG9yX2NvbmZpZ19pbmRlbnRndWlkZXNfbGFiZWw6IFwiU2hvdyBJbmRlbnQgR3VpZGVzXCJcbiMgICAgZWRpdG9yX2NvbmZpZ19pbmRlbnRndWlkZXNfZGVzY3JpcHRpb246IFwiRGlzcGxheXMgdmVydGljYWwgbGluZXMgdG8gc2VlIGluZGVudGF0aW9uIGJldHRlci5cIlxuIyAgICBlZGl0b3JfY29uZmlnX2JlaGF2aW9yc19sYWJlbDogXCJTbWFydCBCZWhhdmlvcnNcIlxuIyAgICBlZGl0b3JfY29uZmlnX2JlaGF2aW9yc19kZXNjcmlwdGlvbjogXCJBdXRvY29tcGxldGVzIGJyYWNrZXRzLCBicmFjZXMsIGFuZCBxdW90ZXMuXCJcblxuIyAgYWJvdXQ6XG4jICAgIGxlYXJuX21vcmU6IFwiTGVhcm4gTW9yZVwiXG4jICAgIG1haW5fdGl0bGU6IFwiSWYgeW91IHdhbnQgdG8gbGVhcm4gdG8gcHJvZ3JhbSwgeW91IG5lZWQgdG8gd3JpdGUgKGEgbG90IG9mKSBjb2RlLlwiXG4jICAgIG1haW5fZGVzY3JpcHRpb246IFwiQXQgQ29kZUNvbWJhdCwgb3VyIGpvYiBpcyB0byBtYWtlIHN1cmUgeW91J3JlIGRvaW5nIHRoYXQgd2l0aCBhIHNtaWxlIG9uIHlvdXIgZmFjZS5cIlxuIyAgICBtaXNzaW9uX2xpbms6IFwiTWlzc2lvblwiXG4jICAgIHRlYW1fbGluazogXCJUZWFtXCJcbiMgICAgc3RvcnlfbGluazogXCJTdG9yeVwiXG4jICAgIHByZXNzX2xpbms6IFwiUHJlc3NcIlxuIyAgICBtaXNzaW9uX3RpdGxlOiBcIk91ciBtaXNzaW9uOiBtYWtlIHByb2dyYW1taW5nIGFjY2Vzc2libGUgdG8gZXZlcnkgc3R1ZGVudCBvbiBFYXJ0aC5cIlxuIyAgICBtaXNzaW9uX2Rlc2NyaXB0aW9uXzE6IFwiPHN0cm9uZz5Qcm9ncmFtbWluZyBpcyBtYWdpYzwvc3Ryb25nPi4gSXQncyB0aGUgYWJpbGl0eSB0byBjcmVhdGUgdGhpbmdzIGZyb20gcHVyZSBpbWFnaW5hdGlvbi4gV2Ugc3RhcnRlZCBDb2RlQ29tYmF0IHRvIGdpdmUgbGVhcm5lcnMgdGhlIGZlZWxpbmcgb2Ygd2l6YXJkbHkgcG93ZXIgYXQgdGhlaXIgZmluZ2VydGlwcyBieSB1c2luZyA8c3Ryb25nPnR5cGVkIGNvZGU8L3N0cm9uZz4uXCJcbiMgICAgbWlzc2lvbl9kZXNjcmlwdGlvbl8yOiBcIkFzIGl0IHR1cm5zIG91dCwgdGhhdCBlbmFibGVzIHRoZW0gdG8gbGVhcm4gZmFzdGVyIHRvby4gV0FZIGZhc3Rlci4gSXQncyBsaWtlIGhhdmluZyBhIGNvbnZlcnNhdGlvbiBpbnN0ZWFkIG9mIHJlYWRpbmcgYSBtYW51YWwuIFdlIHdhbnQgdG8gYnJpbmcgdGhhdCBjb252ZXJzYXRpb24gdG8gZXZlcnkgc2Nob29sIGFuZCB0byA8c3Ryb25nPmV2ZXJ5IHN0dWRlbnQ8L3N0cm9uZz4sIGJlY2F1c2UgZXZlcnlvbmUgc2hvdWxkIGhhdmUgdGhlIGNoYW5jZSB0byBsZWFybiB0aGUgbWFnaWMgb2YgcHJvZ3JhbW1pbmcuXCJcbiMgICAgdGVhbV90aXRsZTogXCJNZWV0IHRoZSBDb2RlQ29tYmF0IHRlYW1cIlxuIyAgICB0ZWFtX3ZhbHVlczogXCJXZSB2YWx1ZSBvcGVuIGFuZCByZXNwZWN0ZnVsIGRpYWxvZywgd2hlcmUgdGhlIGJlc3QgaWRlYSB3aW5zLiBPdXIgZGVjaXNpb25zIGFyZSBncm91bmRlZCBpbiBjdXN0b21lciByZXNlYXJjaCBhbmQgb3VyIHByb2Nlc3MgaXMgZm9jdXNlZCBvbiBkZWxpdmVyaW5nIHRhbmdpYmxlIHJlc3VsdHMgZm9yIHRoZW0uIEV2ZXJ5b25lIGlzIGhhbmRzLW9uLCBmcm9tIG91ciBDRU8gdG8gb3VyIEdpdEh1YiBjb250cmlidXRvcnMsIGJlY2F1c2Ugd2UgdmFsdWUgZ3Jvd3RoIGFuZCBsZWFybmluZyBpbiBvdXIgdGVhbS5cIlxuIyAgICBuaWNrX3RpdGxlOiBcIkNvZm91bmRlciwgQ0VPXCJcbiMgICAgbWF0dF90aXRsZTogXCJDb2ZvdW5kZXIsIENUT1wiXG4jICAgIGNhdF90aXRsZTogXCJHYW1lIERlc2lnbmVyXCJcbiMgICAgc2NvdHRfdGl0bGU6IFwiQ29mb3VuZGVyLCBTb2Z0d2FyZSBFbmdpbmVlclwiXG4jICAgIG1ha2FfdGl0bGU6IFwiQ3VzdG9tZXIgQWR2b2NhdGVcIlxuIyAgICByb2Jpbl90aXRsZTogXCJQcm9kdWN0IE1hbmFnZXJcIlxuIyAgICBub2xhbl90aXRsZTogXCJTYWxlcyBNYW5hZ2VyXCJcbiMgICAgbGlzYV90aXRsZTogXCJCdXNpbmVzcyBEZXZlbG9wbWVudCBNYW5hZ2VyXCJcbiMgICAgc2Vhbl90aXRsZTogXCJUZXJyaXRvcnkgTWFuYWdlclwiXG4jICAgIGxpel90aXRsZTogXCJUZXJyaXRvcnkgTWFuYWdlclwiXG4jICAgIGphbmVfdGl0bGU6IFwiQ3VzdG9tZXIgU3VjY2VzcyBNYW5hZ2VyXCJcbiMgICAgZGF2aWRfdGl0bGU6IFwiTWFya2V0aW5nIExlYWRcIlxuIyAgICByZXRyb3N0eWxlX3RpdGxlOiBcIklsbHVzdHJhdGlvblwiXG4jICAgIHJldHJvc3R5bGVfYmx1cmI6IFwiUmV0cm9TdHlsZSBHYW1lc1wiXG4jICAgIGJyeXVraF90aXRsZTogXCJHYW1lIERlc2lnbmVyXCJcbiMgICAgYnJ5dWtoX2JsdXJiOiBcIkNvbnN0cnVjdHMgcHV6emxlc1wiXG4jICAgIGNvbW11bml0eV90aXRsZTogXCIuLi5hbmQgb3VyIG9wZW4tc291cmNlIGNvbW11bml0eVwiXG4jICAgIGNvbW11bml0eV9zdWJ0aXRsZTogXCJPdmVyIDUwMCBjb250cmlidXRvcnMgaGF2ZSBoZWxwZWQgYnVpbGQgQ29kZUNvbWJhdCwgd2l0aCBtb3JlIGpvaW5pbmcgZXZlcnkgd2VlayFcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fMzogXCJDb2RlQ29tYmF0IGlzIGFcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fbGlua18yOiBcImNvbW11bml0eSBwcm9qZWN0XCJcbiMgICAgY29tbXVuaXR5X2Rlc2NyaXB0aW9uXzE6IFwid2l0aCBodW5kcmVkcyBvZiBwbGF5ZXJzIHZvbHVudGVlcmluZyB0byBjcmVhdGUgbGV2ZWxzLCBjb250cmlidXRlIHRvIG91ciBjb2RlIHRvIGFkZCBmZWF0dXJlcywgZml4IGJ1Z3MsIHBsYXl0ZXN0LCBhbmQgZXZlbiB0cmFuc2xhdGUgdGhlIGdhbWUgaW50byA1MCBsYW5ndWFnZXMgc28gZmFyLiBFbXBsb3llZXMsIGNvbnRyaWJ1dG9ycyBhbmQgdGhlIHNpdGUgZ2FpbiBieSBzaGFyaW5nIGlkZWFzIGFuZCBwb29saW5nIGVmZm9ydCwgYXMgZG9lcyB0aGUgb3BlbiBzb3VyY2UgY29tbXVuaXR5IGluIGdlbmVyYWwuIFRoZSBzaXRlIGlzIGJ1aWx0IG9uIG51bWVyb3VzIG9wZW4gc291cmNlIHByb2plY3RzLCBhbmQgd2UgYXJlIG9wZW4gc291cmNlZCB0byBnaXZlIGJhY2sgdG8gdGhlIGNvbW11bml0eSBhbmQgcHJvdmlkZSBjb2RlLWN1cmlvdXMgcGxheWVycyBhIGZhbWlsaWFyIHByb2plY3QgdG8gZXhwbG9yZSBhbmQgZXhwZXJpbWVudCB3aXRoLiBBbnlvbmUgY2FuIGpvaW4gdGhlIENvZGVDb21iYXQgY29tbXVuaXR5ISBDaGVjayBvdXQgb3VyXCJcbiMgICAgY29tbXVuaXR5X2Rlc2NyaXB0aW9uX2xpbms6IFwiY29udHJpYnV0ZSBwYWdlXCJcbiMgICAgY29tbXVuaXR5X2Rlc2NyaXB0aW9uXzI6IFwiZm9yIG1vcmUgaW5mby5cIlxuIyAgICBudW1iZXJfY29udHJpYnV0b3JzOiBcIk92ZXIgNDUwIGNvbnRyaWJ1dG9ycyBoYXZlIGxlbnQgdGhlaXIgc3VwcG9ydCBhbmQgdGltZSB0byB0aGlzIHByb2plY3QuXCJcbiMgICAgc3RvcnlfdGl0bGU6IFwiT3VyIHN0b3J5IHNvIGZhclwiXG4jICAgIHN0b3J5X3N1YnRpdGxlOiBcIlNpbmNlIDIwMTMsIENvZGVDb21iYXQgaGFzIGdyb3duIGZyb20gYSBtZXJlIHNldCBvZiBza2V0Y2hlcyB0byBhIGxpdmluZywgdGhyaXZpbmcgZ2FtZS5cIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfMWE6IFwiNSwwMDAsMDAwK1wiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18xYjogXCJ0b3RhbCBwbGF5ZXJzXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzFjOiBcImhhdmUgc3RhcnRlZCB0aGVpciBwcm9ncmFtbWluZyBqb3VybmV5IHRocm91Z2ggQ29kZUNvbWJhdFwiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18yYTogXCJXZeKAmXZlIGJlZW4gdHJhbnNsYXRlZCBpbnRvIG92ZXIgNTAgbGFuZ3VhZ2VzIOKAlCBvdXIgcGxheWVycyBoYWlsIGZyb21cIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfMmI6IFwiMjAwKyBjb3VudHJpZXNcIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfM2E6IFwiVG9nZXRoZXIsIHRoZXkgaGF2ZSB3cml0dGVuXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzNiOiBcIjEgYmlsbGlvbiBsaW5lcyBvZiBjb2RlIGFuZCBjb3VudGluZ1wiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18zYzogXCJhY3Jvc3MgbWFueSBkaWZmZXJlbnQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzXCJcbiMgICAgc3RvcnlfbG9uZ193YXlfMTogXCJUaG91Z2ggd2UndmUgY29tZSBhIGxvbmcgd2F5Li4uXCJcbiMgICAgc3Rvcnlfc2tldGNoX2NhcHRpb246IFwiTmljaydzIHZlcnkgZmlyc3Qgc2tldGNoIGRlcGljdGluZyBhIHByb2dyYW1taW5nIGdhbWUgaW4gYWN0aW9uLlwiXG4jICAgIHN0b3J5X2xvbmdfd2F5XzI6IFwid2Ugc3RpbGwgaGF2ZSBtdWNoIHRvIGRvIGJlZm9yZSB3ZSBjb21wbGV0ZSBvdXIgcXVlc3QsIHNvLi4uXCJcbiMgICAgam9ic190aXRsZTogXCJDb21lIHdvcmsgd2l0aCB1cyBhbmQgaGVscCB3cml0ZSBDb2RlQ29tYmF0IGhpc3RvcnkhXCJcbiMgICAgam9ic19zdWJ0aXRsZTogXCJEb24ndCBzZWUgYSBnb29kIGZpdCBidXQgaW50ZXJlc3RlZCBpbiBrZWVwaW5nIGluIHRvdWNoPyBTZWUgb3VyIFxcXCJDcmVhdGUgWW91ciBPd25cXFwiIGxpc3RpbmcuXCJcbiMgICAgam9ic19iZW5lZml0czogXCJFbXBsb3llZSBCZW5lZml0c1wiXG4jICAgIGpvYnNfYmVuZWZpdF80OiBcIlVubGltaXRlZCB2YWNhdGlvblwiXG4jICAgIGpvYnNfYmVuZWZpdF81OiBcIlByb2Zlc3Npb25hbCBkZXZlbG9wbWVudCBhbmQgY29udGludWluZyBlZHVjYXRpb24gc3VwcG9ydCDigJMgZnJlZSBib29rcyBhbmQgZ2FtZXMhXCJcbiMgICAgam9ic19iZW5lZml0XzY6IFwiTWVkaWNhbCAoZ29sZCksIGRlbnRhbCwgdmlzaW9uLCBjb21tdXRlclwiXG4jICAgIGpvYnNfYmVuZWZpdF83OiBcIlNpdC1zdGFuZCBkZXNrcyBmb3IgYWxsXCJcbiMgICAgam9ic19iZW5lZml0Xzk6IFwiMTAteWVhciBvcHRpb24gZXhlcmNpc2Ugd2luZG93XCJcbiMgICAgam9ic19iZW5lZml0XzEwOiBcIk1hdGVybml0eSBsZWF2ZTogMTAgd2Vla3MgcGFpZCwgbmV4dCA2IEAgNTUlIHNhbGFyeVwiXG4jICAgIGpvYnNfYmVuZWZpdF8xMTogXCJQYXRlcm5pdHkgbGVhdmU6IDEwIHdlZWtzIHBhaWRcIlxuIyAgICBqb2JzX2N1c3RvbV90aXRsZTogXCJDcmVhdGUgWW91ciBPd25cIlxuIyAgICBqb2JzX2N1c3RvbV9kZXNjcmlwdGlvbjogXCJBcmUgeW91IHBhc3Npb25hdGUgYWJvdXQgQ29kZUNvbWJhdCBidXQgZG9uJ3Qgc2VlIGEgam9iIGxpc3RlZCB0aGF0IG1hdGNoZXMgeW91ciBxdWFsaWZpY2F0aW9ucz8gV3JpdGUgdXMgYW5kIHNob3cgaG93IHlvdSB0aGluayB5b3UgY2FuIGNvbnRyaWJ1dGUgdG8gb3VyIHRlYW0uIFdlJ2QgbG92ZSB0byBoZWFyIGZyb20geW91IVwiXG4jICAgIGpvYnNfY3VzdG9tX2NvbnRhY3RfMTogXCJTZW5kIHVzIGEgbm90ZSBhdFwiXG4jICAgIGpvYnNfY3VzdG9tX2NvbnRhY3RfMjogXCJpbnRyb2R1Y2luZyB5b3Vyc2VsZiBhbmQgd2UgbWlnaHQgZ2V0IGluIHRvdWNoIGluIHRoZSBmdXR1cmUhXCJcbiMgICAgY29udGFjdF90aXRsZTogXCJQcmVzcyAmIENvbnRhY3RcIlxuIyAgICBjb250YWN0X3N1YnRpdGxlOiBcIk5lZWQgbW9yZSBpbmZvcm1hdGlvbj8gR2V0IGluIHRvdWNoIHdpdGggdXMgYXRcIlxuIyAgICBzY3JlZW5zaG90c190aXRsZTogXCJHYW1lIFNjcmVlbnNob3RzXCJcbiMgICAgc2NyZWVuc2hvdHNfaGludDogXCIoY2xpY2sgdG8gdmlldyBmdWxsIHNpemUpXCJcbiMgICAgZG93bmxvYWRzX3RpdGxlOiBcIkRvd25sb2FkIEFzc2V0cyAmIEluZm9ybWF0aW9uXCJcbiMgICAgYWJvdXRfY29kZWNvbWJhdDogXCJBYm91dCBDb2RlQ29tYmF0XCJcbiMgICAgbG9nbzogXCJMb2dvXCJcbiMgICAgc2NyZWVuc2hvdHM6IFwiU2NyZWVuc2hvdHNcIlxuIyAgICBjaGFyYWN0ZXJfYXJ0OiBcIkNoYXJhY3RlciBBcnRcIlxuIyAgICBkb3dubG9hZF9hbGw6IFwiRG93bmxvYWQgQWxsXCJcbiMgICAgcHJldmlvdXM6IFwiUHJldmlvdXNcIlxuIyAgICBsb2NhdGlvbl90aXRsZTogXCJXZSdyZSBsb2NhdGVkIGluIGRvd250b3duIFNGOlwiXG5cbiMgIHRlYWNoZXJzOlxuIyAgICBsaWNlbnNlc19uZWVkZWQ6IFwiTGljZW5zZXMgbmVlZGVkXCJcblxuIyAgc3BlY2lhbF9vZmZlcjpcbiMgICAgc3BlY2lhbF9vZmZlcjogXCJTcGVjaWFsIE9mZmVyXCJcbiMgICAgcHJvamVjdF9iYXNlZF90aXRsZTogXCJQcm9qZWN0LUJhc2VkIENvdXJzZXNcIlxuIyAgICBwcm9qZWN0X2Jhc2VkX2Rlc2NyaXB0aW9uOiBcIldlYiBhbmQgR2FtZSBEZXZlbG9wbWVudCBjb3Vyc2VzIGZlYXR1cmUgc2hhcmVhYmxlIGZpbmFsIHByb2plY3RzLlwiXG4jICAgIGdyZWF0X2Zvcl9jbHVic190aXRsZTogXCJHcmVhdCBmb3IgY2x1YnMgYW5kIGVsZWN0aXZlc1wiXG4jICAgIGdyZWF0X2Zvcl9jbHVic19kZXNjcmlwdGlvbjogXCJUZWFjaGVycyBjYW4gcHVyY2hhc2UgdXAgdG8gX19tYXhRdWFudGl0eVN0YXJ0ZXJMaWNlbnNlc19fIFN0YXJ0ZXIgTGljZW5zZXMuXCIgI1xuIyAgICBsb3dfcHJpY2VfdGl0bGU6IFwiSnVzdCBfX3N0YXJ0ZXJMaWNlbnNlUHJpY2VfXyBwZXIgc3R1ZGVudFwiXG4jICAgIGxvd19wcmljZV9kZXNjcmlwdGlvbjogXCJTdGFydGVyIExpY2Vuc2VzIGFyZSBhY3RpdmUgZm9yIF9fc3RhcnRlckxpY2Vuc2VMZW5ndGhNb250aHNfXyBtb250aHMgZnJvbSBwdXJjaGFzZS5cIlxuIyAgICB0aHJlZV9ncmVhdF9jb3Vyc2VzOiBcIlRocmVlIGdyZWF0IGNvdXJzZXMgaW5jbHVkZWQgaW4gdGhlIFN0YXJ0ZXIgTGljZW5zZTpcIlxuIyAgICBsaWNlbnNlX2xpbWl0X2Rlc2NyaXB0aW9uOiBcIlRlYWNoZXJzIGNhbiBwdXJjaGFzZSB1cCB0byBfX21heFF1YW50aXR5U3RhcnRlckxpY2Vuc2VzX18gU3RhcnRlciBMaWNlbnNlcy4gWW91IGhhdmUgYWxyZWFkeSBwdXJjaGFzZWQgX19xdWFudGl0eUFscmVhZHlQdXJjaGFzZWRfXy4gSWYgeW91IG5lZWQgbW9yZSwgY29udGFjdCBfX3N1cHBvcnRFbWFpbF9fLiBTdGFydGVyIExpY2Vuc2VzIGFyZSB2YWxpZCBmb3IgX19zdGFydGVyTGljZW5zZUxlbmd0aE1vbnRoc19fIG1vbnRocy5cIlxuIyAgICBzdHVkZW50X3N0YXJ0ZXJfbGljZW5zZTogXCJTdHVkZW50IFN0YXJ0ZXIgTGljZW5zZVwiXG4jICAgIHB1cmNoYXNlX3N0YXJ0ZXJfbGljZW5zZXM6IFwiUHVyY2hhc2UgU3RhcnRlciBMaWNlbnNlc1wiXG4jICAgIHB1cmNoYXNlX3N0YXJ0ZXJfbGljZW5zZXNfdG9fZ3JhbnQ6IFwiUHVyY2hhc2UgU3RhcnRlciBMaWNlbnNlcyB0byBncmFudCBhY2Nlc3MgdG8gX19zdGFydGVyTGljZW5zZUNvdXJzZUxpc3RfX1wiXG4jICAgIHN0YXJ0ZXJfbGljZW5zZXNfY2FuX2JlX3VzZWQ6IFwiU3RhcnRlciBMaWNlbnNlcyBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYWRkaXRpb25hbCBjb3Vyc2VzIGltbWVkaWF0ZWx5IGFmdGVyIHB1cmNoYXNlLlwiXG4jICAgIHBheV9ub3c6IFwiUGF5IE5vd1wiXG4jICAgIHdlX2FjY2VwdF9hbGxfbWFqb3JfY3JlZGl0X2NhcmRzOiBcIldlIGFjY2VwdCBhbGwgbWFqb3IgY3JlZGl0IGNhcmRzLlwiXG4jICAgIGNzMl9kZXNjcmlwdGlvbjogXCJidWlsZHMgb24gdGhlIGZvdW5kYXRpb24gZnJvbSBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSwgZGl2aW5nIGludG8gaWYtc3RhdGVtZW50cywgZnVuY3Rpb25zLCBldmVudHMgYW5kIG1vcmUuXCJcbiMgICAgd2QxX2Rlc2NyaXB0aW9uOiBcImludHJvZHVjZXMgdGhlIGJhc2ljcyBvZiBIVE1MIGFuZCBDU1Mgd2hpbGUgdGVhY2hpbmcgc2tpbGxzIG5lZWRlZCBmb3Igc3R1ZGVudHMgdG8gYnVpbGQgdGhlaXIgZmlyc3Qgd2VicGFnZS5cIlxuIyAgICBnZDFfZGVzY3JpcHRpb246IFwidXNlcyBzeW50YXggc3R1ZGVudHMgYXJlIGFscmVhZHkgZmFtaWxpYXIgd2l0aCB0byBzaG93IHRoZW0gaG93IHRvIGJ1aWxkIGFuZCBzaGFyZSB0aGVpciBvd24gcGxheWFibGUgZ2FtZSBsZXZlbHMuXCJcbiMgICAgc2VlX2FuX2V4YW1wbGVfcHJvamVjdDogXCJzZWUgYW4gZXhhbXBsZSBwcm9qZWN0XCJcbiMgICAgZ2V0X3N0YXJ0ZWRfdG9kYXk6IFwiR2V0IHN0YXJ0ZWQgdG9kYXkhXCJcbiMgICAgd2FudF9hbGxfdGhlX2NvdXJzZXM6IFwiV2FudCBhbGwgdGhlIGNvdXJzZXM/IFJlcXVlc3QgaW5mb3JtYXRpb24gb24gb3VyIEZ1bGwgTGljZW5zZXMuXCJcbiMgICAgY29tcGFyZV9saWNlbnNlX3R5cGVzOiBcIkNvbXBhcmUgTGljZW5zZSBUeXBlczpcIlxuIyAgICBjczogXCJDb21wdXRlciBTY2llbmNlXCJcbiMgICAgd2Q6IFwiV2ViIERldmVsb3BtZW50XCJcbiMgICAgd2QxOiBcIldlYiBEZXZlbG9wbWVudCAxXCJcbiMgICAgZ2Q6IFwiR2FtZSBEZXZlbG9wbWVudFwiXG4jICAgIGdkMTogXCJHYW1lIERldmVsb3BtZW50IDFcIlxuIyAgICBtYXhpbXVtX3N0dWRlbnRzOiBcIk1heGltdW0gIyBvZiBTdHVkZW50c1wiXG4jICAgIHVubGltaXRlZDogXCJVbmxpbWl0ZWRcIlxuIyAgICBwcmlvcml0eV9zdXBwb3J0OiBcIlByaW9yaXR5IHN1cHBvcnRcIlxuIyAgICB5ZXM6IFwiWWVzXCJcbiMgICAgcHJpY2VfcGVyX3N0dWRlbnQ6IFwiX19wcmljZV9fIHBlciBzdHVkZW50XCJcbiMgICAgcHJpY2luZzogXCJQcmljaW5nXCJcbiMgICAgZnJlZTogXCJGcmVlXCJcbiMgICAgcHVyY2hhc2U6IFwiUHVyY2hhc2VcIlxuIyAgICBjb3Vyc2VzX3ByZWZpeDogXCJDb3Vyc2VzXCJcbiMgICAgY291cnNlc19zdWZmaXg6IFwiXCJcbiMgICAgY291cnNlX3ByZWZpeDogXCJDb3Vyc2VcIlxuIyAgICBjb3Vyc2Vfc3VmZml4OiBcIlwiXG5cbiMgIHRlYWNoZXJzX3F1b3RlOlxuIyAgICBzdWJ0aXRsZTogXCJHZXQgeW91ciBzdHVkZW50cyBzdGFydGVkIGluIGxlc3MgdGhhbiBhbiBob3VyLiBZb3UnbGwgYmUgYWJsZSB0byA8c3Ryb25nPmNyZWF0ZSBhIGNsYXNzLCBhZGQgc3R1ZGVudHMsIGFuZCBtb25pdG9yIHRoZWlyIHByb2dyZXNzPC9zdHJvbmc+IGFzIHRoZXkgbGVhcm4gY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICBlbWFpbF9leGlzdHM6IFwiVXNlciBleGlzdHMgd2l0aCB0aGlzIGVtYWlsLlwiXG4jICAgIHBob25lX251bWJlcjogXCJQaG9uZSBudW1iZXJcIlxuIyAgICBwaG9uZV9udW1iZXJfaGVscDogXCJXaGVyZSBjYW4gd2UgcmVhY2ggeW91IGR1cmluZyB0aGUgd29ya2RheT9cIlxuIyAgICBwcmltYXJ5X3JvbGVfbGFiZWw6IFwiWW91ciBQcmltYXJ5IFJvbGVcIlxuIyAgICByb2xlX2RlZmF1bHQ6IFwiU2VsZWN0IFJvbGVcIlxuIyAgICBwcmltYXJ5X3JvbGVfZGVmYXVsdDogXCJTZWxlY3QgUHJpbWFyeSBSb2xlXCJcbiMgICAgcHVyY2hhc2VyX3JvbGVfZGVmYXVsdDogXCJTZWxlY3QgUHVyY2hhc2VyIFJvbGVcIlxuIyAgICB0ZWNoX2Nvb3JkaW5hdG9yOiBcIlRlY2hub2xvZ3kgY29vcmRpbmF0b3JcIlxuIyAgICBhZHZpc29yOiBcIkN1cnJpY3VsdW0gU3BlY2lhbGlzdC9BZHZpc29yXCJcbiMgICAgcHJpbmNpcGFsOiBcIlByaW5jaXBhbFwiXG4jICAgIHN1cGVyaW50ZW5kZW50OiBcIlN1cGVyaW50ZW5kZW50XCJcbiMgICAgcGFyZW50OiBcIlBhcmVudFwiXG4jICAgIHB1cmNoYXNlcl9yb2xlX2xhYmVsOiBcIllvdXIgUHVyY2hhc2VyIFJvbGVcIlxuIyAgICBpbmZsdWVuY2VfYWR2b2NhdGU6IFwiSW5mbHVlbmNlL0Fkdm9jYXRlXCJcbiMgICAgZXZhbHVhdGVfcmVjb21tZW5kOiBcIkV2YWx1YXRlL1JlY29tbWVuZFwiXG4jICAgIGFwcHJvdmVfZnVuZHM6IFwiQXBwcm92ZSBGdW5kc1wiXG4jICAgIG5vX3B1cmNoYXNlcl9yb2xlOiBcIk5vIHJvbGUgaW4gcHVyY2hhc2UgZGVjaXNpb25zXCJcbiMgICAgZGlzdHJpY3RfbGFiZWw6IFwiRGlzdHJpY3RcIlxuIyAgICBkaXN0cmljdF9uYW1lOiBcIkRpc3RyaWN0IE5hbWVcIlxuIyAgICBkaXN0cmljdF9uYTogXCJFbnRlciBOL0EgaWYgbm90IGFwcGxpY2FibGVcIlxuIyAgICBvcmdhbml6YXRpb25fbGFiZWw6IFwiU2Nob29sXCJcbiMgICAgc2Nob29sX25hbWU6IFwiU2Nob29sIE5hbWVcIlxuIyAgICBjaXR5OiBcIkNpdHlcIlxuIyAgICBzdGF0ZTogXCJTdGF0ZVwiXG4jICAgIGNvdW50cnk6IFwiQ291bnRyeVwiXG4jICAgIG51bV9zdHVkZW50c19oZWxwOiBcIkhvdyBtYW55IHN0dWRlbnRzIHdpbGwgdXNlIENvZGVDb21iYXQ/XCJcbiMgICAgbnVtX3N0dWRlbnRzX2RlZmF1bHQ6IFwiU2VsZWN0IFJhbmdlXCJcbiMgICAgZWR1Y2F0aW9uX2xldmVsX2xhYmVsOiBcIkVkdWNhdGlvbiBMZXZlbCBvZiBTdHVkZW50c1wiXG4jICAgIGVkdWNhdGlvbl9sZXZlbF9oZWxwOiBcIkNob29zZSBhcyBtYW55IGFzIGFwcGx5LlwiXG4jICAgIGVsZW1lbnRhcnlfc2Nob29sOiBcIkVsZW1lbnRhcnkgU2Nob29sXCJcbiMgICAgaGlnaF9zY2hvb2w6IFwiSGlnaCBTY2hvb2xcIlxuIyAgICBwbGVhc2VfZXhwbGFpbjogXCIocGxlYXNlIGV4cGxhaW4pXCJcbiMgICAgbWlkZGxlX3NjaG9vbDogXCJNaWRkbGUgU2Nob29sXCJcbiMgICAgY29sbGVnZV9wbHVzOiBcIkNvbGxlZ2Ugb3IgaGlnaGVyXCJcbiMgICAgcmVmZXJyZXI6IFwiSG93IGRpZCB5b3UgaGVhciBhYm91dCB1cz9cIlxuIyAgICByZWZlcnJlcl9oZWxwOiBcIkZvciBleGFtcGxlOiBmcm9tIGFub3RoZXIgdGVhY2hlciwgYSBjb25mZXJlbmNlLCB5b3VyIHN0dWRlbnRzLCBDb2RlLm9yZywgZXRjLlwiXG4jICAgIHJlZmVycmVyX2RlZmF1bHQ6IFwiU2VsZWN0IE9uZVwiXG4jICAgIHJlZmVycmVyX2hvYzogXCJDb2RlLm9yZy9Ib3VyIG9mIENvZGVcIlxuIyAgICByZWZlcnJlcl90ZWFjaGVyOiBcIkEgdGVhY2hlclwiXG4jICAgIHJlZmVycmVyX2FkbWluOiBcIkFuIGFkbWluaXN0cmF0b3JcIlxuIyAgICByZWZlcnJlcl9zdHVkZW50OiBcIkEgc3R1ZGVudFwiXG4jICAgIHJlZmVycmVyX3BkOiBcIlByb2Zlc3Npb25hbCB0cmFpbmluZ3Mvd29ya3Nob3BzXCJcbiMgICAgcmVmZXJyZXJfd2ViOiBcIkdvb2dsZVwiXG4jICAgIHJlZmVycmVyX290aGVyOiBcIk90aGVyXCJcbiMgICAgYW55dGhpbmdfZWxzZTogXCJXaGF0IGtpbmQgb2YgY2xhc3MgZG8geW91IGFudGljaXBhdGUgdXNpbmcgQ29kZUNvbWJhdCBmb3I/XCJcbiMgICAgdGhhbmtzX2hlYWRlcjogXCJSZXF1ZXN0IFJlY2VpdmVkIVwiXG4jICAgIHRoYW5rc19zdWJfaGVhZGVyOiBcIlRoYW5rcyBmb3IgZXhwcmVzc2luZyBpbnRlcmVzdCBpbiBDb2RlQ29tYmF0IGZvciB5b3VyIHNjaG9vbC5cIlxuIyAgICB0aGFua3NfcDogXCJXZSdsbCBiZSBpbiB0b3VjaCBzb29uISBJZiB5b3UgbmVlZCB0byBnZXQgaW4gY29udGFjdCwgeW91IGNhbiByZWFjaCB1cyBhdDpcIlxuIyAgICBiYWNrX3RvX2NsYXNzZXM6IFwiQmFjayB0byBDbGFzc2VzXCJcbiMgICAgZmluaXNoX3NpZ251cDogXCJGaW5pc2ggY3JlYXRpbmcgeW91ciB0ZWFjaGVyIGFjY291bnQ6XCJcbiMgICAgZmluaXNoX3NpZ251cF9wOiBcIkNyZWF0ZSBhbiBhY2NvdW50IHRvIHNldCB1cCBhIGNsYXNzLCBhZGQgeW91ciBzdHVkZW50cywgYW5kIG1vbml0b3IgdGhlaXIgcHJvZ3Jlc3MgYXMgdGhleSBsZWFybiBjb21wdXRlciBzY2llbmNlLlwiXG4jICAgIHNpZ251cF93aXRoOiBcIlNpZ24gdXAgd2l0aDpcIlxuIyAgICBjb25uZWN0X3dpdGg6IFwiQ29ubmVjdCB3aXRoOlwiXG4jICAgIGNvbnZlcnNpb25fd2FybmluZzogXCJXQVJOSU5HOiBZb3VyIGN1cnJlbnQgYWNjb3VudCBpcyBhIDxlbT5TdHVkZW50IEFjY291bnQ8L2VtPi4gT25jZSB5b3Ugc3VibWl0IHRoaXMgZm9ybSwgeW91ciBhY2NvdW50IHdpbGwgYmUgdXBkYXRlZCB0byBhIFRlYWNoZXIgQWNjb3VudC5cIlxuIyAgICBsZWFybl9tb3JlX21vZGFsOiBcIlRlYWNoZXIgYWNjb3VudHMgb24gQ29kZUNvbWJhdCBoYXZlIHRoZSBhYmlsaXR5IHRvIG1vbml0b3Igc3R1ZGVudCBwcm9ncmVzcywgYXNzaWduIGxpY2Vuc2VzIGFuZCBtYW5hZ2UgY2xhc3Nyb29tcy4gVGVhY2hlciBhY2NvdW50cyBjYW5ub3QgYmUgYSBwYXJ0IG9mIGEgY2xhc3Nyb29tIC0gaWYgeW91IGFyZSBjdXJyZW50bHkgZW5yb2xsZWQgaW4gYSBjbGFzcyB1c2luZyB0aGlzIGFjY291bnQsIHlvdSB3aWxsIG5vIGxvbmdlciBiZSBhYmxlIHRvIGFjY2VzcyBpdCBvbmNlIHlvdSB1cGRhdGUgdG8gYSBUZWFjaGVyIEFjY291bnQuXCJcbiMgICAgY3JlYXRlX2FjY291bnQ6IFwiQ3JlYXRlIGEgVGVhY2hlciBBY2NvdW50XCJcbiMgICAgY3JlYXRlX2FjY291bnRfc3VidGl0bGU6IFwiR2V0IGFjY2VzcyB0byB0ZWFjaGVyLW9ubHkgdG9vbHMgZm9yIHVzaW5nIENvZGVDb21iYXQgaW4gdGhlIGNsYXNzcm9vbS4gIDxzdHJvbmc+U2V0IHVwIGEgY2xhc3M8L3N0cm9uZz4sIGFkZCB5b3VyIHN0dWRlbnRzLCBhbmQgPHN0cm9uZz5tb25pdG9yIHRoZWlyIHByb2dyZXNzPC9zdHJvbmc+IVwiXG4jICAgIGNvbnZlcnRfYWNjb3VudF90aXRsZTogXCJVcGRhdGUgdG8gVGVhY2hlciBBY2NvdW50XCJcbiMgICAgbm90OiBcIk5vdFwiXG5cbiAgdmVyc2lvbnM6XG4gICAgc2F2ZV92ZXJzaW9uX3RpdGxlOiBcItil2K3Zgdi2INmG2LPYrtipINis2K/Zitiv2KlcIlxuICAgIG5ld19tYWpvcl92ZXJzaW9uOiBcItmG2LPYrtipINmF2YfZhdmR2Kkg2KzYr9mK2K/YqVwiXG4jICAgIHN1Ym1pdHRpbmdfcGF0Y2g6IFwiU3VibWl0dGluZyBQYXRjaC4uLlwiXG4gICAgY2xhX3ByZWZpeDogXCLZhNit2YHYuCDYp9mE2KrYutmK2YrYsdin2KrYjCDYo9mI2YTYpyDZitis2Kgg2KPZhiDYqtmI2KfZgdmCINi52YTZiSBcIlxuICAgIGNsYV91cmw6IFwi2KfYqtmB2KfZgtmK2ZHYqSDYqtix2K7Ziti1INin2YTZhdiz2KfZh9mFXCJcbiAgICBjbGFfc3VmZml4OiBcIi5cIlxuICAgIGNsYV9hZ3JlZTogXCLYo9mI2KfZgdmCXCJcbiMgICAgb3duZXJfYXBwcm92ZTogXCJBbiBvd25lciB3aWxsIG5lZWQgdG8gYXBwcm92ZSBpdCBiZWZvcmUgeW91ciBjaGFuZ2VzIHdpbGwgYmVjb21lIHZpc2libGUuXCJcblxuICBjb250YWN0OlxuICAgIGNvbnRhY3RfdXM6IFwi2KfZhNin2KrZkdi12KfZhCDYqNmAIENvZGVDb21iYXRcIlxuICAgIHdlbGNvbWU6IFwi2KzZitivINij2YYg2YbYs9mF2Lkg2YXZhtmDISDYp9iz2KrYrtiv2KfZhSDZh9iw2Kcg2KfZhNmG2YXZiNiw2Kwg2YTYqtix2LPZhCDZhNmG2Kcg2KfZhNio2LHZitivINin2YTYpdmE2YPYqtix2YjZhtmKLlwiXG4gICAgZm9ydW1fcHJlZml4OiBcItmE2KPZiiDYtNmK2KEg2LnYp9mF2Iwg2YrYsdis2Ykg2KfZhNmF2K3Yp9mI2YTYqVwiXG4gICAgZm9ydW1fcGFnZTogXCLZhdmG2KrYr9in2YbYp1wiXG4gICAgZm9ydW1fc3VmZml4OiBcItio2K/ZhNinINmF2YYg2LDZhNmDLlwiXG4jICAgIGZhcV9wcmVmaXg6IFwiVGhlcmUncyBhbHNvIGFcIlxuICAgIGZhcTogXCJGQVFcIlxuIyAgICBzdWJzY3JpYmVfcHJlZml4OiBcIklmIHlvdSBuZWVkIGhlbHAgZmlndXJpbmcgb3V0IGEgbGV2ZWwsIHBsZWFzZVwiXG4jICAgIHN1YnNjcmliZTogXCJidXkgYSBDb2RlQ29tYmF0IHN1YnNjcmlwdGlvblwiXG4jICAgIHN1YnNjcmliZV9zdWZmaXg6IFwiYW5kIHdlJ2xsIGJlIGhhcHB5IHRvIGhlbHAgeW91IHdpdGggeW91ciBjb2RlLlwiXG4jICAgIHN1YnNjcmliZXJfc3VwcG9ydDogXCJTaW5jZSB5b3UncmUgYSBDb2RlQ29tYmF0IHN1YnNjcmliZXIsIHlvdXIgZW1haWwgd2lsbCBnZXQgb3VyIHByaW9yaXR5IHN1cHBvcnQuXCJcbiMgICAgc2NyZWVuc2hvdF9pbmNsdWRlZDogXCJTY3JlZW5zaG90IGluY2x1ZGVkLlwiXG4jICAgIHdoZXJlX3JlcGx5OiBcIldoZXJlIHNob3VsZCB3ZSByZXBseT9cIlxuICAgIHNlbmQ6IFwi2KXYsdiz2KfZhCDYqti52YTZitmC2KfYqlwiXG5cbiAgYWNjb3VudF9zZXR0aW5nczpcbiAgICB0aXRsZTogXCLYpdi52K/Yp9iv2KfYqiDYp9mE2K3Ys9in2KhcIlxuICAgIG5vdF9sb2dnZWRfaW46IFwi2KrYs9is2YrZhCDYp9mE2K/YrtmI2YQg2KPZiCDYpdmG2LTYp9ihINit2LPYp9ioINmE2KrYutmK2YrYsSDYp9mE2KXYudiv2KfYr9in2Kog2KfZhNiu2KfYtdipINio2YMuXCJcbiAgICBtZV90YWI6IFwi2KPZhtinXCJcbiAgICBwaWN0dXJlX3RhYjogXCLYtdmI2LHYqVwiXG4gICAgZGVsZXRlX2FjY291bnRfdGFiOiBcItit2LDZgSDYrdiz2KfYqNmDINin2YTYrtin2LVcIlxuICAgIHdyb25nX2VtYWlsOiBcIkVtYWlsINiu2KfYt9imXCJcbiAgICB3cm9uZ19wYXNzd29yZDogXCLZg9mE2YXYqSDZhdix2YjYsSDYrtin2LfYptipXCJcbiMgICAgdXNlX2dyYXZhdGFyOiBcIkNoYW5nZSB5b3VyIHByb2ZpbGUgcGljdHVyZSBieSBzaWduaW5nIHVwIGZvciBHcmF2YXRhclwiXG4gICAgZGVsZXRlX3RoaXNfYWNjb3VudDogXCLYrdiw2YEg2YfYsNinINin2YTYrdiz2KfYqCDYqNi02YPZhCDYr9in2KbZhVwiXG4jICAgIHJlc2V0X3Byb2dyZXNzX3RhYjogXCJSZXNldCBBbGwgUHJvZ3Jlc3NcIlxuIyAgICByZXNldF95b3VyX3Byb2dyZXNzOiBcIkNsZWFyIGFsbCB5b3VyIHByb2dyZXNzIGFuZCBzdGFydCBvdmVyXCJcbiMgICAgZ29kX21vZGU6IFwiR29kIE1vZGVcIlxuIyAgICBlbWFpbHNfdGFiOiBcIkVtYWlsc1wiXG4jICAgIGFkbWluOiBcIkFkbWluXCJcbiMgICAgbWFuYWdlX3N1YnNjcmlwdGlvbjogXCJDbGljayBoZXJlIHRvIG1hbmFnZSB5b3VyIHN1YnNjcmlwdGlvbi5cIlxuICAgIG5ld19wYXNzd29yZDogXCLZg9mE2YXYqSDYs9ixINis2K/Zitiv2KlcIlxuICAgIG5ld19wYXNzd29yZF92ZXJpZnk6IFwi2KrYrdmC2YIg2YXZhlwiXG4gICAgdHlwZV9pbl9lbWFpbDogXCLYp9mD2KrYqCDZgdmKINin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZiiDYp9mE2K7Yp9i1INio2YMg2YTYqtij2YPZitivINin2YTYrdiz2KfYqCDYp9mE2K3YsNmBLlwiXG4jICAgIHR5cGVfaW5fZW1haWxfcHJvZ3Jlc3M6IFwiVHlwZSBpbiB5b3VyIGVtYWlsIHRvIGNvbmZpcm0gZGVsZXRpbmcgeW91ciBwcm9ncmVzcy5cIlxuICAgIHR5cGVfaW5fcGFzc3dvcmQ6IFwi2KPZiti22KfYjCDYp9mD2KrYqCDZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2KfZhNiu2KfYtdipINio2YMuXCJcbiAgICBlbWFpbF9zdWJzY3JpcHRpb25zOiBcItin2YTYp9i02KrYsdin2YPYp9iqINin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZilwiXG4jICAgIGVtYWlsX3N1YnNjcmlwdGlvbnNfbm9uZTogXCJObyBFbWFpbCBTdWJzY3JpcHRpb25zLlwiXG4jICAgIGVtYWlsX2Fubm91bmNlbWVudHM6IFwiQW5ub3VuY2VtZW50c1wiXG4jICAgIGVtYWlsX2Fubm91bmNlbWVudHNfZGVzY3JpcHRpb246IFwiR2V0IGVtYWlscyBvbiB0aGUgbGF0ZXN0IG5ld3MgYW5kIGRldmVsb3BtZW50cyBhdCBDb2RlQ29tYmF0LlwiXG4jICAgIGVtYWlsX25vdGlmaWNhdGlvbnM6IFwiTm90aWZpY2F0aW9uc1wiXG4jICAgIGVtYWlsX25vdGlmaWNhdGlvbnNfc3VtbWFyeTogXCJDb250cm9scyBmb3IgcGVyc29uYWxpemVkLCBhdXRvbWF0aWMgZW1haWwgbm90aWZpY2F0aW9ucyByZWxhdGVkIHRvIHlvdXIgQ29kZUNvbWJhdCBhY3Rpdml0eS5cIlxuIyAgICBlbWFpbF9hbnlfbm90ZXM6IFwiQW55IE5vdGlmaWNhdGlvbnNcIlxuIyAgICBlbWFpbF9hbnlfbm90ZXNfZGVzY3JpcHRpb246IFwiRGlzYWJsZSB0byBzdG9wIGFsbCBhY3Rpdml0eSBub3RpZmljYXRpb24gZW1haWxzLlwiXG4jICAgIGVtYWlsX25ld3M6IFwiTmV3c1wiXG4jICAgIGVtYWlsX3JlY3J1aXRfbm90ZXM6IFwiSm9iIE9wcG9ydHVuaXRpZXNcIlxuIyAgICBlbWFpbF9yZWNydWl0X25vdGVzX2Rlc2NyaXB0aW9uOiBcIklmIHlvdSBwbGF5IHJlYWxseSB3ZWxsLCB3ZSBtYXkgY29udGFjdCB5b3UgYWJvdXQgZ2V0dGluZyB5b3UgYSAoYmV0dGVyKSBqb2IuXCJcbiMgICAgY29udHJpYnV0b3JfZW1haWxzOiBcIkNvbnRyaWJ1dG9yIENsYXNzIEVtYWlsc1wiXG4jICAgIGNvbnRyaWJ1dGVfcHJlZml4OiBcIldlJ3JlIGxvb2tpbmcgZm9yIHBlb3BsZSB0byBqb2luIG91ciBwYXJ0eSEgQ2hlY2sgb3V0IHRoZSBcIlxuIyAgICBjb250cmlidXRlX3BhZ2U6IFwiY29udHJpYnV0ZSBwYWdlXCJcbiMgICAgY29udHJpYnV0ZV9zdWZmaXg6IFwiIHRvIGZpbmQgb3V0IG1vcmUuXCJcbiMgICAgZW1haWxfdG9nZ2xlOiBcIlRvZ2dsZSBBbGxcIlxuIyAgICBlcnJvcl9zYXZpbmc6IFwiRXJyb3IgU2F2aW5nXCJcbiMgICAgc2F2ZWQ6IFwiQ2hhbmdlcyBTYXZlZFwiXG4jICAgIHBhc3N3b3JkX21pc21hdGNoOiBcIlBhc3N3b3JkIGRvZXMgbm90IG1hdGNoLlwiXG4jICAgIHBhc3N3b3JkX3JlcGVhdDogXCJQbGVhc2UgcmVwZWF0IHlvdXIgcGFzc3dvcmQuXCJcblxuIyAga2V5Ym9hcmRfc2hvcnRjdXRzOlxuIyAgICBrZXlib2FyZF9zaG9ydGN1dHM6IFwiS2V5Ym9hcmQgU2hvcnRjdXRzXCJcbiMgICAgc3BhY2U6IFwiU3BhY2VcIlxuIyAgICBlbnRlcjogXCJFbnRlclwiXG4jICAgIHByZXNzX2VudGVyOiBcInByZXNzIGVudGVyXCJcbiMgICAgZXNjYXBlOiBcIkVzY2FwZVwiXG4jICAgIHNoaWZ0OiBcIlNoaWZ0XCJcbiMgICAgcnVuX2NvZGU6IFwiUnVuIGN1cnJlbnQgY29kZS5cIlxuIyAgICBydW5fcmVhbF90aW1lOiBcIlJ1biBpbiByZWFsIHRpbWUuXCJcbiMgICAgY29udGludWVfc2NyaXB0OiBcIkNvbnRpbnVlIHBhc3QgY3VycmVudCBzY3JpcHQuXCJcbiMgICAgc2tpcF9zY3JpcHRzOiBcIlNraXAgcGFzdCBhbGwgc2tpcHBhYmxlIHNjcmlwdHMuXCJcbiMgICAgdG9nZ2xlX3BsYXliYWNrOiBcIlRvZ2dsZSBwbGF5L3BhdXNlLlwiXG4jICAgIHNjcnViX3BsYXliYWNrOiBcIlNjcnViIGJhY2sgYW5kIGZvcndhcmQgdGhyb3VnaCB0aW1lLlwiXG4jICAgIHNpbmdsZV9zY3J1Yl9wbGF5YmFjazogXCJTY3J1YiBiYWNrIGFuZCBmb3J3YXJkIHRocm91Z2ggdGltZSBieSBhIHNpbmdsZSBmcmFtZS5cIlxuIyAgICBzY3J1Yl9leGVjdXRpb246IFwiU2NydWIgdGhyb3VnaCBjdXJyZW50IHNwZWxsIGV4ZWN1dGlvbi5cIlxuIyAgICB0b2dnbGVfZGVidWc6IFwiVG9nZ2xlIGRlYnVnIGRpc3BsYXkuXCJcbiMgICAgdG9nZ2xlX2dyaWQ6IFwiVG9nZ2xlIGdyaWQgb3ZlcmxheS5cIlxuIyAgICB0b2dnbGVfcGF0aGZpbmRpbmc6IFwiVG9nZ2xlIHBhdGhmaW5kaW5nIG92ZXJsYXkuXCJcbiMgICAgYmVhdXRpZnk6IFwiQmVhdXRpZnkgeW91ciBjb2RlIGJ5IHN0YW5kYXJkaXppbmcgaXRzIGZvcm1hdHRpbmcuXCJcbiMgICAgbWF4aW1pemVfZWRpdG9yOiBcIk1heGltaXplL21pbmltaXplIGNvZGUgZWRpdG9yLlwiXG5cbiMgIGNvbW11bml0eTpcbiMgICAgbWFpbl90aXRsZTogXCJDb2RlQ29tYmF0IENvbW11bml0eVwiXG4jICAgIGludHJvZHVjdGlvbjogXCJDaGVjayBvdXQgdGhlIHdheXMgeW91IGNhbiBnZXQgaW52b2x2ZWQgYmVsb3cgYW5kIGRlY2lkZSB3aGF0IHNvdW5kcyB0aGUgbW9zdCBmdW4uIFdlIGxvb2sgZm9yd2FyZCB0byB3b3JraW5nIHdpdGggeW91IVwiXG4jICAgIGxldmVsX2VkaXRvcl9wcmVmaXg6IFwiVXNlIHRoZSBDb2RlQ29tYmF0XCJcbiMgICAgbGV2ZWxfZWRpdG9yX3N1ZmZpeDogXCJ0byBjcmVhdGUgYW5kIGVkaXQgbGV2ZWxzLiBVc2VycyBoYXZlIGNyZWF0ZWQgbGV2ZWxzIGZvciB0aGVpciBjbGFzc2VzLCBmcmllbmRzLCBoYWNrYXRob25zLCBzdHVkZW50cywgYW5kIHNpYmxpbmdzLiBJZiBjcmVhdGUgYSBuZXcgbGV2ZWwgc291bmRzIGludGltaWRhdGluZyB5b3UgY2FuIHN0YXJ0IGJ5IGZvcmtpbmcgb25lIG9mIG91cnMhXCJcbiMgICAgdGhhbmdfZWRpdG9yX3ByZWZpeDogXCJXZSBjYWxsIHVuaXRzIHdpdGhpbiB0aGUgZ2FtZSAndGhhbmdzJy4gVXNlIHRoZVwiXG4jICAgIHRoYW5nX2VkaXRvcl9zdWZmaXg6IFwidG8gbW9kaWZ5IHRoZSBDb2RlQ29tYmF0IHNvdXJjZSBhcnR3b3JrLiBBbGxvdyB1bml0cyB0byB0aHJvdyBwcm9qZWN0aWxlcywgYWx0ZXIgdGhlIGRpcmVjdGlvbiBvZiBhbiBhbmltYXRpb24sIGNoYW5nZSBhIHVuaXQncyBoaXQgcG9pbnRzLCBvciB1cGxvYWQgeW91ciBvd24gdmVjdG9yIHNwcml0ZXMuXCJcbiMgICAgYXJ0aWNsZV9lZGl0b3JfcHJlZml4OiBcIlNlZSBhIG1pc3Rha2UgaW4gc29tZSBvZiBvdXIgZG9jcz8gV2FudCB0byBtYWtlIHNvbWUgaW5zdHJ1Y3Rpb25zIGZvciB5b3VyIG93biBjcmVhdGlvbnM/IENoZWNrIG91dCB0aGVcIlxuIyAgICBhcnRpY2xlX2VkaXRvcl9zdWZmaXg6IFwiYW5kIGhlbHAgQ29kZUNvbWJhdCBwbGF5ZXJzIGdldCB0aGUgbW9zdCBvdXQgb2YgdGhlaXIgcGxheXRpbWUuXCJcbiMgICAgZmluZF91czogXCJGaW5kIHVzIG9uIHRoZXNlIHNpdGVzXCJcbiMgICAgc29jaWFsX2dpdGh1YjogXCJDaGVjayBvdXQgYWxsIG91ciBjb2RlIG9uIEdpdEh1YlwiXG4jICAgIHNvY2lhbF9ibG9nOiBcIlJlYWQgdGhlIENvZGVDb21iYXQgYmxvZyBvbiBTZXR0XCJcbiMgICAgc29jaWFsX2Rpc2NvdXJjZTogXCJKb2luIHRoZSBkaXNjdXNzaW9uIG9uIG91ciBEaXNjb3Vyc2UgZm9ydW1cIlxuIyAgICBzb2NpYWxfZmFjZWJvb2s6IFwiTGlrZSBDb2RlQ29tYmF0IG9uIEZhY2Vib29rXCJcbiMgICAgc29jaWFsX3R3aXR0ZXI6IFwiRm9sbG93IENvZGVDb21iYXQgb24gVHdpdHRlclwiXG4jICAgIHNvY2lhbF9ncGx1czogXCJKb2luIENvZGVDb21iYXQgb24gR29vZ2xlK1wiXG4jICAgIHNvY2lhbF9zbGFjazogXCJDaGF0IHdpdGggdXMgaW4gdGhlIHB1YmxpYyBDb2RlQ29tYmF0IFNsYWNrIGNoYW5uZWxcIlxuIyAgICBjb250cmlidXRlX3RvX3RoZV9wcm9qZWN0OiBcIkNvbnRyaWJ1dGUgdG8gdGhlIHByb2plY3RcIlxuXG4jICBjbGFuczpcbiMgICAgY2xhbjogXCJDbGFuXCJcbiMgICAgY2xhbnM6IFwiQ2xhbnNcIlxuIyAgICBuZXdfbmFtZTogXCJOZXcgY2xhbiBuYW1lXCJcbiMgICAgbmV3X2Rlc2NyaXB0aW9uOiBcIk5ldyBjbGFuIGRlc2NyaXB0aW9uXCJcbiMgICAgbWFrZV9wcml2YXRlOiBcIk1ha2UgY2xhbiBwcml2YXRlXCJcbiMgICAgc3Vic19vbmx5OiBcInN1YnNjcmliZXJzIG9ubHlcIlxuIyAgICBjcmVhdGVfY2xhbjogXCJDcmVhdGUgTmV3IENsYW5cIlxuIyAgICBwcml2YXRlX3ByZXZpZXc6IFwiUHJldmlld1wiXG4jICAgIHByaXZhdGVfY2xhbnM6IFwiUHJpdmF0ZSBDbGFuc1wiXG4jICAgIHB1YmxpY19jbGFuczogXCJQdWJsaWMgQ2xhbnNcIlxuIyAgICBteV9jbGFuczogXCJNeSBDbGFuc1wiXG4jICAgIGNsYW5fbmFtZTogXCJDbGFuIE5hbWVcIlxuIyAgICBuYW1lOiBcIk5hbWVcIlxuIyAgICBjaGllZnRhaW46IFwiQ2hpZWZ0YWluXCJcbiMgICAgZWRpdF9jbGFuX25hbWU6IFwiRWRpdCBDbGFuIE5hbWVcIlxuIyAgICBlZGl0X2NsYW5fZGVzY3JpcHRpb246IFwiRWRpdCBDbGFuIERlc2NyaXB0aW9uXCJcbiMgICAgZWRpdF9uYW1lOiBcImVkaXQgbmFtZVwiXG4jICAgIGVkaXRfZGVzY3JpcHRpb246IFwiZWRpdCBkZXNjcmlwdGlvblwiXG4jICAgIHByaXZhdGU6IFwiKHByaXZhdGUpXCJcbiMgICAgc3VtbWFyeTogXCJTdW1tYXJ5XCJcbiMgICAgYXZlcmFnZV9sZXZlbDogXCJBdmVyYWdlIExldmVsXCJcbiMgICAgYXZlcmFnZV9hY2hpZXZlbWVudHM6IFwiQXZlcmFnZSBBY2hpZXZlbWVudHNcIlxuIyAgICBkZWxldGVfY2xhbjogXCJEZWxldGUgQ2xhblwiXG4jICAgIGxlYXZlX2NsYW46IFwiTGVhdmUgQ2xhblwiXG4jICAgIGpvaW5fY2xhbjogXCJKb2luIENsYW5cIlxuIyAgICBpbnZpdGVfMTogXCJJbnZpdGU6XCJcbiMgICAgaW52aXRlXzI6IFwiKkludml0ZSBwbGF5ZXJzIHRvIHRoaXMgQ2xhbiBieSBzZW5kaW5nIHRoZW0gdGhpcyBsaW5rLlwiXG4jICAgIG1lbWJlcnM6IFwiTWVtYmVyc1wiXG4jICAgIHByb2dyZXNzOiBcIlByb2dyZXNzXCJcbiMgICAgbm90X3N0YXJ0ZWRfMTogXCJub3Qgc3RhcnRlZFwiXG4jICAgIHN0YXJ0ZWRfMTogXCJzdGFydGVkXCJcbiMgICAgY29tcGxldGVfMTogXCJjb21wbGV0ZVwiXG4jICAgIGV4cF9sZXZlbHM6IFwiRXhwYW5kIGxldmVsc1wiXG4jICAgIHJlbV9oZXJvOiBcIlJlbW92ZSBIZXJvXCJcbiMgICAgc3RhdHVzOiBcIlN0YXR1c1wiXG4jICAgIGNvbXBsZXRlXzI6IFwiQ29tcGxldGVcIlxuIyAgICBzdGFydGVkXzI6IFwiU3RhcnRlZFwiXG4jICAgIG5vdF9zdGFydGVkXzI6IFwiTm90IFN0YXJ0ZWRcIlxuIyAgICB2aWV3X3NvbHV0aW9uOiBcIkNsaWNrIHRvIHZpZXcgc29sdXRpb24uXCJcbiMgICAgdmlld19hdHRlbXB0OiBcIkNsaWNrIHRvIHZpZXcgYXR0ZW1wdC5cIlxuIyAgICBsYXRlc3RfYWNoaWV2ZW1lbnQ6IFwiTGF0ZXN0IEFjaGlldmVtZW50XCJcbiMgICAgcGxheXRpbWU6IFwiUGxheXRpbWVcIlxuIyAgICBsYXN0X3BsYXllZDogXCJMYXN0IHBsYXllZFwiXG4jICAgIGxlYWd1ZXNfZXhwbGFuYXRpb246IFwiUGxheSBpbiBhIGxlYWd1ZSBhZ2FpbnN0IG90aGVyIGNsYW4gbWVtYmVycyBpbiB0aGVzZSBtdWx0aXBsYXllciBhcmVuYSBpbnN0YW5jZXMuXCJcbiMgICAgdHJhY2tfY29uY2VwdHMxOiBcIlRyYWNrIGNvbmNlcHRzXCJcbiMgICAgdHJhY2tfY29uY2VwdHMyYTogXCJsZWFybmVkIGJ5IGVhY2ggc3R1ZGVudFwiXG4jICAgIHRyYWNrX2NvbmNlcHRzMmI6IFwibGVhcm5lZCBieSBlYWNoIG1lbWJlclwiXG4jICAgIHRyYWNrX2NvbmNlcHRzM2E6IFwiVHJhY2sgbGV2ZWxzIGNvbXBsZXRlZCBmb3IgZWFjaCBzdHVkZW50XCJcbiMgICAgdHJhY2tfY29uY2VwdHMzYjogXCJUcmFjayBsZXZlbHMgY29tcGxldGVkIGZvciBlYWNoIG1lbWJlclwiXG4jICAgIHRyYWNrX2NvbmNlcHRzNGE6IFwiU2VlIHlvdXIgc3R1ZGVudHMnXCJcbiMgICAgdHJhY2tfY29uY2VwdHM0YjogXCJTZWUgeW91ciBtZW1iZXJzJ1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzNTogXCJzb2x1dGlvbnNcIlxuIyAgICB0cmFja19jb25jZXB0czZhOiBcIlNvcnQgc3R1ZGVudHMgYnkgbmFtZSBvciBwcm9ncmVzc1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzNmI6IFwiU29ydCBtZW1iZXJzIGJ5IG5hbWUgb3IgcHJvZ3Jlc3NcIlxuIyAgICB0cmFja19jb25jZXB0czc6IFwiUmVxdWlyZXMgaW52aXRhdGlvblwiXG4jICAgIHRyYWNrX2NvbmNlcHRzODogXCJ0byBqb2luXCJcbiMgICAgcHJpdmF0ZV9yZXF1aXJlX3N1YjogXCJQcml2YXRlIGNsYW5zIHJlcXVpcmUgYSBzdWJzY3JpcHRpb24gdG8gY3JlYXRlIG9yIGpvaW4uXCJcblxuIyAgY291cnNlczpcbiMgICAgY3JlYXRlX25ld19jbGFzczogXCJDcmVhdGUgTmV3IENsYXNzXCJcbiMgICAgc29sdXRpb25zX3JlcXVpcmVfbGljZW5zZXM6IFwiTGV2ZWwgc29sdXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHRlYWNoZXJzIHdobyBoYXZlIGxpY2Vuc2VzLlwiXG4jICAgIHVubmFtZWRfY2xhc3M6IFwiVW5uYW1lZCBDbGFzc1wiXG4jICAgIGVkaXRfc2V0dGluZ3MxOiBcIkVkaXQgQ2xhc3MgU2V0dGluZ3NcIlxuIyAgICBhZGRfc3R1ZGVudHM6IFwiQWRkIFN0dWRlbnRzXCJcbiMgICAgc3RhdHM6IFwiU3RhdGlzdGljc1wiXG4jICAgIHN0dWRlbnRfZW1haWxfaW52aXRlX2JsdXJiOiBcIllvdXIgc3R1ZGVudHMgY2FuIGFsc28gdXNlIGNsYXNzIGNvZGUgPHN0cm9uZz5fX2NsYXNzQ29kZV9fPC9zdHJvbmc+IHdoZW4gY3JlYXRpbmcgYSBTdHVkZW50IEFjY291bnQsIG5vIGVtYWlsIHJlcXVpcmVkLlwiXG4jICAgIHRvdGFsX3N0dWRlbnRzOiBcIlRvdGFsIHN0dWRlbnRzOlwiXG4jICAgIGF2ZXJhZ2VfdGltZTogXCJBdmVyYWdlIGxldmVsIHBsYXkgdGltZTpcIlxuIyAgICB0b3RhbF90aW1lOiBcIlRvdGFsIHBsYXkgdGltZTpcIlxuIyAgICBhdmVyYWdlX2xldmVsczogXCJBdmVyYWdlIGxldmVscyBjb21wbGV0ZWQ6XCJcbiMgICAgdG90YWxfbGV2ZWxzOiBcIlRvdGFsIGxldmVscyBjb21wbGV0ZWQ6XCJcbiMgICAgc3R1ZGVudHM6IFwiU3R1ZGVudHNcIlxuIyAgICBjb25jZXB0czogXCJDb25jZXB0c1wiXG4jICAgIHBsYXlfdGltZTogXCJQbGF5IHRpbWU6XCJcbiMgICAgY29tcGxldGVkOiBcIkNvbXBsZXRlZDpcIlxuIyAgICBlbnRlcl9lbWFpbHM6IFwiU2VwYXJhdGUgZWFjaCBlbWFpbCBhZGRyZXNzIGJ5IGEgbGluZSBicmVhayBvciBjb21tYXNcIlxuIyAgICBzZW5kX2ludml0ZXM6IFwiSW52aXRlIFN0dWRlbnRzXCJcbiMgICAgbnVtYmVyX3Byb2dyYW1taW5nX3N0dWRlbnRzOiBcIk51bWJlciBvZiBQcm9ncmFtbWluZyBTdHVkZW50c1wiXG4jICAgIG51bWJlcl90b3RhbF9zdHVkZW50czogXCJUb3RhbCBTdHVkZW50cyBpbiBTY2hvb2wvRGlzdHJpY3RcIlxuIyAgICBlbnJvbGw6IFwiRW5yb2xsXCJcbiMgICAgZW5yb2xsX3BhaWQ6IFwiRW5yb2xsIFN0dWRlbnRzIGluIFBhaWQgQ291cnNlc1wiXG4jICAgIGdldF9lbnJvbGxtZW50czogXCJHZXQgTW9yZSBMaWNlbnNlc1wiXG4jICAgIGNoYW5nZV9sYW5ndWFnZTogXCJDaGFuZ2UgQ291cnNlIExhbmd1YWdlXCJcbiMgICAga2VlcF91c2luZzogXCJLZWVwIFVzaW5nXCJcbiMgICAgc3dpdGNoX3RvOiBcIlN3aXRjaCBUb1wiXG4jICAgIGdyZWV0aW5nczogXCJHcmVldGluZ3MhXCJcbiMgICAgYmFja19jbGFzc3Jvb21zOiBcIkJhY2sgdG8gbXkgY2xhc3Nyb29tc1wiXG4jICAgIGJhY2tfY2xhc3Nyb29tOiBcIkJhY2sgdG8gY2xhc3Nyb29tXCJcbiMgICAgYmFja19jb3Vyc2VzOiBcIkJhY2sgdG8gbXkgY291cnNlc1wiXG4jICAgIGVkaXRfZGV0YWlsczogXCJFZGl0IGNsYXNzIGRldGFpbHNcIlxuIyAgICBwdXJjaGFzZV9lbnJvbGxtZW50czogXCJQdXJjaGFzZSBTdHVkZW50IExpY2Vuc2VzXCJcbiMgICAgcmVtb3ZlX3N0dWRlbnQ6IFwicmVtb3ZlIHN0dWRlbnRcIlxuIyAgICBhc3NpZ246IFwiQXNzaWduXCJcbiMgICAgdG9fYXNzaWduOiBcInRvIGFzc2lnbiBwYWlkIGNvdXJzZXMuXCJcbiMgICAgc3R1ZGVudDogXCJTdHVkZW50XCJcbiMgICAgdGVhY2hlcjogXCJUZWFjaGVyXCJcbiMgICAgYXJlbmE6IFwiQXJlbmFcIlxuIyAgICBhdmFpbGFibGVfbGV2ZWxzOiBcIkF2YWlsYWJsZSBMZXZlbHNcIlxuIyAgICBzdGFydGVkOiBcInN0YXJ0ZWRcIlxuIyAgICBjb21wbGV0ZTogXCJjb21wbGV0ZVwiXG4jICAgIHByYWN0aWNlOiBcInByYWN0aWNlXCJcbiMgICAgcmVxdWlyZWQ6IFwicmVxdWlyZWRcIlxuIyAgICB3ZWxjb21lX3RvX2NvdXJzZXM6IFwiQWR2ZW50dXJlcnMsIHdlbGNvbWUgdG8gQ291cnNlcyFcIlxuIyAgICByZWFkeV90b19wbGF5OiBcIlJlYWR5IHRvIHBsYXk/XCJcbiMgICAgc3RhcnRfbmV3X2dhbWU6IFwiU3RhcnQgTmV3IEdhbWVcIlxuIyAgICBwbGF5X25vd19sZWFybl9oZWFkZXI6IFwiUGxheSBub3cgdG8gbGVhcm5cIlxuIyAgICBwbGF5X25vd19sZWFybl8xOiBcImJhc2ljIHN5bnRheCB0byBjb250cm9sIHlvdXIgY2hhcmFjdGVyXCJcbiMgICAgcGxheV9ub3dfbGVhcm5fMjogXCJ3aGlsZSBsb29wcyB0byBzb2x2ZSBwZXNreSBwdXp6bGVzXCJcbiMgICAgcGxheV9ub3dfbGVhcm5fMzogXCJzdHJpbmdzICYgdmFyaWFibGVzIHRvIGN1c3RvbWl6ZSBhY3Rpb25zXCJcbiMgICAgcGxheV9ub3dfbGVhcm5fNDogXCJob3cgdG8gZGVmZWF0IGFuIG9ncmUgKGltcG9ydGFudCBsaWZlIHNraWxscyEpXCJcbiMgICAgd2VsY29tZV90b19wYWdlOiBcIk15IFN0dWRlbnQgRGFzaGJvYXJkXCJcbiMgICAgbXlfY2xhc3NlczogXCJDdXJyZW50IENsYXNzZXNcIlxuIyAgICBjbGFzc19hZGRlZDogXCJDbGFzcyBzdWNjZXNzZnVsbHkgYWRkZWQhXCJcbiMgICAgdmlld19sZXZlbHM6IFwidmlldyBhbGwgbGV2ZWxzXCJcbiMgICAgdmlld19wcm9qZWN0X2dhbGxlcnk6IFwidmlldyBteSBjbGFzc21hdGVzJyBwcm9qZWN0c1wiXG4jICAgIGpvaW5fY2xhc3M6IFwiSm9pbiBBIENsYXNzXCJcbiMgICAgam9pbl9jbGFzc18yOiBcIkpvaW4gY2xhc3NcIlxuIyAgICBhc2tfdGVhY2hlcl9mb3JfY29kZTogXCJBc2sgeW91ciB0ZWFjaGVyIGlmIHlvdSBoYXZlIGEgQ29kZUNvbWJhdCBjbGFzcyBjb2RlISBJZiBzbywgZW50ZXIgaXQgYmVsb3c6XCJcbiMgICAgZW50ZXJfY19jb2RlOiBcIjxFbnRlciBDbGFzcyBDb2RlPlwiXG4jICAgIGpvaW46IFwiSm9pblwiXG4jICAgIGpvaW5pbmc6IFwiSm9pbmluZyBjbGFzc1wiXG4jICAgIGNvdXJzZV9jb21wbGV0ZTogXCJDb3Vyc2UgQ29tcGxldGVcIlxuIyAgICBwbGF5X2FyZW5hOiBcIlBsYXkgQXJlbmFcIlxuIyAgICB2aWV3X3Byb2plY3Q6IFwiVmlldyBQcm9qZWN0XCJcbiMgICAgc3RhcnQ6IFwiU3RhcnRcIlxuIyAgICBsYXN0X2xldmVsOiBcIkxhc3QgbGV2ZWwgcGxheWVkXCJcbiMgICAgbm90X3lvdTogXCJOb3QgeW91P1wiXG4jICAgIGNvbnRpbnVlX3BsYXlpbmc6IFwiQ29udGludWUgUGxheWluZ1wiXG4jICAgIG9wdGlvbjFfaGVhZGVyOiBcIkludml0ZSBTdHVkZW50cyBieSBFbWFpbFwiXG4jICAgIHJlbW92ZV9zdHVkZW50MTogXCJSZW1vdmUgU3R1ZGVudFwiXG4jICAgIGFyZV95b3Vfc3VyZTogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoaXMgc3R1ZGVudCBmcm9tIHRoaXMgY2xhc3M/XCJcbiMgICAgcmVtb3ZlX2Rlc2NyaXB0aW9uMTogXCJTdHVkZW50IHdpbGwgbG9zZSBhY2Nlc3MgdG8gdGhpcyBjbGFzc3Jvb20gYW5kIGFzc2lnbmVkIGNsYXNzZXMuIFByb2dyZXNzIGFuZCBnYW1lcGxheSBpcyBOT1QgbG9zdCwgYW5kIHRoZSBzdHVkZW50IGNhbiBiZSBhZGRlZCBiYWNrIHRvIHRoZSBjbGFzc3Jvb20gYXQgYW55IHRpbWUuXCJcbiMgICAgcmVtb3ZlX2Rlc2NyaXB0aW9uMjogXCJUaGUgYWN0aXZhdGVkIHBhaWQgbGljZW5zZSB3aWxsIG5vdCBiZSByZXR1cm5lZC5cIlxuIyAgICBsaWNlbnNlX3dpbGxfcmV2b2tlOiBcIlRoaXMgc3R1ZGVudCdzIHBhaWQgbGljZW5zZSB3aWxsIGJlIHJldm9rZWQgYW5kIG1hZGUgYXZhaWxhYmxlIHRvIGFzc2lnbiB0byBhbm90aGVyIHN0dWRlbnQuXCJcbiMgICAga2VlcF9zdHVkZW50OiBcIktlZXAgU3R1ZGVudFwiXG4jICAgIHJlbW92aW5nX3VzZXI6IFwiUmVtb3ZpbmcgdXNlclwiXG4jICAgIHN1YnRpdGxlOiBcIlJldmlldyBjb3Vyc2Ugb3ZlcnZpZXdzIGFuZCBsZXZlbHNcIiAjIEZsYXQgc3R5bGUgcmVkZXNpZ25cbiMgICAgY2hhbmdlbG9nOiBcIlZpZXcgbGF0ZXN0IGNoYW5nZXMgdG8gY291cnNlIGxldmVscy5cIlxuIyAgICBzZWxlY3RfbGFuZ3VhZ2U6IFwiU2VsZWN0IGxhbmd1YWdlXCJcbiMgICAgc2VsZWN0X2xldmVsOiBcIlNlbGVjdCBsZXZlbFwiXG4jICAgIHBsYXlfbGV2ZWw6IFwiUGxheSBMZXZlbFwiXG4jICAgIGNvbmNlcHRzX2NvdmVyZWQ6IFwiQ29uY2VwdHMgY292ZXJlZFwiXG4jICAgIHZpZXdfZ3VpZGVfb25saW5lOiBcIkxldmVsIE92ZXJ2aWV3cyBhbmQgU29sdXRpb25zXCJcbiMgICAgZ3JhbnRzX2xpZmV0aW1lX2FjY2VzczogXCJHcmFudHMgYWNjZXNzIHRvIGFsbCBDb3Vyc2VzLlwiXG4jICAgIGVucm9sbG1lbnRfY3JlZGl0c19hdmFpbGFibGU6IFwiTGljZW5zZXMgQXZhaWxhYmxlOlwiXG4jICAgIGxhbmd1YWdlX3NlbGVjdDogXCJTZWxlY3QgYSBsYW5ndWFnZVwiICMgQ2xhc3Nyb29tU2V0dGluZ3NNb2RhbFxuIyAgICBsYW5ndWFnZV9jYW5ub3RfY2hhbmdlOiBcIkxhbmd1YWdlIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2Ugc3R1ZGVudHMgam9pbiBhIGNsYXNzLlwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9sYWJlbDogXCJBdmVyYWdlIFN0dWRlbnQgUHJvZ3JhbW1pbmcgRXhwZXJpZW5jZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9kZXNjOiBcIlRoaXMgd2lsbCBoZWxwIHVzIHVuZGVyc3RhbmQgaG93IHRvIHBhY2UgY291cnNlcyBiZXR0ZXIuXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX3NlbGVjdDogXCJTZWxlY3QgdGhlIGJlc3Qgb3B0aW9uXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX25vbmU6IFwiTm8gRXhwZXJpZW5jZSAtIGxpdHRsZSB0byBubyBleHBlcmllbmNlXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX2JlZ2lubmVyOiBcIkJlZ2lubmVyIC0gc29tZSBleHBvc3VyZSBvciBibG9jay1iYXNlZFwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9pbnRlcm1lZGlhdGU6IFwiSW50ZXJtZWRpYXRlIC0gc29tZSBleHBlcmllbmNlIHdpdGggdHlwZWQgY29kZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9hZHZhbmNlZDogXCJBZHZhbmNlZCAtIGV4dGVuc2l2ZSBleHBlcmllbmNlIHdpdGggdHlwZWQgY29kZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF92YXJpZWQ6IFwiVmFyaWVkIExldmVscyBvZiBFeHBlcmllbmNlXCJcbiMgICAgc3R1ZGVudF9hZ2VfcmFuZ2VfbGFiZWw6IFwiU3R1ZGVudCBBZ2UgUmFuZ2VcIlxuIyAgICBzdHVkZW50X2FnZV9yYW5nZV95b3VuZ2VyOiBcIllvdW5nZXIgdGhhbiA2XCJcbiMgICAgc3R1ZGVudF9hZ2VfcmFuZ2Vfb2xkZXI6IFwiT2xkZXIgdGhhbiAxOFwiXG4jICAgIHN0dWRlbnRfYWdlX3JhbmdlX3RvOiBcInRvXCJcbiMgICAgY3JlYXRlX2NsYXNzOiBcIkNyZWF0ZSBDbGFzc1wiXG4jICAgIGNsYXNzX25hbWU6IFwiQ2xhc3MgTmFtZVwiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9yZXN0cmljdGVkOiBcIllvdXIgYWNjb3VudCBpcyBhIHRlYWNoZXIgYWNjb3VudCBhbmQgY2Fubm90IGFjY2VzcyBzdHVkZW50IGNvbnRlbnQuXCJcbiMgICAgYWNjb3VudF9yZXN0cmljdGVkOiBcIkEgc3R1ZGVudCBhY2NvdW50IGlzIHJlcXVpcmVkIHRvIGFjY2VzcyB0aGlzIHBhZ2UuXCJcbiMgICAgdXBkYXRlX2FjY291bnRfbG9naW5fdGl0bGU6IFwiTG9nIGluIHRvIHVwZGF0ZSB5b3VyIGFjY291bnRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90aXRsZTogXCJZb3VyIGFjY291bnQgbmVlZHMgYXR0ZW50aW9uIVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2JsdXJiOiBcIkJlZm9yZSB5b3UgY2FuIGFjY2VzcyB5b3VyIGNsYXNzZXMsIGNob29zZSBob3cgeW91IHdhbnQgdG8gdXNlIHRoaXMgYWNjb3VudC5cIlxuIyAgICB1cGRhdGVfYWNjb3VudF9jdXJyZW50X3R5cGU6IFwiQ3VycmVudCBBY2NvdW50IFR5cGU6XCJcbiMgICAgdXBkYXRlX2FjY291bnRfYWNjb3VudF9lbWFpbDogXCJBY2NvdW50IEVtYWlsL1VzZXJuYW1lOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2FtX3RlYWNoZXI6IFwiSSBhbSBhIHRlYWNoZXJcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9rZWVwX2FjY2VzczogXCJLZWVwIGFjY2VzcyB0byBjbGFzc2VzIEkndmUgY3JlYXRlZFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX2NhbjogXCJUZWFjaGVyIGFjY291bnRzIGNhbjpcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW4xOiBcIkNyZWF0ZS9tYW5hZ2UvYWRkIGNsYXNzZXNcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW4yOiBcIkFzc2lnbi9lbnJvbGwgc3R1ZGVudHMgaW4gY291cnNlc1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX2NhbjM6IFwiVW5sb2NrIGFsbCBjb3Vyc2UgbGV2ZWxzIHRvIHRyeSBvdXRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW40OiBcIkFjY2VzcyBuZXcgdGVhY2hlci1vbmx5IGZlYXR1cmVzIGFzIHdlIHJlbGVhc2UgdGhlbVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX3dhcm5pbmc6IFwiV2FybmluZzogWW91IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGFsbCBjbGFzc2VzIHRoYXQgeW91IGhhdmUgcHJldmlvdXNseSBqb2luZWQgYW5kIHdpbGwgbm90IGJlIGFibGUgdG8gcGxheSBhcyBhIHN0dWRlbnQuXCJcbiMgICAgdXBkYXRlX2FjY291bnRfcmVtYWluX3RlYWNoZXI6IFwiUmVtYWluIGEgVGVhY2hlclwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3VwZGF0ZV90ZWFjaGVyOiBcIlVwZGF0ZSB0byBUZWFjaGVyXCJcbiMgICAgdXBkYXRlX2FjY291bnRfYW1fc3R1ZGVudDogXCJJIGFtIGEgc3R1ZGVudFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3JlbW92ZV9hY2Nlc3M6IFwiUmVtb3ZlIGFjY2VzcyB0byBjbGFzc2VzIEkgaGF2ZSBjcmVhdGVkXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuOiBcIlN0dWRlbnQgYWNjb3VudHMgY2FuOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX2NhbjE6IFwiSm9pbiBjbGFzc2VzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuMjogXCJQbGF5IHRocm91Z2ggY291cnNlcyBhcyBhIHN0dWRlbnQgYW5kIHRyYWNrIHlvdXIgb3duIHByb2dyZXNzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuMzogXCJDb21wZXRlIGFnYWluc3QgY2xhc3NtYXRlcyBpbiBhcmVuYXNcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9zdHVkZW50c19jYW40OiBcIkFjY2VzcyBuZXcgc3R1ZGVudC1vbmx5IGZlYXR1cmVzIGFzIHdlIHJlbGVhc2UgdGhlbVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX3dhcm5pbmc6IFwiV2FybmluZzogWW91IHdpbGwgbm90IGJlIGFibGUgdG8gbWFuYWdlIGFueSBjbGFzc2VzIHRoYXQgeW91IGhhdmUgcHJldmlvdXNseSBjcmVhdGVkIG9yIGNyZWF0ZSBuZXcgY2xhc3Nlcy5cIlxuIyAgICB1bnN1YnNjcmliZV93YXJuaW5nOiBcIldhcm5pbmc6IFlvdSB3aWxsIGJlIHVuc3Vic2NyaWJlZCBmcm9tIHlvdXIgbW9udGhseSBzdWJzY3JpcHRpb24uXCJcbiMgICAgdXBkYXRlX2FjY291bnRfcmVtYWluX3N0dWRlbnQ6IFwiUmVtYWluIGEgU3R1ZGVudFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3VwZGF0ZV9zdHVkZW50OiBcIlVwZGF0ZSB0byBTdHVkZW50XCJcbiMgICAgbmVlZF9hX2NsYXNzX2NvZGU6IFwiWW91J2xsIG5lZWQgYSBDbGFzcyBDb2RlIGZvciB0aGUgY2xhc3MgeW91J3JlIGpvaW5pbmc6XCJcbiMgICAgdXBkYXRlX2FjY291bnRfbm90X3N1cmU6IFwiTm90IHN1cmUgd2hpY2ggb25lIHRvIGNob29zZT8gRW1haWxcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9jb25maXJtX3VwZGF0ZV9zdHVkZW50OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byB1cGRhdGUgeW91ciBhY2NvdW50IHRvIGEgU3R1ZGVudCBleHBlcmllbmNlP1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2NvbmZpcm1fdXBkYXRlX3N0dWRlbnQyOiBcIllvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIG1hbmFnZSBhbnkgY2xhc3NlcyB0aGF0IHlvdSBoYXZlIHByZXZpb3VzbHkgY3JlYXRlZCBvciBjcmVhdGUgbmV3IGNsYXNzZXMuIFlvdXIgcHJldmlvdXNseSBjcmVhdGVkIGNsYXNzZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gQ29kZUNvbWJhdCBhbmQgY2Fubm90IGJlIHJlc3RvcmVkLlwiXG4jICAgIGluc3RydWN0b3I6IFwiSW5zdHJ1Y3RvcjogXCJcbiMgICAgeW91dmVfYmVlbl9pbnZpdGVkXzE6IFwiWW91J3ZlIGJlZW4gaW52aXRlZCB0byBqb2luIFwiXG4jICAgIHlvdXZlX2JlZW5faW52aXRlZF8yOiBcIiwgd2hlcmUgeW91J2xsIGxlYXJuIFwiXG4jICAgIHlvdXZlX2JlZW5faW52aXRlZF8zOiBcIiB3aXRoIHlvdXIgY2xhc3NtYXRlcyBpbiBDb2RlQ29tYmF0LlwiXG4jICAgIGJ5X2pvaW5pbmdfMTogXCJCeSBqb2luaW5nIFwiXG4jICAgIGJ5X2pvaW5pbmdfMjogXCJ3aWxsIGJlIGFibGUgdG8gaGVscCByZXNldCB5b3VyIHBhc3N3b3JkIGlmIHlvdSBmb3JnZXQgb3IgbG9zZSBpdC4gWW91IGNhbiBhbHNvIHZlcmlmeSB5b3VyIGVtYWlsIGFkZHJlc3Mgc28gdGhhdCB5b3UgY2FuIHJlc2V0IHRoZSBwYXNzd29yZCB5b3Vyc2VsZiFcIlxuIyAgICBzZW50X3ZlcmlmaWNhdGlvbjogXCJXZSd2ZSBzZW50IGEgdmVyaWZpY2F0aW9uIGVtYWlsIHRvOlwiXG4jICAgIHlvdV9jYW5fZWRpdDogXCJZb3UgY2FuIGVkaXQgeW91ciBlbWFpbCBhZGRyZXNzIGluIFwiXG4jICAgIGFjY291bnRfc2V0dGluZ3M6IFwiQWNjb3VudCBTZXR0aW5nc1wiXG4jICAgIHNlbGVjdF95b3VyX2hlcm86IFwiU2VsZWN0IFlvdXIgSGVyb1wiXG4jICAgIHNlbGVjdF95b3VyX2hlcm9fZGVzY3JpcHRpb246IFwiWW91IGNhbiBhbHdheXMgY2hhbmdlIHlvdXIgaGVybyBieSBnb2luZyB0byB5b3VyIENvdXJzZXMgcGFnZSBhbmQgY2xpY2tpbmcgXFxcIkNoYW5nZSBIZXJvXFxcIlwiXG4jICAgIHNlbGVjdF90aGlzX2hlcm86IFwiU2VsZWN0IHRoaXMgSGVyb1wiXG4jICAgIGN1cnJlbnRfaGVybzogXCJDdXJyZW50IEhlcm86XCJcbiMgICAgY3VycmVudF9oZXJvX2ZlbWFsZTogXCJDdXJyZW50IEhlcm86XCJcbiMgICAgd2ViX2Rldl9sYW5ndWFnZV90cmFuc2l0aW9uOiBcIkFsbCBjbGFzc2VzIHByb2dyYW0gaW4gSFRNTCAvIEphdmFTY3JpcHQgZm9yIHRoaXMgY291cnNlLiAgQ2xhc3NlcyB0aGF0IGhhdmUgYmVlbiB1c2luZyBQeXRob24gd2lsbCBzdGFydCB3aXRoIGV4dHJhIEphdmFTY3JpcHQgaW50cm8gbGV2ZWxzIHRvIGVhc2UgdGhlIHRyYW5zaXRpb24uICBDbGFzc2VzIHRoYXQgYXJlIGFscmVhZHkgdXNpbmcgSmF2YVNjcmlwdCB3aWxsIHNraXAgdGhlIGludHJvIGxldmVscy5cIlxuIyAgICBjb3Vyc2VfbWVtYmVyc2hpcF9yZXF1aXJlZF90b19wbGF5OiBcIllvdSdsbCBuZWVkIHRvIGpvaW4gYSBjb3Vyc2UgdG8gcGxheSB0aGlzIGxldmVsLlwiXG4jICAgIGxpY2Vuc2VfcmVxdWlyZWRfdG9fcGxheTogXCJBc2sgeW91ciB0ZWFjaGVyIHRvIGFzc2lnbiBhIGxpY2Vuc2UgdG8geW91IHNvIHlvdSBjYW4gY29udGludWUgdG8gcGxheSBDb2RlQ29tYmF0IVwiXG4jICAgIHVwZGF0ZV9vbGRfY2xhc3Nyb29tOiBcIk5ldyBzY2hvb2wgeWVhciwgbmV3IGxldmVscyFcIlxuIyAgICB1cGRhdGVfb2xkX2NsYXNzcm9vbV9kZXRhaWw6IFwiVG8gbWFrZSBzdXJlIHlvdSdyZSBnZXR0aW5nIHRoZSBtb3N0IHVwLXRvLWRhdGUgbGV2ZWxzLCBtYWtlIHN1cmUgeW91IGNyZWF0ZSBhIG5ldyBjbGFzcyBmb3IgdGhpcyBzZW1lc3RlciBieSBjbGlja2luZyBDcmVhdGUgYSBOZXcgQ2xhc3Mgb24geW91clwiXG4jICAgIHRlYWNoZXJfZGFzaGJvYXJkOiBcInRlYWNoZXIgZGFzaGJvYXJkXCJcbiMgICAgdXBkYXRlX29sZF9jbGFzc3Jvb21fZGV0YWlsXzI6IFwiYW5kIGdpdmluZyBzdHVkZW50cyB0aGUgbmV3IENsYXNzIENvZGUgdGhhdCBhcHBlYXJzLlwiXG4jICAgIHZpZXdfYXNzZXNzbWVudHM6IFwiVmlldyBBc3Nlc3NtZW50c1wiXG4jICAgIHZpZXdfY2hhbGxlbmdlczogXCJ2aWV3IGNoYWxsZW5nZSBsZXZlbHNcIlxuIyAgICBjaGFsbGVuZ2U6IFwiQ2hhbGxlbmdlOlwiXG4jICAgIGNoYWxsZW5nZV9sZXZlbDogXCJDaGFsbGVuZ2UgTGV2ZWw6XCJcbiMgICAgc3RhdHVzOiBcIlN0YXR1czpcIlxuIyAgICBhc3Nlc3NtZW50czogXCJBc3Nlc3NtZW50c1wiXG4jICAgIGNoYWxsZW5nZXM6IFwiQ2hhbGxlbmdlc1wiXG4jICAgIGxldmVsX25hbWU6IFwiTGV2ZWwgTmFtZTpcIlxuIyAgICBrZWVwX3RyeWluZzogXCJLZWVwIFRyeWluZ1wiXG4jICAgIHN0YXJ0X2NoYWxsZW5nZTogXCJTdGFydCBDaGFsbGVuZ2VcIlxuIyAgICBsb2NrZWQ6IFwiTG9ja2VkXCJcbiMgICAgY29uY2VwdHNfdXNlZDogXCJDb25jZXB0cyBVc2VkOlwiXG5cbiMgIHByb2plY3RfZ2FsbGVyeTpcbiMgICAgbm9fcHJvamVjdHNfcHVibGlzaGVkOiBcIkJlIHRoZSBmaXJzdCB0byBwdWJsaXNoIGEgcHJvamVjdCBpbiB0aGlzIGNvdXJzZSFcIlxuIyAgICB2aWV3X3Byb2plY3Q6IFwiVmlldyBQcm9qZWN0XCJcbiMgICAgZWRpdF9wcm9qZWN0OiBcIkVkaXQgUHJvamVjdFwiXG5cbiMgIHRlYWNoZXI6XG4jICAgIGFzc2lnbmluZ19jb3Vyc2U6IFwiQXNzaWduaW5nIGNvdXJzZVwiXG4jICAgIGJhY2tfdG9fdG9wOiBcIkJhY2sgdG8gVG9wXCJcbiMgICAgY2xpY2tfc3R1ZGVudF9jb2RlOiBcIkNsaWNrIG9uIGFueSBsZXZlbCB0aGF0IHRoZSBzdHVkZW50IGhhcyBzdGFydGVkIG9yIGNvbXBsZXRlZCBiZWxvdyB0byB2aWV3IHRoZSBjb2RlIHRoZXkgd3JvdGUuXCJcbiMgICAgY29kZTogXCJfX25hbWVfXydzIENvZGVcIlxuIyAgICBjb21wbGV0ZV9zb2x1dGlvbjogXCJDb21wbGV0ZSBTb2x1dGlvblwiXG4jICAgIGNvdXJzZV9ub3Rfc3RhcnRlZDogXCJTdHVkZW50IGhhcyBub3Qgc3RhcnRlZCB0aGlzIGNvdXJzZSB5ZXQuXCJcbiMgICAgbm9fY29kZV95ZXQ6IFwiU3R1ZGVudCBoYXMgbm90IHdyaXR0ZW4gYW55IGNvZGUgZm9yIHRoaXMgbGV2ZWwgeWV0LlwiXG4jICAgIG9wZW5fZW5kZWRfbGV2ZWw6IFwiT3Blbi1FbmRlZCBMZXZlbFwiXG4jICAgIHBhcnRpYWxfc29sdXRpb246IFwiUGFydGlhbCBTb2x1dGlvblwiXG4jICAgIHJlbW92aW5nX2NvdXJzZTogXCJSZW1vdmluZyBjb3Vyc2VcIlxuIyAgICBzb2x1dGlvbl9hcmVuYV9ibHVyYjogXCJTdHVkZW50cyBhcmUgZW5jb3VyYWdlZCB0byBzb2x2ZSBhcmVuYSBsZXZlbHMgY3JlYXRpdmVseS4gVGhlIHNvbHV0aW9uIHByb3ZpZGVkIGJlbG93IG1lZXRzIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIGFyZW5hIGxldmVsLlwiXG4jICAgIHNvbHV0aW9uX2NoYWxsZW5nZV9ibHVyYjogXCJTdHVkZW50cyBhcmUgZW5jb3VyYWdlZCB0byBzb2x2ZSBvcGVuLWVuZGVkIGNoYWxsZW5nZSBsZXZlbHMgY3JlYXRpdmVseS4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIGlzIGRpc3BsYXllZCBiZWxvdy5cIlxuIyAgICBzb2x1dGlvbl9wcm9qZWN0X2JsdXJiOiBcIlN0dWRlbnRzIGFyZSBlbmNvdXJhZ2VkIHRvIGJ1aWxkIGEgY3JlYXRpdmUgcHJvamVjdCBpbiB0aGlzIGxldmVsLiBUaGUgc29sdXRpb24gcHJvdmlkZWQgYmVsb3cgbWVldHMgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgcHJvamVjdCBsZXZlbC5cIlxuIyAgICBzdHVkZW50c19jb2RlX2JsdXJiOiBcIkEgY29ycmVjdCBzb2x1dGlvbiB0byBlYWNoIGxldmVsIGlzIHByb3ZpZGVkIHdoZXJlIGFwcHJvcHJpYXRlLiBJbiBzb21lIGNhc2VzLCBpdOKAmXMgcG9zc2libGUgZm9yIGEgc3R1ZGVudCB0byBzb2x2ZSBhIGxldmVsIHVzaW5nIGRpZmZlcmVudCBjb2RlLiBTb2x1dGlvbnMgYXJlIG5vdCBzaG93biBmb3IgbGV2ZWxzIHRoZSBzdHVkZW50IGhhcyBub3Qgc3RhcnRlZC5cIlxuIyAgICBjb3Vyc2Vfc29sdXRpb246IFwiQ291cnNlIFNvbHV0aW9uXCJcbiMgICAgbGV2ZWxfb3ZlcnZpZXdfc29sdXRpb25zOiBcIkxldmVsIE92ZXJ2aWV3IGFuZCBTb2x1dGlvbnNcIlxuIyAgICBub19zdHVkZW50X2Fzc2lnbmVkOiBcIk5vIHN0dWRlbnRzIGhhdmUgYmVlbiBhc3NpZ25lZCB0aGlzIGNvdXJzZS5cIlxuIyAgICBwYXJlbl9uZXc6IFwiKG5ldylcIlxuIyAgICBzdHVkZW50X2NvZGU6IFwiX19uYW1lX18ncyBTdHVkZW50IENvZGVcIlxuIyAgICB0ZWFjaGVyX2Rhc2hib2FyZDogXCJUZWFjaGVyIERhc2hib2FyZFwiICMgTmF2YmFyXG4jICAgIG15X2NsYXNzZXM6IFwiTXkgQ2xhc3Nlc1wiXG4jICAgIGNvdXJzZXM6IFwiQ291cnNlIEd1aWRlc1wiXG4jICAgIGVucm9sbG1lbnRzOiBcIlN0dWRlbnQgTGljZW5zZXNcIlxuIyAgICByZXNvdXJjZXM6IFwiUmVzb3VyY2VzXCJcbiMgICAgaGVscDogXCJIZWxwXCJcbiMgICAgbGFuZ3VhZ2U6IFwiTGFuZ3VhZ2VcIlxuIyAgICBlZGl0X2NsYXNzX3NldHRpbmdzOiBcImVkaXQgY2xhc3Mgc2V0dGluZ3NcIlxuIyAgICBhY2Nlc3NfcmVzdHJpY3RlZDogXCJBY2NvdW50IFVwZGF0ZSBSZXF1aXJlZFwiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9yZXF1aXJlZDogXCJBIHRlYWNoZXIgYWNjb3VudCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyBjb250ZW50LlwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2FjY291bnQ6IFwiQ3JlYXRlIFRlYWNoZXIgQWNjb3VudFwiXG4jICAgIHdoYXRfaXNfYV90ZWFjaGVyX2FjY291bnQ6IFwiV2hhdCdzIGEgVGVhY2hlciBBY2NvdW50P1wiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9leHBsYW5hdGlvbjogXCJBIENvZGVDb21iYXQgVGVhY2hlciBhY2NvdW50IGFsbG93cyB5b3UgdG8gc2V0IHVwIGNsYXNzcm9vbXMsIG1vbml0b3Igc3R1ZGVudHPigJkgcHJvZ3Jlc3MgYXMgdGhleSB3b3JrIHRocm91Z2ggY291cnNlcywgbWFuYWdlIGxpY2Vuc2VzIGFuZCBhY2Nlc3MgcmVzb3VyY2VzIHRvIGFpZCBpbiB5b3VyIGN1cnJpY3VsdW0tYnVpbGRpbmcuXCJcbiMgICAgY3VycmVudF9jbGFzc2VzOiBcIkN1cnJlbnQgQ2xhc3Nlc1wiXG4jICAgIGFyY2hpdmVkX2NsYXNzZXM6IFwiQXJjaGl2ZWQgQ2xhc3Nlc1wiXG4jICAgIGFyY2hpdmVkX2NsYXNzZXNfYmx1cmI6IFwiQ2xhc3NlcyBjYW4gYmUgYXJjaGl2ZWQgZm9yIGZ1dHVyZSByZWZlcmVuY2UuIFVuYXJjaGl2ZSBhIGNsYXNzIHRvIHZpZXcgaXQgaW4gdGhlIEN1cnJlbnQgQ2xhc3NlcyBsaXN0IGFnYWluLlwiXG4jICAgIHZpZXdfY2xhc3M6IFwidmlldyBjbGFzc1wiXG4jICAgIGFyY2hpdmVfY2xhc3M6IFwiYXJjaGl2ZSBjbGFzc1wiXG4jICAgIHVuYXJjaGl2ZV9jbGFzczogXCJ1bmFyY2hpdmUgY2xhc3NcIlxuIyAgICB1bmFyY2hpdmVfdGhpc19jbGFzczogXCJVbmFyY2hpdmUgdGhpcyBjbGFzc1wiXG4jICAgIG5vX3N0dWRlbnRzX3lldDogXCJUaGlzIGNsYXNzIGhhcyBubyBzdHVkZW50cyB5ZXQuXCJcbiMgICAgbm9fc3R1ZGVudHNfeWV0X3ZpZXdfY2xhc3M6IFwiVmlldyBjbGFzcyB0byBhZGQgc3R1ZGVudHMuXCJcbiMgICAgdHJ5X3JlZnJlc2hpbmc6IFwiKFlvdSBtYXkgbmVlZCB0byByZWZyZXNoIHRoZSBwYWdlKVwiXG4jICAgIGNyZWF0ZV9uZXdfY2xhc3M6IFwiQ3JlYXRlIGEgTmV3IENsYXNzXCJcbiMgICAgY2xhc3Nfb3ZlcnZpZXc6IFwiQ2xhc3MgT3ZlcnZpZXdcIiAjIFZpZXcgQ2xhc3MgcGFnZVxuIyAgICBhdmdfcGxheXRpbWU6IFwiQXZlcmFnZSBsZXZlbCBwbGF5dGltZVwiXG4jICAgIHRvdGFsX3BsYXl0aW1lOiBcIlRvdGFsIHBsYXkgdGltZVwiXG4jICAgIGF2Z19jb21wbGV0ZWQ6IFwiQXZlcmFnZSBsZXZlbHMgY29tcGxldGVkXCJcbiMgICAgdG90YWxfY29tcGxldGVkOiBcIlRvdGFsIGxldmVscyBjb21wbGV0ZWRcIlxuIyAgICBjcmVhdGVkOiBcIkNyZWF0ZWRcIlxuIyAgICBjb25jZXB0c19jb3ZlcmVkOiBcIkNvbmNlcHRzIGNvdmVyZWRcIlxuIyAgICBlYXJsaWVzdF9pbmNvbXBsZXRlOiBcIkVhcmxpZXN0IGluY29tcGxldGUgbGV2ZWxcIlxuIyAgICBsYXRlc3RfY29tcGxldGU6IFwiTGF0ZXN0IGNvbXBsZXRlZCBsZXZlbFwiXG4jICAgIGVucm9sbF9zdHVkZW50OiBcIkVucm9sbCBzdHVkZW50XCJcbiMgICAgYXBwbHlfbGljZW5zZTogXCJBcHBseSBMaWNlbnNlXCJcbiMgICAgcmV2b2tlX2xpY2Vuc2U6IFwiUmV2b2tlIExpY2Vuc2VcIlxuIyAgICBjb3Vyc2VfcHJvZ3Jlc3M6IFwiQ291cnNlIFByb2dyZXNzXCJcbiMgICAgbm90X2FwcGxpY2FibGU6IFwiTi9BXCJcbiMgICAgZWRpdDogXCJlZGl0XCJcbiMgICAgZWRpdF8yOiBcIkVkaXRcIlxuIyAgICByZW1vdmU6IFwicmVtb3ZlXCJcbiMgICAgbGF0ZXN0X2NvbXBsZXRlZDogXCJMYXRlc3QgY29tcGxldGVkOlwiXG4jICAgIHNvcnRfYnk6IFwiU29ydCBieVwiXG4jICAgIHByb2dyZXNzOiBcIlByb2dyZXNzXCJcbiMgICAgY29uY2VwdHNfdXNlZDogXCJDb25jZXB0cyB1c2VkIGJ5IFN0dWRlbnQ6XCJcbiMgICAgY29uY2VwdF9jaGVja2VkOiBcIkNvbmNlcHQgY2hlY2tlZDpcIlxuIyAgICBjb21wbGV0ZWQ6IFwiQ29tcGxldGVkXCJcbiMgICAgcHJhY3RpY2U6IFwiUHJhY3RpY2VcIlxuIyAgICBzdGFydGVkOiBcIlN0YXJ0ZWRcIlxuIyAgICBub19wcm9ncmVzczogXCJObyBwcm9ncmVzc1wiXG4jICAgIG5vdF9yZXF1aXJlZDogXCJOb3QgcmVxdWlyZWRcIlxuIyAgICBzZWxlY3RfY291cnNlOiBcIlNlbGVjdCBjb3Vyc2UgdG8gdmlld1wiXG4jICAgIHByb2dyZXNzX2NvbG9yX2tleTogXCJQcm9ncmVzcyBjb2xvciBrZXk6XCJcbiMgICAgbGV2ZWxfaW5fcHJvZ3Jlc3M6IFwiTGV2ZWwgaW4gUHJvZ3Jlc3NcIlxuIyAgICBsZXZlbF9ub3Rfc3RhcnRlZDogXCJMZXZlbCBOb3QgU3RhcnRlZFwiXG4jICAgIHByb2plY3Rfb3JfYXJlbmE6IFwiUHJvamVjdCBvciBBcmVuYVwiXG4jICAgIHN0dWRlbnRzX25vdF9hc3NpZ25lZDogXCJTdHVkZW50cyB3aG8gaGF2ZSBub3QgYmVlbiBhc3NpZ25lZCB7e2NvdXJzZU5hbWV9fVwiXG4jICAgIGNvdXJzZV9vdmVydmlldzogXCJDb3Vyc2UgT3ZlcnZpZXdcIlxuIyAgICBjb3B5X2NsYXNzX2NvZGU6IFwiQ29weSBDbGFzcyBDb2RlXCJcbiMgICAgY2xhc3NfY29kZV9ibHVyYjogXCJTdHVkZW50cyBjYW4gam9pbiB5b3VyIGNsYXNzIHVzaW5nIHRoaXMgQ2xhc3MgQ29kZS4gTm8gZW1haWwgYWRkcmVzcyBpcyByZXF1aXJlZCB3aGVuIGNyZWF0aW5nIGEgU3R1ZGVudCBhY2NvdW50IHdpdGggdGhpcyBDbGFzcyBDb2RlLlwiXG4jICAgIGNvcHlfY2xhc3NfdXJsOiBcIkNvcHkgQ2xhc3MgVVJMXCJcbiMgICAgY2xhc3Nfam9pbl91cmxfYmx1cmI6IFwiWW91IGNhbiBhbHNvIHBvc3QgdGhpcyB1bmlxdWUgY2xhc3MgVVJMIHRvIGEgc2hhcmVkIHdlYnBhZ2UuXCJcbiMgICAgYWRkX3N0dWRlbnRzX21hbnVhbGx5OiBcIkludml0ZSBTdHVkZW50cyBieSBFbWFpbFwiXG4jICAgIGJ1bGtfYXNzaWduOiBcIlNlbGVjdCBjb3Vyc2VcIlxuIyAgICBhc3NpZ25lZF9tc2dfMTogXCJ7e251bWJlckFzc2lnbmVkfX0gc3R1ZGVudHMgd2VyZSBhc3NpZ25lZCB7e2NvdXJzZU5hbWV9fS5cIlxuIyAgICBhc3NpZ25lZF9tc2dfMjogXCJ7e251bWJlckVucm9sbGVkfX0gbGljZW5zZXMgd2VyZSBhcHBsaWVkLlwiXG4jICAgIGFzc2lnbmVkX21zZ18zOiBcIllvdSBub3cgaGF2ZSB7e3JlbWFpbmluZ1Nwb3RzfX0gYXZhaWxhYmxlIGxpY2Vuc2VzIHJlbWFpbmluZy5cIlxuIyAgICBhc3NpZ25fY291cnNlOiBcIkFzc2lnbiBDb3Vyc2VcIlxuIyAgICByZW1vdmVkX2NvdXJzZV9tc2c6IFwie3tudW1iZXJSZW1vdmVkfX0gc3R1ZGVudHMgd2VyZSByZW1vdmVkIGZyb20ge3tjb3Vyc2VOYW1lfX0uXCJcbiMgICAgcmVtb3ZlX2NvdXJzZTogXCJSZW1vdmUgQ291cnNlXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX3RpdGxlOiBcIkNvdXJzZXMgd2VyZSBub3QgYXNzaWduZWRcIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfc3RhcnRlcl9ib2R5XzE6IFwiVGhpcyBjb3Vyc2UgcmVxdWlyZXMgYSBTdGFydGVyIExpY2Vuc2UuIFlvdSBkbyBub3QgaGF2ZSBlbm91Z2ggU3RhcnRlciBMaWNlbnNlcyBhdmFpbGFibGUgdG8gYXNzaWduIHRoaXMgY291cnNlIHRvIGFsbCBfX3NlbGVjdGVkX18gc2VsZWN0ZWQgc3R1ZGVudHMuXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX3N0YXJ0ZXJfYm9keV8yOiBcIlB1cmNoYXNlIFN0YXJ0ZXIgTGljZW5zZXMgdG8gZ3JhbnQgYWNjZXNzIHRvIHRoaXMgY291cnNlLlwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF9mdWxsX2JvZHlfMTogXCJUaGlzIGNvdXJzZSByZXF1aXJlcyBhIEZ1bGwgTGljZW5zZS4gWW91IGRvIG5vdCBoYXZlIGVub3VnaCBGdWxsIExpY2Vuc2VzIGF2YWlsYWJsZSB0byBhc3NpZ24gdGhpcyBjb3Vyc2UgdG8gYWxsIF9fc2VsZWN0ZWRfXyBzZWxlY3RlZCBzdHVkZW50cy5cIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfZnVsbF9ib2R5XzI6IFwiWW91IG9ubHkgaGF2ZSBfX251bUZ1bGxMaWNlbnNlc0F2YWlsYWJsZV9fIEZ1bGwgTGljZW5zZXMgYXZhaWxhYmxlIChfX251bVN0dWRlbnRzV2l0aG91dEZ1bGxMaWNlbnNlc19fIHN0dWRlbnRzIGRvIG5vdCBjdXJyZW50bHkgaGF2ZSBhIEZ1bGwgTGljZW5zZSBhY3RpdmUpLlwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF9mdWxsX2JvZHlfMzogXCJQbGVhc2Ugc2VsZWN0IGZld2VyIHN0dWRlbnRzLCBvciByZWFjaCBvdXQgdG8gX19zdXBwb3J0RW1haWxfXyBmb3IgYXNzaXN0YW5jZS5cIlxuIyAgICBhc3NpZ25lZDogXCJBc3NpZ25lZFwiXG4jICAgIGVucm9sbF9zZWxlY3RlZF9zdHVkZW50czogXCJFbnJvbGwgU2VsZWN0ZWQgU3R1ZGVudHNcIlxuIyAgICBub19zdHVkZW50c19zZWxlY3RlZDogXCJObyBzdHVkZW50cyB3ZXJlIHNlbGVjdGVkLlwiXG4jICAgIHNob3dfc3R1ZGVudHNfZnJvbTogXCJTaG93IHN0dWRlbnRzIGZyb21cIiAjIEVucm9sbCBzdHVkZW50cyBtb2RhbFxuIyAgICBhcHBseV9saWNlbnNlc190b190aGVfZm9sbG93aW5nX3N0dWRlbnRzOiBcIkFwcGx5IExpY2Vuc2VzIHRvIHRoZSBGb2xsb3dpbmcgU3R1ZGVudHNcIlxuIyAgICBzdHVkZW50c19oYXZlX2xpY2Vuc2VzOiBcIlRoZSBmb2xsb3dpbmcgc3R1ZGVudHMgYWxyZWFkeSBoYXZlIGxpY2Vuc2VzIGFwcGxpZWQ6XCJcbiMgICAgYWxsX3N0dWRlbnRzOiBcIkFsbCBTdHVkZW50c1wiXG4jICAgIGFwcGx5X2xpY2Vuc2VzOiBcIkFwcGx5IExpY2Vuc2VzXCJcbiMgICAgbm90X2Vub3VnaF9lbnJvbGxtZW50czogXCJOb3QgZW5vdWdoIGxpY2Vuc2VzIGF2YWlsYWJsZS5cIlxuIyAgICBlbnJvbGxtZW50c19ibHVyYjogXCJTdHVkZW50cyBhcmUgcmVxdWlyZWQgdG8gaGF2ZSBhIGxpY2Vuc2UgdG8gYWNjZXNzIGFueSBjb250ZW50IGFmdGVyIHRoZSBmaXJzdCBjb3Vyc2UuXCJcbiMgICAgaG93X3RvX2FwcGx5X2xpY2Vuc2VzOiBcIkhvdyB0byBBcHBseSBMaWNlbnNlc1wiXG4jICAgIGV4cG9ydF9zdHVkZW50X3Byb2dyZXNzOiBcIkV4cG9ydCBTdHVkZW50IFByb2dyZXNzIChDU1YpXCJcbiMgICAgc2VuZF9lbWFpbF90bzogXCJTZW5kIFJlY292ZXIgUGFzc3dvcmQgRW1haWwgdG86XCJcbiMgICAgZW1haWxfc2VudDogXCJFbWFpbCBzZW50XCJcbiMgICAgc2VuZF9yZWNvdmVyeV9lbWFpbDogXCJTZW5kIHJlY292ZXJ5IGVtYWlsXCJcbiMgICAgZW50ZXJfbmV3X3Bhc3N3b3JkX2JlbG93OiBcIkVudGVyIG5ldyBwYXNzd29yZCBiZWxvdzpcIlxuIyAgICBjaGFuZ2VfcGFzc3dvcmQ6IFwiQ2hhbmdlIFBhc3N3b3JkXCJcbiMgICAgY2hhbmdlZDogXCJDaGFuZ2VkXCJcbiMgICAgYXZhaWxhYmxlX2NyZWRpdHM6IFwiQXZhaWxhYmxlIExpY2Vuc2VzXCJcbiMgICAgcGVuZGluZ19jcmVkaXRzOiBcIlBlbmRpbmcgTGljZW5zZXNcIlxuIyAgICBlbXB0eV9jcmVkaXRzOiBcIkV4aGF1c3RlZCBMaWNlbnNlc1wiXG4jICAgIGxpY2Vuc2VfcmVtYWluaW5nOiBcImxpY2Vuc2UgcmVtYWluaW5nXCJcbiMgICAgbGljZW5zZXNfcmVtYWluaW5nOiBcImxpY2Vuc2VzIHJlbWFpbmluZ1wiXG4jICAgIG9uZV9saWNlbnNlX3VzZWQ6IFwiMSBsaWNlbnNlIGhhcyBiZWVuIHVzZWRcIlxuIyAgICBudW1fbGljZW5zZXNfdXNlZDogXCJfX251bUxpY2Vuc2VzVXNlZF9fIGxpY2Vuc2VzIGhhdmUgYmVlbiB1c2VkXCJcbiMgICAgc3RhcnRlcl9saWNlbnNlczogXCJzdGFydGVyIGxpY2Vuc2VzXCJcbiMgICAgc3RhcnRfZGF0ZTogXCJzdGFydCBkYXRlOlwiXG4jICAgIGVuZF9kYXRlOiBcImVuZCBkYXRlOlwiXG4jICAgIGdldF9lbnJvbGxtZW50c19ibHVyYjogXCIgV2UnbGwgaGVscCB5b3UgYnVpbGQgYSBzb2x1dGlvbiB0aGF0IG1lZXRzIHRoZSBuZWVkcyBvZiB5b3VyIGNsYXNzLCBzY2hvb2wgb3IgZGlzdHJpY3QuXCJcbiMgICAgaG93X3RvX2FwcGx5X2xpY2Vuc2VzX2JsdXJiXzE6IFwiV2hlbiBhIHRlYWNoZXIgYXNzaWducyBhIGNvdXJzZSB0byBhIHN0dWRlbnQgZm9yIHRoZSBmaXJzdCB0aW1lLCB3ZeKAmWxsIGF1dG9tYXRpY2FsbHkgYXBwbHkgYSBsaWNlbnNlLiBVc2UgdGhlIGJ1bGstYXNzaWduIGRyb3Bkb3duIGluIHlvdXIgY2xhc3Nyb29tIHRvIGFzc2lnbiBhIGNvdXJzZSB0byBzZWxlY3RlZCBzdHVkZW50czpcIlxuIyAgICBob3dfdG9fYXBwbHlfbGljZW5zZXNfYmx1cmJfMjogXCJDYW4gSSBzdGlsbCBhcHBseSBhIGxpY2Vuc2Ugd2l0aG91dCBhc3NpZ25pbmcgYSBjb3Vyc2U/XCJcbiMgICAgaG93X3RvX2FwcGx5X2xpY2Vuc2VzX2JsdXJiXzM6IFwiWWVzIOKAlCBnbyB0byB0aGUgTGljZW5zZSBTdGF0dXMgdGFiIGluIHlvdXIgY2xhc3Nyb29tIGFuZCBjbGljayBcXFwiQXBwbHkgTGljZW5zZVxcXCIgdG8gYW55IHN0dWRlbnQgd2hvIGRvZXMgbm90IGhhdmUgYW4gYWN0aXZlIGxpY2Vuc2UuXCJcbiMgICAgcmVxdWVzdF9zZW50OiBcIlJlcXVlc3QgU2VudCFcIlxuIyAgICBhc3Nlc3NtZW50czogXCJBc3Nlc3NtZW50c1wiXG4jICAgIGxpY2Vuc2Vfc3RhdHVzOiBcIkxpY2Vuc2UgU3RhdHVzXCJcbiMgICAgc3RhdHVzX2V4cGlyZWQ6IFwiRXhwaXJlZCBvbiB7e2RhdGV9fVwiXG4jICAgIHN0YXR1c19ub3RfZW5yb2xsZWQ6IFwiTm90IEVucm9sbGVkXCJcbiMgICAgc3RhdHVzX2Vucm9sbGVkOiBcIkV4cGlyZXMgb24ge3tkYXRlfX1cIlxuIyAgICBzZWxlY3RfYWxsOiBcIlNlbGVjdCBBbGxcIlxuIyAgICBwcm9qZWN0OiBcIlByb2plY3RcIlxuIyAgICBwcm9qZWN0X2dhbGxlcnk6IFwiUHJvamVjdCBHYWxsZXJ5XCJcbiMgICAgdmlld19wcm9qZWN0OiBcIlZpZXcgUHJvamVjdFwiXG4jICAgIHVucHVibGlzaGVkOiBcIih1bnB1Ymxpc2hlZClcIlxuIyAgICB2aWV3X2FyZW5hX2xhZGRlcjogXCJWaWV3IEFyZW5hIExhZGRlclwiXG4jICAgIHJlc291cmNlX2h1YjogXCJSZXNvdXJjZSBIdWJcIlxuIyAgICBwYWNpbmdfZ3VpZGVzOiBcIkNsYXNzcm9vbS1pbi1hLUJveCBQYWNpbmcgR3VpZGVzXCJcbiMgICAgcGFjaW5nX2d1aWRlc19kZXNjOiBcIkxlYXJuIGhvdyB0byBpbmNvcnBvcmF0ZSBhbGwgb2YgQ29kZUNvbWJhdCdzIHJlc291cmNlcyB0byBwbGFuIHlvdXIgc2Nob29sIHllYXIhXCJcbiMgICAgcGFjaW5nX2d1aWRlc19lbGVtOiBcIkVsZW1lbnRhcnkgU2Nob29sIFBhY2luZyBHdWlkZVwiXG4jICAgIHBhY2luZ19ndWlkZXNfbWlkZGxlOiBcIk1pZGRsZSBTY2hvb2wgUGFjaW5nIEd1aWRlXCJcbiMgICAgcGFjaW5nX2d1aWRlc19oaWdoOiBcIkhpZ2ggU2Nob29sIFBhY2luZyBHdWlkZVwiXG4jICAgIGdldHRpbmdfc3RhcnRlZDogXCJHZXR0aW5nIFN0YXJ0ZWRcIlxuIyAgICBlZHVjYXRvcl9mYXE6IFwiRWR1Y2F0b3IgRkFRXCJcbiMgICAgZWR1Y2F0b3JfZmFxX2Rlc2M6IFwiRnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMgYWJvdXQgdXNpbmcgQ29kZUNvbWJhdCBpbiB5b3VyIGNsYXNzcm9vbSBvciBzY2hvb2wuXCJcbiMgICAgdGVhY2hlcl9nZXR0aW5nX3N0YXJ0ZWQ6IFwiVGVhY2hlciBHZXR0aW5nIFN0YXJ0ZWQgR3VpZGVcIlxuIyAgICB0ZWFjaGVyX2dldHRpbmdfc3RhcnRlZF9kZXNjOiBcIk5ldyB0byBDb2RlQ29tYmF0PyBEb3dubG9hZCB0aGlzIFRlYWNoZXIgR2V0dGluZyBTdGFydGVkIEd1aWRlIHRvIHNldCB1cCB5b3VyIGFjY291bnQsIGNyZWF0ZSB5b3VyIGZpcnN0IGNsYXNzLCBhbmQgaW52aXRlIHN0dWRlbnRzIHRvIHRoZSBmaXJzdCBjb3Vyc2UuXCJcbiMgICAgc3R1ZGVudF9nZXR0aW5nX3N0YXJ0ZWQ6IFwiU3R1ZGVudCBRdWljayBTdGFydCBHdWlkZVwiXG4jICAgIHN0dWRlbnRfZ2V0dGluZ19zdGFydGVkX2Rlc2M6IFwiWW91IGNhbiBkaXN0cmlidXRlIHRoaXMgZ3VpZGUgdG8geW91ciBzdHVkZW50cyBiZWZvcmUgc3RhcnRpbmcgQ29kZUNvbWJhdCBzbyB0aGF0IHRoZXkgY2FuIGZhbWlsaWFyaXplIHRoZW1zZWx2ZXMgd2l0aCB0aGUgY29kZSBlZGl0b3IuIFRoaXMgZ3VpZGUgY2FuIGJlIHVzZWQgZm9yIGJvdGggUHl0aG9uIGFuZCBKYXZhU2NyaXB0IGNsYXNzcm9vbXMuXCJcbiMgICAgYXBfY3NfcHJpbmNpcGxlczogXCJBUCBDb21wdXRlciBTY2llbmNlIFByaW5jaXBsZXNcIlxuIyAgICBhcF9jc19wcmluY2lwbGVzX2Rlc2M6IFwiQVAgQ29tcHV0ZXIgU2NpZW5jZSBQcmluY2lwbGVzIGdpdmVzIHN0dWRlbnRzIGEgYnJvYWQgaW50cm9kdWN0aW9uIHRvIHRoZSBwb3dlciwgaW1wYWN0LCBhbmQgcG9zc2liaWxpdGllcyBvZiBDb21wdXRlciBTY2llbmNlLiBUaGUgY291cnNlIGVtcGhhc2l6ZXMgY29tcHV0YXRpb25hbCB0aGlua2luZyBhbmQgcHJvYmxlbSBzb2x2aW5nIHdoaWxlIGFsc28gdGVhY2hpbmcgdGhlIGJhc2ljcyBvZiBwcm9ncmFtbWluZy5cIlxuIyAgICBjczE6IFwiSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2VcIlxuIyAgICBjczI6IFwiQ29tcHV0ZXIgU2NpZW5jZSAyXCJcbiMgICAgY3MzOiBcIkNvbXB1dGVyIFNjaWVuY2UgM1wiXG4jICAgIGNzNDogXCJDb21wdXRlciBTY2llbmNlIDRcIlxuIyAgICBjczU6IFwiQ29tcHV0ZXIgU2NpZW5jZSA1XCJcbiMgICAgY3MxX3N5bnRheF9weXRob246IFwiQ291cnNlIDEgUHl0aG9uIFN5bnRheCBHdWlkZVwiXG4jICAgIGNzMV9zeW50YXhfcHl0aG9uX2Rlc2M6IFwiQ2hlYXRzaGVldCB3aXRoIHJlZmVyZW5jZXMgdG8gY29tbW9uIFB5dGhvbiBzeW50YXggdGhhdCBzdHVkZW50cyB3aWxsIGxlYXJuIGluIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlLlwiXG4jICAgIGNzMV9zeW50YXhfamF2YXNjcmlwdDogXCJDb3Vyc2UgMSBKYXZhU2NyaXB0IFN5bnRheCBHdWlkZVwiXG4jICAgIGNzMV9zeW50YXhfamF2YXNjcmlwdF9kZXNjOiBcIkNoZWF0c2hlZXQgd2l0aCByZWZlcmVuY2VzIHRvIGNvbW1vbiBKYXZhU2NyaXB0IHN5bnRheCB0aGF0IHN0dWRlbnRzIHdpbGwgbGVhcm4gaW4gSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UuXCJcbiMgICAgY29taW5nX3Nvb246IFwiQWRkaXRpb25hbCBndWlkZXMgY29taW5nIHNvb24hXCJcbiMgICAgZW5naW5lZXJpbmdfY3ljbGVfd29ya3NoZWV0OiBcIkVuZ2luZWVyaW5nIEN5Y2xlIFdvcmtzaGVldFwiXG4jICAgIGVuZ2luZWVyaW5nX2N5Y2xlX3dvcmtzaGVldF9kZXNjOiBcIlVzZSB0aGlzIHdvcmtzaGVldCB0byB0ZWFjaCBzdHVkZW50cyB0aGUgYmFzaWNzIG9mIHRoZSBlbmdpbmVlcmluZyBjeWNsZTogQXNzZXNzLCBEZXNpZ24sIEltcGxlbWVudCBhbmQgRGVidWcuIFJlZmVyIHRvIHRoZSBjb21wbGV0ZWQgZXhhbXBsZSB3b3Jrc2hlZXQgYXMgYSBndWlkZS5cIlxuIyAgICBlbmdpbmVlcmluZ19jeWNsZV93b3Jrc2hlZXRfbGluazogXCJWaWV3IGV4YW1wbGVcIlxuIyAgICBwcm9ncmVzc19qb3VybmFsOiBcIlByb2dyZXNzIEpvdXJuYWxcIlxuIyAgICBwcm9ncmVzc19qb3VybmFsX2Rlc2M6IFwiRW5jb3VyYWdlIHN0dWRlbnRzIHRvIGtlZXAgdHJhY2sgb2YgdGhlaXIgcHJvZ3Jlc3MgdmlhIGEgcHJvZ3Jlc3Mgam91cm5hbC5cIlxuIyAgICBjczFfY3VycmljdWx1bTogXCJJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSAtIEN1cnJpY3VsdW0gR3VpZGVcIlxuIyAgICBjczFfY3VycmljdWx1bV9kZXNjOiBcIlNjb3BlIGFuZCBzZXF1ZW5jZSwgbGVzc29uIHBsYW5zLCBhY3Rpdml0aWVzIGFuZCBtb3JlIGZvciBDb3Vyc2UgMS5cIlxuIyAgICBhcmVuYXNfY3VycmljdWx1bTogXCJBcmVuYSBMZXZlbHMgLSBUZWFjaGVyIEd1aWRlXCJcbiMgICAgYXJlbmFzX2N1cnJpY3VsdW1fZGVzYzogXCJJbnN0cnVjdGlvbnMgb24gaG93IHRvIHJ1biBXYWtrYSBNYXVsLCBDcm9zcyBCb25lcyBhbmQgUG93ZXIgUGVhayBtdWx0aXBsYXllciBhcmVuYXMgd2l0aCB5b3VyIGNsYXNzLlwiXG4jICAgIGNzMl9jdXJyaWN1bHVtOiBcIkNvbXB1dGVyIFNjaWVuY2UgMiAtIEN1cnJpY3VsdW0gR3VpZGVcIlxuIyAgICBjczJfY3VycmljdWx1bV9kZXNjOiBcIlNjb3BlIGFuZCBzZXF1ZW5jZSwgbGVzc29uIHBsYW5zLCBhY3Rpdml0aWVzIGFuZCBtb3JlIGZvciBDb3Vyc2UgMi5cIlxuIyAgICBjczNfY3VycmljdWx1bTogXCJDb21wdXRlciBTY2llbmNlIDMgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgY3MzX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDMuXCJcbiMgICAgY3M0X2N1cnJpY3VsdW06IFwiQ29tcHV0ZXIgU2NpZW5jZSA0IC0gQ3VycmljdWx1bSBHdWlkZVwiXG4jICAgIGNzNF9jdXJyaWN1bHVtX2Rlc2M6IFwiU2NvcGUgYW5kIHNlcXVlbmNlLCBsZXNzb24gcGxhbnMsIGFjdGl2aXRpZXMgYW5kIG1vcmUgZm9yIENvdXJzZSA0LlwiXG4jICAgIGNzNV9jdXJyaWN1bHVtX2pzOiBcIkNvbXB1dGVyIFNjaWVuY2UgNSAtIEN1cnJpY3VsdW0gR3VpZGUgKEphdmFTY3JpcHQpXCJcbiMgICAgY3M1X2N1cnJpY3VsdW1fZGVzY19qczogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDUgY2xhc3NlcyB1c2luZyBKYXZhU2NyaXB0LlwiXG4jICAgIGNzNV9jdXJyaWN1bHVtX3B5OiBcIkNvbXB1dGVyIFNjaWVuY2UgNSAtIEN1cnJpY3VsdW0gR3VpZGUgKFB5dGhvbilcIlxuIyAgICBjczVfY3VycmljdWx1bV9kZXNjX3B5OiBcIlNjb3BlIGFuZCBzZXF1ZW5jZSwgbGVzc29uIHBsYW5zLCBhY3Rpdml0aWVzIGFuZCBtb3JlIGZvciBDb3Vyc2UgNSBjbGFzc2VzIHVzaW5nIFB5dGhvbi5cIlxuIyAgICBjczFfcGFpcnByb2dyYW1taW5nOiBcIlBhaXIgUHJvZ3JhbW1pbmcgQWN0aXZpdHlcIlxuIyAgICBjczFfcGFpcnByb2dyYW1taW5nX2Rlc2M6IFwiSW50cm9kdWNlIHN0dWRlbnRzIHRvIGEgcGFpciBwcm9ncmFtbWluZyBleGVyY2lzZSB0aGF0IHdpbGwgaGVscCB0aGVtIGJlY29tZSBiZXR0ZXIgbGlzdGVuZXJzIGFuZCBjb21tdW5pY2F0b3JzLlwiXG4jICAgIGdkMTogXCJHYW1lIERldmVsb3BtZW50IDFcIlxuIyAgICBnZDFfZ3VpZGU6IFwiR2FtZSBEZXZlbG9wbWVudCAxIC0gUHJvamVjdCBHdWlkZVwiXG4jICAgIGdkMV9ndWlkZV9kZXNjOiBcIlVzZSB0aGlzIHRvIGd1aWRlIHlvdXIgc3R1ZGVudHMgYXMgdGhleSBjcmVhdGUgdGhlaXIgZmlyc3Qgc2hhcmVhYmxlIGdhbWUgcHJvamVjdCBpbiA1IGRheXMuXCJcbiMgICAgZ2QxX3J1YnJpYzogXCJHYW1lIERldmVsb3BtZW50IDEgLSBQcm9qZWN0IFJ1YnJpY1wiXG4jICAgIGdkMV9ydWJyaWNfZGVzYzogXCJVc2UgdGhpcyBydWJyaWMgdG8gYXNzZXNzIHN0dWRlbnQgcHJvamVjdHMgYXQgdGhlIGVuZCBvZiBHYW1lIERldmVsb3BtZW50IDEuXCJcbiMgICAgZ2QyOiBcIkdhbWUgRGV2ZWxvcG1lbnQgMlwiXG4jICAgIGdkMl9jdXJyaWN1bHVtOiBcIkdhbWUgRGV2ZWxvcG1lbnQgMiAtIEN1cnJpY3VsdW0gR3VpZGVcIlxuIyAgICBnZDJfY3VycmljdWx1bV9kZXNjOiBcIkxlc3NvbiBwbGFucyBmb3IgR2FtZSBEZXZlbG9wbWVudCAyLlwiXG4jICAgIGdkMzogXCJHYW1lIERldmVsb3BtZW50IDNcIlxuIyAgICBnZDNfY3VycmljdWx1bTogXCJHYW1lIERldmVsb3BtZW50IDMgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgZ2QzX2N1cnJpY3VsdW1fZGVzYzogXCJMZXNzb24gcGxhbnMgZm9yIEdhbWUgRGV2ZWxvcG1lbnQgMy5cIlxuIyAgICB3ZDE6IFwiV2ViIERldmVsb3BtZW50IDFcIlxuIyAgICB3ZDFfaGVhZGxpbmVzOiBcIkhlYWRsaW5lcyAmIEhlYWRlcnMgQWN0aXZpdHlcIlxuIyAgICB3ZDFfaGVhZGxpbmVzX2V4YW1wbGU6IFwiVmlldyBzYW1wbGUgc29sdXRpb25cIlxuIyAgICB3ZDFfaGVhZGxpbmVzX2Rlc2M6IFwiV2h5IGFyZSBwYXJhZ3JhcGggYW5kIGhlYWRlciB0YWdzIGltcG9ydGFudD8gVXNlIHRoaXMgYWN0aXZpdHkgdG8gc2hvdyBob3cgd2VsbC1jaG9zZW4gaGVhZGVycyBtYWtlIHdlYiBwYWdlcyBlYXNpZXIgdG8gcmVhZC4gVGhlcmUgYXJlIG1hbnkgY29ycmVjdCBzb2x1dGlvbnMgdG8gdGhpcyFcIlxuIyAgICB3ZDFfaHRtbF9zeW50YXg6IFwiSFRNTCBTeW50YXggR3VpZGVcIlxuIyAgICB3ZDFfaHRtbF9zeW50YXhfZGVzYzogXCJPbmUtcGFnZSByZWZlcmVuY2UgZm9yIHRoZSBIVE1MIHN0eWxlIHN0dWRlbnRzIHdpbGwgbGVhcm4gaW4gV2ViIERldmVsb3BtZW50IDEuXCJcbiMgICAgd2QxX2Nzc19zeW50YXg6IFwiQ1NTIFN5bnRheCBHdWlkZVwiXG4jICAgIHdkMV9jc3Nfc3ludGF4X2Rlc2M6IFwiT25lLXBhZ2UgcmVmZXJlbmNlIGZvciB0aGUgQ1NTIGFuZCBTdHlsZSBzeW50YXggc3R1ZGVudHMgd2lsbCBsZWFybiBpbiBXZWIgRGV2ZWxvcG1lbnQgMS5cIlxuIyAgICB3ZDI6IFwiV2ViIERldmVsb3BtZW50IDJcIlxuIyAgICB3ZDJfanF1ZXJ5X3N5bnRheDogXCJqUXVlcnkgRnVuY3Rpb25zIFN5bnRheCBHdWlkZVwiXG4jICAgIHdkMl9qcXVlcnlfc3ludGF4X2Rlc2M6IFwiT25lLXBhZ2UgcmVmZXJlbmNlIGZvciB0aGUgalF1ZXJ5IGZ1bmN0aW9ucyBzdHVkZW50cyB3aWxsIGxlYXJuIGluIFdlYiBEZXZlbG9wbWVudCAyLlwiXG4jICAgIHdkMl9xdWl6bGV0X3dvcmtzaGVldDogXCJRdWl6bGV0IFBsYW5uaW5nIFdvcmtzaGVldFwiXG4jICAgIHdkMl9xdWl6bGV0X3dvcmtzaGVldF9pbnN0cnVjdGlvbnM6IFwiVmlldyBpbnN0cnVjdGlvbnMgJiBleGFtcGxlc1wiXG4jICAgIHdkMl9xdWl6bGV0X3dvcmtzaGVldF9kZXNjOiBcIkJlZm9yZSB5b3VyIHN0dWRlbnRzIGJ1aWxkIHRoZWlyIHBlcnNvbmFsaXR5IHF1aXogcHJvamVjdCBhdCB0aGUgZW5kIG9mIFdlYiBEZXZlbG9wbWVudCAyLCB0aGV5IHNob3VsZCBwbGFuIG91dCB0aGVpciBxdWl6IHF1ZXN0aW9ucywgb3V0Y29tZXMgYW5kIHJlc3BvbnNlcyB1c2luZyB0aGlzIHdvcmtzaGVldC4gVGVhY2hlcnMgY2FuIGRpc3RyaWJ1dGUgdGhlIGluc3RydWN0aW9ucyBhbmQgZXhhbXBsZXMgZm9yIHN0dWRlbnRzIHRvIHJlZmVyIHRvLlwiXG4jICAgIHN0dWRlbnRfb3ZlcnZpZXc6IFwiT3ZlcnZpZXdcIlxuIyAgICBzdHVkZW50X2RldGFpbHM6IFwiU3R1ZGVudCBEZXRhaWxzXCJcbiMgICAgc3R1ZGVudF9uYW1lOiBcIlN0dWRlbnQgTmFtZVwiXG4jICAgIG5vX25hbWU6IFwiTm8gbmFtZSBwcm92aWRlZC5cIlxuIyAgICBub191c2VybmFtZTogXCJObyB1c2VybmFtZSBwcm92aWRlZC5cIlxuIyAgICBub19lbWFpbDogXCJTdHVkZW50IGhhcyBubyBlbWFpbCBhZGRyZXNzIHNldC5cIlxuIyAgICBzdHVkZW50X3Byb2ZpbGU6IFwiU3R1ZGVudCBQcm9maWxlXCJcbiMgICAgcGxheXRpbWVfZGV0YWlsOiBcIlBsYXl0aW1lIERldGFpbFwiXG4jICAgIHN0dWRlbnRfY29tcGxldGVkOiBcIlN0dWRlbnQgQ29tcGxldGVkXCJcbiMgICAgc3R1ZGVudF9pbl9wcm9ncmVzczogXCJTdHVkZW50IGluIFByb2dyZXNzXCJcbiMgICAgY2xhc3NfYXZlcmFnZTogXCJDbGFzcyBBdmVyYWdlXCJcbiMgICAgbm90X2Fzc2lnbmVkOiBcImhhcyBub3QgYmVlbiBhc3NpZ25lZCB0aGUgZm9sbG93aW5nIGNvdXJzZXNcIlxuIyAgICBwbGF5dGltZV9heGlzOiBcIlBsYXl0aW1lIGluIFNlY29uZHNcIlxuIyAgICBsZXZlbHNfYXhpczogXCJMZXZlbHMgaW5cIlxuIyAgICBzdHVkZW50X3N0YXRlOiBcIkhvdyBpc1wiXG4jICAgIHN0dWRlbnRfc3RhdGVfMjogXCJkb2luZz9cIlxuIyAgICBzdHVkZW50X2dvb2Q6IFwiaXMgZG9pbmcgd2VsbCBpblwiXG4jICAgIHN0dWRlbnRfZ29vZF9kZXRhaWw6IFwiVGhpcyBzdHVkZW50IGlzIGtlZXBpbmcgcGFjZSB3aXRoIHRoZSBjbGFzcy5cIlxuIyAgICBzdHVkZW50X3dhcm46IFwibWlnaHQgbmVlZCBzb21lIGhlbHAgaW5cIlxuIyAgICBzdHVkZW50X3dhcm5fZGV0YWlsOiBcIlRoaXMgc3R1ZGVudCBtaWdodCBuZWVkIHNvbWUgaGVscCB3aXRoIG5ldyBjb25jZXB0cyB0aGF0IGhhdmUgYmVlbiBpbnRyb2R1Y2VkIGluIHRoaXMgY291cnNlLlwiXG4jICAgIHN0dWRlbnRfZ3JlYXQ6IFwiaXMgZG9pbmcgZ3JlYXQgaW5cIlxuIyAgICBzdHVkZW50X2dyZWF0X2RldGFpbDogXCJUaGlzIHN0dWRlbnQgbWlnaHQgYmUgYSBnb29kIGNhbmRpZGF0ZSB0byBoZWxwIG90aGVyIHN0dWRlbnRzIHdvcmtpbmcgdGhyb3VnaCB0aGlzIGNvdXJzZS5cIlxuIyAgICBmdWxsX2xpY2Vuc2U6IFwiRnVsbCBMaWNlbnNlXCJcbiMgICAgc3RhcnRlcl9saWNlbnNlOiBcIlN0YXJ0ZXIgTGljZW5zZVwiXG4jICAgIHRyaWFsOiBcIlRyaWFsXCJcbiMgICAgaG9jX3dlbGNvbWU6IFwiSGFwcHkgQ29tcHV0ZXIgU2NpZW5jZSBFZHVjYXRpb24gV2Vla1wiXG4jICAgIGhvY19pbnRybzogXCJUaGVyZSBhcmUgdGhyZWUgd2F5cyBmb3IgeW91ciBjbGFzcyB0byBwYXJ0aWNpcGF0ZSBpbiBIb3VyIG9mIENvZGUgd2l0aCBDb2RlQ29tYmF0XCJcbiMgICAgaG9jX3NlbGZfbGVkOiBcIlNlbGYtTGVkIEdhbWVwbGF5XCJcbiMgICAgaG9jX3NlbGZfbGVkX2Rlc2M6IFwiU3R1ZGVudHMgY2FuIHBsYXkgdGhyb3VnaCB0d28gSG91ciBvZiBDb2RlIENvZGVDb21iYXQgdHV0b3JpYWxzIG9uIHRoZWlyIG93blwiXG4jICAgIGhvY19nYW1lX2RldjogXCJHYW1lIERldmVsb3BtZW50XCJcbiMgICAgaG9jX2FuZDogXCJhbmRcIlxuIyAgICBob2NfcHJvZ3JhbW1pbmc6IFwiSmF2YVNjcmlwdC9QeXRob24gUHJvZ3JhbW1pbmdcIlxuIyAgICBob2NfdGVhY2hlcl9sZWQ6IFwiVGVhY2hlci1MZWQgTGVzc29uc1wiXG4jICAgIGhvY190ZWFjaGVyX2xlZF9kZXNjMTogXCJEb3dubG9hZCBvdXJcIlxuIyAgICBob2NfdGVhY2hlcl9sZWRfbGluazogXCJJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSBsZXNzb24gcGxhbnNcIlxuIyAgICBob2NfdGVhY2hlcl9sZWRfZGVzYzI6IFwidG8gaW50cm9kdWNlIHlvdXIgc3R1ZGVudHMgdG8gcHJvZ3JhbW1pbmcgY29uY2VwdHMgdXNpbmcgb2ZmbGluZSBhY3Rpdml0aWVzXCJcbiMgICAgaG9jX2dyb3VwOiBcIkdyb3VwIEdhbWVwbGF5XCJcbiMgICAgaG9jX2dyb3VwX2Rlc2NfMTogXCJUZWFjaGVycyBjYW4gdXNlIHRoZSBsZXNzb25zIGluIGNvbmp1bmN0aW9uIHdpdGggb3VyIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlIGNvdXJzZSB0byB0cmFjayBzdHVkZW50IHByb2dyZXNzLiBTZWUgb3VyXCJcbiMgICAgaG9jX2dyb3VwX2xpbms6IFwiR2V0dGluZyBTdGFydGVkIEd1aWRlXCJcbiMgICAgaG9jX2dyb3VwX2Rlc2NfMjogXCJmb3IgbW9yZSBkZXRhaWxzXCJcbiMgICAgaG9jX2FkZGl0aW9uYWxfZGVzYzE6IFwiRm9yIGFkZGl0aW9uYWwgQ29kZUNvbWJhdCByZXNvdXJjZXMgYW5kIGFjdGl2aXRpZXMsIHNlZSBvdXJcIlxuIyAgICBob2NfYWRkaXRpb25hbF9kZXNjMjogXCJRdWVzdGlvbnNcIlxuIyAgICBob2NfYWRkaXRpb25hbF9jb250YWN0OiBcIkdldCBpbiB0b3VjaFwiXG4jICAgIHJldm9rZV9jb25maXJtOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXZva2UgYSBGdWxsIExpY2Vuc2UgZnJvbSB7e3N0dWRlbnRfbmFtZX19PyBUaGUgbGljZW5zZSB3aWxsIGJlY29tZSBhdmFpbGFibGUgdG8gYXNzaWduIHRvIGFub3RoZXIgc3R1ZGVudC5cIlxuIyAgICByZXZva2luZzogXCJSZXZva2luZy4uLlwiXG4jICAgIHVudXNlZF9saWNlbnNlczogXCJZb3UgaGF2ZSB1bnVzZWQgTGljZW5zZXMgdGhhdCBhbGxvdyB5b3UgdG8gYXNzaWduIHN0dWRlbnRzIHBhaWQgY291cnNlcyB3aGVuIHRoZXkncmUgcmVhZHkgdG8gbGVhcm4gbW9yZSFcIlxuIyAgICByZW1lbWJlcl9uZXdfY291cnNlczogXCJSZW1lbWJlciB0byBhc3NpZ24gbmV3IGNvdXJzZXMhXCJcbiMgICAgbW9yZV9pbmZvOiBcIk1vcmUgSW5mb1wiXG4jICAgIGhvd190b19hc3NpZ25fY291cnNlczogXCJIb3cgdG8gQXNzaWduIENvdXJzZXNcIlxuIyAgICBzZWxlY3Rfc3R1ZGVudHM6IFwiU2VsZWN0IFN0dWRlbnRzXCJcbiMgICAgc2VsZWN0X2luc3RydWN0aW9uczogXCJDbGljayB0aGUgY2hlY2tib3ggbmV4dCB0byBlYWNoIHN0dWRlbnQgeW91IHdhbnQgdG8gYXNzaWduIGNvdXJzZXMgdG8uXCJcbiMgICAgY2hvb3NlX2NvdXJzZTogXCJDaG9vc2UgQ291cnNlXCJcbiMgICAgY2hvb3NlX2luc3RydWN0aW9uczogXCJTZWxlY3QgdGhlIGNvdXJzZSBmcm9tIHRoZSBkcm9wZG93biBtZW51IHlvdeKAmWQgbGlrZSB0byBhc3NpZ24sIHRoZW4gY2xpY2sg4oCcQXNzaWduIHRvIFNlbGVjdGVkIFN0dWRlbnRzLuKAnVwiXG4jICAgIHB1c2hfcHJvamVjdHM6IFwiV2UgcmVjb21tZW5kIGFzc2lnbmluZyBXZWIgRGV2ZWxvcG1lbnQgMSBvciBHYW1lIERldmVsb3BtZW50IDEgYWZ0ZXIgc3R1ZGVudHMgaGF2ZSBmaW5pc2hlZCBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSEgU2VlIG91ciB7e3Jlc291cmNlX2h1Yn19IGZvciBtb3JlIGRldGFpbHMgb24gdGhvc2UgY291cnNlcy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0OiBcIlRlYWNoZXIncyBRdWVzdCBmb3IgU3VjY2Vzc1wiXG4jICAgIHF1ZXN0c19jb21wbGV0ZTogXCJRdWVzdHMgQ29tcGxldGVcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2NyZWF0ZV9jbGFzc3Jvb206IFwiQ3JlYXRlIENsYXNzcm9vbVwiXG4jICAgIHRlYWNoZXJfcXVlc3RfYWRkX3N0dWRlbnRzOiBcIkFkZCBTdHVkZW50c1wiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbWV0aG9kczogXCJIZWxwIHlvdXIgc3R1ZGVudHMgbGVhcm4gaG93IHRvIGBjYWxsIG1ldGhvZHNgLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbWV0aG9kc19zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0aHJvdWdoIHRoZSBmaXJzdCBsZXZlbCwgX19EdW5nZW9ucyBvZiBLaXRoZ2FyZF9fXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9tZXRob2RzX3N0ZXAyOiBcIlByaW50IG91dCB0aGUgW1N0dWRlbnQgUXVpY2sgU3RhcnQgR3VpZGVdKGh0dHA6Ly9maWxlcy5jb2RlY29tYmF0LmNvbS9kb2NzL3Jlc291cmNlcy9TdHVkZW50UXVpY2tTdGFydEd1aWRlLnBkZikgaW4gdGhlIFJlc291cmNlIEh1Yi5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3N0cmluZ3M6IFwiRG9uJ3Qgc3RyaW5nIHlvdXIgc3R1ZGVudHMgYWxvbmcsIHRlYWNoIHRoZW0gYHN0cmluZ3NgLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfc3RyaW5nc19zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0aHJvdWdoIF9fVHJ1ZSBOYW1lc19fXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9zdHJpbmdzX3N0ZXAyOiBcIlVzZSB0aGUgVGVhY2hlciBMZXZlbCBTZWxlY3RvciBvbiBbQ291cnNlIEd1aWRlc10oL3RlYWNoZXJzL2NvdXJzZXMpIHBhZ2UgdG8gcHJldmlldyBfX1RydWUgTmFtZXNfXy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX2xvb3BzOiBcIktlZXAgeW91ciBzdHVkZW50cyBpbiB0aGUgbG9vcCBhYm91dCBgbG9vcHNgLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbG9vcHNfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdGhyb3VnaCBfX0ZpcmUgRGFuY2luZ19fLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbG9vcHNfc3RlcDI6IFwiVXNlIHRoZSBfX0xvb3BzIEFjdGl2aXR5X18gaW4gdGhlIFtDUzEgQ3VycmljdWx1bSBndWlkZV0oL3RlYWNoZXJzL3Jlc291cmNlcy9jczEpIHRvIHJlaW5mb3JjZSB0aGlzIGNvbmNlcHQuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF92YXJpYWJsZXM6IFwiVmFyeSBpdCB1cCB3aXRoIGB2YXJpYWJsZXNgLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfdmFyaWFibGVzX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRocm91Z2ggX19Lbm93biBFbmVteV9fLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfdmFyaWFibGVzX3N0ZXAyOiBcIkVuY291cmFnZSBjb2xsYWJvcmF0aW9uIGJ5IHVzaW5nIHRoZSBbUGFpciBQcm9ncmFtbWluZyBBY3Rpdml0eV0oL3RlYWNoZXJzL3Jlc291cmNlcy9wYWlyLXByb2dyYW1taW5nKS5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2tpdGhnYXJkX2dhdGVzXzEwMDogXCJFc2NhcGUgdGhlIEtpdGhnYXJkIEdhdGVzIHdpdGggeW91ciBjbGFzcy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2tpdGhnYXJkX2dhdGVzXzEwMF9zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0aHJvdWdoIF9fS2l0aGdhcmQgR2F0ZXNfXy5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2tpdGhnYXJkX2dhdGVzXzEwMF9zdGVwMjogXCJHdWlkZSBzdHVkZW50cyB0byB0aGluayB0aHJvdWdoIGhhcmQgcHJvYmxlbXMgdXNpbmcgdGhlIFtFbmdpbmVlcmluZyBDeWNsZSBXb3Jrc2hlZXRdKGh0dHA6Ly9maWxlcy5jb2RlY29tYmF0LmNvbS9kb2NzL3Jlc291cmNlcy9FbmdpbmVlcmluZ0N5Y2xlV29ya3NoZWV0LnBkZikuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF93YWtrYV9tYXVsXzEwMDogXCJQcmVwYXJlIHRvIGR1ZWwgaW4gV2Fra2EgTWF1bC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3dha2thX21hdWxfMTAwX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRvIF9fV2Fra2EgTWF1bF9fLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfd2Fra2FfbWF1bF8xMDBfc3RlcDI6IFwiU2VlIHRoZSBbQXJlbmEgR3VpZGVdKC90ZWFjaGVycy9yZXNvdXJjZXMvYXJlbmFzKSBpbiB0aGUgW1Jlc291cmNlIEh1Yl0oL3RlYWNoZXJzL3Jlc291cmNlcykgZm9yIHRpcHMgb24gaG93IHRvIHJ1biBhIHN1Y2Nlc3NmdWwgYXJlbmEgZGF5LlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfcmVhY2hfZ2FtZWRldjogXCJFeHBsb3JlIG5ldyB3b3JsZHMhXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9yZWFjaF9nYW1lZGV2X3N0ZXAxOiBcIltHZXQgbGljZW5zZXNdKC90ZWFjaGVycy9saWNlbnNlcykgc28gdGhhdCB5b3VyIHN0dWRlbnRzIGNhbiBleHBsb3JlIG5ldyB3b3JsZHMsIGxpa2UgR2FtZSBEZXZlbG9wbWVudCBhbmQgV2ViIERldmVsb3BtZW50IVwiXG4jICAgIHRlYWNoZXJfcXVlc3RfZG9uZTogXCJXYW50IHlvdXIgc3R1ZGVudHMgdG8gbGVhcm4gZXZlbiBtb3JlIGNvZGU/IEdldCBpbiB0b3VjaCB3aXRoIG91ciBbc2Nob29sIHNwZWNpYWxpc3RzXShtYWlsdG86c2Nob29sc0Bjb2RlY29tYmF0LmNvbSkgdG9kYXkhXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9rZWVwX2dvaW5nOiBcIktlZXAgZ29pbmchIEhlcmUncyB3aGF0IHlvdSBjYW4gZG8gbmV4dDpcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X21vcmU6IFwiU2VlIGFsbCBxdWVzdHNcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2xlc3M6IFwiU2VlIGZld2VyIHF1ZXN0c1wiXG4jICAgIHJlZnJlc2hfdG9fdXBkYXRlOiBcIihyZWZyZXNoIHRoZSBwYWdlIHRvIHNlZSB1cGRhdGVzKVwiXG4jICAgIHZpZXdfcHJvamVjdF9nYWxsZXJ5OiBcIlZpZXcgUHJvamVjdCBHYWxsZXJ5XCJcbiMgICAgb2ZmaWNlX2hvdXJzOiBcIlRlYWNoZXIgV2ViaW5hcnNcIlxuIyAgICBvZmZpY2VfaG91cnNfZGV0YWlsOiBcIkxlYXJuIGhvdyB0byBrZWVwIHVwIHdpdGggd2l0aCB5b3VyIHN0dWRlbnRzIGFzIHRoZXkgY3JlYXRlIGdhbWVzIGFuZCBlbWJhcmsgb24gdGhlaXIgY29kaW5nIGpvdXJuZXkhIENvbWUgYW5kIGF0dGVuZCBvdXJcIlxuIyAgICBvZmZpY2VfaG91cnNfbGluazogXCJ0ZWFjaGVyIHdlYmluYXJcIlxuIyAgICBvZmZpY2VfaG91cnNfZGV0YWlsXzI6IFwic2Vzc2lvbnMuXCJcbiMgICAgc3VjY2VzczogXCJTdWNjZXNzXCJcbiMgICAgaW5fcHJvZ3Jlc3M6IFwiSW4gUHJvZ3Jlc3NcIlxuIyAgICBub3Rfc3RhcnRlZDogXCJOb3QgU3RhcnRlZFwiXG4jICAgIG1pZF9jb3Vyc2U6IFwiTWlkLUNvdXJzZVwiXG4jICAgIGVuZF9jb3Vyc2U6IFwiRW5kIG9mIENvdXJzZVwiXG4jICAgIG5vbmU6IFwiTm9uZSBkZXRlY3RlZCB5ZXRcIlxuIyAgICBleHBsYWluX29wZW5fZW5kZWQ6IFwiTm90ZTogU3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gc29sdmUgdGhpcyBsZXZlbCBjcmVhdGl2ZWx5IOKAlCBvbmUgcG9zc2libGUgc29sdXRpb24gaXMgcHJvdmlkZWQgYmVsb3cuXCJcbiMgICAgbGV2ZWxfbGFiZWw6IFwiTGV2ZWw6XCJcbiMgICAgdGltZV9wbGF5ZWRfbGFiZWw6IFwiVGltZSBQbGF5ZWQ6XCJcbiMgICAgYmFja190b19yZXNvdXJjZV9odWI6IFwiQmFjayB0byBSZXNvdXJjZSBIdWJcIlxuIyAgICBwcmludF9ndWlkZTogXCJQcmludCB0aGlzIGd1aWRlXCJcbiMgICAgY29tYm86IFwiQ29tYm9cIlxuIyAgICBjb21ib19leHBsYW5hdGlvbjogXCJTdHVkZW50cyBwYXNzIENvbWJvIGNoYWxsZW5nZSBsZXZlbHMgYnkgdXNpbmcgYXQgbGVhc3Qgb25lIGxpc3RlZCBjb25jZXB0LiBSZXZpZXcgc3R1ZGVudCBjb2RlIGJ5IGNsaWNraW5nIHRoZSBwcm9ncmVzcyBkb3QuXCJcbiMgICAgY29uY2VwdDogXCJDb25jZXB0XCJcblxuIyAgc2hhcmVfbGljZW5zZXM6XG4jICAgIHNoYXJlX2xpY2Vuc2VzOiBcIlNoYXJlIExpY2Vuc2VzXCJcbiMgICAgc2hhcmVkX2J5OiBcIlNoYXJlZCBCeTpcIlxuIyAgICBhZGRfdGVhY2hlcl9sYWJlbDogXCJFbnRlciBleGFjdCB0ZWFjaGVyIGVtYWlsOlwiXG4jICAgIGFkZF90ZWFjaGVyX2J1dHRvbjogXCJBZGQgVGVhY2hlclwiXG4jICAgIHN1YmhlYWRlcjogXCJZb3UgY2FuIG1ha2UgeW91ciBsaWNlbnNlcyBhdmFpbGFibGUgdG8gb3RoZXIgdGVhY2hlcnMgaW4geW91ciBvcmdhbml6YXRpb24uIEVhY2ggbGljZW5zZSBjYW4gb25seSBiZSB1c2VkIGZvciBvbmUgc3R1ZGVudCBhdCBhIHRpbWUuXCJcbiMgICAgdGVhY2hlcl9ub3RfZm91bmQ6IFwiVGVhY2hlciBub3QgZm91bmQuIFBsZWFzZSBtYWtlIHN1cmUgdGhpcyB0ZWFjaGVyIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBUZWFjaGVyIEFjY291bnQuXCJcbiMgICAgdGVhY2hlcl9ub3RfdmFsaWQ6IFwiVGhpcyBpcyBub3QgYSB2YWxpZCBUZWFjaGVyIEFjY291bnQuIE9ubHkgdGVhY2hlciBhY2NvdW50cyBjYW4gc2hhcmUgbGljZW5zZXMuXCJcbiMgICAgYWxyZWFkeV9zaGFyZWQ6IFwiWW91J3ZlIGFscmVhZHkgc2hhcmVkIHRoZXNlIGxpY2Vuc2VzIHdpdGggdGhhdCB0ZWFjaGVyLlwiXG4jICAgIHRlYWNoZXJzX3VzaW5nX3RoZXNlOiBcIlRlYWNoZXJzIHdobyBjYW4gYWNjZXNzIHRoZXNlIGxpY2Vuc2VzOlwiXG4jICAgIGZvb3RlcjogXCJXaGVuIHRlYWNoZXJzIHJldm9rZSBsaWNlbnNlcyBmcm9tIHN0dWRlbnRzLCB0aGUgbGljZW5zZXMgd2lsbCBiZSByZXR1cm5lZCB0byB0aGUgc2hhcmVkIHBvb2wgZm9yIG90aGVyIHRlYWNoZXJzIGluIHRoaXMgZ3JvdXAgdG8gdXNlLlwiXG4jICAgIHlvdTogXCIoeW91KVwiXG4jICAgIG9uZV9saWNlbnNlX3VzZWQ6IFwiKDEgbGljZW5zZSB1c2VkKVwiXG4jICAgIGxpY2Vuc2VzX3VzZWQ6IFwiKF9fbGljZW5zZXNVc2VkX18gbGljZW5zZXMgdXNlZClcIlxuIyAgICBtb3JlX2luZm86IFwiTW9yZSBpbmZvXCJcblxuIyAgc2hhcmluZzpcbiMgICAgZ2FtZTogXCJHYW1lXCJcbiMgICAgd2VicGFnZTogXCJXZWJwYWdlXCJcbiMgICAgeW91cl9zdHVkZW50c19wcmV2aWV3OiBcIllvdXIgc3R1ZGVudHMgd2lsbCBjbGljayBoZXJlIHRvIHNlZSB0aGVpciBmaW5pc2hlZCBwcm9qZWN0cyEgVW5hdmFpbGFibGUgaW4gdGVhY2hlciBwcmV2aWV3LlwiXG4jICAgIHVuYXZhaWxhYmxlOiBcIkxpbmsgc2hhcmluZyBub3QgYXZhaWxhYmxlIGluIHRlYWNoZXIgcHJldmlldy5cIlxuIyAgICBzaGFyZV9nYW1lOiBcIlNoYXJlIFRoaXMgR2FtZVwiXG4jICAgIHNoYXJlX3dlYjogXCJTaGFyZSBUaGlzIFdlYnBhZ2VcIlxuIyAgICB2aWN0b3J5X3NoYXJlX3ByZWZpeDogXCJTaGFyZSB0aGlzIGxpbmsgdG8gaW52aXRlIHlvdXIgZnJpZW5kcyAmIGZhbWlseSB0b1wiXG4jICAgIHZpY3Rvcnlfc2hhcmVfcHJlZml4X3Nob3J0OiBcIkludml0ZSBwZW9wbGUgdG9cIlxuIyAgICB2aWN0b3J5X3NoYXJlX2dhbWU6IFwicGxheSB5b3VyIGdhbWUgbGV2ZWxcIlxuIyAgICB2aWN0b3J5X3NoYXJlX3dlYjogXCJ2aWV3IHlvdXIgd2VicGFnZVwiXG4jICAgIHZpY3Rvcnlfc2hhcmVfc3VmZml4OiBcIi5cIlxuIyAgICB2aWN0b3J5X2NvdXJzZV9zaGFyZV9wcmVmaXg6IFwiVGhpcyBsaW5rIHdpbGwgbGV0IHlvdXIgZnJpZW5kcyAmIGZhbWlseVwiXG4jICAgIHZpY3RvcnlfY291cnNlX3NoYXJlX2dhbWU6IFwicGxheSB0aGUgZ2FtZVwiXG4jICAgIHZpY3RvcnlfY291cnNlX3NoYXJlX3dlYjogXCJ2aWV3IHRoZSB3ZWJwYWdlXCJcbiMgICAgdmljdG9yeV9jb3Vyc2Vfc2hhcmVfc3VmZml4OiBcInlvdSBqdXN0IGNyZWF0ZWQuXCJcbiMgICAgY29weV91cmw6IFwiQ29weSBVUkxcIlxuIyAgICBzaGFyZV93aXRoX3RlYWNoZXJfZW1haWw6IFwiU2VuZCB0byB5b3VyIHRlYWNoZXJcIlxuXG4jICBnYW1lX2RldjpcbiMgICAgY3JlYXRvcjogXCJDcmVhdG9yXCJcblxuIyAgd2ViX2RldjpcbiMgICAgaW1hZ2VfZ2FsbGVyeV90aXRsZTogXCJJbWFnZSBHYWxsZXJ5XCJcbiMgICAgc2VsZWN0X2FuX2ltYWdlOiBcIlNlbGVjdCBhbiBpbWFnZSB5b3Ugd2FudCB0byB1c2VcIlxuIyAgICBzY3JvbGxfZG93bl9mb3JfbW9yZV9pbWFnZXM6IFwiKFNjcm9sbCBkb3duIGZvciBtb3JlIGltYWdlcylcIlxuIyAgICBjb3B5X3RoZV91cmw6IFwiQ29weSB0aGUgVVJMIGJlbG93XCJcbiMgICAgY29weV90aGVfdXJsX2Rlc2NyaXB0aW9uOiBcIlVzZWZ1bCBpZiB5b3Ugd2FudCB0byByZXBsYWNlIGFuIGV4aXN0aW5nIGltYWdlLlwiXG4jICAgIGNvcHlfdGhlX2ltZ190YWc6IFwiQ29weSB0aGUgPGltZz4gdGFnXCJcbiMgICAgY29weV90aGVfaW1nX3RhZ19kZXNjcmlwdGlvbjogXCJVc2VmdWwgaWYgeW91IHdhbnQgdG8gaW5zZXJ0IGEgbmV3IGltYWdlLlwiXG4jICAgIGNvcHlfdXJsOiBcIkNvcHkgVVJMXCJcbiMgICAgY29weV9pbWc6IFwiQ29weSA8aW1nPlwiXG4jICAgIGhvd190b19jb3B5X3Bhc3RlOiBcIkhvdyB0byBDb3B5L1Bhc3RlXCJcbiMgICAgY29weTogXCJDb3B5XCJcbiMgICAgcGFzdGU6IFwiUGFzdGVcIlxuIyAgICBiYWNrX3RvX2VkaXRpbmc6IFwiQmFjayB0byBFZGl0aW5nXCJcblxuIyAgY2xhc3NlczpcbiMgICAgYXJjaG1hZ2VfdGl0bGU6IFwiQXJjaG1hZ2VcIlxuIyAgICBhcmNobWFnZV90aXRsZV9kZXNjcmlwdGlvbjogXCIoQ29kZXIpXCJcbiMgICAgYXJjaG1hZ2Vfc3VtbWFyeTogXCJJZiB5b3UgYXJlIGEgZGV2ZWxvcGVyIGludGVyZXN0ZWQgaW4gY29kaW5nIGVkdWNhdGlvbmFsIGdhbWVzLCBiZWNvbWUgYW4gYXJjaG1hZ2UgdG8gaGVscCB1cyBidWlsZCBDb2RlQ29tYmF0IVwiXG4jICAgIGFydGlzYW5fdGl0bGU6IFwiQXJ0aXNhblwiXG4jICAgIGFydGlzYW5fdGl0bGVfZGVzY3JpcHRpb246IFwiKExldmVsIEJ1aWxkZXIpXCJcbiMgICAgYXJ0aXNhbl9zdW1tYXJ5OiBcIkJ1aWxkIGFuZCBzaGFyZSBsZXZlbHMgZm9yIHlvdSBhbmQgeW91ciBmcmllbmRzIHRvIHBsYXkuIEJlY29tZSBhbiBBcnRpc2FuIHRvIGxlYXJuIHRoZSBhcnQgb2YgdGVhY2hpbmcgb3RoZXJzIHRvIHByb2dyYW0uXCJcbiMgICAgYWR2ZW50dXJlcl90aXRsZTogXCJBZHZlbnR1cmVyXCJcbiMgICAgYWR2ZW50dXJlcl90aXRsZV9kZXNjcmlwdGlvbjogXCIoTGV2ZWwgUGxheXRlc3RlcilcIlxuIyAgICBhZHZlbnR1cmVyX3N1bW1hcnk6IFwiR2V0IG91ciBuZXcgbGV2ZWxzIChldmVuIG91ciBzdWJzY3JpYmVyIGNvbnRlbnQpIGZvciBmcmVlIG9uZSB3ZWVrIGVhcmx5IGFuZCBoZWxwIHVzIHdvcmsgb3V0IGJ1Z3MgYmVmb3JlIG91ciBwdWJsaWMgcmVsZWFzZS5cIlxuIyAgICBzY3JpYmVfdGl0bGU6IFwiU2NyaWJlXCJcbiMgICAgc2NyaWJlX3RpdGxlX2Rlc2NyaXB0aW9uOiBcIihBcnRpY2xlIEVkaXRvcilcIlxuIyAgICBzY3JpYmVfc3VtbWFyeTogXCJHb29kIGNvZGUgbmVlZHMgZ29vZCBkb2N1bWVudGF0aW9uLiBXcml0ZSwgZWRpdCwgYW5kIGltcHJvdmUgdGhlIGRvY3MgcmVhZCBieSBtaWxsaW9ucyBvZiBwbGF5ZXJzIGFjcm9zcyB0aGUgZ2xvYmUuXCJcbiMgICAgZGlwbG9tYXRfdGl0bGU6IFwiRGlwbG9tYXRcIlxuIyAgICBkaXBsb21hdF90aXRsZV9kZXNjcmlwdGlvbjogXCIoVHJhbnNsYXRvcilcIlxuIyAgICBkaXBsb21hdF9zdW1tYXJ5OiBcIkNvZGVDb21iYXQgaXMgbG9jYWxpemVkIGluIDQ1KyBsYW5ndWFnZXMgYnkgb3VyIERpcGxvbWF0cy4gSGVscCB1cyBvdXQgYW5kIGNvbnRyaWJ1dGUgdHJhbnNsYXRpb25zLlwiXG4jICAgIGFtYmFzc2Fkb3JfdGl0bGU6IFwiQW1iYXNzYWRvclwiXG4jICAgIGFtYmFzc2Fkb3JfdGl0bGVfZGVzY3JpcHRpb246IFwiKFN1cHBvcnQpXCJcbiMgICAgYW1iYXNzYWRvcl9zdW1tYXJ5OiBcIlRhbWUgb3VyIGZvcnVtIHVzZXJzIGFuZCBwcm92aWRlIGRpcmVjdGlvbiBmb3IgdGhvc2Ugd2l0aCBxdWVzdGlvbnMuIE91ciBhbWJhc3NhZG9ycyByZXByZXNlbnQgQ29kZUNvbWJhdCB0byB0aGUgd29ybGQuXCJcbiMgICAgdGVhY2hlcl90aXRsZTogXCJUZWFjaGVyXCJcblxuIyAgZWRpdG9yOlxuIyAgICBtYWluX3RpdGxlOiBcIkNvZGVDb21iYXQgRWRpdG9yc1wiXG4jICAgIGFydGljbGVfdGl0bGU6IFwiQXJ0aWNsZSBFZGl0b3JcIlxuIyAgICB0aGFuZ190aXRsZTogXCJUaGFuZyBFZGl0b3JcIlxuIyAgICBsZXZlbF90aXRsZTogXCJMZXZlbCBFZGl0b3JcIlxuIyAgICBjb3Vyc2VfdGl0bGU6IFwiQ291cnNlIEVkaXRvclwiXG4jICAgIGFjaGlldmVtZW50X3RpdGxlOiBcIkFjaGlldmVtZW50IEVkaXRvclwiXG4jICAgIHBvbGxfdGl0bGU6IFwiUG9sbCBFZGl0b3JcIlxuIyAgICBiYWNrOiBcIkJhY2tcIlxuIyAgICByZXZlcnQ6IFwiUmV2ZXJ0XCJcbiMgICAgcmV2ZXJ0X21vZGVsczogXCJSZXZlcnQgTW9kZWxzXCJcbiMgICAgcGlja19hX3RlcnJhaW46IFwiUGljayBBIFRlcnJhaW5cIlxuIyAgICBkdW5nZW9uOiBcIkR1bmdlb25cIlxuIyAgICBpbmRvb3I6IFwiSW5kb29yXCJcbiMgICAgZGVzZXJ0OiBcIkRlc2VydFwiXG4jICAgIGdyYXNzeTogXCJHcmFzc3lcIlxuIyAgICBtb3VudGFpbjogXCJNb3VudGFpblwiXG4jICAgIGdsYWNpZXI6IFwiR2xhY2llclwiXG4jICAgIHNtYWxsOiBcIlNtYWxsXCJcbiMgICAgbGFyZ2U6IFwiTGFyZ2VcIlxuIyAgICBmb3JrX3RpdGxlOiBcIkZvcmsgTmV3IFZlcnNpb25cIlxuIyAgICBmb3JrX2NyZWF0aW5nOiBcIkNyZWF0aW5nIEZvcmsuLi5cIlxuIyAgICBnZW5lcmF0ZV90ZXJyYWluOiBcIkdlbmVyYXRlIFRlcnJhaW5cIlxuIyAgICBtb3JlOiBcIk1vcmVcIlxuIyAgICB3aWtpOiBcIldpa2lcIlxuIyAgICBsaXZlX2NoYXQ6IFwiTGl2ZSBDaGF0XCJcbiMgICAgdGhhbmdfbWFpbjogXCJNYWluXCJcbiMgICAgdGhhbmdfc3ByaXRlc2hlZXRzOiBcIlNwcml0ZXNoZWV0c1wiXG4jICAgIHRoYW5nX2NvbG9yczogXCJDb2xvcnNcIlxuIyAgICBsZXZlbF9zb21lX29wdGlvbnM6IFwiU29tZSBPcHRpb25zP1wiXG4jICAgIGxldmVsX3RhYl90aGFuZ3M6IFwiVGhhbmdzXCJcbiMgICAgbGV2ZWxfdGFiX3NjcmlwdHM6IFwiU2NyaXB0c1wiXG4jICAgIGxldmVsX3RhYl9jb21wb25lbnRzOiBcIkNvbXBvbmVudHNcIlxuIyAgICBsZXZlbF90YWJfc3lzdGVtczogXCJTeXN0ZW1zXCJcbiMgICAgbGV2ZWxfdGFiX2RvY3M6IFwiRG9jdW1lbnRhdGlvblwiXG4jICAgIGxldmVsX3RhYl90aGFuZ3NfdGl0bGU6IFwiQ3VycmVudCBUaGFuZ3NcIlxuIyAgICBsZXZlbF90YWJfdGhhbmdzX2FsbDogXCJBbGxcIlxuIyAgICBsZXZlbF90YWJfdGhhbmdzX2NvbmRpdGlvbnM6IFwiU3RhcnRpbmcgQ29uZGl0aW9uc1wiXG4jICAgIGxldmVsX3RhYl90aGFuZ3NfYWRkOiBcIkFkZCBUaGFuZ3NcIlxuIyAgICBsZXZlbF90YWJfdGhhbmdzX3NlYXJjaDogXCJTZWFyY2ggdGhhbmdzXCJcbiMgICAgYWRkX2NvbXBvbmVudHM6IFwiQWRkIENvbXBvbmVudHNcIlxuIyAgICBjb21wb25lbnRfY29uZmlnczogXCJDb21wb25lbnQgQ29uZmlndXJhdGlvbnNcIlxuIyAgICBjb25maWdfdGhhbmc6IFwiRG91YmxlIGNsaWNrIHRvIGNvbmZpZ3VyZSBhIHRoYW5nXCJcbiMgICAgZGVsZXRlOiBcIkRlbGV0ZVwiXG4jICAgIGR1cGxpY2F0ZTogXCJEdXBsaWNhdGVcIlxuIyAgICBzdG9wX2R1cGxpY2F0ZTogXCJTdG9wIER1cGxpY2F0ZVwiXG4jICAgIHJvdGF0ZTogXCJSb3RhdGVcIlxuIyAgICBsZXZlbF9jb21wb25lbnRfdGFiX3RpdGxlOiBcIkN1cnJlbnQgQ29tcG9uZW50c1wiXG4jICAgIGxldmVsX2NvbXBvbmVudF9idG5fbmV3OiBcIkNyZWF0ZSBOZXcgQ29tcG9uZW50XCJcbiMgICAgbGV2ZWxfc3lzdGVtc190YWJfdGl0bGU6IFwiQ3VycmVudCBTeXN0ZW1zXCJcbiMgICAgbGV2ZWxfc3lzdGVtc19idG5fbmV3OiBcIkNyZWF0ZSBOZXcgU3lzdGVtXCJcbiMgICAgbGV2ZWxfc3lzdGVtc19idG5fYWRkOiBcIkFkZCBTeXN0ZW1cIlxuIyAgICBsZXZlbF9jb21wb25lbnRzX3RpdGxlOiBcIkJhY2sgdG8gQWxsIFRoYW5nc1wiXG4jICAgIGxldmVsX2NvbXBvbmVudHNfdHlwZTogXCJUeXBlXCJcbiMgICAgbGV2ZWxfY29tcG9uZW50X2VkaXRfdGl0bGU6IFwiRWRpdCBDb21wb25lbnRcIlxuIyAgICBsZXZlbF9jb21wb25lbnRfY29uZmlnX3NjaGVtYTogXCJDb25maWcgU2NoZW1hXCJcbiMgICAgbGV2ZWxfc3lzdGVtX2VkaXRfdGl0bGU6IFwiRWRpdCBTeXN0ZW1cIlxuIyAgICBjcmVhdGVfc3lzdGVtX3RpdGxlOiBcIkNyZWF0ZSBOZXcgU3lzdGVtXCJcbiMgICAgbmV3X2NvbXBvbmVudF90aXRsZTogXCJDcmVhdGUgTmV3IENvbXBvbmVudFwiXG4jICAgIG5ld19jb21wb25lbnRfZmllbGRfc3lzdGVtOiBcIlN5c3RlbVwiXG4jICAgIG5ld19hcnRpY2xlX3RpdGxlOiBcIkNyZWF0ZSBhIE5ldyBBcnRpY2xlXCJcbiMgICAgbmV3X3RoYW5nX3RpdGxlOiBcIkNyZWF0ZSBhIE5ldyBUaGFuZyBUeXBlXCJcbiMgICAgbmV3X2xldmVsX3RpdGxlOiBcIkNyZWF0ZSBhIE5ldyBMZXZlbFwiXG4jICAgIG5ld19hcnRpY2xlX3RpdGxlX2xvZ2luOiBcIkxvZyBJbiB0byBDcmVhdGUgYSBOZXcgQXJ0aWNsZVwiXG4jICAgIG5ld190aGFuZ190aXRsZV9sb2dpbjogXCJMb2cgSW4gdG8gQ3JlYXRlIGEgTmV3IFRoYW5nIFR5cGVcIlxuIyAgICBuZXdfbGV2ZWxfdGl0bGVfbG9naW46IFwiTG9nIEluIHRvIENyZWF0ZSBhIE5ldyBMZXZlbFwiXG4jICAgIG5ld19hY2hpZXZlbWVudF90aXRsZTogXCJDcmVhdGUgYSBOZXcgQWNoaWV2ZW1lbnRcIlxuIyAgICBuZXdfYWNoaWV2ZW1lbnRfdGl0bGVfbG9naW46IFwiTG9nIEluIHRvIENyZWF0ZSBhIE5ldyBBY2hpZXZlbWVudFwiXG4jICAgIG5ld19wb2xsX3RpdGxlOiBcIkNyZWF0ZSBhIE5ldyBQb2xsXCJcbiMgICAgbmV3X3BvbGxfdGl0bGVfbG9naW46IFwiTG9nIEluIHRvIENyZWF0ZSBhIE5ldyBQb2xsXCJcbiMgICAgYXJ0aWNsZV9zZWFyY2hfdGl0bGU6IFwiU2VhcmNoIEFydGljbGVzIEhlcmVcIlxuIyAgICB0aGFuZ19zZWFyY2hfdGl0bGU6IFwiU2VhcmNoIFRoYW5nIFR5cGVzIEhlcmVcIlxuIyAgICBsZXZlbF9zZWFyY2hfdGl0bGU6IFwiU2VhcmNoIExldmVscyBIZXJlXCJcbiMgICAgYWNoaWV2ZW1lbnRfc2VhcmNoX3RpdGxlOiBcIlNlYXJjaCBBY2hpZXZlbWVudHNcIlxuIyAgICBwb2xsX3NlYXJjaF90aXRsZTogXCJTZWFyY2ggUG9sbHNcIlxuIyAgICByZWFkX29ubHlfd2FybmluZzI6IFwiTm90ZTogeW91IGNhbid0IHNhdmUgYW55IGVkaXRzIGhlcmUsIGJlY2F1c2UgeW91J3JlIG5vdCBsb2dnZWQgaW4uXCJcbiMgICAgbm9fYWNoaWV2ZW1lbnRzOiBcIk5vIGFjaGlldmVtZW50cyBoYXZlIGJlZW4gYWRkZWQgZm9yIHRoaXMgbGV2ZWwgeWV0LlwiXG4jICAgIGFjaGlldmVtZW50X3F1ZXJ5X21pc2M6IFwiS2V5IGFjaGlldmVtZW50IG9mZiBvZiBtaXNjZWxsYW5lYVwiXG4jICAgIGFjaGlldmVtZW50X3F1ZXJ5X2dvYWxzOiBcIktleSBhY2hpZXZlbWVudCBvZmYgb2YgbGV2ZWwgZ29hbHNcIlxuIyAgICBsZXZlbF9jb21wbGV0aW9uOiBcIkxldmVsIENvbXBsZXRpb25cIlxuIyAgICBwb3BfaTE4bjogXCJQb3B1bGF0ZSBJMThOXCJcbiMgICAgdGFza3M6IFwiVGFza3NcIlxuIyAgICBjbGVhcl9zdG9yYWdlOiBcIkNsZWFyIHlvdXIgbG9jYWwgY2hhbmdlc1wiXG4jICAgIGFkZF9zeXN0ZW1fdGl0bGU6IFwiQWRkIFN5c3RlbXMgdG8gTGV2ZWxcIlxuIyAgICBkb25lX2FkZGluZzogXCJEb25lIEFkZGluZ1wiXG5cbiMgIGFydGljbGU6XG4jICAgIGVkaXRfYnRuX3ByZXZpZXc6IFwiUHJldmlld1wiXG4jICAgIGVkaXRfYXJ0aWNsZV90aXRsZTogXCJFZGl0IEFydGljbGVcIlxuXG4jICBwb2xsczpcbiMgICAgcHJpb3JpdHk6IFwiUHJpb3JpdHlcIlxuXG4jICBjb250cmlidXRlOlxuIyAgICBwYWdlX3RpdGxlOiBcIkNvbnRyaWJ1dGluZ1wiXG4jICAgIGludHJvX2JsdXJiOiBcIkNvZGVDb21iYXQgaXMgMTAwJSBvcGVuIHNvdXJjZSEgSHVuZHJlZHMgb2YgZGVkaWNhdGVkIHBsYXllcnMgaGF2ZSBoZWxwZWQgdXMgYnVpbGQgdGhlIGdhbWUgaW50byB3aGF0IGl0IGlzIHRvZGF5LiBKb2luIHVzIGFuZCB3cml0ZSB0aGUgbmV4dCBjaGFwdGVyIGluIENvZGVDb21iYXQncyBxdWVzdCB0byB0ZWFjaCB0aGUgd29ybGQgdG8gY29kZSFcIlxuIyAgICBhbGVydF9hY2NvdW50X21lc3NhZ2VfaW50cm86IFwiSGV5IHRoZXJlIVwiXG4jICAgIGFsZXJ0X2FjY291bnRfbWVzc2FnZTogXCJUbyBzdWJzY3JpYmUgZm9yIGNsYXNzIGVtYWlscywgeW91J2xsIG5lZWQgdG8gYmUgbG9nZ2VkIGluIGZpcnN0LlwiXG4jICAgIGFyY2htYWdlX2ludHJvZHVjdGlvbjogXCJPbmUgb2YgdGhlIGJlc3QgcGFydHMgYWJvdXQgYnVpbGRpbmcgZ2FtZXMgaXMgdGhleSBzeW50aGVzaXplIHNvIG1hbnkgZGlmZmVyZW50IHRoaW5ncy4gR3JhcGhpY3MsIHNvdW5kLCByZWFsLXRpbWUgbmV0d29ya2luZywgc29jaWFsIG5ldHdvcmtpbmcsIGFuZCBvZiBjb3Vyc2UgbWFueSBvZiB0aGUgbW9yZSBjb21tb24gYXNwZWN0cyBvZiBwcm9ncmFtbWluZywgZnJvbSBsb3ctbGV2ZWwgZGF0YWJhc2UgbWFuYWdlbWVudCwgYW5kIHNlcnZlciBhZG1pbmlzdHJhdGlvbiB0byB1c2VyIGZhY2luZyBkZXNpZ24gYW5kIGludGVyZmFjZSBidWlsZGluZy4gVGhlcmUncyBhIGxvdCB0byBkbywgYW5kIGlmIHlvdSdyZSBhbiBleHBlcmllbmNlZCBwcm9ncmFtbWVyIHdpdGggYSBoYW5rZXJpbmcgdG8gcmVhbGx5IGRpdmUgaW50byB0aGUgbml0dHktZ3JpdHR5IG9mIENvZGVDb21iYXQsIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS4gV2Ugd291bGQgbG92ZSB0byBoYXZlIHlvdXIgaGVscCBidWlsZGluZyB0aGUgYmVzdCBwcm9ncmFtbWluZyBnYW1lIGV2ZXIuXCJcbiMgICAgY2xhc3NfYXR0cmlidXRlczogXCJDbGFzcyBBdHRyaWJ1dGVzXCJcbiMgICAgYXJjaG1hZ2VfYXR0cmlidXRlXzFfcHJlZjogXCJLbm93bGVkZ2UgaW4gXCJcbiMgICAgYXJjaG1hZ2VfYXR0cmlidXRlXzFfc3VmOiBcIiwgb3IgYSBkZXNpcmUgdG8gbGVhcm4uIE1vc3Qgb2Ygb3VyIGNvZGUgaXMgaW4gdGhpcyBsYW5ndWFnZS4gSWYgeW91J3JlIGEgZmFuIG9mIFJ1Ynkgb3IgUHl0aG9uLCB5b3UnbGwgZmVlbCByaWdodCBhdCBob21lLiBJdCdzIEphdmFTY3JpcHQsIGJ1dCB3aXRoIGEgbmljZXIgc3ludGF4LlwiXG4jICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8yOiBcIlNvbWUgZXhwZXJpZW5jZSBpbiBwcm9ncmFtbWluZyBhbmQgcGVyc29uYWwgaW5pdGlhdGl2ZS4gV2UnbGwgaGVscCB5b3UgZ2V0IG9yaWVudGVkLCBidXQgd2UgY2FuJ3Qgc3BlbmQgbXVjaCB0aW1lIHRyYWluaW5nIHlvdS5cIlxuIyAgICBob3dfdG9fam9pbjogXCJIb3cgVG8gSm9pblwiXG4jICAgIGpvaW5fZGVzY18xOiBcIkFueW9uZSBjYW4gaGVscCBvdXQhIEp1c3QgY2hlY2sgb3V0IG91ciBcIlxuIyAgICBqb2luX2Rlc2NfMjogXCJ0byBnZXQgc3RhcnRlZCwgYW5kIGNoZWNrIHRoZSBib3ggYmVsb3cgdG8gbWFyayB5b3Vyc2VsZiBhcyBhIGJyYXZlIEFyY2htYWdlIGFuZCBnZXQgdGhlIGxhdGVzdCBuZXdzIGJ5IGVtYWlsLiBXYW50IHRvIGNoYXQgYWJvdXQgd2hhdCB0byBkbyBvciBob3cgdG8gZ2V0IG1vcmUgZGVlcGx5IGludm9sdmVkPyBcIlxuIyAgICBqb2luX2Rlc2NfMzogXCIsIG9yIGZpbmQgdXMgaW4gb3VyIFwiXG4jICAgIGpvaW5fZGVzY180OiBcImFuZCB3ZSdsbCBnbyBmcm9tIHRoZXJlIVwiXG4jICAgIGpvaW5fdXJsX2VtYWlsOiBcIkVtYWlsIHVzXCJcbiMgICAgam9pbl91cmxfc2xhY2s6IFwicHVibGljIFNsYWNrIGNoYW5uZWxcIlxuIyAgICBhcmNobWFnZV9zdWJzY3JpYmVfZGVzYzogXCJHZXQgZW1haWxzIG9uIG5ldyBjb2Rpbmcgb3Bwb3J0dW5pdGllcyBhbmQgYW5ub3VuY2VtZW50cy5cIlxuIyAgICBhcnRpc2FuX2ludHJvZHVjdGlvbl9wcmVmOiBcIldlIG11c3QgY29uc3RydWN0IGFkZGl0aW9uYWwgbGV2ZWxzISBQZW9wbGUgYmUgY2xhbW9yaW5nIGZvciBtb3JlIGNvbnRlbnQsIGFuZCB3ZSBjYW4gb25seSBidWlsZCBzbyBtYW55IG91cnNlbHZlcy4gUmlnaHQgbm93IHlvdXIgd29ya3N0YXRpb24gaXMgbGV2ZWwgb25lOyBvdXIgbGV2ZWwgZWRpdG9yIGlzIGJhcmVseSB1c2FibGUgZXZlbiBieSBpdHMgY3JlYXRvcnMsIHNvIGJlIHdhcnkuIElmIHlvdSBoYXZlIHZpc2lvbnMgb2YgY2FtcGFpZ25zIHNwYW5uaW5nIGZvci1sb29wcyB0b1wiXG4jICAgIGFydGlzYW5faW50cm9kdWN0aW9uX3N1ZjogXCIsIHRoZW4gdGhpcyBjbGFzcyBtaWdodCBiZSBmb3IgeW91LlwiXG4jICAgIGFydGlzYW5fYXR0cmlidXRlXzE6IFwiQW55IGV4cGVyaWVuY2UgaW4gYnVpbGRpbmcgY29udGVudCBsaWtlIHRoaXMgd291bGQgYmUgbmljZSwgc3VjaCBhcyB1c2luZyBCbGl6emFyZCdzIGxldmVsIGVkaXRvcnMuIEJ1dCBub3QgcmVxdWlyZWQhXCJcbiMgICAgYXJ0aXNhbl9hdHRyaWJ1dGVfMjogXCJBIGhhbmtlcmluZyB0byBkbyBhIHdob2xlIGxvdCBvZiB0ZXN0aW5nIGFuZCBpdGVyYXRpb24uIFRvIG1ha2UgZ29vZCBsZXZlbHMsIHlvdSBuZWVkIHRvIHRha2UgaXQgdG8gb3RoZXJzIGFuZCB3YXRjaCB0aGVtIHBsYXkgaXQsIGFuZCBiZSBwcmVwYXJlZCB0byBmaW5kIGEgbG90IG9mIHRoaW5ncyB0byBmaXguXCJcbiMgICAgYXJ0aXNhbl9hdHRyaWJ1dGVfMzogXCJGb3IgdGhlIHRpbWUgYmVpbmcsIGVuZHVyYW5jZSBlbiBwYXIgd2l0aCBhbiBBZHZlbnR1cmVyLiBPdXIgTGV2ZWwgRWRpdG9yIGlzIHN1cGVyIHByZWxpbWluYXJ5IGFuZCBmcnVzdHJhdGluZyB0byB1c2UuIFlvdSBoYXZlIGJlZW4gd2FybmVkIVwiXG4jICAgIGFydGlzYW5fam9pbl9kZXNjOiBcIlVzZSB0aGUgTGV2ZWwgRWRpdG9yIGluIHRoZXNlIHN0ZXBzLCBnaXZlIG9yIHRha2U6XCJcbiMgICAgYXJ0aXNhbl9qb2luX3N0ZXAxOiBcIlJlYWQgdGhlIGRvY3VtZW50YXRpb24uXCJcbiMgICAgYXJ0aXNhbl9qb2luX3N0ZXAyOiBcIkNyZWF0ZSBhIG5ldyBsZXZlbCBhbmQgZXhwbG9yZSBleGlzdGluZyBsZXZlbHMuXCJcbiMgICAgYXJ0aXNhbl9qb2luX3N0ZXAzOiBcIkZpbmQgdXMgaW4gb3VyIHB1YmxpYyBTbGFjayBjaGFubmVsIGZvciBoZWxwLlwiXG4jICAgIGFydGlzYW5fam9pbl9zdGVwNDogXCJQb3N0IHlvdXIgbGV2ZWxzIG9uIHRoZSBmb3J1bSBmb3IgZmVlZGJhY2suXCJcbiMgICAgYXJ0aXNhbl9zdWJzY3JpYmVfZGVzYzogXCJHZXQgZW1haWxzIG9uIGxldmVsIGVkaXRvciB1cGRhdGVzIGFuZCBhbm5vdW5jZW1lbnRzLlwiXG4jICAgIGFkdmVudHVyZXJfaW50cm9kdWN0aW9uOiBcIkxldCdzIGJlIGNsZWFyIGFib3V0IHlvdXIgcm9sZTogeW91IGFyZSB0aGUgdGFuay4gWW91J3JlIGdvaW5nIHRvIHRha2UgaGVhdnkgZGFtYWdlLiBXZSBuZWVkIHBlb3BsZSB0byB0cnkgb3V0IGJyYW5kLW5ldyBsZXZlbHMgYW5kIGhlbHAgaWRlbnRpZnkgaG93IHRvIG1ha2UgdGhpbmdzIGJldHRlci4gVGhlIHBhaW4gd2lsbCBiZSBlbm9ybW91czsgbWFraW5nIGdvb2QgZ2FtZXMgaXMgYSBsb25nIHByb2Nlc3MgYW5kIG5vIG9uZSBnZXRzIGl0IHJpZ2h0IHRoZSBmaXJzdCB0aW1lLiBJZiB5b3UgY2FuIGVuZHVyZSBhbmQgaGF2ZSBhIGhpZ2ggY29uc3RpdHV0aW9uIHNjb3JlLCB0aGVuIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS5cIlxuIyAgICBhZHZlbnR1cmVyX2F0dHJpYnV0ZV8xOiBcIkEgdGhpcnN0IGZvciBsZWFybmluZy4gWW91IHdhbnQgdG8gbGVhcm4gaG93IHRvIGNvZGUgYW5kIHdlIHdhbnQgdG8gdGVhY2ggeW91IGhvdyB0byBjb2RlLiBZb3UnbGwgcHJvYmFibHkgYmUgZG9pbmcgbW9zdCBvZiB0aGUgdGVhY2hpbmcgaW4gdGhpcyBjYXNlLCB0aG91Z2guXCJcbiMgICAgYWR2ZW50dXJlcl9hdHRyaWJ1dGVfMjogXCJDaGFyaXNtYXRpYy4gQmUgZ2VudGxlIGJ1dCBhcnRpY3VsYXRlIGFib3V0IHdoYXQgbmVlZHMgaW1wcm92aW5nLCBhbmQgb2ZmZXIgc3VnZ2VzdGlvbnMgb24gaG93IHRvIGltcHJvdmUuXCJcbiMgICAgYWR2ZW50dXJlcl9qb2luX3ByZWY6IFwiRWl0aGVyIGdldCB0b2dldGhlciB3aXRoIChvciByZWNydWl0ISkgYW4gQXJ0aXNhbiBhbmQgd29yayB3aXRoIHRoZW0sIG9yIGNoZWNrIHRoZSBib3ggYmVsb3cgdG8gcmVjZWl2ZSBlbWFpbHMgd2hlbiB0aGVyZSBhcmUgbmV3IGxldmVscyB0byB0ZXN0LiBXZSdsbCBhbHNvIGJlIHBvc3RpbmcgYWJvdXQgbGV2ZWxzIHRvIHJldmlldyBvbiBvdXIgbmV0d29ya3MgbGlrZVwiXG4jICAgIGFkdmVudHVyZXJfZm9ydW1fdXJsOiBcIm91ciBmb3J1bVwiXG4jICAgIGFkdmVudHVyZXJfam9pbl9zdWY6IFwic28gaWYgeW91IHByZWZlciB0byBiZSBub3RpZmllZCB0aG9zZSB3YXlzLCBzaWduIHVwIHRoZXJlIVwiXG4jICAgIGFkdmVudHVyZXJfc3Vic2NyaWJlX2Rlc2M6IFwiR2V0IGVtYWlscyB3aGVuIHRoZXJlIGFyZSBuZXcgbGV2ZWxzIHRvIHRlc3QuXCJcbiMgICAgc2NyaWJlX2ludHJvZHVjdGlvbl9wcmVmOiBcIkNvZGVDb21iYXQgaXNuJ3QganVzdCBnb2luZyB0byBiZSBhIGJ1bmNoIG9mIGxldmVscy4gSXQgd2lsbCBhbHNvIGluY2x1ZGUgYSByZXNvdXJjZSBmb3Iga25vd2xlZGdlLCBhIHdpa2kgb2YgcHJvZ3JhbW1pbmcgY29uY2VwdHMgdGhhdCBsZXZlbHMgY2FuIGhvb2sgaW50by4gVGhhdCB3YXkgcmF0aGVyIHRoYW4gZWFjaCBBcnRpc2FuIGhhdmluZyB0byBkZXNjcmliZSBpbiBkZXRhaWwgd2hhdCBhIGNvbXBhcmlzb24gb3BlcmF0b3IgaXMsIHRoZXkgY2FuIHNpbXBseSBsaW5rIHRoZWlyIGxldmVsIHRvIHRoZSBBcnRpY2xlIGRlc2NyaWJpbmcgdGhlbSB0aGF0IGlzIGFscmVhZHkgd3JpdHRlbiBmb3IgdGhlIHBsYXllcidzIGVkaWZpY2F0aW9uLiBTb21ldGhpbmcgYWxvbmcgdGhlIGxpbmVzIG9mIHdoYXQgdGhlIFwiXG4jICAgIHNjcmliZV9pbnRyb2R1Y3Rpb25fdXJsX21vemlsbGE6IFwiTW96aWxsYSBEZXZlbG9wZXIgTmV0d29ya1wiXG4jICAgIHNjcmliZV9pbnRyb2R1Y3Rpb25fc3VmOiBcIiBoYXMgYnVpbHQuIElmIHlvdXIgaWRlYSBvZiBmdW4gaXMgYXJ0aWN1bGF0aW5nIHRoZSBjb25jZXB0cyBvZiBwcm9ncmFtbWluZyBpbiBNYXJrZG93biBmb3JtLCB0aGVuIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS5cIlxuIyAgICBzY3JpYmVfYXR0cmlidXRlXzE6IFwiU2tpbGwgaW4gd29yZHMgaXMgcHJldHR5IG11Y2ggYWxsIHlvdSBuZWVkLiBOb3Qgb25seSBncmFtbWFyIGFuZCBzcGVsbGluZywgYnV0IGFibGUgdG8gY29udmV5IGNvbXBsaWNhdGVkIGlkZWFzIHRvIG90aGVycy5cIlxuIyAgICBjb250YWN0X3VzX3VybDogXCJDb250YWN0IFVzXCJcbiMgICAgc2NyaWJlX2pvaW5fZGVzY3JpcHRpb246IFwidGVsbCB1cyBhIGxpdHRsZSBhYm91dCB5b3Vyc2VsZiwgeW91ciBleHBlcmllbmNlIHdpdGggcHJvZ3JhbW1pbmcgYW5kIHdoYXQgc29ydCBvZiB0aGluZ3MgeW91J2QgbGlrZSB0byB3cml0ZSBhYm91dC4gV2UnbGwgZ28gZnJvbSB0aGVyZSFcIlxuIyAgICBzY3JpYmVfc3Vic2NyaWJlX2Rlc2M6IFwiR2V0IGVtYWlscyBhYm91dCBhcnRpY2xlIHdyaXRpbmcgYW5ub3VuY2VtZW50cy5cIlxuIyAgICBkaXBsb21hdF9pbnRyb2R1Y3Rpb25fcHJlZjogXCJTbywgaWYgdGhlcmUncyBvbmUgdGhpbmcgd2UgbGVhcm5lZCBmcm9tIHRoZSBcIlxuIyAgICBkaXBsb21hdF9sYXVuY2hfdXJsOiBcImxhdW5jaCBpbiBPY3RvYmVyXCJcbiMgICAgZGlwbG9tYXRfaW50cm9kdWN0aW9uX3N1ZjogXCJpdCdzIHRoYXQgdGhlcmUgaXMgc2l6ZWFibGUgaW50ZXJlc3QgaW4gQ29kZUNvbWJhdCBpbiBvdGhlciBjb3VudHJpZXMhIFdlJ3JlIGJ1aWxkaW5nIGEgY29ycHMgb2YgdHJhbnNsYXRvcnMgZWFnZXIgdG8gdHVybiBvbmUgc2V0IG9mIHdvcmRzIGludG8gYW5vdGhlciBzZXQgb2Ygd29yZHMgdG8gZ2V0IENvZGVDb21iYXQgYXMgYWNjZXNzaWJsZSBhY3Jvc3MgdGhlIHdvcmxkIGFzIHBvc3NpYmxlLiBJZiB5b3UgbGlrZSBnZXR0aW5nIHNuZWFrIHBlZWtzIGF0IHVwY29taW5nIGNvbnRlbnQgYW5kIGdldHRpbmcgdGhlc2UgbGV2ZWxzIHRvIHlvdXIgZmVsbG93IG5hdGlvbmFscyBBU0FQLCB0aGVuIHRoaXMgY2xhc3MgbWlnaHQgYmUgZm9yIHlvdS5cIlxuIyAgICBkaXBsb21hdF9hdHRyaWJ1dGVfMTogXCJGbHVlbmN5IGluIEVuZ2xpc2ggYW5kIHRoZSBsYW5ndWFnZSB5b3Ugd291bGQgbGlrZSB0byB0cmFuc2xhdGUgdG8uIFdoZW4gY29udmV5aW5nIGNvbXBsaWNhdGVkIGlkZWFzLCBpdCdzIGltcG9ydGFudCB0byBoYXZlIGEgc3Ryb25nIGdyYXNwIGluIGJvdGghXCJcbiMgICAgZGlwbG9tYXRfaTE4bl9wYWdlX3ByZWZpeDogXCJZb3UgY2FuIHN0YXJ0IHRyYW5zbGF0aW5nIG91ciBsZXZlbHMgYnkgZ29pbmcgdG8gb3VyXCJcbiMgICAgZGlwbG9tYXRfaTE4bl9wYWdlOiBcInRyYW5zbGF0aW9ucyBwYWdlXCJcbiMgICAgZGlwbG9tYXRfaTE4bl9wYWdlX3N1ZmZpeDogXCIsIG9yIG91ciBpbnRlcmZhY2UgYW5kIHdlYnNpdGUgb24gR2l0SHViLlwiXG4jICAgIGRpcGxvbWF0X2pvaW5fcHJlZl9naXRodWI6IFwiRmluZCB5b3VyIGxhbmd1YWdlIGxvY2FsZSBmaWxlIFwiXG4jICAgIGRpcGxvbWF0X2dpdGh1Yl91cmw6IFwib24gR2l0SHViXCJcbiMgICAgZGlwbG9tYXRfam9pbl9zdWZfZ2l0aHViOiBcIiwgZWRpdCBpdCBvbmxpbmUsIGFuZCBzdWJtaXQgYSBwdWxsIHJlcXVlc3QuIEFsc28sIGNoZWNrIHRoaXMgYm94IGJlbG93IHRvIGtlZXAgdXAtdG8tZGF0ZSBvbiBuZXcgaW50ZXJuYXRpb25hbGl6YXRpb24gZGV2ZWxvcG1lbnRzIVwiXG4jICAgIGRpcGxvbWF0X3N1YnNjcmliZV9kZXNjOiBcIkdldCBlbWFpbHMgYWJvdXQgaTE4biBkZXZlbG9wbWVudHMgYW5kIGxldmVscyB0byB0cmFuc2xhdGUuXCJcbiMgICAgYW1iYXNzYWRvcl9pbnRyb2R1Y3Rpb246IFwiVGhpcyBpcyBhIGNvbW11bml0eSB3ZSdyZSBidWlsZGluZywgYW5kIHlvdSBhcmUgdGhlIGNvbm5lY3Rpb25zLiBXZSd2ZSBnb3QgZm9ydW1zLCBlbWFpbHMsIGFuZCBzb2NpYWwgbmV0d29ya3Mgd2l0aCBsb3RzIG9mIHBlb3BsZSB0byB0YWxrIHdpdGggYW5kIGhlbHAgZ2V0IGFjcXVhaW50ZWQgd2l0aCB0aGUgZ2FtZSBhbmQgbGVhcm4gZnJvbS4gSWYgeW91IHdhbnQgdG8gaGVscCBwZW9wbGUgZ2V0IGludm9sdmVkIGFuZCBoYXZlIGZ1biwgYW5kIGdldCBhIGdvb2QgZmVlbCBvZiB0aGUgcHVsc2Ugb2YgQ29kZUNvbWJhdCBhbmQgd2hlcmUgd2UncmUgZ29pbmcsIHRoZW4gdGhpcyBjbGFzcyBtaWdodCBiZSBmb3IgeW91LlwiXG4jICAgIGFtYmFzc2Fkb3JfYXR0cmlidXRlXzE6IFwiQ29tbXVuaWNhdGlvbiBza2lsbHMuIEJlIGFibGUgdG8gaWRlbnRpZnkgdGhlIHByb2JsZW1zIHBsYXllcnMgYXJlIGhhdmluZyBhbmQgaGVscCB0aGVtIHNvbHZlIHRoZW0uIEFsc28sIGtlZXAgdGhlIHJlc3Qgb2YgdXMgaW5mb3JtZWQgYWJvdXQgd2hhdCBwbGF5ZXJzIGFyZSBzYXlpbmcsIHdoYXQgdGhleSBsaWtlIGFuZCBkb24ndCBsaWtlIGFuZCB3YW50IG1vcmUgb2YhXCJcbiMgICAgYW1iYXNzYWRvcl9qb2luX2Rlc2M6IFwidGVsbCB1cyBhIGxpdHRsZSBhYm91dCB5b3Vyc2VsZiwgd2hhdCB5b3UndmUgZG9uZSBhbmQgd2hhdCB5b3UnZCBiZSBpbnRlcmVzdGVkIGluIGRvaW5nLiBXZSdsbCBnbyBmcm9tIHRoZXJlIVwiXG4jICAgIGFtYmFzc2Fkb3Jfam9pbl9ub3RlX3N0cm9uZzogXCJOb3RlXCJcbiMgICAgYW1iYXNzYWRvcl9qb2luX25vdGVfZGVzYzogXCJPbmUgb2Ygb3VyIHRvcCBwcmlvcml0aWVzIGlzIHRvIGJ1aWxkIG11bHRpcGxheWVyIHdoZXJlIHBsYXllcnMgaGF2aW5nIGRpZmZpY3VsdHkgc29sdmluZyBsZXZlbHMgY2FuIHN1bW1vbiBoaWdoZXIgbGV2ZWwgd2l6YXJkcyB0byBoZWxwIHRoZW0uIFRoaXMgd2lsbCBiZSBhIGdyZWF0IHdheSBmb3IgYW1iYXNzYWRvcnMgdG8gZG8gdGhlaXIgdGhpbmcuIFdlJ2xsIGtlZXAgeW91IHBvc3RlZCFcIlxuIyAgICBhbWJhc3NhZG9yX3N1YnNjcmliZV9kZXNjOiBcIkdldCBlbWFpbHMgb24gc3VwcG9ydCB1cGRhdGVzIGFuZCBtdWx0aXBsYXllciBkZXZlbG9wbWVudHMuXCJcbiMgICAgdGVhY2hlcl9zdWJzY3JpYmVfZGVzYzogXCJHZXQgZW1haWxzIG9uIHVwZGF0ZXMgYW5kIGFubm91bmNlbWVudHMgZm9yIHRlYWNoZXJzLlwiXG4jICAgIGNoYW5nZXNfYXV0b19zYXZlOiBcIkNoYW5nZXMgYXJlIHNhdmVkIGF1dG9tYXRpY2FsbHkgd2hlbiB5b3UgdG9nZ2xlIGNoZWNrYm94ZXMuXCJcbiMgICAgZGlsaWdlbnRfc2NyaWJlczogXCJPdXIgRGlsaWdlbnQgU2NyaWJlczpcIlxuIyAgICBwb3dlcmZ1bF9hcmNobWFnZXM6IFwiT3VyIFBvd2VyZnVsIEFyY2htYWdlczpcIlxuIyAgICBjcmVhdGl2ZV9hcnRpc2FuczogXCJPdXIgQ3JlYXRpdmUgQXJ0aXNhbnM6XCJcbiMgICAgYnJhdmVfYWR2ZW50dXJlcnM6IFwiT3VyIEJyYXZlIEFkdmVudHVyZXJzOlwiXG4jICAgIHRyYW5zbGF0aW5nX2RpcGxvbWF0czogXCJPdXIgVHJhbnNsYXRpbmcgRGlwbG9tYXRzOlwiXG4jICAgIGhlbHBmdWxfYW1iYXNzYWRvcnM6IFwiT3VyIEhlbHBmdWwgQW1iYXNzYWRvcnM6XCJcblxuIyAgbGFkZGVyOlxuIyAgICBteV9tYXRjaGVzOiBcIk15IE1hdGNoZXNcIlxuIyAgICBzaW11bGF0ZTogXCJTaW11bGF0ZVwiXG4jICAgIHNpbXVsYXRpb25fZXhwbGFuYXRpb246IFwiQnkgc2ltdWxhdGluZyBnYW1lcyB5b3UgY2FuIGdldCB5b3VyIGdhbWUgcmFua2VkIGZhc3RlciFcIlxuIyAgICBzaW11bGF0aW9uX2V4cGxhbmF0aW9uX2xlYWd1ZXM6IFwiWW91IHdpbGwgbWFpbmx5IGhlbHAgc2ltdWxhdGUgZ2FtZXMgZm9yIGFsbGllZCBwbGF5ZXJzIGluIHlvdXIgY2xhbnMgYW5kIGNvdXJzZXMuXCJcbiMgICAgc2ltdWxhdGVfZ2FtZXM6IFwiU2ltdWxhdGUgR2FtZXMhXCJcbiMgICAgZ2FtZXNfc2ltdWxhdGVkX2J5OiBcIkdhbWVzIHNpbXVsYXRlZCBieSB5b3U6XCJcbiMgICAgZ2FtZXNfc2ltdWxhdGVkX2ZvcjogXCJHYW1lcyBzaW11bGF0ZWQgZm9yIHlvdTpcIlxuIyAgICBnYW1lc19pbl9xdWV1ZTogXCJHYW1lcyBjdXJyZW50bHkgaW4gdGhlIHF1ZXVlOlwiXG4jICAgIGdhbWVzX3NpbXVsYXRlZDogXCJHYW1lcyBzaW11bGF0ZWRcIlxuIyAgICBnYW1lc19wbGF5ZWQ6IFwiR2FtZXMgcGxheWVkXCJcbiMgICAgcmF0aW86IFwiUmF0aW9cIlxuIyAgICBsZWFkZXJib2FyZDogXCJMZWFkZXJib2FyZFwiXG4jICAgIGJhdHRsZV9hczogXCJCYXR0bGUgYXMgXCJcbiMgICAgc3VtbWFyeV95b3VyOiBcIllvdXIgXCJcbiMgICAgc3VtbWFyeV9tYXRjaGVzOiBcIk1hdGNoZXMgLSBcIlxuIyAgICBzdW1tYXJ5X3dpbnM6IFwiIFdpbnMsIFwiXG4jICAgIHN1bW1hcnlfbG9zc2VzOiBcIiBMb3NzZXNcIlxuIyAgICByYW5rX25vX2NvZGU6IFwiTm8gTmV3IENvZGUgdG8gUmFua1wiXG4jICAgIHJhbmtfbXlfZ2FtZTogXCJSYW5rIE15IEdhbWUhXCJcbiMgICAgcmFua19zdWJtaXR0aW5nOiBcIlN1Ym1pdHRpbmcuLi5cIlxuIyAgICByYW5rX3N1Ym1pdHRlZDogXCJTdWJtaXR0ZWQgZm9yIFJhbmtpbmdcIlxuIyAgICByYW5rX2ZhaWxlZDogXCJGYWlsZWQgdG8gUmFua1wiXG4jICAgIHJhbmtfYmVpbmdfcmFua2VkOiBcIkdhbWUgQmVpbmcgUmFua2VkXCJcbiMgICAgcmFua19sYXN0X3N1Ym1pdHRlZDogXCJzdWJtaXR0ZWQgXCJcbiMgICAgaGVscF9zaW11bGF0ZTogXCJIZWxwIHNpbXVsYXRlIGdhbWVzP1wiXG4jICAgIGNvZGVfYmVpbmdfc2ltdWxhdGVkOiBcIllvdXIgbmV3IGNvZGUgaXMgYmVpbmcgc2ltdWxhdGVkIGJ5IG90aGVyIHBsYXllcnMgZm9yIHJhbmtpbmcuIFRoaXMgd2lsbCByZWZyZXNoIGFzIG5ldyBtYXRjaGVzIGNvbWUgaW4uXCJcbiMgICAgbm9fcmFua2VkX21hdGNoZXNfcHJlOiBcIk5vIHJhbmtlZCBtYXRjaGVzIGZvciB0aGUgXCJcbiMgICAgbm9fcmFua2VkX21hdGNoZXNfcG9zdDogXCIgdGVhbSEgUGxheSBhZ2FpbnN0IHNvbWUgY29tcGV0aXRvcnMgYW5kIHRoZW4gY29tZSBiYWNrIGhlcmUgdG8gZ2V0IHlvdXIgZ2FtZSByYW5rZWQuXCJcbiMgICAgY2hvb3NlX29wcG9uZW50OiBcIkNob29zZSBhbiBPcHBvbmVudFwiXG4jICAgIHNlbGVjdF95b3VyX2xhbmd1YWdlOiBcIlNlbGVjdCB5b3VyIGxhbmd1YWdlIVwiXG4jICAgIHR1dG9yaWFsX3BsYXk6IFwiUGxheSBUdXRvcmlhbFwiXG4jICAgIHR1dG9yaWFsX3JlY29tbWVuZGVkOiBcIlJlY29tbWVuZGVkIGlmIHlvdSd2ZSBuZXZlciBwbGF5ZWQgYmVmb3JlXCJcbiMgICAgdHV0b3JpYWxfc2tpcDogXCJTa2lwIFR1dG9yaWFsXCJcbiMgICAgdHV0b3JpYWxfbm90X3N1cmU6IFwiTm90IHN1cmUgd2hhdCdzIGdvaW5nIG9uP1wiXG4jICAgIHR1dG9yaWFsX3BsYXlfZmlyc3Q6IFwiUGxheSB0aGUgVHV0b3JpYWwgZmlyc3QuXCJcbiMgICAgc2ltcGxlX2FpOiBcIlNpbXBsZSBDUFVcIlxuIyAgICB3YXJtdXA6IFwiV2FybXVwXCJcbiMgICAgZnJpZW5kc19wbGF5aW5nOiBcIkZyaWVuZHMgUGxheWluZ1wiXG4jICAgIGxvZ19pbl9mb3JfZnJpZW5kczogXCJMb2cgaW4gdG8gcGxheSB3aXRoIHlvdXIgZnJpZW5kcyFcIlxuIyAgICBzb2NpYWxfY29ubmVjdF9ibHVyYjogXCJDb25uZWN0IGFuZCBwbGF5IGFnYWluc3QgeW91ciBmcmllbmRzIVwiXG4jICAgIGludml0ZV9mcmllbmRzX3RvX2JhdHRsZTogXCJJbnZpdGUgeW91ciBmcmllbmRzIHRvIGpvaW4geW91IGluIGJhdHRsZSFcIlxuIyAgICBmaWdodDogXCJGaWdodCFcIlxuIyAgICB3YXRjaF92aWN0b3J5OiBcIldhdGNoIHlvdXIgdmljdG9yeVwiXG4jICAgIGRlZmVhdF90aGU6IFwiRGVmZWF0IHRoZVwiXG4jICAgIHdhdGNoX2JhdHRsZTogXCJXYXRjaCB0aGUgYmF0dGxlXCJcbiMgICAgdG91cm5hbWVudF9zdGFydGVkOiBcIiwgc3RhcnRlZFwiXG4jICAgIHRvdXJuYW1lbnRfZW5kczogXCJUb3VybmFtZW50IGVuZHNcIlxuIyAgICB0b3VybmFtZW50X2VuZGVkOiBcIlRvdXJuYW1lbnQgZW5kZWRcIlxuIyAgICB0b3VybmFtZW50X3J1bGVzOiBcIlRvdXJuYW1lbnQgUnVsZXNcIlxuIyAgICB0b3VybmFtZW50X2JsdXJiOiBcIldyaXRlIGNvZGUsIGNvbGxlY3QgZ29sZCwgYnVpbGQgYXJtaWVzLCBjcnVzaCBmb2VzLCB3aW4gcHJpemVzLCBhbmQgdXBncmFkZSB5b3VyIGNhcmVlciBpbiBvdXIgJDQwLDAwMCBHcmVlZCB0b3VybmFtZW50ISBDaGVjayBvdXQgdGhlIGRldGFpbHNcIlxuIyAgICB0b3VybmFtZW50X2JsdXJiX2NyaXNzX2Nyb3NzOiBcIldpbiBiaWRzLCBjb25zdHJ1Y3QgcGF0aHMsIG91dHdpdCBvcHBvbmVudHMsIGdyYWIgZ2VtcywgYW5kIHVwZ3JhZGUgeW91ciBjYXJlZXIgaW4gb3VyIENyaXNzLUNyb3NzIHRvdXJuYW1lbnQhIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfemVyb19zdW06IFwiVW5sZWFzaCB5b3VyIGNvZGluZyBjcmVhdGl2aXR5IGluIGJvdGggZ29sZCBnYXRoZXJpbmcgYW5kIGJhdHRsZSB0YWN0aWNzIGluIHRoaXMgYWxwaW5lIG1pcnJvciBtYXRjaCBiZXR3ZWVuIHJlZCBzb3JjZXJlciBhbmQgYmx1ZSBzb3JjZXJlci4gVGhlIHRvdXJuYW1lbnQgYmVnYW4gb24gRnJpZGF5LCBNYXJjaCAyNyBhbmQgd2lsbCBydW4gdW50aWwgTW9uZGF5LCBBcHJpbCA2IGF0IDVQTSBQRFQuIENvbXBldGUgZm9yIGZ1biBhbmQgZ2xvcnkhIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfYWNlX29mX2NvZGVyczogXCJCYXR0bGUgaXQgb3V0IGluIHRoZSBmcm96ZW4gZ2xhY2llciBpbiB0aGlzIGRvbWluYXRpb24tc3R5bGUgbWlycm9yIG1hdGNoISBUaGUgdG91cm5hbWVudCBiZWdhbiBvbiBXZWRuZXNkYXksIFNlcHRlbWJlciAxNiBhbmQgd2lsbCBydW4gdW50aWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE0IGF0IDVQTSBQRFQuIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfYmxvZzogXCJvbiBvdXIgYmxvZ1wiXG4jICAgIHJ1bGVzOiBcIlJ1bGVzXCJcbiMgICAgd2lubmVyczogXCJXaW5uZXJzXCJcbiMgICAgbGVhZ3VlOiBcIkxlYWd1ZVwiXG4jICAgIHJlZF9haTogXCJSZWQgQ1BVXCIgIyBcIlJlZCBBSSBXaW5zXCIsIGF0IGVuZCBvZiBtdWx0aXBsYXllciBtYXRjaCBwbGF5YmFja1xuIyAgICBibHVlX2FpOiBcIkJsdWUgQ1BVXCJcbiMgICAgd2luczogXCJXaW5zXCIgIyBBdCBlbmQgb2YgbXVsdGlwbGF5ZXIgbWF0Y2ggcGxheWJhY2tcbiMgICAgaHVtYW5zOiBcIlJlZFwiICMgTGFkZGVyIHBhZ2UgZGlzcGxheSB0ZWFtIG5hbWVcbiMgICAgb2dyZXM6IFwiQmx1ZVwiXG5cbiAgdXNlcjpcbiAgICBzdGF0czogXCLYp9it2LXYp9im2YrZkdin2KpcIlxuICAgIHNpbmdsZXBsYXllcl90aXRsZTogXCLZhdiz2KrZiNmK2KfYqiDYp9mE2YTYp9mR2LnYqCDYp9mE2YjYp9it2K9cIlxuICAgIG11bHRpcGxheWVyX3RpdGxlOiBcItmF2LPYqtmI2YrYp9iqICDZhdiq2LnYr9mR2K/YqSDYp9mE2YTYp9mR2LnYqNmK2YZcIlxuICAgIGFjaGlldmVtZW50c190aXRsZTogXCLYp9mE2KXZhtis2KfYstin2KpcIlxuICAgIGxhc3RfcGxheWVkOiBcItii2K7YsSDZhdinINmE2LnYqFwiXG4gICAgc3RhdHVzOiBcItin2YTYrdin2YTYqVwiXG4gICAgc3RhdHVzX2NvbXBsZXRlZDogXCLYqtmF2ZHYqlwiXG4gICAgc3RhdHVzX3VuZmluaXNoZWQ6IFwi2LrZitixINmF2YbYqtmH2YrYqVwiXG4gICAgbm9fc2luZ2xlcGxheWVyOiBcItmE2Kcg2YrZiNis2K8g2YXYqNin2LHZitin2Kog2KfZhNmE2KfZkdi52Kgg2KfZhNmI2KfYrdivINmE2LnYqNiqINit2KrZkdmJINin2YTYotmGLlwiXG4gICAgbm9fbXVsdGlwbGF5ZXI6IFwi2YTYpyDZitmI2KzYryDZhdio2KfYsdmK2KfYqiDZhdiq2LnYr9mR2K/YqSDYp9mE2YTYp9mR2LnYqNmK2YYg2YTYudio2Kog2K3YqtmR2Ykg2KfZhNii2YZcIlxuICAgIG5vX2FjaGlldmVtZW50czogXCLZhNinINiq2YjYrNivINin2YbYrNin2LLYp9iqINmF2YPYqtiz2KjYqSDYrdiq2ZHZiSDYp9mE2KLZhi5cIlxuICAgIGZhdm9yaXRlX3ByZWZpeDogXCLZhNi62KrZgyDYp9mE2YXZgdi22ZHZhNipINmH2YogXCJcbiAgICBmYXZvcml0ZV9wb3N0Zml4OiBcIi5cIlxuIyAgICBub3RfbWVtYmVyX29mX2NsYW5zOiBcIk5vdCBhIG1lbWJlciBvZiBhbnkgY2xhbnMgeWV0LlwiXG5cbiAgYWNoaWV2ZW1lbnRzOlxuICAgIGxhc3RfZWFybmVkOiBcItin2YTZhdmD2KrYs9io2KfYqiDYp9mE2KPYrtmK2LHYqVwiXG4gICAgYW1vdW50X2FjaGlldmVkOiBcItmF2KjZhNi6XCJcbiAgICBhY2hpZXZlbWVudDogXCLYp9mE2KXZhtis2KfYslwiXG4gICAgY3VycmVudF94cF9wcmVmaXg6IFwiXCJcbiAgICBjdXJyZW50X3hwX3Bvc3RmaXg6IFwi2YHZiiDYp9mE2YXYrNmF2YjYuVwiXG4gICAgbmV3X3hwX3ByZWZpeDogXCJcIlxuICAgIG5ld194cF9wb3N0Zml4OiBcItin2YPYqtiz2KjYqlwiXG4gICAgbGVmdF94cF9wcmVmaXg6IFwiXCJcbiAgICBsZWZ0X3hwX2luZml4OiBcItit2KrZkdmJINmF2LPYqtmI2YkgXCJcbiAgICBsZWZ0X3hwX3Bvc3RmaXg6IFwiXCJcblxuIyAgYWNjb3VudDpcbiMgICAgcGF5bWVudHM6IFwiUGF5bWVudHNcIlxuIyAgICBwcmVwYWlkX2NvZGVzOiBcIlByZXBhaWQgQ29kZXNcIlxuIyAgICBwdXJjaGFzZWQ6IFwiUHVyY2hhc2VkXCJcbiMgICAgc3Vic2NyaWJlX2Zvcl9nZW1zOiBcIlN1YnNjcmliZSBmb3IgZ2Vtc1wiXG4jICAgIHN1YnNjcmlwdGlvbjogXCJTdWJzY3JpcHRpb25cIlxuIyAgICBpbnZvaWNlczogXCJJbnZvaWNlc1wiXG4jICAgIHNlcnZpY2VfYXBwbGU6IFwiQXBwbGVcIlxuIyAgICBzZXJ2aWNlX3dlYjogXCJXZWJcIlxuIyAgICBwYWlkX29uOiBcIlBhaWQgT25cIlxuIyAgICBzZXJ2aWNlOiBcIlNlcnZpY2VcIlxuIyAgICBwcmljZTogXCJQcmljZVwiXG4jICAgIGdlbXM6IFwiR2Vtc1wiXG4jICAgIGFjdGl2ZTogXCJBY3RpdmVcIlxuIyAgICBzdWJzY3JpYmVkOiBcIlN1YnNjcmliZWRcIlxuIyAgICB1bnN1YnNjcmliZWQ6IFwiVW5zdWJzY3JpYmVkXCJcbiMgICAgYWN0aXZlX3VudGlsOiBcIkFjdGl2ZSBVbnRpbFwiXG4jICAgIGNvc3Q6IFwiQ29zdFwiXG4jICAgIG5leHRfcGF5bWVudDogXCJOZXh0IFBheW1lbnRcIlxuIyAgICBjYXJkOiBcIkNhcmRcIlxuIyAgICBzdGF0dXNfdW5zdWJzY3JpYmVkX2FjdGl2ZTogXCJZb3UncmUgbm90IHN1YnNjcmliZWQgYW5kIHdvbid0IGJlIGJpbGxlZCwgYnV0IHlvdXIgYWNjb3VudCBpcyBzdGlsbCBhY3RpdmUgZm9yIG5vdy5cIlxuIyAgICBzdGF0dXNfdW5zdWJzY3JpYmVkOiBcIkdldCBhY2Nlc3MgdG8gbmV3IGxldmVscywgaGVyb2VzLCBpdGVtcywgYW5kIGJvbnVzIGdlbXMgd2l0aCBhIENvZGVDb21iYXQgc3Vic2NyaXB0aW9uIVwiXG4jICAgIG5vdF95ZXRfdmVyaWZpZWQ6IFwiTm90IHlldCB2ZXJpZmllZC5cIlxuIyAgICByZXNlbmRfZW1haWw6IFwiUmVzZW5kIGVtYWlsXCJcbiMgICAgZW1haWxfc2VudDogXCJFbWFpbCBzZW50ISBDaGVjayB5b3VyIGluYm94LlwiXG4jICAgIHZlcmlmeWluZ19lbWFpbDogXCJWZXJpZnlpbmcgeW91ciBlbWFpbCBhZGRyZXNzLi4uXCJcbiMgICAgc3VjY2Vzc2Z1bGx5X3ZlcmlmaWVkOiBcIllvdSd2ZSBzdWNjZXNzZnVsbHkgdmVyaWZpZWQgeW91ciBlbWFpbCBhZGRyZXNzIVwiXG4jICAgIHZlcmlmeV9lcnJvcjogXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHZlcmlmeWluZyB5b3VyIGVtYWlsIDooXCJcblxuIyAgYWNjb3VudF9pbnZvaWNlczpcbiMgICAgYW1vdW50OiBcIkFtb3VudCBpbiBVUyBkb2xsYXJzXCJcbiMgICAgZGVjbGluZWQ6IFwiWW91ciBjYXJkIHdhcyBkZWNsaW5lZFwiXG4jICAgIGludmFsaWRfYW1vdW50OiBcIlBsZWFzZSBlbnRlciBhIFVTIGRvbGxhciBhbW91bnQuXCJcbiMgICAgbm90X2xvZ2dlZF9pbjogXCJMb2cgaW4gb3IgY3JlYXRlIGFuIGFjY291bnQgdG8gYWNjZXNzIGludm9pY2VzLlwiXG4jICAgIHBheTogXCJQYXkgSW52b2ljZVwiXG4jICAgIHB1cmNoYXNpbmc6IFwiUHVyY2hhc2luZy4uLlwiXG4jICAgIHJldHJ5aW5nOiBcIlNlcnZlciBlcnJvciwgcmV0cnlpbmcuXCJcbiMgICAgc3VjY2VzczogXCJTdWNjZXNzZnVsbHkgcGFpZC4gVGhhbmtzIVwiXG5cbiMgIGFjY291bnRfcHJlcGFpZDpcbiMgICAgcHVyY2hhc2VfY29kZTogXCJQdXJjaGFzZSBhIFN1YnNjcmlwdGlvbiBDb2RlXCJcbiMgICAgcHVyY2hhc2VfY29kZTE6IFwiU3Vic2NyaXB0aW9uIENvZGVzIGNhbiBiZSByZWRlZW1lZCB0byBhZGQgcHJlbWl1bSBzdWJzY3JpcHRpb24gdGltZSB0byBvbmUgb3IgbW9yZSBhY2NvdW50cyBmb3IgdGhlIEhvbWUgdmVyc2lvbiBvZiBDb2RlQ29tYmF0LlwiICNcbiMgICAgcHVyY2hhc2VfY29kZTI6IFwiRWFjaCBDb2RlQ29tYmF0IGFjY291bnQgY2FuIG9ubHkgcmVkZWVtIGEgcGFydGljdWxhciBTdWJzY3JpcHRpb24gQ29kZSBvbmNlLlwiXG4jICAgIHB1cmNoYXNlX2NvZGUzOiBcIlN1YnNjcmlwdGlvbiBDb2RlIG1vbnRocyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgYW55IGV4aXN0aW5nIHN1YnNjcmlwdGlvbiBvbiB0aGUgYWNjb3VudC5cIlxuIyAgICBwdXJjaGFzZV9jb2RlNDogXCJTdWJzY3JpcHRpb24gQ29kZXMgYXJlIGZvciBhY2NvdW50cyBwbGF5aW5nIHRoZSBIb21lIHZlcnNpb24gb2YgQ29kZUNvbWJhdCwgdGhleSBjYW5ub3QgYmUgdXNlZCBpbiBwbGFjZSBvZiBTdHVkZW50IExpY2Vuc2VzIGZvciB0aGUgQ2xhc3Nyb29tIHZlcnNpb24uXCJcbiMgICAgcHVyY2hhc2VfY29kZTU6IFwiRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gU3R1ZGVudCBMaWNlbnNlcywgcmVhY2ggb3V0IHRvXCJcbiMgICAgdXNlcnM6IFwiVXNlcnNcIlxuIyAgICBtb250aHM6IFwiTW9udGhzXCJcbiMgICAgcHVyY2hhc2VfdG90YWw6IFwiVG90YWxcIlxuIyAgICBwdXJjaGFzZV9idXR0b246IFwiU3VibWl0IFB1cmNoYXNlXCJcbiMgICAgeW91cl9jb2RlczogXCJZb3VyIENvZGVzXCJcbiMgICAgcmVkZWVtX2NvZGVzOiBcIlJlZGVlbSBhIFN1YnNjcmlwdGlvbiBDb2RlXCJcbiMgICAgcHJlcGFpZF9jb2RlOiBcIlByZXBhaWQgQ29kZVwiXG4jICAgIGxvb2t1cF9jb2RlOiBcIkxvb2t1cCBwcmVwYWlkIGNvZGVcIlxuIyAgICBhcHBseV9hY2NvdW50OiBcIkFwcGx5IHRvIHlvdXIgYWNjb3VudFwiXG4jICAgIGNvcHlfbGluazogXCJZb3UgY2FuIGNvcHkgdGhlIGNvZGUncyBsaW5rIGFuZCBzZW5kIGl0IHRvIHNvbWVvbmUuXCJcbiMgICAgcXVhbnRpdHk6IFwiUXVhbnRpdHlcIlxuIyAgICByZWRlZW1lZDogXCJSZWRlZW1lZFwiXG4jICAgIG5vX2NvZGVzOiBcIk5vIGNvZGVzIHlldCFcIlxuIyAgICB5b3VfY2FuMTogXCJZb3UgY2FuXCJcbiMgICAgeW91X2NhbjI6IFwicHVyY2hhc2UgYSBwcmVwYWlkIGNvZGVcIlxuIyAgICB5b3VfY2FuMzogXCJ0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIHlvdXIgb3duIGFjY291bnQgb3IgZ2l2ZW4gdG8gb3RoZXJzLlwiXG5cbiAgbG9hZGluZ19lcnJvcjpcbiAgICBjb3VsZF9ub3RfbG9hZDogXCLYrti32KMg2YHZiiDYqtit2YXZitmEINmF2YYg2KfZhNiu2KfYr9mFXCJcbiAgICBjb25uZWN0aW9uX2ZhaWx1cmU6IFwi2YHYtNmEINin2YTYp9iq2LXYp9mELlwiXG4jICAgIGNvbm5lY3Rpb25fZmFpbHVyZV9kZXNjOiBcIkl0IGRvZXNu4oCZdCBsb29rIGxpa2UgeW914oCZcmUgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldCEgQ2hlY2sgeW91ciBuZXR3b3JrIGNvbm5lY3Rpb24gYW5kIHRoZW4gcmVsb2FkIHRoaXMgcGFnZS5cIlxuIyAgICBsb2dpbl9yZXF1aXJlZDogXCJMb2dpbiBSZXF1aXJlZFwiXG4jICAgIGxvZ2luX3JlcXVpcmVkX2Rlc2M6IFwiWW91IG5lZWQgdG8gYmUgbG9nZ2VkIGluIHRvIGFjY2VzcyB0aGlzIHBhZ2UuXCJcbiAgICB1bmF1dGhvcml6ZWQ6IFwi2KrYrdiq2KfYrCDYpdmE2Ykg2KPZhiDYqtmD2YjZhiDZhdiz2KzZkdmEINin2YTYr9iu2YjZhMKgINmH2YQg2YTYr9mK2YMg2KfZhNmD2YjZg9mK2LIg2YXYudi32ZHZhNip2J9cIlxuICAgIGZvcmJpZGRlbjogXCLZhNmK2LMg2YTYr9mK2YMg2KfZhNij2LDZiNmG2KfYqi5cIlxuIyAgICBmb3JiaWRkZW5fZGVzYzogXCJPaCBubywgdGhlcmXigJlzIG5vdGhpbmcgd2UgY2FuIHNob3cgeW91IGhlcmUhIE1ha2Ugc3VyZSB5b3XigJlyZSBsb2dnZWQgaW50byB0aGUgY29ycmVjdCBhY2NvdW50LCBvciB2aXNpdCBvbmUgb2YgdGhlIGxpbmtzIGJlbG93IHRvIGdldCBiYWNrIHRvIHByb2dyYW1taW5nIVwiXG4gICAgbm90X2ZvdW5kOiBcItmE2YUg2YrYqtmFINin2YTYudir2YjYsS5cIlxuIyAgICBub3RfZm91bmRfZGVzYzogXCJIbSwgdGhlcmXigJlzIG5vdGhpbmcgaGVyZS4gVmlzaXQgb25lIG9mIHRoZSBmb2xsb3dpbmcgbGlua3MgdG8gZ2V0IGJhY2sgdG8gcHJvZ3JhbW1pbmchXCJcbiAgICBub3RfYWxsb3dlZDogXCLYt9ix2YrZgtipINi62YrYsSDZhdiz2YXZiNitINio2YfYpy5cIlxuICAgIHRpbWVvdXQ6IFwi2KfZhtiq2YfYqiDZhdmH2YTYqSDYp9iz2KrYrNin2KjYqSDYp9mE2K7Yp9iv2YUgLlwiICMge2NoYW5nZX1cbiAgICBjb25mbGljdDogXCLYp9mE2LXYsdin2Lkg2LnZhNmJINin2YTZhdmI2KfYsdivLlwiXG4gICAgYmFkX2lucHV0OiBcItil2K/Yrtin2YQg2LPZitimLlwiXG4gICAgc2VydmVyX2Vycm9yOiBcItiu2LfYoyDZgdmKINin2YTYrtin2K/ZhS5cIlxuICAgIHVua25vd246IFwi2K7Yt9ijINi62YrYsSDZhdi52LHZiNmBLlwiICMge2NoYW5nZX1cbiMgICAgZXJyb3I6IFwiRVJST1JcIlxuIyAgICBnZW5lcmFsX2Rlc2M6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcsIGFuZCBpdOKAmXMgcHJvYmFibHkgb3VyIGZhdWx0LiBUcnkgd2FpdGluZyBhIGJpdCBhbmQgdGhlbiByZWZyZXNoaW5nIHRoZSBwYWdlLCBvciB2aXNpdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBsaW5rcyB0byBnZXQgYmFjayB0byBwcm9ncmFtbWluZyFcIlxuXG4jICByZXNvdXJjZXM6XG4jICAgIGxldmVsOiBcIkxldmVsXCJcbiMgICAgcGF0Y2g6IFwiUGF0Y2hcIlxuIyAgICBwYXRjaGVzOiBcIlBhdGNoZXNcIlxuIyAgICBzeXN0ZW06IFwiU3lzdGVtXCJcbiMgICAgc3lzdGVtczogXCJTeXN0ZW1zXCJcbiMgICAgY29tcG9uZW50OiBcIkNvbXBvbmVudFwiXG4jICAgIGNvbXBvbmVudHM6IFwiQ29tcG9uZW50c1wiXG4jICAgIGhlcm86IFwiSGVyb1wiXG4jICAgIGNhbXBhaWduczogXCJDYW1wYWlnbnNcIlxuXG4jICBjb25jZXB0czpcbiMgICAgYWR2YW5jZWRfY3NzX3J1bGVzOiBcIkFkdmFuY2VkIENTUyBSdWxlc1wiXG4jICAgIGFkdmFuY2VkX2Nzc19zZWxlY3RvcnM6IFwiQWR2YW5jZWQgQ1NTIFNlbGVjdG9yc1wiXG4jICAgIGFkdmFuY2VkX2h0bWxfYXR0cmlidXRlczogXCJBZHZhbmNlZCBIVE1MIEF0dHJpYnV0ZXNcIlxuIyAgICBhZHZhbmNlZF9odG1sX3RhZ3M6IFwiQWR2YW5jZWQgSFRNTCBUYWdzXCJcbiMgICAgYWxnb3JpdGhtX2F2ZXJhZ2U6IFwiQWxnb3JpdGhtIEF2ZXJhZ2VcIlxuIyAgICBhbGdvcml0aG1fZmluZF9taW5tYXg6IFwiQWxnb3JpdGhtIEZpbmQgTWluL01heFwiXG4jICAgIGFsZ29yaXRobV9zZWFyY2hfYmluYXJ5OiBcIkFsZ29yaXRobSBTZWFyY2ggQmluYXJ5XCJcbiMgICAgYWxnb3JpdGhtX3NlYXJjaF9ncmFwaDogXCJBbGdvcml0aG0gU2VhcmNoIEdyYXBoXCJcbiMgICAgYWxnb3JpdGhtX3NvcnQ6IFwiQWxnb3JpdGhtIFNvcnRcIlxuIyAgICBhbGdvcml0aG1fc3VtOiBcIkFsZ29yaXRobSBTdW1cIlxuIyAgICBhcmd1bWVudHM6IFwiQXJndW1lbnRzXCJcbiMgICAgYXJpdGhtZXRpYzogXCJBcml0aG1ldGljXCJcbiMgICAgYXJyYXlfMmQ6IFwiMkQgQXJyYXlcIlxuIyAgICBhcnJheV9pbmRleDogXCJBcnJheSBJbmRleGluZ1wiXG4jICAgIGFycmF5X2l0ZXJhdGluZzogXCJJdGVyYXRpbmcgT3ZlciBBcnJheXNcIlxuIyAgICBhcnJheV9saXRlcmFsczogXCJBcnJheSBMaXRlcmFsc1wiXG4jICAgIGFycmF5X3NlYXJjaGluZzogXCJBcnJheSBTZWFyY2hpbmdcIlxuIyAgICBhcnJheV9zb3J0aW5nOiBcIkFycmF5IFNvcnRpbmdcIlxuIyAgICBhcnJheXM6IFwiQXJyYXlzXCJcbiMgICAgYmFzaWNfY3NzX3J1bGVzOiBcIkJhc2ljIENTUyBydWxlc1wiXG4jICAgIGJhc2ljX2Nzc19zZWxlY3RvcnM6IFwiQmFzaWMgQ1NTIHNlbGVjdG9yc1wiXG4jICAgIGJhc2ljX2h0bWxfYXR0cmlidXRlczogXCJCYXNpYyBIVE1MIEF0dHJpYnV0ZXNcIlxuIyAgICBiYXNpY19odG1sX3RhZ3M6IFwiQmFzaWMgSFRNTCBUYWdzXCJcbiMgICAgYmFzaWNfc3ludGF4OiBcIkJhc2ljIFN5bnRheFwiXG4jICAgIGJpbmFyeTogXCJCaW5hcnlcIlxuIyAgICBib29sZWFuX2FuZDogXCJCb29sZWFuIEFuZFwiXG4jICAgIGJvb2xlYW5fZXF1YWxpdHk6IFwiQm9vbGVhbiBFcXVhbGl0eVwiXG4jICAgIGJvb2xlYW5fZ3JlYXRlcl9sZXNzOiBcIkJvb2xlYW4gR3JlYXRlci9MZXNzXCJcbiMgICAgYm9vbGVhbl9sb2dpY19zaG9ydGNpcmN1aXQ6IFwiQm9vbGVhbiBMb2dpYyBTaG9ydGNpcmN1aXRpbmdcIlxuIyAgICBib29sZWFuX25vdDogXCJCb29sZWFuIE5vdFwiXG4jICAgIGJvb2xlYW5fb3BlcmF0b3JfcHJlY2VkZW5jZTogXCJCb29sZWFuIE9wZXJhdG9yIFByZWNlZGVuY2VcIlxuIyAgICBib29sZWFuX29yOiBcIkJvb2xlYW4gT3JcIlxuIyAgICBib290c3RyYXA6IFwiQm9vdHN0cmFwXCJcbiMgICAgYnJlYWtfc3RhdGVtZW50czogXCJCcmVhayBTdGF0ZW1lbnRzXCJcbiMgICAgY2xhc3NlczogXCJDbGFzc2VzXCJcbiMgICAgY29udGludWVfc3RhdGVtZW50czogXCJDb250aW51ZSBTdGF0ZW1lbnRzXCJcbiMgICAgZG9tX2V2ZW50czogXCJET00gRXZlbnRzXCJcbiMgICAgZHluYW1pY19zdHlsaW5nOiBcIkR5bmFtaWMgU3R5bGluZ1wiXG4jICAgIGV2ZW50X2NvbmN1cnJlbmN5OiBcIkV2ZW50IENvbmN1cnJlbmN5XCJcbiMgICAgZXZlbnRfZGF0YTogXCJFdmVudCBEYXRhXCJcbiMgICAgZXZlbnRfaGFuZGxlcnM6IFwiRXZlbnQgSGFuZGxlcnNcIlxuIyAgICBldmVudF9zcGF3bjogXCJTcGF3biBFdmVudFwiXG4jICAgIGZvcl9sb29wczogXCJGb3IgTG9vcHNcIlxuIyAgICBmb3JfbG9vcHNfbmVzdGVkOiBcIk5lc3RlZCBGb3IgTG9vcHNcIlxuIyAgICBmb3JfbG9vcHNfcmFuZ2U6IFwiRm9yIExvb3BzIFJhbmdlXCJcbiMgICAgZnVuY3Rpb25zOiBcIkZ1bmN0aW9uc1wiXG4jICAgIGZ1bmN0aW9uc19wYXJhbWV0ZXJzOiBcIlBhcmFtZXRlcnNcIlxuIyAgICBmdW5jdGlvbnNfbXVsdGlwbGVfcGFyYW1ldGVyczogXCJNdWx0aXBsZSBQYXJhbWV0ZXJzXCJcbiMgICAgZ2FtZV9haTogXCJHYW1lIEFJXCJcbiMgICAgZ2FtZV9nb2FsczogXCJHYW1lIEdvYWxzXCJcbiMgICAgZ2FtZV9zcGF3bjogXCJHYW1lIFNwYXduXCJcbiMgICAgZ3JhcGhpY3M6IFwiR3JhcGhpY3NcIlxuIyAgICBncmFwaHM6IFwiR3JhcGhzXCJcbiMgICAgaGVhcHM6IFwiSGVhcHNcIlxuIyAgICBpZl9jb25kaXRpb246IFwiQ29uZGl0aW9uYWwgSWYgU3RhdGVtZW50c1wiXG4jICAgIGlmX2Vsc2VfaWY6IFwiSWYvRWxzZSBJZiBTdGF0ZW1lbnRzXCJcbiMgICAgaWZfZWxzZV9zdGF0ZW1lbnRzOiBcIklmL0Vsc2UgU3RhdGVtZW50c1wiXG4jICAgIGlmX3N0YXRlbWVudHM6IFwiSWYgU3RhdGVtZW50c1wiXG4jICAgIGlmX3N0YXRlbWVudHNfbmVzdGVkOiBcIk5lc3RlZCBJZiBTdGF0ZW1lbnRzXCJcbiMgICAgaW5kZXhpbmc6IFwiQXJyYXkgSW5kZXhlc1wiXG4jICAgIGlucHV0X2hhbmRsaW5nX2ZsYWdzOiBcIklucHV0IEhhbmRsaW5nIC0gRmxhZ3NcIlxuIyAgICBpbnB1dF9oYW5kbGluZ19rZXlib2FyZDogXCJJbnB1dCBIYW5kbGluZyAtIEtleWJvYXJkXCJcbiMgICAgaW5wdXRfaGFuZGxpbmdfbW91c2U6IFwiSW5wdXQgSGFuZGxpbmcgLSBNb3VzZVwiXG4jICAgIGludGVybWVkaWF0ZV9jc3NfcnVsZXM6IFwiSW50ZXJtZWRpYXRlIENTUyBSdWxlc1wiXG4jICAgIGludGVybWVkaWF0ZV9jc3Nfc2VsZWN0b3JzOiBcIkludGVybWVkaWF0ZSBDU1MgU2VsZWN0b3JzXCJcbiMgICAgaW50ZXJtZWRpYXRlX2h0bWxfYXR0cmlidXRlczogXCJJbnRlcm1lZGlhdGUgSFRNTCBBdHRyaWJ1dGVzXCJcbiMgICAgaW50ZXJtZWRpYXRlX2h0bWxfdGFnczogXCJJbnRlcm1lZGlhdGUgSFRNTCBUYWdzXCJcbiMgICAganF1ZXJ5OiBcImpRdWVyeVwiXG4jICAgIGpxdWVyeV9hbmltYXRpb25zOiBcImpRdWVyeSBBbmltYXRpb25zXCJcbiMgICAganF1ZXJ5X2ZpbHRlcmluZzogXCJqUXVlcnkgRWxlbWVudCBGaWx0ZXJpbmdcIlxuIyAgICBqcXVlcnlfc2VsZWN0b3JzOiBcImpRdWVyeSBTZWxlY3RvcnNcIlxuIyAgICBsZW5ndGg6IFwiQXJyYXkgTGVuZ3RoXCJcbiMgICAgbWF0aF9nZW9tZXRyeTogXCJHZW9tZXRyeVwiXG4jICAgIG1hdGhfb3BlcmF0aW9uczogXCJNYXRoIExpYnJhcnkgT3BlcmF0aW9uc1wiXG4jICAgIG1hdGhfdHJpZ29ub21ldHJ5OiBcIlRyaWdvbm9tZXRyeVwiXG4jICAgIG9iamVjdF9saXRlcmFsczogXCJPYmplY3QgTGl0ZXJhbHNcIlxuIyAgICBwYXJhbWV0ZXJzOiBcIlBhcmFtZXRlcnNcIlxuIyAgICBwcm9wZXJ0eV9hY2Nlc3M6IFwiQWNjZXNzaW5nIFByb3BlcnRpZXNcIlxuIyAgICBwcm9wZXJ0eV9hc3NpZ25tZW50OiBcIkFzc2lnbmluZyBQcm9wZXJ0aWVzXCJcbiMgICAgcXVldWVzOiBcIkRhdGEgU3RydWN0dXJlcyAtIFF1ZXVlc1wiXG4jICAgIHJlYWRpbmdfZG9jczogXCJSZWFkaW5nIHRoZSBEb2NzXCJcbiMgICAgcmVjdXJzaW9uOiBcIlJlY3Vyc2lvblwiXG4jICAgIHJldHVybl9zdGF0ZW1lbnRzOiBcIlJldHVybiBTdGF0ZW1lbnRzXCJcbiMgICAgc3RhY2tzOiBcIkRhdGEgU3RydWN0dXJlcyAtIFN0YWNrc1wiXG4jICAgIHN0cmluZ3M6IFwiU3RyaW5nc1wiXG4jICAgIHN0cmluZ3NfY29uY2F0ZW5hdGlvbjogXCJTdHJpbmcgQ29uY2F0ZW5hdGlvblwiXG4jICAgIHN0cmluZ3Nfc3Vic3RyaW5nczogXCJTdWJzdHJpbmdcIlxuIyAgICB0cmVlczogXCJEYXRhIFN0cnVjdHVyZXMgLSBUcmVlc1wiXG4jICAgIHZhcmlhYmxlczogXCJWYXJpYWJsZXNcIlxuIyAgICB2ZWN0b3JzOiBcIlZlY3RvcnNcIlxuIyAgICB3aGlsZV9jb25kaXRpb25fbG9vcHM6IFwiV2hpbGUgTG9vcHMgd2l0aCBDb25kaXRpb25hbHNcIlxuIyAgICB3aGlsZV9sb29wc19zaW1wbGU6IFwiV2hpbGUgTG9vcHNcIlxuIyAgICB3aGlsZV9sb29wc19uZXN0ZWQ6IFwiTmVzdGVkIFdoaWxlIExvb3BzXCJcbiMgICAgeHlfY29vcmRpbmF0ZXM6IFwiQ2FydGVzaWFuIENvb3JkaW5hdGVzXCJcbiMgICAgYWR2YW5jZWRfc3RyaW5nczogXCJBZHZhbmNlZCBTdHJpbmdzXCIgIyBSZXN0IG9mIGNvbmNlcHRzIGFyZSBkZXByZWNhdGVkXG4jICAgIGFsZ29yaXRobXM6IFwiQWxnb3JpdGhtc1wiXG4jICAgIGJvb2xlYW5fbG9naWM6IFwiQm9vbGVhbiBMb2dpY1wiXG4jICAgIGJhc2ljX2h0bWw6IFwiQmFzaWMgSFRNTFwiXG4jICAgIGJhc2ljX2NzczogXCJCYXNpYyBDU1NcIlxuIyAgICBiYXNpY193ZWJfc2NyaXB0aW5nOiBcIkJhc2ljIFdlYiBTY3JpcHRpbmdcIlxuIyAgICBpbnRlcm1lZGlhdGVfaHRtbDogXCJJbnRlcm1lZGlhdGUgSFRNTFwiXG4jICAgIGludGVybWVkaWF0ZV9jc3M6IFwiSW50ZXJtZWRpYXRlIENTU1wiXG4jICAgIGludGVybWVkaWF0ZV93ZWJfc2NyaXB0aW5nOiBcIkludGVybWVkaWF0ZSBXZWIgU2NyaXB0aW5nXCJcbiMgICAgYWR2YW5jZWRfaHRtbDogXCJBZHZhbmNlZCBIVE1MXCJcbiMgICAgYWR2YW5jZWRfY3NzOiBcIkFkdmFuY2VkIENTU1wiXG4jICAgIGFkdmFuY2VkX3dlYl9zY3JpcHRpbmc6IFwiQWR2YW5jZWQgV2ViIFNjcmlwdGluZ1wiXG4jICAgIGlucHV0X2hhbmRsaW5nOiBcIklucHV0IEhhbmRsaW5nXCJcbiMgICAgd2hpbGVfbG9vcHM6IFwiV2hpbGUgTG9vcHNcIlxuIyAgICBwbGFjZV9nYW1lX29iamVjdHM6IFwiUGxhY2UgZ2FtZSBvYmplY3RzXCJcbiMgICAgY29uc3RydWN0X21hemVzOiBcIkNvbnN0cnVjdCBtYXplc1wiXG4jICAgIGNyZWF0ZV9wbGF5YWJsZV9nYW1lOiBcIkNyZWF0ZSBhIHBsYXlhYmxlLCBzaGFyYWJsZSBnYW1lIHByb2plY3RcIlxuIyAgICBhbHRlcl9leGlzdGluZ193ZWJfcGFnZXM6IFwiQWx0ZXIgZXhpc3Rpbmcgd2ViIHBhZ2VzXCJcbiMgICAgY3JlYXRlX3NoYXJhYmxlX3dlYl9wYWdlOiBcIkNyZWF0ZSBhIHNoYXJhYmxlIHdlYiBwYWdlXCJcbiMgICAgYmFzaWNfaW5wdXRfaGFuZGxpbmc6IFwiQmFzaWMgSW5wdXQgSGFuZGxpbmdcIlxuIyAgICBiYXNpY19nYW1lX2FpOiBcIkJhc2ljIEdhbWUgQUlcIlxuIyAgICBiYXNpY19qYXZhc2NyaXB0OiBcIkJhc2ljIEphdmFTY3JpcHRcIlxuIyAgICBiYXNpY19ldmVudF9oYW5kbGluZzogXCJCYXNpYyBFdmVudCBIYW5kbGluZ1wiXG4jICAgIGNyZWF0ZV9zaGFyYWJsZV9pbnRlcmFjdGl2ZV93ZWJfcGFnZTogXCJDcmVhdGUgYSBzaGFyYWJsZSBpbnRlcmFjdGl2ZSB3ZWIgcGFnZVwiXG5cbiMgIGFub255bW91c190ZWFjaGVyOlxuIyAgICBub3RpZnlfdGVhY2hlcjogXCJOb3RpZnkgVGVhY2hlclwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2FjY291bnQ6IFwiQ3JlYXRlIGZyZWUgdGVhY2hlciBhY2NvdW50XCJcbiMgICAgZW50ZXJfc3R1ZGVudF9uYW1lOiBcIllvdXIgbmFtZTpcIlxuIyAgICBlbnRlcl90ZWFjaGVyX2VtYWlsOiBcIllvdXIgdGVhY2hlcidzIGVtYWlsOlwiXG4jICAgIHRlYWNoZXJfZW1haWxfcGxhY2Vob2xkZXI6IFwidGVhY2hlci5lbWFpbEBleGFtcGxlLmNvbVwiXG4jICAgIHN0dWRlbnRfbmFtZV9wbGFjZWhvbGRlcjogXCJ0eXBlIHlvdXIgbmFtZSBoZXJlXCJcbiMgICAgdGVhY2hlcnNfc2VjdGlvbjogXCJUZWFjaGVyczpcIlxuIyAgICBzdHVkZW50c19zZWN0aW9uOiBcIlN0dWRlbnRzOlwiXG4jICAgIHRlYWNoZXJfbm90aWZpZWQ6IFwiV2UndmUgbm90aWZpZWQgeW91ciB0ZWFjaGVyIHRoYXQgeW91IHdhbnQgdG8gcGxheSBtb3JlIENvZGVDb21iYXQgaW4geW91ciBjbGFzc3Jvb20hXCJcblxuICBkZWx0YTpcbiAgICBhZGRlZDogXCLYo9i22YrZgdiqXCJcbiAgICBtb2RpZmllZDogXCLZhdi52K/ZkdmE2KlcIlxuIyAgICBub3RfbW9kaWZpZWQ6IFwiTm90IE1vZGlmaWVkXCJcbiAgICBkZWxldGVkOiBcItit2LDZgdiqXCJcbiAgICBtb3ZlZF9pbmRleDogXCLZgdmH2LHYsyDYp9mG2KrZgtmEXCJcbiAgICB0ZXh0X2RpZmY6IFwiVGV4dCBEaWZmXCJcbiAgICBtZXJnZV9jb25mbGljdF93aXRoOiBcItiq2K/ZhdisINin2YTYtdiv2KfZhSDZhdi5XCJcbiAgICBub19jaGFuZ2VzOiBcIk5vIENoYW5nZXNcIlxuXG4jICBsZWdhbDpcbiMgICAgcGFnZV90aXRsZTogXCJMZWdhbFwiXG4jICAgIG9wZW5zb3VyY2VfaW50cm86IFwiQ29kZUNvbWJhdCBpcyBjb21wbGV0ZWx5IG9wZW4gc291cmNlLlwiXG4jICAgIG9wZW5zb3VyY2VfZGVzY3JpcHRpb25fcHJlZml4OiBcIkNoZWNrIG91dCBcIlxuIyAgICBnaXRodWJfdXJsOiBcIm91ciBHaXRIdWJcIlxuIyAgICBvcGVuc291cmNlX2Rlc2NyaXB0aW9uX2NlbnRlcjogXCJhbmQgaGVscCBvdXQgaWYgeW91IGxpa2UhIENvZGVDb21iYXQgaXMgYnVpbHQgb24gZG96ZW5zIG9mIG9wZW4gc291cmNlIHByb2plY3RzLCBhbmQgd2UgbG92ZSB0aGVtLiBTZWUgXCJcbiMgICAgYXJjaG1hZ2Vfd2lraV91cmw6IFwib3VyIEFyY2htYWdlIHdpa2lcIlxuIyAgICBvcGVuc291cmNlX2Rlc2NyaXB0aW9uX3N1ZmZpeDogXCJmb3IgYSBsaXN0IG9mIHRoZSBzb2Z0d2FyZSB0aGF0IG1ha2VzIHRoaXMgZ2FtZSBwb3NzaWJsZS5cIlxuIyAgICBwcmFjdGljZXNfdGl0bGU6IFwiUmVzcGVjdGZ1bCBCZXN0IFByYWN0aWNlc1wiXG4jICAgIHByYWN0aWNlc19kZXNjcmlwdGlvbjogXCJUaGVzZSBhcmUgb3VyIHByb21pc2VzIHRvIHlvdSwgdGhlIHBsYXllciwgaW4gc2xpZ2h0bHkgbGVzcyBsZWdhbGVzZS5cIlxuIyAgICBwcml2YWN5X3RpdGxlOiBcIlByaXZhY3lcIlxuIyAgICBwcml2YWN5X2Rlc2NyaXB0aW9uOiBcIldlIHdpbGwgbm90IHNlbGwgYW55IG9mIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24uXCJcbiMgICAgc2VjdXJpdHlfdGl0bGU6IFwiU2VjdXJpdHlcIlxuIyAgICBzZWN1cml0eV9kZXNjcmlwdGlvbjogXCJXZSBzdHJpdmUgdG8ga2VlcCB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uIHNhZmUuIEFzIGFuIG9wZW4gc291cmNlIHByb2plY3QsIG91ciBzaXRlIGlzIGZyZWVseSBvcGVuIHRvIGFueW9uZSB0byByZXZpZXcgYW5kIGltcHJvdmUgb3VyIHNlY3VyaXR5IHN5c3RlbXMuXCJcbiMgICAgZW1haWxfdGl0bGU6IFwiRW1haWxcIlxuIyAgICBlbWFpbF9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiV2Ugd2lsbCBub3QgaW51bmRhdGUgeW91IHdpdGggc3BhbS4gVGhyb3VnaFwiXG4jICAgIGVtYWlsX3NldHRpbmdzX3VybDogXCJ5b3VyIGVtYWlsIHNldHRpbmdzXCJcbiMgICAgZW1haWxfZGVzY3JpcHRpb25fc3VmZml4OiBcIm9yIHRocm91Z2ggbGlua3MgaW4gdGhlIGVtYWlscyB3ZSBzZW5kLCB5b3UgY2FuIGNoYW5nZSB5b3VyIHByZWZlcmVuY2VzIGFuZCBlYXNpbHkgdW5zdWJzY3JpYmUgYXQgYW55IHRpbWUuXCJcbiMgICAgY29zdF90aXRsZTogXCJDb3N0XCJcbiMgICAgY29zdF9kZXNjcmlwdGlvbjogXCJDb2RlQ29tYmF0IGlzIGZyZWUgdG8gcGxheSBmb3IgYWxsIG9mIGl0cyBjb3JlIGxldmVscywgd2l0aCBhICR7e3ByaWNlfX0gVVNEL21vIHN1YnNjcmlwdGlvbiBmb3IgYWNjZXNzIHRvIGV4dHJhIGxldmVsIGJyYW5jaGVzIGFuZCB7e2dlbXN9fSBib251cyBnZW1zIHBlciBtb250aC4gWW91IGNhbiBjYW5jZWwgd2l0aCBhIGNsaWNrLCBhbmQgd2Ugb2ZmZXIgYSAxMDAlIG1vbmV5LWJhY2sgZ3VhcmFudGVlLlwiXG4jICAgIGNvcHlyaWdodHNfdGl0bGU6IFwiQ29weXJpZ2h0cyBhbmQgTGljZW5zZXNcIlxuIyAgICBjb250cmlidXRvcl90aXRsZTogXCJDb250cmlidXRvciBMaWNlbnNlIEFncmVlbWVudFwiXG4jICAgIGNvbnRyaWJ1dG9yX2Rlc2NyaXB0aW9uX3ByZWZpeDogXCJBbGwgY29udHJpYnV0aW9ucywgYm90aCBvbiB0aGUgc2l0ZSBhbmQgb24gb3VyIEdpdEh1YiByZXBvc2l0b3J5LCBhcmUgc3ViamVjdCB0byBvdXJcIlxuIyAgICBjbGFfdXJsOiBcIkNMQVwiXG4jICAgIGNvbnRyaWJ1dG9yX2Rlc2NyaXB0aW9uX3N1ZmZpeDogXCJ0byB3aGljaCB5b3Ugc2hvdWxkIGFncmVlIGJlZm9yZSBjb250cmlidXRpbmcuXCJcbiMgICAgY29kZV90aXRsZTogXCJDb2RlIC0gTUlUXCJcbiMgICAgY29kZV9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiQWxsIGNvZGUgb3duZWQgYnkgQ29kZUNvbWJhdCBvciBob3N0ZWQgb24gY29kZWNvbWJhdC5jb20sIGJvdGggaW4gdGhlIEdpdEh1YiByZXBvc2l0b3J5IG9yIGluIHRoZSBjb2RlY29tYmF0LmNvbSBkYXRhYmFzZSwgaXMgbGljZW5zZWQgdW5kZXIgdGhlXCJcbiMgICAgbWl0X2xpY2Vuc2VfdXJsOiBcIk1JVCBsaWNlbnNlXCJcbiMgICAgY29kZV9kZXNjcmlwdGlvbl9zdWZmaXg6IFwiVGhpcyBpbmNsdWRlcyBhbGwgY29kZSBpbiBTeXN0ZW1zIGFuZCBDb21wb25lbnRzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIGJ5IENvZGVDb21iYXQgZm9yIHRoZSBwdXJwb3NlIG9mIGNyZWF0aW5nIGxldmVscy5cIlxuIyAgICBhcnRfdGl0bGU6IFwiQXJ0L011c2ljIC0gQ3JlYXRpdmUgQ29tbW9ucyBcIlxuIyAgICBhcnRfZGVzY3JpcHRpb25fcHJlZml4OiBcIkFsbCBjb21tb24gY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlXCJcbiMgICAgY2NfbGljZW5zZV91cmw6IFwiQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiA0LjAgSW50ZXJuYXRpb25hbCBMaWNlbnNlXCJcbiMgICAgYXJ0X2Rlc2NyaXB0aW9uX3N1ZmZpeDogXCJDb21tb24gY29udGVudCBpcyBhbnl0aGluZyBtYWRlIGdlbmVyYWxseSBhdmFpbGFibGUgYnkgQ29kZUNvbWJhdCBmb3IgdGhlIHB1cnBvc2Ugb2YgY3JlYXRpbmcgTGV2ZWxzLiBUaGlzIGluY2x1ZGVzOlwiXG4jICAgIGFydF9tdXNpYzogXCJNdXNpY1wiXG4jICAgIGFydF9zb3VuZDogXCJTb3VuZFwiXG4jICAgIGFydF9hcnR3b3JrOiBcIkFydHdvcmtcIlxuIyAgICBhcnRfc3ByaXRlczogXCJTcHJpdGVzXCJcbiMgICAgYXJ0X290aGVyOiBcIkFueSBhbmQgYWxsIG90aGVyIG5vbi1jb2RlIGNyZWF0aXZlIHdvcmtzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHdoZW4gY3JlYXRpbmcgTGV2ZWxzLlwiXG4jICAgIGFydF9hY2Nlc3M6IFwiQ3VycmVudGx5IHRoZXJlIGlzIG5vIHVuaXZlcnNhbCwgZWFzeSBzeXN0ZW0gZm9yIGZldGNoaW5nIHRoZXNlIGFzc2V0cy4gSW4gZ2VuZXJhbCwgZmV0Y2ggdGhlbSBmcm9tIHRoZSBVUkxzIGFzIHVzZWQgYnkgdGhlIHNpdGUsIGNvbnRhY3QgdXMgZm9yIGFzc2lzdGFuY2UsIG9yIGhlbHAgdXMgaW4gZXh0ZW5kaW5nIHRoZSBzaXRlIHRvIG1ha2UgdGhlc2UgYXNzZXRzIG1vcmUgZWFzaWx5IGFjY2Vzc2libGUuXCJcbiMgICAgYXJ0X3BhcmFncmFwaF8xOiBcIkZvciBhdHRyaWJ1dGlvbiwgcGxlYXNlIG5hbWUgYW5kIGxpbmsgdG8gY29kZWNvbWJhdC5jb20gbmVhciB3aGVyZSB0aGUgc291cmNlIGlzIHVzZWQgb3Igd2hlcmUgYXBwcm9wcmlhdGUgZm9yIHRoZSBtZWRpdW0uIEZvciBleGFtcGxlOlwiXG4jICAgIHVzZV9saXN0XzE6IFwiSWYgdXNlZCBpbiBhIG1vdmllIG9yIGFub3RoZXIgZ2FtZSwgaW5jbHVkZSBjb2RlY29tYmF0LmNvbSBpbiB0aGUgY3JlZGl0cy5cIlxuIyAgICB1c2VfbGlzdF8yOiBcIklmIHVzZWQgb24gYSB3ZWJzaXRlLCBpbmNsdWRlIGEgbGluayBuZWFyIHRoZSB1c2FnZSwgZm9yIGV4YW1wbGUgdW5kZXJuZWF0aCBhbiBpbWFnZSwgb3IgaW4gYSBnZW5lcmFsIGF0dHJpYnV0aW9ucyBwYWdlIHdoZXJlIHlvdSBtaWdodCBhbHNvIG1lbnRpb24gb3RoZXIgQ3JlYXRpdmUgQ29tbW9ucyB3b3JrcyBhbmQgb3BlbiBzb3VyY2Ugc29mdHdhcmUgYmVpbmcgdXNlZCBvbiB0aGUgc2l0ZS4gU29tZXRoaW5nIHRoYXQncyBhbHJlYWR5IGNsZWFybHkgcmVmZXJlbmNpbmcgQ29kZUNvbWJhdCwgc3VjaCBhcyBhIGJsb2cgcG9zdCBtZW50aW9uaW5nIENvZGVDb21iYXQsIGRvZXMgbm90IG5lZWQgc29tZSBzZXBhcmF0ZSBhdHRyaWJ1dGlvbi5cIlxuIyAgICBhcnRfcGFyYWdyYXBoXzI6IFwiSWYgdGhlIGNvbnRlbnQgYmVpbmcgdXNlZCBpcyBjcmVhdGVkIG5vdCBieSBDb2RlQ29tYmF0IGJ1dCBpbnN0ZWFkIGJ5IGEgdXNlciBvZiBjb2RlY29tYmF0LmNvbSwgYXR0cmlidXRlIHRoZW0gaW5zdGVhZCwgYW5kIGZvbGxvdyBhdHRyaWJ1dGlvbiBkaXJlY3Rpb25zIHByb3ZpZGVkIGluIHRoYXQgcmVzb3VyY2UncyBkZXNjcmlwdGlvbiBpZiB0aGVyZSBhcmUgYW55LlwiXG4jICAgIHJpZ2h0c190aXRsZTogXCJSaWdodHMgUmVzZXJ2ZWRcIlxuIyAgICByaWdodHNfZGVzYzogXCJBbGwgcmlnaHRzIGFyZSByZXNlcnZlZCBmb3IgTGV2ZWxzIHRoZW1zZWx2ZXMuIFRoaXMgaW5jbHVkZXNcIlxuIyAgICByaWdodHNfc2NyaXB0czogXCJTY3JpcHRzXCJcbiMgICAgcmlnaHRzX3VuaXQ6IFwiVW5pdCBjb25maWd1cmF0aW9uXCJcbiMgICAgcmlnaHRzX3dyaXRpbmdzOiBcIldyaXRpbmdzXCJcbiMgICAgcmlnaHRzX21lZGlhOiBcIk1lZGlhIChzb3VuZHMsIG11c2ljKSBhbmQgYW55IG90aGVyIGNyZWF0aXZlIGNvbnRlbnQgbWFkZSBzcGVjaWZpY2FsbHkgZm9yIHRoYXQgTGV2ZWwgYW5kIG5vdCBtYWRlIGdlbmVyYWxseSBhdmFpbGFibGUgd2hlbiBjcmVhdGluZyBMZXZlbHMuXCJcbiMgICAgcmlnaHRzX2NsYXJpZmljYXRpb246IFwiVG8gY2xhcmlmeSwgYW55dGhpbmcgdGhhdCBpcyBtYWRlIGF2YWlsYWJsZSBpbiB0aGUgTGV2ZWwgRWRpdG9yIGZvciB0aGUgcHVycG9zZSBvZiBtYWtpbmcgbGV2ZWxzIGlzIHVuZGVyIENDLCB3aGVyZWFzIHRoZSBjb250ZW50IGNyZWF0ZWQgd2l0aCB0aGUgTGV2ZWwgRWRpdG9yIG9yIHVwbG9hZGVkIGluIHRoZSBjb3Vyc2Ugb2YgY3JlYXRpb24gb2YgTGV2ZWxzIGlzIG5vdC5cIlxuIyAgICBudXRzaGVsbF90aXRsZTogXCJJbiBhIE51dHNoZWxsXCJcbiMgICAgbnV0c2hlbGxfZGVzY3JpcHRpb246IFwiQW55IHJlc291cmNlcyB3ZSBwcm92aWRlIGluIHRoZSBMZXZlbCBFZGl0b3IgYXJlIGZyZWUgdG8gdXNlIGFzIHlvdSBsaWtlIGZvciBjcmVhdGluZyBMZXZlbHMuIEJ1dCB3ZSByZXNlcnZlIHRoZSByaWdodCB0byByZXN0cmljdCBkaXN0cmlidXRpb24gb2YgdGhlIExldmVscyB0aGVtc2VsdmVzICh0aGF0IGFyZSBjcmVhdGVkIG9uIGNvZGVjb21iYXQuY29tKSBzbyB0aGF0IHRoZXkgbWF5IGJlIGNoYXJnZWQgZm9yLlwiXG4jICAgIGNhbm9uaWNhbDogXCJUaGUgRW5nbGlzaCB2ZXJzaW9uIG9mIHRoaXMgZG9jdW1lbnQgaXMgdGhlIGRlZmluaXRpdmUsIGNhbm9uaWNhbCB2ZXJzaW9uLiBJZiB0aGVyZSBhcmUgYW55IGRpc2NyZXBhbmNpZXMgYmV0d2VlbiB0cmFuc2xhdGlvbnMsIHRoZSBFbmdsaXNoIGRvY3VtZW50IHRha2VzIHByZWNlZGVuY2UuXCJcbiMgICAgdGhpcmRfcGFydHlfdGl0bGU6IFwiVGhpcmQgUGFydHkgU2VydmljZXNcIlxuIyAgICB0aGlyZF9wYXJ0eV9kZXNjcmlwdGlvbjogXCJDb2RlQ29tYmF0IHVzZXMgdGhlIGZvbGxvd2luZyB0aGlyZCBwYXJ0eSBzZXJ2aWNlcyAoYW1vbmcgb3RoZXJzKTpcIlxuXG4jICBsYWRkZXJfcHJpemVzOlxuIyAgICB0aXRsZTogXCJUb3VybmFtZW50IFByaXplc1wiICMgVGhpcyBzZWN0aW9uIHdhcyBmb3IgYW4gb2xkIHRvdXJuYW1lbnQgYW5kIGRvZXNuJ3QgbmVlZCBuZXcgdHJhbnNsYXRpb25zIG5vdy5cbiMgICAgYmx1cmJfMTogXCJUaGVzZSBwcml6ZXMgd2lsbCBiZSBhd2FyZGVkIGFjY29yZGluZyB0b1wiXG4jICAgIGJsdXJiXzI6IFwidGhlIHRvdXJuYW1lbnQgcnVsZXNcIlxuIyAgICBibHVyYl8zOiBcInRvIHRoZSB0b3AgaHVtYW4gYW5kIG9ncmUgcGxheWVycy5cIlxuIyAgICBibHVyYl80OiBcIlR3byB0ZWFtcyBtZWFucyBkb3VibGUgdGhlIHByaXplcyFcIlxuIyAgICBibHVyYl81OiBcIihUaGVyZSB3aWxsIGJlIHR3byBmaXJzdCBwbGFjZSB3aW5uZXJzLCB0d28gc2Vjb25kLXBsYWNlIHdpbm5lcnMsIGV0Yy4pXCJcbiMgICAgcmFuazogXCJSYW5rXCJcbiMgICAgcHJpemVzOiBcIlByaXplc1wiXG4jICAgIHRvdGFsX3ZhbHVlOiBcIlRvdGFsIFZhbHVlXCJcbiMgICAgaW5fY2FzaDogXCJpbiBjYXNoXCJcbiMgICAgY3VzdG9tX3dpemFyZDogXCJDdXN0b20gQ29kZUNvbWJhdCBXaXphcmRcIlxuIyAgICBjdXN0b21fYXZhdGFyOiBcIkN1c3RvbSBDb2RlQ29tYmF0IGF2YXRhclwiXG4jICAgIGhlYXA6IFwiZm9yIHNpeCBtb250aHMgb2YgXFxcIlN0YXJ0dXBcXFwiIGFjY2Vzc1wiXG4jICAgIGNyZWRpdHM6IFwiY3JlZGl0c1wiXG4jICAgIG9uZV9tb250aF9jb3Vwb246IFwiY291cG9uOiBjaG9vc2UgZWl0aGVyIFJhaWxzIG9yIEhUTUxcIlxuIyAgICBvbmVfbW9udGhfZGlzY291bnQ6IFwiZGlzY291bnQsIDMwJSBvZmY6IGNob29zZSBlaXRoZXIgUmFpbHMgb3IgSFRNTFwiXG4jICAgIGxpY2Vuc2U6IFwibGljZW5zZVwiXG4jICAgIG9yZWlsbHk6IFwiZWJvb2sgb2YgeW91ciBjaG9pY2VcIlxuXG4jICBjYWxlbmRhcjpcbiMgICAgeWVhcjogXCJZZWFyXCJcbiMgICAgZGF5OiBcIkRheVwiXG4jICAgIG1vbnRoOiBcIk1vbnRoXCJcbiMgICAgamFudWFyeTogXCJKYW51YXJ5XCJcbiMgICAgZmVicnVhcnk6IFwiRmVicnVhcnlcIlxuIyAgICBtYXJjaDogXCJNYXJjaFwiXG4jICAgIGFwcmlsOiBcIkFwcmlsXCJcbiMgICAgbWF5OiBcIk1heVwiXG4jICAgIGp1bmU6IFwiSnVuZVwiXG4jICAgIGp1bHk6IFwiSnVseVwiXG4jICAgIGF1Z3VzdDogXCJBdWd1c3RcIlxuIyAgICBzZXB0ZW1iZXI6IFwiU2VwdGVtYmVyXCJcbiMgICAgb2N0b2JlcjogXCJPY3RvYmVyXCJcbiMgICAgbm92ZW1iZXI6IFwiTm92ZW1iZXJcIlxuIyAgICBkZWNlbWJlcjogXCJEZWNlbWJlclwiXG5cbiMgIGNvZGVfcGxheV9jcmVhdGVfYWNjb3VudF9tb2RhbDpcbiMgICAgdGl0bGU6IFwiWW91IGRpZCBpdCFcIiAjIFRoaXMgc2VjdGlvbiBpcyBvbmx5IG5lZWRlZCBpbiBVUywgVUssIE1leGljbywgSW5kaWEsIGFuZCBHZXJtYW55XG4jICAgIGJvZHk6IFwiWW91IGFyZSBub3cgb24geW91ciB3YXkgdG8gYmVjb21pbmcgYSBtYXN0ZXIgY29kZXIuIFNpZ24gdXAgdG8gcmVjZWl2ZSBhbiBleHRyYSA8c3Ryb25nPjEwMCBHZW1zPC9zdHJvbmc+ICYgeW91IHdpbGwgYWxzbyBiZSBlbnRlcmVkIGZvciBhIGNoYW5jZSB0byA8c3Ryb25nPndpbiAkMiw1MDAgJiBvdGhlciBMZW5vdm8gUHJpemVzPC9zdHJvbmc+LlwiXG4jICAgIHNpZ25fdXA6IFwiU2lnbiB1cCAmIGtlZXAgY29kaW5nIOKWtlwiXG4jICAgIHZpY3Rvcnlfc2lnbl91cF9wb2tlOiBcIkNyZWF0ZSBhIGZyZWUgYWNjb3VudCB0byBzYXZlIHlvdXIgY29kZSAmIGJlIGVudGVyZWQgZm9yIGEgY2hhbmNlIHRvIHdpbiBwcml6ZXMhXCJcbiMgICAgdmljdG9yeV9zaWduX3VwOiBcIlNpZ24gdXAgJiBiZSBlbnRlcmVkIHRvIDxzdHJvbmc+d2luICQyLDUwMDwvc3Ryb25nPlwiXG5cbiMgIHNlcnZlcl9lcnJvcjpcbiMgICAgZW1haWxfdGFrZW46IFwiRW1haWwgYWxyZWFkeSB0YWtlblwiXG4jICAgIHVzZXJuYW1lX3Rha2VuOiBcIlVzZXJuYW1lIGFscmVhZHkgdGFrZW5cIlxuXG4jICBlc3BlcjpcbiMgICAgbGluZV9ubzogXCJMaW5lICQxOiBcIlxuIyAgICB1bmNhdWdodDogXCJVbmNhdWdodCAkMVwiICMgJDEgd2lsbCBiZSBhbiBlcnJvciB0eXBlLCBlZyBcIlVuY2F1Z2h0IFN5bnRheEVycm9yXCJcbiMgICAgcmVmZXJlbmNlX2Vycm9yOiBcIlJlZmVyZW5jZUVycm9yOiBcIlxuIyAgICBhcmd1bWVudF9lcnJvcjogXCJBcmd1bWVudEVycm9yOiBcIlxuIyAgICB0eXBlX2Vycm9yOiBcIlR5cGVFcnJvcjogXCJcbiMgICAgc3ludGF4X2Vycm9yOiBcIlN5bnRheEVycm9yOiBcIlxuIyAgICBlcnJvcjogXCJFcnJvcjogXCJcbiMgICAgeF9ub3RfYV9mdW5jdGlvbjogXCIkMSBpcyBub3QgYSBmdW5jdGlvblwiXG4jICAgIHhfbm90X2RlZmluZWQ6IFwiJDEgaXMgbm90IGRlZmluZWRcIlxuIyAgICBzcGVsbGluZ19pc3N1ZXM6IFwiTG9vayBvdXQgZm9yIHNwZWxsaW5nIGlzc3VlczogZGlkIHlvdSBtZWFuIGAkMWAgaW5zdGVhZCBvZiBgJDJgP1wiXG4jICAgIGNhcGl0YWxpemF0aW9uX2lzc3VlczogXCJMb29rIG91dCBmb3IgY2FwaXRhbGl6YXRpb246IGAkMWAgc2hvdWxkIGJlIGAkMmAuXCJcbiMgICAgcHlfZW1wdHlfYmxvY2s6IFwiRW1wdHkgJDEuIFB1dCA0IHNwYWNlcyBpbiBmcm9udCBvZiBzdGF0ZW1lbnRzIGluc2lkZSB0aGUgJDIgc3RhdGVtZW50LlwiXG4jICAgIGZ4X21pc3NpbmdfcGFyZW46IFwiSWYgeW91IHdhbnQgdG8gY2FsbCBgJDFgIGFzIGEgZnVuY3Rpb24sIHlvdSBuZWVkIGAoKWAnc1wiXG4jICAgIHVubWF0Y2hlZF90b2tlbjogXCJVbm1hdGNoZWQgYCQxYC4gIEV2ZXJ5IG9wZW5pbmcgYCQyYCBuZWVkcyBhIGNsb3NpbmcgYCQzYCB0byBtYXRjaCBpdC5cIlxuIyAgICB1bnRlcm1pbmF0ZWRfc3RyaW5nOiBcIlVudGVybWluYXRlZCBzdHJpbmcuIEFkZCBhIG1hdGNoaW5nIGBcXFwiYCBhdCB0aGUgZW5kIG9mIHlvdXIgc3RyaW5nLlwiXG4jICAgIG1pc3Npbmdfc2VtaWNvbG9uOiBcIk1pc3Npbmcgc2VtaWNvbG9uLlwiXG4jICAgIG1pc3NpbmdfcXVvdGVzOiBcIk1pc3NpbmcgcXVvdGVzLiBUcnkgYCQxYFwiXG4jICAgIGFyZ3VtZW50X3R5cGU6IFwiYCQxYCdzIGFyZ3VtZW50IGAkMmAgc2hvdWxkIGhhdmUgdHlwZSBgJDNgLCBidXQgZ290IGAkNGA6IGAkNWAuXCJcbiMgICAgYXJndW1lbnRfdHlwZTI6IFwiYCQxYCdzIGFyZ3VtZW50IGAkMmAgc2hvdWxkIGhhdmUgdHlwZSBgJDNgLCBidXQgZ290IGAkNGAuXCJcbiMgICAgdGFyZ2V0X2FfdW5pdDogXCJUYXJnZXQgYSB1bml0LlwiXG4jICAgIGF0dGFja19jYXBpdGFsaXphdGlvbjogXCJBdHRhY2sgJDEsIG5vdCAkMi4gKENhcGl0YWwgbGV0dGVycyBhcmUgaW1wb3J0YW50LilcIlxuIyAgICBlbXB0eV93aGlsZTogXCJFbXB0eSB3aGlsZSBzdGF0ZW1lbnQuIFB1dCA0IHNwYWNlcyBpbiBmcm9udCBvZiBzdGF0ZW1lbnRzIGluc2lkZSB0aGUgd2hpbGUgc3RhdGVtZW50LlwiXG4jICAgIGxpbmVfb2Zfc2l0ZTogXCJgJDFgJ3MgYXJndW1lbnQgYCQyYCBoYXMgYSBwcm9ibGVtLiBJcyB0aGVyZSBhbiBlbmVteSB3aXRoaW4geW91ciBsaW5lLW9mLXNpZ2h0IHlldD9cIlxuIyAgICBuZWVkX2FfYWZ0ZXJfd2hpbGU6IFwiTmVlZCBhIGAkMWAgYWZ0ZXIgYCQyYC5cIlxuIyAgICB0b29fbXVjaF9pbmRlbnRhdGlvbjogXCJUb28gbXVjaCBpbmRlbnRhdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgbGluZS5cIlxuIyAgICBtaXNzaW5nX2hlcm86IFwiTWlzc2luZyBgJDFgIGtleXdvcmQ7IHNob3VsZCBiZSBgJDJgLlwiXG4jICAgIHRha2VzX25vX2FyZ3VtZW50czogXCJgJDFgIHRha2VzIG5vIGFyZ3VtZW50cy5cIlxuIyAgICBub19vbmVfbmFtZWQ6IFwiVGhlcmUncyBubyBvbmUgbmFtZWQgXFxcIiQxXFxcIiB0byB0YXJnZXQuXCJcbiMgICAgc2VwYXJhdGVkX2J5X2NvbW1hOiBcIkZ1bmN0aW9uIGNhbGxzIHBhcmFtYXRlcnMgbXVzdCBiZSBzZXBlcmF0ZWQgYnkgYCxgc1wiXG4jICAgIHByb3RlY3RlZF9wcm9wZXJ0eTogXCJDYW4ndCByZWFkIHByb3RlY3RlZCBwcm9wZXJ0eTogJDFcIlxuIyAgICBuZWVkX3BhcmVuc190b19jYWxsOiBcIklmIHlvdSB3YW50IHRvIGNhbGwgYCQxYCBhcyBmdW5jdGlvbiwgeW91IG5lZWQgYCgpYCdzXCJcbiMgICAgZXhwZWN0ZWRfYW5faWRlbnRpZmllcjogXCJFeHBlY3RlZCBhbiBpZGVudGlmaWVyIGFuZCBpbnN0ZWFkIHNhdyAnJDEnLlwiXG4jICAgIHVuZXhwZWN0ZWRfaWRlbnRpZmllcjogXCJVbmV4cGVjdGVkIGlkZW50aWZpZXJcIlxuIyAgICB1bmV4cGVjdGVkX2VuZF9vZjogXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiXG4jICAgIHVubmVjZXNzYXJ5X3NlbWljb2xvbjogXCJVbm5lY2Vzc2FyeSBzZW1pY29sb24uXCJcbiMgICAgdW5leHBlY3RlZF90b2tlbl9leHBlY3RlZDogXCJVbmV4cGVjdGVkIHRva2VuOiBleHBlY3RlZCAkMSBidXQgZm91bmQgJDIgd2hpbGUgcGFyc2luZyAkM1wiXG4jICAgIHVuZXhwZWN0ZWRfdG9rZW46IFwiVW5leHBlY3RlZCB0b2tlbiAkMVwiXG4jICAgIHVuZXhwZWN0ZWRfdG9rZW4yOiBcIlVuZXhwZWN0ZWQgdG9rZW5cIlxuIyAgICB1bmV4cGVjdGVkX251bWJlcjogXCJVbmV4cGVjdGVkIG51bWJlclwiXG4jICAgIHVuZXhwZWN0ZWQ6IFwiVW5leHBlY3RlZCAnJDEnLlwiXG4jICAgIGVzY2FwZV9wcmVzc2VkX2NvZGU6IFwiRXNjYXBlIHByZXNzZWQ7IGNvZGUgYWJvcnRlZC5cIlxuIyAgICB0YXJnZXRfYW5fZW5lbXk6IFwiVGFyZ2V0IGFuIGVuZW15IGJ5IG5hbWUsIGxpa2UgYCQxYCwgbm90IHRoZSBzdHJpbmcgYCQyYC5cIlxuIyAgICB0YXJnZXRfYW5fZW5lbXlfMjogXCJUYXJnZXQgYW4gZW5lbXkgYnkgbmFtZSwgbGlrZSAkMS5cIlxuIyAgICBjYW5ub3RfcmVhZF9wcm9wZXJ0eTogXCJDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnJDEnIG9mIHVuZGVmaW5lZFwiXG4jICAgIGF0dGVtcHRlZF90b19hc3NpZ246IFwiQXR0ZW1wdGVkIHRvIGFzc2lnbiB0byByZWFkb25seSBwcm9wZXJ0eS5cIlxuIyAgICB1bmV4cGVjdGVkX2Vhcmx5X2VuZDogXCJVbmV4cGVjdGVkIGVhcmx5IGVuZCBvZiBwcm9ncmFtLlwiXG4jICAgIHlvdV9uZWVkX2Ffc3RyaW5nOiBcIllvdSBuZWVkIGEgc3RyaW5nIHRvIGJ1aWxkOyBvbmUgb2YgJDFcIlxuIyAgICB1bmFibGVfdG9fZ2V0X3Byb3BlcnR5OiBcIlVuYWJsZSB0byBnZXQgcHJvcGVydHkgJyQxJyBvZiB1bmRlZmluZWQgb3IgbnVsbCByZWZlcmVuY2VcIiAjIFRPRE86IERvIHdlIHRyYW5zbGF0ZSB1bmRlZmluZWQvbnVsbD9cbiMgICAgY29kZV9uZXZlcl9maW5pc2hlZF9pdHM6IFwiQ29kZSBuZXZlciBmaW5pc2hlZC4gSXQncyBlaXRoZXIgcmVhbGx5IHNsb3cgb3IgaGFzIGFuIGluZmluaXRlIGxvb3AuXCJcbiMgICAgdW5jbG9zZWRfc3RyaW5nOiBcIlVuY2xvc2VkIHN0cmluZy5cIlxuIyAgICB1bm1hdGNoZWQ6IFwiVW5tYXRjaGVkICckMScuXCJcbiMgICAgZXJyb3JfeW91X3NhaWRfYWNob286IFwiWW91IHNhaWQ6ICQxLCBidXQgdGhlIHBhc3N3b3JkIGlzOiAkMi4gKENhcGl0YWwgbGV0dGVycyBhcmUgaW1wb3J0YW50LilcIlxuIyAgICBpbmRlbnRhdGlvbl9lcnJvcl91bmluZGVudF9kb2VzOiBcIkluZGVudGF0aW9uIEVycm9yOiB1bmluZGVudCBkb2VzIG5vdCBtYXRjaCBhbnkgb3V0ZXIgaW5kZW50YXRpb24gbGV2ZWxcIlxuIyAgICBpbmRlbnRhdGlvbl9lcnJvcjogXCJJbmRlbnRhdGlvbiBlcnJvci5cIlxuIyAgICBuZWVkX2Ffb25fdGhlOiBcIk5lZWQgYSBgOmAgb24gdGhlIGVuZCBvZiB0aGUgbGluZSBmb2xsb3dpbmcgYCQxYC5cIlxuIyAgICBhdHRlbXB0X3RvX2NhbGxfdW5kZWZpbmVkOiBcImF0dGVtcHQgdG8gY2FsbCAnJDEnIChhIG5pbCB2YWx1ZSlcIlxuIyAgICB1bnRlcm1pbmF0ZWQ6IFwiVW50ZXJtaW5hdGVkIGAkMWBcIlxuIyAgICB0YXJnZXRfYW5fZW5lbXlfdmFyaWFibGU6IFwiVGFyZ2V0IGFuICQxIHZhcmlhYmxlLCBub3QgdGhlIHN0cmluZyAkMi4gKFRyeSB1c2luZyAkMy4pXCJcbiMgICAgZXJyb3JfdXNlX3RoZV92YXJpYWJsZTogXCJVc2UgdGhlIHZhcmlhYmxlIG5hbWUgbGlrZSBgJDFgIGluc3RlYWQgb2YgYSBzdHJpbmcgbGlrZSBgJDJgXCJcbiMgICAgaW5kZW50YXRpb25fdW5pbmRlbnRfZG9lc19ub3Q6IFwiSW5kZW50YXRpb24gdW5pbmRlbnQgZG9lcyBub3QgbWF0Y2ggYW55IG91dGVyIGluZGVudGF0aW9uIGxldmVsXCJcbiMgICAgdW5jbG9zZWRfcGFyZW5faW5fZnVuY3Rpb25fYXJndW1lbnRzOiBcIlVuY2xvc2VkICQxIGluIGZ1bmN0aW9uIGFyZ3VtZW50cy5cIlxuIyAgICB1bmV4cGVjdGVkX2VuZF9vZl9pbnB1dDogXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiXG4jICAgIHRoZXJlX2lzX25vX2VuZW15OiBcIlRoZXJlIGlzIG5vIGAkMWAuIFVzZSBgJDJgIGZpcnN0LlwiICMgSGludHMgc3RhcnQgaGVyZVxuIyAgICB0cnlfaGVyb2ZpbmRuZWFyZXN0ZW5lbXk6IFwiVHJ5IGAkMWBcIlxuIyAgICB0aGVyZV9pc19ub19mdW5jdGlvbjogXCJUaGVyZSBpcyBubyBmdW5jdGlvbiBgJDFgLCBidXQgYCQyYCBoYXMgYSBtZXRob2QgYCQzYC5cIlxuIyAgICBhdHRhY2tzX2FyZ3VtZW50X2VuZW15X2hhczogXCJgJDFgJ3MgYXJndW1lbnQgYCQyYCBoYXMgYSBwcm9ibGVtLlwiXG4jICAgIGlzX3RoZXJlX2FuX2VuZW15OiBcIklzIHRoZXJlIGFuIGVuZW15IHdpdGhpbiB5b3VyIGxpbmUtb2Ytc2lnaHQgeWV0P1wiXG4jICAgIHRhcmdldF9pc19udWxsX2lzOiBcIlRhcmdldCBpcyAkMS4gSXMgdGhlcmUgYWx3YXlzIGEgdGFyZ2V0IHRvIGF0dGFjaz8gKFVzZSAkMj8pXCJcbiMgICAgaGVyb19oYXNfbm9fbWV0aG9kOiBcImAkMWAgaGFzIG5vIG1ldGhvZCBgJDJgLlwiXG4jICAgIHRoZXJlX2lzX2FfcHJvYmxlbTogXCJUaGVyZSBpcyBhIHByb2JsZW0gd2l0aCB5b3VyIGNvZGUuXCJcbiMgICAgZGlkX3lvdV9tZWFuOiBcIkRpZCB5b3UgbWVhbiAkMT8gWW91IGRvIG5vdCBoYXZlIGFuIGl0ZW0gZXF1aXBwZWQgd2l0aCB0aGF0IHNraWxsLlwiXG4jICAgIG1pc3NpbmdfYV9xdW90YXRpb25fbWFyazogXCJNaXNzaW5nIGEgcXVvdGF0aW9uIG1hcmsuIFwiXG4jICAgIG1pc3NpbmdfdmFyX3VzZV92YXI6IFwiTWlzc2luZyBgJDFgLiBVc2UgYCQyYCB0byBtYWtlIGEgbmV3IHZhcmlhYmxlLlwiXG4jICAgIHlvdV9kb19ub3RfaGF2ZTogXCJZb3UgZG8gbm90IGhhdmUgYW4gaXRlbSBlcXVpcHBlZCB3aXRoIHRoZSAkMSBza2lsbC5cIlxuIyAgICBwdXRfZWFjaF9jb21tYW5kX29uOiBcIlB1dCBlYWNoIGNvbW1hbmQgb24gYSBzZXBhcmF0ZSBsaW5lXCJcbiMgICAgYXJlX3lvdV9taXNzaW5nX2E6IFwiQXJlIHlvdSBtaXNzaW5nIGEgJyQxJyBhZnRlciAnJDInPyBcIlxuIyAgICB5b3VyX3BhcmVudGhlc2VzX211c3RfbWF0Y2g6IFwiWW91ciBwYXJlbnRoZXNlcyBtdXN0IG1hdGNoLlwiXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvbG9jYWxlL2FyLmNvZmZlZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///213\n");

/***/ })

});